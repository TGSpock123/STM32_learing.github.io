
black_bird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007780  08007780  00008780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800792c  0800792c  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  0800792c  0800792c  0000892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007934  08007934  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007934  08007934  00008934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007938  08007938  00008938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800793c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  20000060  0800799c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  0800799c  00009c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191ec  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc2  00000000  00000000  0002227c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00025e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001088  00000000  00000000  000273a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019565  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001969b  00000000  00000000  0004198d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000990e7  00000000  00000000  0005b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f410f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d54  00000000  00000000  000f4154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f9ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007768 	.word	0x08007768

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007768 	.word	0x08007768

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of q_read_to_uart */
  q_read_to_uartHandle = osMessageQueueNew (16, sizeof(uint16_t), &q_read_to_uart_attributes);
 8000584:	4a18      	ldr	r2, [pc, #96]	@ (80005e8 <MX_FREERTOS_Init+0x68>)
 8000586:	2102      	movs	r1, #2
 8000588:	2010      	movs	r0, #16
 800058a:	f003 fe0f 	bl	80041ac <osMessageQueueNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a16      	ldr	r2, [pc, #88]	@ (80005ec <MX_FREERTOS_Init+0x6c>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of q_uart_to_operate */
  q_uart_to_operateHandle = osMessageQueueNew (16, sizeof(uint16_t), &q_uart_to_operate_attributes);
 8000594:	4a16      	ldr	r2, [pc, #88]	@ (80005f0 <MX_FREERTOS_Init+0x70>)
 8000596:	2102      	movs	r1, #2
 8000598:	2010      	movs	r0, #16
 800059a:	f003 fe07 	bl	80041ac <osMessageQueueNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a14      	ldr	r2, [pc, #80]	@ (80005f4 <MX_FREERTOS_Init+0x74>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of q_operate_to_read */
  q_operate_to_readHandle = osMessageQueueNew (16, sizeof(uint16_t), &q_operate_to_read_attributes);
 80005a4:	4a14      	ldr	r2, [pc, #80]	@ (80005f8 <MX_FREERTOS_Init+0x78>)
 80005a6:	2102      	movs	r1, #2
 80005a8:	2010      	movs	r0, #16
 80005aa:	f003 fdff 	bl	80041ac <osMessageQueueNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a12      	ldr	r2, [pc, #72]	@ (80005fc <MX_FREERTOS_Init+0x7c>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of t_read */
  t_readHandle = osThreadNew(start_t_read, NULL, &t_read_attributes);
 80005b4:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <MX_FREERTOS_Init+0x80>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4812      	ldr	r0, [pc, #72]	@ (8000604 <MX_FREERTOS_Init+0x84>)
 80005ba:	f003 fd65 	bl	8004088 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a11      	ldr	r2, [pc, #68]	@ (8000608 <MX_FREERTOS_Init+0x88>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of t_uart */
  t_uartHandle = osThreadNew(start_t_uart, NULL, &t_uart_attributes);
 80005c4:	4a11      	ldr	r2, [pc, #68]	@ (800060c <MX_FREERTOS_Init+0x8c>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4811      	ldr	r0, [pc, #68]	@ (8000610 <MX_FREERTOS_Init+0x90>)
 80005ca:	f003 fd5d 	bl	8004088 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <MX_FREERTOS_Init+0x94>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of t_operate */
  t_operateHandle = osThreadNew(start_t_operate, NULL, &t_operate_attributes);
 80005d4:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <MX_FREERTOS_Init+0x98>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4810      	ldr	r0, [pc, #64]	@ (800061c <MX_FREERTOS_Init+0x9c>)
 80005da:	f003 fd55 	bl	8004088 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000620 <MX_FREERTOS_Init+0xa0>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08007898 	.word	0x08007898
 80005ec:	20000088 	.word	0x20000088
 80005f0:	080078b0 	.word	0x080078b0
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	080078c8 	.word	0x080078c8
 80005fc:	20000090 	.word	0x20000090
 8000600:	0800782c 	.word	0x0800782c
 8000604:	08000625 	.word	0x08000625
 8000608:	2000007c 	.word	0x2000007c
 800060c:	08007850 	.word	0x08007850
 8000610:	080006e9 	.word	0x080006e9
 8000614:	20000080 	.word	0x20000080
 8000618:	08007874 	.word	0x08007874
 800061c:	0800076d 	.word	0x0800076d
 8000620:	20000084 	.word	0x20000084

08000624 <start_t_read>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_t_read */
void start_t_read(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_t_read */
  uint32_t notifi_value = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  int16_t control_value = 0, send_value = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	82fb      	strh	r3, [r7, #22]
 8000634:	2300      	movs	r3, #0
 8000636:	81fb      	strh	r3, [r7, #14]
  _Bool if_first_read = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	737b      	strb	r3, [r7, #13]
  /* Infinite loop */
  for(;;)
  {
    if (if_first_read || (xQueueReceive(q_operate_to_readHandle, &if_first_read, portMAX_DELAY) == pdTRUE))
 800063c:	7b7b      	ldrb	r3, [r7, #13]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10b      	bne.n	800065a <start_t_read+0x36>
 8000642:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <start_t_read+0xb0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f107 010d 	add.w	r1, r7, #13
 800064a:	f04f 32ff 	mov.w	r2, #4294967295
 800064e:	4618      	mov	r0, r3
 8000650:	f004 f9ee 	bl	8004a30 <xQueueReceive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b01      	cmp	r3, #1
 8000658:	d1f0      	bne.n	800063c <start_t_read+0x18>
    {
      xTaskNotifyWait(0, 0xFFFFFFFF, &notifi_value, portMAX_DELAY);
 800065a:	f107 0210 	add.w	r2, r7, #16
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	f04f 31ff 	mov.w	r1, #4294967295
 8000666:	2000      	movs	r0, #0
 8000668:	f005 fab4 	bl	8005bd4 <xTaskNotifyWait>

      if (notifi_value & encoder_a_flag)
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	2b00      	cmp	r3, #0
 8000674:	d00c      	beq.n	8000690 <start_t_read+0x6c>
      {
        if (control_value < 100)
 8000676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800067a:	2b63      	cmp	r3, #99	@ 0x63
 800067c:	dc08      	bgt.n	8000690 <start_t_read+0x6c>
        {
          HAL_UART_Transmit_IT(&huart2, (uint8_t *)"received a\r\n\0", 12);
 800067e:	220c      	movs	r2, #12
 8000680:	4915      	ldr	r1, [pc, #84]	@ (80006d8 <start_t_read+0xb4>)
 8000682:	4816      	ldr	r0, [pc, #88]	@ (80006dc <start_t_read+0xb8>)
 8000684:	f002 fd6e 	bl	8003164 <HAL_UART_Transmit_IT>
          control_value += stride;
 8000688:	8afb      	ldrh	r3, [r7, #22]
 800068a:	3319      	adds	r3, #25
 800068c:	b29b      	uxth	r3, r3
 800068e:	82fb      	strh	r3, [r7, #22]
        }
      }

      if (notifi_value & encoder_b_flag)
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00c      	beq.n	80006b4 <start_t_read+0x90>
      {
        HAL_UART_Transmit_IT(&huart2, (uint8_t *)"received b\r\n\0", 12);
 800069a:	220c      	movs	r2, #12
 800069c:	4910      	ldr	r1, [pc, #64]	@ (80006e0 <start_t_read+0xbc>)
 800069e:	480f      	ldr	r0, [pc, #60]	@ (80006dc <start_t_read+0xb8>)
 80006a0:	f002 fd60 	bl	8003164 <HAL_UART_Transmit_IT>
        if (control_value > 0)
 80006a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dd03      	ble.n	80006b4 <start_t_read+0x90>
        {
          control_value -= stride;
 80006ac:	8afb      	ldrh	r3, [r7, #22]
 80006ae:	3b19      	subs	r3, #25
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	82fb      	strh	r3, [r7, #22]
        }
      }

      send_value = (uint8_t) control_value;
 80006b4:	8afb      	ldrh	r3, [r7, #22]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	81fb      	strh	r3, [r7, #14]
      xQueueSendToBack(q_read_to_uartHandle, &send_value, pdMS_TO_TICKS(30));
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <start_t_read+0xc0>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	f107 010e 	add.w	r1, r7, #14
 80006c4:	2300      	movs	r3, #0
 80006c6:	221e      	movs	r2, #30
 80006c8:	f004 f812 	bl	80046f0 <xQueueGenericSend>
      if_first_read = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	737b      	strb	r3, [r7, #13]
    if (if_first_read || (xQueueReceive(q_operate_to_readHandle, &if_first_read, portMAX_DELAY) == pdTRUE))
 80006d0:	e7b4      	b.n	800063c <start_t_read+0x18>
 80006d2:	bf00      	nop
 80006d4:	20000090 	.word	0x20000090
 80006d8:	080077d4 	.word	0x080077d4
 80006dc:	20000170 	.word	0x20000170
 80006e0:	080077e4 	.word	0x080077e4
 80006e4:	20000088 	.word	0x20000088

080006e8 <start_t_uart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_t_uart */
void start_t_uart(void *argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b090      	sub	sp, #64	@ 0x40
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_t_uart */
  int8_t uart_buffer = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  char on_screen[50];
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)"start\r\n", 7);
 80006f6:	2207      	movs	r2, #7
 80006f8:	4917      	ldr	r1, [pc, #92]	@ (8000758 <start_t_uart+0x70>)
 80006fa:	4818      	ldr	r0, [pc, #96]	@ (800075c <start_t_uart+0x74>)
 80006fc:	f002 fd32 	bl	8003164 <HAL_UART_Transmit_IT>
  /* Infinite loop */
  for(;;)
  {
    if (xQueueReceive(q_read_to_uartHandle, &uart_buffer, portMAX_DELAY) == pdTRUE)
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <start_t_uart+0x78>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	4618      	mov	r0, r3
 800070e:	f004 f98f 	bl	8004a30 <xQueueReceive>
 8000712:	4603      	mov	r3, r0
 8000714:	2b01      	cmp	r3, #1
 8000716:	d1f3      	bne.n	8000700 <start_t_uart+0x18>
    {
      sprintf(on_screen, "send to operate: %d\r\n", uart_buffer);
 8000718:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800071c:	461a      	mov	r2, r3
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4910      	ldr	r1, [pc, #64]	@ (8000764 <start_t_uart+0x7c>)
 8000724:	4618      	mov	r0, r3
 8000726:	f006 fb7f 	bl	8006e28 <siprintf>
      HAL_UART_Transmit_IT(&huart2, (uint8_t *)on_screen, strlen(on_screen));
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fd56 	bl	80001e0 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	4807      	ldr	r0, [pc, #28]	@ (800075c <start_t_uart+0x74>)
 8000740:	f002 fd10 	bl	8003164 <HAL_UART_Transmit_IT>
      xQueueSendToBack(q_uart_to_operateHandle, &uart_buffer, pdMS_TO_TICKS(30));
 8000744:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <start_t_uart+0x80>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 800074c:	2300      	movs	r3, #0
 800074e:	221e      	movs	r2, #30
 8000750:	f003 ffce 	bl	80046f0 <xQueueGenericSend>
    if (xQueueReceive(q_read_to_uartHandle, &uart_buffer, portMAX_DELAY) == pdTRUE)
 8000754:	e7d4      	b.n	8000700 <start_t_uart+0x18>
 8000756:	bf00      	nop
 8000758:	080077f4 	.word	0x080077f4
 800075c:	20000170 	.word	0x20000170
 8000760:	20000088 	.word	0x20000088
 8000764:	080077fc 	.word	0x080077fc
 8000768:	2000008c 	.word	0x2000008c

0800076c <start_t_operate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_t_operate */
void start_t_operate(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_t_operate */
  int8_t operate_buffer = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]
  _Bool if_not_first_read = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	73bb      	strb	r3, [r7, #14]

  HAL_TIM_Base_Start_IT(&htim1);
 800077c:	4828      	ldr	r0, [pc, #160]	@ (8000820 <start_t_operate+0xb4>)
 800077e:	f001 fe05 	bl	800238c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4826      	ldr	r0, [pc, #152]	@ (8000820 <start_t_operate+0xb4>)
 8000786:	f001 feb3 	bl	80024f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800078a:	4825      	ldr	r0, [pc, #148]	@ (8000820 <start_t_operate+0xb4>)
 800078c:	f001 fdfe 	bl	800238c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000790:	2104      	movs	r1, #4
 8000792:	4823      	ldr	r0, [pc, #140]	@ (8000820 <start_t_operate+0xb4>)
 8000794:	f001 feac 	bl	80024f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000798:	4821      	ldr	r0, [pc, #132]	@ (8000820 <start_t_operate+0xb4>)
 800079a:	f001 fdf7 	bl	800238c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 800079e:	2108      	movs	r1, #8
 80007a0:	481f      	ldr	r0, [pc, #124]	@ (8000820 <start_t_operate+0xb4>)
 80007a2:	f001 fea5 	bl	80024f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80007a6:	481e      	ldr	r0, [pc, #120]	@ (8000820 <start_t_operate+0xb4>)
 80007a8:	f001 fdf0 	bl	800238c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 80007ac:	210c      	movs	r1, #12
 80007ae:	481c      	ldr	r0, [pc, #112]	@ (8000820 <start_t_operate+0xb4>)
 80007b0:	f001 fe9e 	bl	80024f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80007b4:	481b      	ldr	r0, [pc, #108]	@ (8000824 <start_t_operate+0xb8>)
 80007b6:	f001 fde9 	bl	800238c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_2);
 80007ba:	2104      	movs	r1, #4
 80007bc:	4819      	ldr	r0, [pc, #100]	@ (8000824 <start_t_operate+0xb8>)
 80007be:	f001 fe97 	bl	80024f0 <HAL_TIM_PWM_Start_IT>
  /* Infinite loop */
  for(;;)
  {
    if (xQueueReceive(q_uart_to_operateHandle, &operate_buffer, portMAX_DELAY) == pdTRUE)
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <start_t_operate+0xbc>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f107 010f 	add.w	r1, r7, #15
 80007ca:	f04f 32ff 	mov.w	r2, #4294967295
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 f92e 	bl	8004a30 <xQueueReceive>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d1f3      	bne.n	80007c2 <start_t_operate+0x56>
    {
      __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, operate_buffer);
 80007da:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <start_t_operate+0xb8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, operate_buffer);
 80007e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <start_t_operate+0xb4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, operate_buffer);
 80007ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <start_t_operate+0xb4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, operate_buffer);
 80007f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <start_t_operate+0xb4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, operate_buffer);
 8000802:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <start_t_operate+0xb4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	641a      	str	r2, [r3, #64]	@ 0x40
      xQueueSendToBack(q_operate_to_readHandle, &if_not_first_read, pdMS_TO_TICKS(30));
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <start_t_operate+0xc0>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	f107 010e 	add.w	r1, r7, #14
 8000814:	2300      	movs	r3, #0
 8000816:	221e      	movs	r2, #30
 8000818:	f003 ff6a 	bl	80046f0 <xQueueGenericSend>
    if (xQueueReceive(q_uart_to_operateHandle, &operate_buffer, portMAX_DELAY) == pdTRUE)
 800081c:	e7d1      	b.n	80007c2 <start_t_operate+0x56>
 800081e:	bf00      	nop
 8000820:	200000e0 	.word	0x200000e0
 8000824:	20000128 	.word	0x20000128
 8000828:	2000008c 	.word	0x2000008c
 800082c:	20000090 	.word	0x20000090

08000830 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b3f      	ldr	r3, [pc, #252]	@ (8000948 <MX_GPIO_Init+0x118>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a3e      	ldr	r2, [pc, #248]	@ (8000948 <MX_GPIO_Init+0x118>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b3c      	ldr	r3, [pc, #240]	@ (8000948 <MX_GPIO_Init+0x118>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b38      	ldr	r3, [pc, #224]	@ (8000948 <MX_GPIO_Init+0x118>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a37      	ldr	r2, [pc, #220]	@ (8000948 <MX_GPIO_Init+0x118>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b35      	ldr	r3, [pc, #212]	@ (8000948 <MX_GPIO_Init+0x118>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <MX_GPIO_Init+0x118>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a30      	ldr	r2, [pc, #192]	@ (8000948 <MX_GPIO_Init+0x118>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <MX_GPIO_Init+0x118>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, moter_3_in_1_Pin|moter_4_in_1_Pin|moter_2_in_1_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f245 0108 	movw	r1, #20488	@ 0x5008
 80008a0:	482a      	ldr	r0, [pc, #168]	@ (800094c <MX_GPIO_Init+0x11c>)
 80008a2:	f001 f85d 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, moter_3_in_2_Pin|moter_4_in_2_Pin|moter_2_in_2_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f24a 0110 	movw	r1, #40976	@ 0xa010
 80008ac:	4827      	ldr	r0, [pc, #156]	@ (800094c <MX_GPIO_Init+0x11c>)
 80008ae:	f001 f857 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_1_in_1_GPIO_Port, motor_1_in_1_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b8:	4825      	ldr	r0, [pc, #148]	@ (8000950 <MX_GPIO_Init+0x120>)
 80008ba:	f001 f851 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(moter_1_in_2_GPIO_Port, moter_1_in_2_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c4:	4822      	ldr	r0, [pc, #136]	@ (8000950 <MX_GPIO_Init+0x120>)
 80008c6:	f001 f84b 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = encoder_1_a_Pin|encoder_1_b_Pin;
 80008ca:	2306      	movs	r3, #6
 80008cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	481b      	ldr	r0, [pc, #108]	@ (800094c <MX_GPIO_Init+0x11c>)
 80008e0:	f000 fea2 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = moter_3_in_1_Pin|moter_3_in_2_Pin|moter_4_in_1_Pin|moter_4_in_2_Pin
 80008e4:	f24f 0318 	movw	r3, #61464	@ 0xf018
 80008e8:	60fb      	str	r3, [r7, #12]
                          |moter_2_in_1_Pin|moter_2_in_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4813      	ldr	r0, [pc, #76]	@ (800094c <MX_GPIO_Init+0x11c>)
 80008fe:	f000 fe93 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = motor_1_in_1_Pin|moter_1_in_2_Pin;
 8000902:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_GPIO_Init+0x120>)
 800091c:	f000 fe84 	bl	8001628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 6, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2106      	movs	r1, #6
 8000924:	2007      	movs	r0, #7
 8000926:	f000 fdc3 	bl	80014b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800092a:	2007      	movs	r0, #7
 800092c:	f000 fddc 	bl	80014e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2106      	movs	r1, #6
 8000934:	2008      	movs	r0, #8
 8000936:	f000 fdbb 	bl	80014b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800093a:	2008      	movs	r0, #8
 800093c:	f000 fdd4 	bl	80014e8 <HAL_NVIC_EnableIRQ>

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020400 	.word	0x40020400
 8000950:	40020000 	.word	0x40020000

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fcb0 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f810 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f7ff ff66 	bl	8000830 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000964:	f000 fa4a 	bl	8000dfc <MX_TIM1_Init>
  MX_TIM5_Init();
 8000968:	f000 faee 	bl	8000f48 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 800096c:	f000 fc02 	bl	8001174 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000970:	f003 fb40 	bl	8003ff4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000974:	f7ff fe04 	bl	8000580 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000978:	f003 fb60 	bl	800403c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <main+0x28>

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	@ 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	2230      	movs	r2, #48	@ 0x30
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f006 fa6a 	bl	8006e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <SystemClock_Config+0xc8>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	4a26      	ldr	r2, [pc, #152]	@ (8000a48 <SystemClock_Config+0xc8>)
 80009ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b4:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <SystemClock_Config+0xc8>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <SystemClock_Config+0xcc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a20      	ldr	r2, [pc, #128]	@ (8000a4c <SystemClock_Config+0xcc>)
 80009ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <SystemClock_Config+0xcc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009f0:	230c      	movs	r3, #12
 80009f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009f4:	2360      	movs	r3, #96	@ 0x60
 80009f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 ffdd 	bl	80019c4 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a10:	f000 f830 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2103      	movs	r1, #3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fa3f 	bl	8001eb4 <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a3c:	f000 f81a 	bl	8000a74 <Error_Handler>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3750      	adds	r7, #80	@ 0x50
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000

08000a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a62:	f000 fc4d 	bl	8001300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40000800 	.word	0x40000800

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_GPIO_EXTI_Callback>:
#include "self.h"
extern osThreadId_t t_readHandle;
int8_t encoder_count = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]

  if (GPIO_Pin == encoder_1_a_Pin)
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d11b      	bne.n	8000acc <HAL_GPIO_EXTI_Callback+0x4c>
  {
    if (HAL_GPIO_ReadPin(encoder_1_b_GPIO_Port, encoder_1_b_Pin) == GPIO_PIN_RESET)
 8000a94:	2104      	movs	r1, #4
 8000a96:	481f      	ldr	r0, [pc, #124]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a98:	f000 ff4a 	bl	8001930 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d114      	bne.n	8000acc <HAL_GPIO_EXTI_Callback+0x4c>
    {
      xTaskNotifyFromISR(t_readHandle, encoder_a_flag, eSetBits, &xHigherPriorityTaskWoken);
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x98>)
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2300      	movs	r3, #0
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	f005 f8e9 	bl	8005c88 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d007      	beq.n	8000acc <HAL_GPIO_EXTI_Callback+0x4c>
 8000abc:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	f3bf 8f4f 	dsb	sy
 8000ac8:	f3bf 8f6f 	isb	sy
    }
  }

  if (GPIO_Pin == encoder_1_b_Pin)
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d11b      	bne.n	8000b0a <HAL_GPIO_EXTI_Callback+0x8a>
  {
    if (HAL_GPIO_ReadPin(encoder_1_a_GPIO_Port, encoder_1_a_Pin) == GPIO_PIN_RESET)
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	480f      	ldr	r0, [pc, #60]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x94>)
 8000ad6:	f000 ff2b 	bl	8001930 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d114      	bne.n	8000b0a <HAL_GPIO_EXTI_Callback+0x8a>
    {
      xTaskNotifyFromISR(t_readHandle, encoder_b_flag, eSetBits, &xHigherPriorityTaskWoken);
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x98>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	2201      	movs	r2, #1
 8000aee:	2108      	movs	r1, #8
 8000af0:	f005 f8ca 	bl	8005c88 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d007      	beq.n	8000b0a <HAL_GPIO_EXTI_Callback+0x8a>
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	f3bf 8f4f 	dsb	sy
 8000b06:	f3bf 8f6f 	isb	sy
    }
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40020400 	.word	0x40020400
 8000b18:	2000007c 	.word	0x2000007c
 8000b1c:	e000ed04 	.word	0xe000ed04

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <HAL_MspInit+0x64>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	4a15      	ldr	r2, [pc, #84]	@ (8000b84 <HAL_MspInit+0x64>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <HAL_MspInit+0x64>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_MspInit+0x64>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <HAL_MspInit+0x64>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <HAL_MspInit+0x64>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	f06f 0001 	mvn.w	r0, #1
 8000b66:	f000 fca3 	bl	80014b0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	2005      	movs	r0, #5
 8000b70:	f000 fc9e 	bl	80014b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b74:	2005      	movs	r0, #5
 8000b76:	f000 fcb7 	bl	80014e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	@ 0x38
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b33      	ldr	r3, [pc, #204]	@ (8000c6c <HAL_InitTick+0xe4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	4a32      	ldr	r2, [pc, #200]	@ (8000c6c <HAL_InitTick+0xe4>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba8:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <HAL_InitTick+0xe4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb4:	f107 0210 	add.w	r2, r7, #16
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fb58 	bl	8002274 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bce:	f001 fb29 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8000bd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bd4:	e004      	b.n	8000be0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bd6:	f001 fb25 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000be2:	4a23      	ldr	r2, [pc, #140]	@ (8000c70 <HAL_InitTick+0xe8>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	0c9b      	lsrs	r3, r3, #18
 8000bea:	3b01      	subs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <HAL_InitTick+0xec>)
 8000bf0:	4a21      	ldr	r2, [pc, #132]	@ (8000c78 <HAL_InitTick+0xf0>)
 8000bf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <HAL_InitTick+0xec>)
 8000bf6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bfa:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c74 <HAL_InitTick+0xec>)
 8000bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c00:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <HAL_InitTick+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <HAL_InitTick+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <HAL_InitTick+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000c14:	4817      	ldr	r0, [pc, #92]	@ (8000c74 <HAL_InitTick+0xec>)
 8000c16:	f001 fb5f 	bl	80022d8 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d11b      	bne.n	8000c60 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000c28:	4812      	ldr	r0, [pc, #72]	@ (8000c74 <HAL_InitTick+0xec>)
 8000c2a:	f001 fbaf 	bl	800238c <HAL_TIM_Base_Start_IT>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d111      	bne.n	8000c60 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c3c:	201e      	movs	r0, #30
 8000c3e:	f000 fc53 	bl	80014e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d808      	bhi.n	8000c5a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	201e      	movs	r0, #30
 8000c4e:	f000 fc2f 	bl	80014b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_InitTick+0xf4>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e002      	b.n	8000c60 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3738      	adds	r7, #56	@ 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	20000094 	.word	0x20000094
 8000c78:	40000800 	.word	0x40000800
 8000c7c:	20000004 	.word	0x20000004

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder_1_a_Pin);
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f000 fe63 	bl	8001994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder_1_b_Pin);
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f000 fe5c 	bl	8001994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000ce6:	f001 fd01 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000e0 	.word	0x200000e0

08000cf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cfa:	f001 fcf7 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000e0 	.word	0x200000e0

08000d08 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000d0e:	f001 fced 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000e0 	.word	0x200000e0

08000d1c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <TIM1_CC_IRQHandler+0x10>)
 8000d22:	f001 fce3 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200000e0 	.word	0x200000e0

08000d30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <TIM4_IRQHandler+0x10>)
 8000d36:	f001 fcd9 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000094 	.word	0x20000094

08000d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <USART2_IRQHandler+0x10>)
 8000d4a:	f002 fa41 	bl	80031d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000170 	.word	0x20000170

08000d58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <TIM5_IRQHandler+0x10>)
 8000d5e:	f001 fcc5 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000128 	.word	0x20000128

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f006 f86c 	bl	8006e78 <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20020000 	.word	0x20020000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	200000dc 	.word	0x200000dc
 8000dd4:	20004c58 	.word	0x20004c58

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b092      	sub	sp, #72	@ 0x48
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e02:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2220      	movs	r2, #32
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f006 f81e 	bl	8006e68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e2c:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e2e:	4a45      	ldr	r2, [pc, #276]	@ (8000f44 <MX_TIM1_Init+0x148>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8000e32:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e34:	2231      	movs	r2, #49	@ 0x31
 8000e36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b41      	ldr	r3, [pc, #260]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000e3e:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e40:	2263      	movs	r2, #99	@ 0x63
 8000e42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b3e      	ldr	r3, [pc, #248]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b3b      	ldr	r3, [pc, #236]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e56:	483a      	ldr	r0, [pc, #232]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e58:	f001 fafa 	bl	8002450 <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000e62:	f7ff fe07 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e72:	4619      	mov	r1, r3
 8000e74:	4832      	ldr	r0, [pc, #200]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000e76:	f002 f851 	bl	8002f1c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000e80:	f7ff fdf8 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e84:	2360      	movs	r3, #96	@ 0x60
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4825      	ldr	r0, [pc, #148]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000eaa:	f001 fd0f 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000eb4:	f7ff fdde 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481f      	ldr	r0, [pc, #124]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000ec2:	f001 fd03 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ecc:	f7ff fdd2 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4819      	ldr	r0, [pc, #100]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000eda:	f001 fcf7 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000ee4:	f7ff fdc6 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eec:	220c      	movs	r2, #12
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4813      	ldr	r0, [pc, #76]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000ef2:	f001 fceb 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000efc:	f7ff fdba 	bl	8000a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000f24:	f002 f868 	bl	8002ff8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000f2e:	f7ff fda1 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f32:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <MX_TIM1_Init+0x144>)
 8000f34:	f000 f8be 	bl	80010b4 <HAL_TIM_MspPostInit>

}
 8000f38:	bf00      	nop
 8000f3a:	3748      	adds	r7, #72	@ 0x48
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200000e0 	.word	0x200000e0
 8000f44:	40010000 	.word	0x40010000

08000f48 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000f6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <MX_TIM5_Init+0xac>)
 8000f6e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 49;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000f72:	2231      	movs	r2, #49	@ 0x31
 8000f74:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000f7e:	2263      	movs	r2, #99	@ 0x63
 8000f80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000f90:	f001 fa5e 	bl	8002450 <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000f9a:	f7ff fd6b 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	4619      	mov	r1, r3
 8000fac:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000fae:	f001 ffb5 	bl	8002f1c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000fb8:	f7ff fd5c 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000fbc:	2370      	movs	r3, #112	@ 0x70
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000fd4:	f001 fc7a 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000fde:	f7ff fd49 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <MX_TIM5_Init+0xa8>)
 8000fe4:	f000 f866 	bl	80010b4 <HAL_TIM_MspPostInit>

}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	@ 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000128 	.word	0x20000128
 8000ff4:	40000c00 	.word	0x40000c00

08000ff8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <HAL_TIM_PWM_MspInit+0xb0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12e      	bne.n	8001068 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <HAL_TIM_PWM_MspInit+0xb4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a26      	ldr	r2, [pc, #152]	@ (80010ac <HAL_TIM_PWM_MspInit+0xb4>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <HAL_TIM_PWM_MspInit+0xb4>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2107      	movs	r1, #7
 800102a:	2018      	movs	r0, #24
 800102c:	f000 fa40 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001030:	2018      	movs	r0, #24
 8001032:	f000 fa59 	bl	80014e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2107      	movs	r1, #7
 800103a:	2019      	movs	r0, #25
 800103c:	f000 fa38 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001040:	2019      	movs	r0, #25
 8001042:	f000 fa51 	bl	80014e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 7, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2107      	movs	r1, #7
 800104a:	201a      	movs	r0, #26
 800104c:	f000 fa30 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001050:	201a      	movs	r0, #26
 8001052:	f000 fa49 	bl	80014e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 7, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2107      	movs	r1, #7
 800105a:	201b      	movs	r0, #27
 800105c:	f000 fa28 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001060:	201b      	movs	r0, #27
 8001062:	f000 fa41 	bl	80014e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001066:	e01a      	b.n	800109e <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM5)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a10      	ldr	r2, [pc, #64]	@ (80010b0 <HAL_TIM_PWM_MspInit+0xb8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d115      	bne.n	800109e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <HAL_TIM_PWM_MspInit+0xb4>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <HAL_TIM_PWM_MspInit+0xb4>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6413      	str	r3, [r2, #64]	@ 0x40
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_TIM_PWM_MspInit+0xb4>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 7, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2107      	movs	r1, #7
 8001092:	2032      	movs	r0, #50	@ 0x32
 8001094:	f000 fa0c 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001098:	2032      	movs	r0, #50	@ 0x32
 800109a:	f000 fa25 	bl	80014e8 <HAL_NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40000c00 	.word	0x40000c00

080010b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a24      	ldr	r2, [pc, #144]	@ (8001164 <HAL_TIM_MspPostInit+0xb0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11f      	bne.n	8001116 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <HAL_TIM_MspPostInit+0xb4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a22      	ldr	r2, [pc, #136]	@ (8001168 <HAL_TIM_MspPostInit+0xb4>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <HAL_TIM_MspPostInit+0xb4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80010f2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001104:	2301      	movs	r3, #1
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4817      	ldr	r0, [pc, #92]	@ (800116c <HAL_TIM_MspPostInit+0xb8>)
 8001110:	f000 fa8a 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001114:	e022      	b.n	800115c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a15      	ldr	r2, [pc, #84]	@ (8001170 <HAL_TIM_MspPostInit+0xbc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d11d      	bne.n	800115c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_TIM_MspPostInit+0xb4>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <HAL_TIM_MspPostInit+0xb4>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001130:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <HAL_TIM_MspPostInit+0xb4>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800114c:	2302      	movs	r3, #2
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <HAL_TIM_MspPostInit+0xb8>)
 8001158:	f000 fa66 	bl	8001628 <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010000 	.word	0x40010000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40000c00 	.word	0x40000c00

08001174 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <MX_USART2_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011ac:	f001 ff8a 	bl	80030c4 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b6:	f7ff fc5d 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000170 	.word	0x20000170
 80011c4:	40004400 	.word	0x40004400

080011c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1d      	ldr	r2, [pc, #116]	@ (800125c <HAL_UART_MspInit+0x94>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d133      	bne.n	8001252 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <HAL_UART_MspInit+0x98>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001260 <HAL_UART_MspInit+0x98>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_UART_MspInit+0x98>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_UART_MspInit+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <HAL_UART_MspInit+0x98>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_UART_MspInit+0x98>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001222:	230c      	movs	r3, #12
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001232:	2307      	movs	r3, #7
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4809      	ldr	r0, [pc, #36]	@ (8001264 <HAL_UART_MspInit+0x9c>)
 800123e:	f000 f9f3 	bl	8001628 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2106      	movs	r1, #6
 8001246:	2026      	movs	r0, #38	@ 0x26
 8001248:	f000 f932 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800124c:	2026      	movs	r0, #38	@ 0x26
 800124e:	f000 f94b 	bl	80014e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004400 	.word	0x40004400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126c:	f7ff fdb4 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	@ (80012a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	@ (80012b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001296:	f005 fdf5 	bl	8006e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fb5b 	bl	8000954 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012ac:	0800793c 	.word	0x0800793c
  ldr r2, =_sbss
 80012b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012b4:	20004c54 	.word	0x20004c54

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <HAL_Init+0x40>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <HAL_Init+0x40>)
 80012d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_Init+0x40>)
 80012de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f8d8 	bl	800149a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f7ff fc4c 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fc16 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023c00 	.word	0x40023c00

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	200001b8 	.word	0x200001b8

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200001b8 	.word	0x200001b8

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	@ (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	@ (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	@ (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff4c 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c2:	f7ff ff61 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	6978      	ldr	r0, [r7, #20]
 80014ce:	f7ff ffb1 	bl	8001434 <NVIC_EncodePriority>
 80014d2:	4602      	mov	r2, r0
 80014d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff80 	bl	80013e0 <__NVIC_SetPriority>
}
 80014e0:	bf00      	nop
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff54 	bl	80013a4 <__NVIC_EnableIRQ>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001512:	f7ff ff09 	bl	8001328 <HAL_GetTick>
 8001516:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d008      	beq.n	8001536 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e052      	b.n	80015dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0216 	bic.w	r2, r2, #22
 8001544:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001554:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	d103      	bne.n	8001566 <HAL_DMA_Abort+0x62>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0208 	bic.w	r2, r2, #8
 8001574:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001586:	e013      	b.n	80015b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001588:	f7ff fece 	bl	8001328 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b05      	cmp	r3, #5
 8001594:	d90c      	bls.n	80015b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2203      	movs	r2, #3
 80015a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e015      	b.n	80015dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1e4      	bne.n	8001588 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c2:	223f      	movs	r2, #63	@ 0x3f
 80015c4:	409a      	lsls	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d004      	beq.n	8001602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00c      	b.n	800161c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2205      	movs	r2, #5
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e159      	b.n	80018f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8148 	bne.w	80018f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d005      	beq.n	800167a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	2b02      	cmp	r3, #2
 8001678:	d130      	bne.n	80016dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 0201 	and.w	r2, r3, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d017      	beq.n	8001718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80a2 	beq.w	80018f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b57      	ldr	r3, [pc, #348]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a56      	ldr	r2, [pc, #344]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b54      	ldr	r3, [pc, #336]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ca:	4a52      	ldr	r2, [pc, #328]	@ (8001914 <HAL_GPIO_Init+0x2ec>)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a49      	ldr	r2, [pc, #292]	@ (8001918 <HAL_GPIO_Init+0x2f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x202>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a48      	ldr	r2, [pc, #288]	@ (800191c <HAL_GPIO_Init+0x2f4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x1fe>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a47      	ldr	r2, [pc, #284]	@ (8001920 <HAL_GPIO_Init+0x2f8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x1fa>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a46      	ldr	r2, [pc, #280]	@ (8001924 <HAL_GPIO_Init+0x2fc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x1f6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a45      	ldr	r2, [pc, #276]	@ (8001928 <HAL_GPIO_Init+0x300>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x1f2>
 8001816:	2304      	movs	r3, #4
 8001818:	e008      	b.n	800182c <HAL_GPIO_Init+0x204>
 800181a:	2307      	movs	r3, #7
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x204>
 800181e:	2303      	movs	r3, #3
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x204>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x204>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x204>
 800182a:	2300      	movs	r3, #0
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4093      	lsls	r3, r2
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183c:	4935      	ldr	r1, [pc, #212]	@ (8001914 <HAL_GPIO_Init+0x2ec>)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <HAL_GPIO_Init+0x304>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186e:	4a2f      	ldr	r2, [pc, #188]	@ (800192c <HAL_GPIO_Init+0x304>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001874:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <HAL_GPIO_Init+0x304>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001898:	4a24      	ldr	r2, [pc, #144]	@ (800192c <HAL_GPIO_Init+0x304>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c2:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ec:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	f67f aea2 	bls.w	8001644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3724      	adds	r7, #36	@ 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40013800 	.word	0x40013800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40020800 	.word	0x40020800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40021000 	.word	0x40021000
 800192c:	40013c00 	.word	0x40013c00

08001930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	041a      	lsls	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f864 	bl	8000a80 <HAL_GPIO_EXTI_Callback>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e267      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d075      	beq.n	8001ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019e2:	4b88      	ldr	r3, [pc, #544]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d00c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ee:	4b85      	ldr	r3, [pc, #532]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d112      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fa:	4b82      	ldr	r3, [pc, #520]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a06:	d10b      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	4b7e      	ldr	r3, [pc, #504]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05b      	beq.n	8001acc <HAL_RCC_OscConfig+0x108>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d157      	bne.n	8001acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e242      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a28:	d106      	bne.n	8001a38 <HAL_RCC_OscConfig+0x74>
 8001a2a:	4b76      	ldr	r3, [pc, #472]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xb0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x98>
 8001a42:	4b70      	ldr	r3, [pc, #448]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6f      	ldr	r2, [pc, #444]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6c      	ldr	r2, [pc, #432]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xb0>
 8001a5c:	4b69      	ldr	r3, [pc, #420]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a68      	ldr	r2, [pc, #416]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b66      	ldr	r3, [pc, #408]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a65      	ldr	r2, [pc, #404]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fc54 	bl	8001328 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff fc50 	bl	8001328 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	@ 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e207      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b5b      	ldr	r3, [pc, #364]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xc0>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fc40 	bl	8001328 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fc3c 	bl	8001328 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	@ 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1f3      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b51      	ldr	r3, [pc, #324]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0xe8>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ada:	4b4a      	ldr	r3, [pc, #296]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af2:	4b44      	ldr	r3, [pc, #272]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x152>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1c7      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4937      	ldr	r1, [pc, #220]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_RCC_OscConfig+0x244>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fbf5 	bl	8001328 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fbf1 	bl	8001328 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1a8      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4925      	ldr	r1, [pc, #148]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_OscConfig+0x244>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fbd4 	bl	8001328 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff fbd0 	bl	8001328 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e187      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d036      	beq.n	8001c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d016      	beq.n	8001be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_RCC_OscConfig+0x248>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fbb4 	bl	8001328 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fbb0 	bl	8001328 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e167      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x200>
 8001be2:	e01b      	b.n	8001c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_OscConfig+0x248>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fb9d 	bl	8001328 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	e00e      	b.n	8001c10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff fb99 	bl	8001328 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d907      	bls.n	8001c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e150      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	42470000 	.word	0x42470000
 8001c0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4b88      	ldr	r3, [pc, #544]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ea      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8097 	beq.w	8001d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b81      	ldr	r3, [pc, #516]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a7c      	ldr	r2, [pc, #496]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b77      	ldr	r3, [pc, #476]	@ (8001e38 <HAL_RCC_OscConfig+0x474>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b74      	ldr	r3, [pc, #464]	@ (8001e38 <HAL_RCC_OscConfig+0x474>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a73      	ldr	r2, [pc, #460]	@ (8001e38 <HAL_RCC_OscConfig+0x474>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb59 	bl	8001328 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff fb55 	bl	8001328 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e10c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e38 <HAL_RCC_OscConfig+0x474>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x2ea>
 8001ca0:	4b64      	ldr	r3, [pc, #400]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	4a63      	ldr	r2, [pc, #396]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x324>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x30c>
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cba:	4a5e      	ldr	r2, [pc, #376]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x324>
 8001cd0:	4b58      	ldr	r3, [pc, #352]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd4:	4a57      	ldr	r2, [pc, #348]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cdc:	4b55      	ldr	r3, [pc, #340]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce0:	4a54      	ldr	r2, [pc, #336]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	f023 0304 	bic.w	r3, r3, #4
 8001ce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d015      	beq.n	8001d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fb1a 	bl	8001328 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fb16 	bl	8001328 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0cb      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	4b49      	ldr	r3, [pc, #292]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ee      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x334>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fb04 	bl	8001328 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff fb00 	bl	8001328 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0b5      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ee      	bne.n	8001d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4c:	4b39      	ldr	r3, [pc, #228]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	4a38      	ldr	r2, [pc, #224]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80a1 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d62:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d05c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d141      	bne.n	8001dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <HAL_RCC_OscConfig+0x478>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fad4 	bl	8001328 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff fad0 	bl	8001328 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e087      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	491b      	ldr	r1, [pc, #108]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x478>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff faa9 	bl	8001328 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff faa5 	bl	8001328 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e05c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x416>
 8001df8:	e054      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_RCC_OscConfig+0x478>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fa92 	bl	8001328 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff fa8e 	bl	8001328 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e045      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x444>
 8001e26:	e03d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e038      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ec>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d028      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d121      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d11a      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d111      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0cc      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b68      	ldr	r3, [pc, #416]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d90c      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b65      	ldr	r3, [pc, #404]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a52      	ldr	r2, [pc, #328]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d044      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d119      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f72:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e067      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f92:	4b37      	ldr	r3, [pc, #220]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4934      	ldr	r1, [pc, #208]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff f9c0 	bl	8001328 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7ff f9bc 	bl	8001328 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e04f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 020c 	and.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1eb      	bne.n	8001fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d20c      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002026:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	@ (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fd94 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00
 8002070:	40023800 	.word	0x40023800
 8002074:	080078e0 	.word	0x080078e0
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002084:	b090      	sub	sp, #64	@ 0x40
 8002086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002098:	4b59      	ldr	r3, [pc, #356]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d00d      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	f200 80a1 	bhi.w	80021ec <HAL_RCC_GetSysClockFreq+0x16c>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x3a>
 80020b2:	e09b      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x184>)
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020b8:	e09b      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ba:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x188>)
 80020bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020be:	e098      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d028      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	2200      	movs	r2, #0
 80020de:	623b      	str	r3, [r7, #32]
 80020e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020e8:	2100      	movs	r1, #0
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x188>)
 80020ec:	fb03 f201 	mul.w	r2, r3, r1
 80020f0:	2300      	movs	r3, #0
 80020f2:	fb00 f303 	mul.w	r3, r0, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	4a43      	ldr	r2, [pc, #268]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x188>)
 80020fa:	fba0 1202 	umull	r1, r2, r0, r2
 80020fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002100:	460a      	mov	r2, r1
 8002102:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002106:	4413      	add	r3, r2
 8002108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800210a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800210c:	2200      	movs	r2, #0
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	61fa      	str	r2, [r7, #28]
 8002112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002116:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800211a:	f7fe f8b9 	bl	8000290 <__aeabi_uldivmod>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4613      	mov	r3, r2
 8002124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002126:	e053      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002128:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	2200      	movs	r2, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	617a      	str	r2, [r7, #20]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800213a:	f04f 0b00 	mov.w	fp, #0
 800213e:	4652      	mov	r2, sl
 8002140:	465b      	mov	r3, fp
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	0159      	lsls	r1, r3, #5
 800214c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002150:	0150      	lsls	r0, r2, #5
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	ebb2 080a 	subs.w	r8, r2, sl
 800215a:	eb63 090b 	sbc.w	r9, r3, fp
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800216a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800216e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002172:	ebb2 0408 	subs.w	r4, r2, r8
 8002176:	eb63 0509 	sbc.w	r5, r3, r9
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	00eb      	lsls	r3, r5, #3
 8002184:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002188:	00e2      	lsls	r2, r4, #3
 800218a:	4614      	mov	r4, r2
 800218c:	461d      	mov	r5, r3
 800218e:	eb14 030a 	adds.w	r3, r4, sl
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	eb45 030b 	adc.w	r3, r5, fp
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021a6:	4629      	mov	r1, r5
 80021a8:	028b      	lsls	r3, r1, #10
 80021aa:	4621      	mov	r1, r4
 80021ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b0:	4621      	mov	r1, r4
 80021b2:	028a      	lsls	r2, r1, #10
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ba:	2200      	movs	r2, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c4:	f7fe f864 	bl	8000290 <__aeabi_uldivmod>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4613      	mov	r3, r2
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80021e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021ea:	e002      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3740      	adds	r7, #64	@ 0x40
 80021f8:	46bd      	mov	sp, r7
 80021fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	00f42400 	.word	0x00f42400
 8002208:	017d7840 	.word	0x017d7840

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002228:	f7ff fff0 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0a9b      	lsrs	r3, r3, #10
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	@ (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	080078f0 	.word	0x080078f0

0800224c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002250:	f7ff ffdc 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0b5b      	lsrs	r3, r3, #13
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	@ (8002270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	080078f0 	.word	0x080078f0

08002274 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	220f      	movs	r2, #15
 8002282:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0203 	and.w	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_RCC_GetClockConfig+0x5c>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022a8:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_RCC_GetClockConfig+0x5c>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <HAL_RCC_GetClockConfig+0x60>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0207 	and.w	r2, r3, #7
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	601a      	str	r2, [r3, #0]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e041      	b.n	800236e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f839 	bl	8002376 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f000 fbc2 	bl	8002aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d001      	beq.n	80023a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e044      	b.n	800242e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	@ (800243c <HAL_TIM_Base_Start_IT+0xb0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d018      	beq.n	80023f8 <HAL_TIM_Base_Start_IT+0x6c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ce:	d013      	beq.n	80023f8 <HAL_TIM_Base_Start_IT+0x6c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002440 <HAL_TIM_Base_Start_IT+0xb4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00e      	beq.n	80023f8 <HAL_TIM_Base_Start_IT+0x6c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a19      	ldr	r2, [pc, #100]	@ (8002444 <HAL_TIM_Base_Start_IT+0xb8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_TIM_Base_Start_IT+0x6c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_TIM_Base_Start_IT+0xbc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_TIM_Base_Start_IT+0x6c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a16      	ldr	r2, [pc, #88]	@ (800244c <HAL_TIM_Base_Start_IT+0xc0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d111      	bne.n	800241c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b06      	cmp	r3, #6
 8002408:	d010      	beq.n	800242c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241a:	e007      	b.n	800242c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40010000 	.word	0x40010000
 8002440:	40000400 	.word	0x40000400
 8002444:	40000800 	.word	0x40000800
 8002448:	40000c00 	.word	0x40000c00
 800244c:	40014000 	.word	0x40014000

08002450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e041      	b.n	80024e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fdbe 	bl	8000ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 fb06 	bl	8002aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_TIM_PWM_Start_IT+0x28>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e022      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x6e>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d109      	bne.n	8002532 <HAL_TIM_PWM_Start_IT+0x42>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	bf14      	ite	ne
 800252a:	2301      	movne	r3, #1
 800252c:	2300      	moveq	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e015      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x6e>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d109      	bne.n	800254c <HAL_TIM_PWM_Start_IT+0x5c>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e008      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x6e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0b3      	b.n	80026ce <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <HAL_TIM_PWM_Start_IT+0x86>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002574:	e013      	b.n	800259e <HAL_TIM_PWM_Start_IT+0xae>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Start_IT+0x96>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002584:	e00b      	b.n	800259e <HAL_TIM_PWM_Start_IT+0xae>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d104      	bne.n	8002596 <HAL_TIM_PWM_Start_IT+0xa6>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002594:	e003      	b.n	800259e <HAL_TIM_PWM_Start_IT+0xae>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	d841      	bhi.n	8002628 <HAL_TIM_PWM_Start_IT+0x138>
 80025a4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <HAL_TIM_PWM_Start_IT+0xbc>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025e1 	.word	0x080025e1
 80025b0:	08002629 	.word	0x08002629
 80025b4:	08002629 	.word	0x08002629
 80025b8:	08002629 	.word	0x08002629
 80025bc:	080025f3 	.word	0x080025f3
 80025c0:	08002629 	.word	0x08002629
 80025c4:	08002629 	.word	0x08002629
 80025c8:	08002629 	.word	0x08002629
 80025cc:	08002605 	.word	0x08002605
 80025d0:	08002629 	.word	0x08002629
 80025d4:	08002629 	.word	0x08002629
 80025d8:	08002629 	.word	0x08002629
 80025dc:	08002617 	.word	0x08002617
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0202 	orr.w	r2, r2, #2
 80025ee:	60da      	str	r2, [r3, #12]
      break;
 80025f0:	e01d      	b.n	800262e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0204 	orr.w	r2, r2, #4
 8002600:	60da      	str	r2, [r3, #12]
      break;
 8002602:	e014      	b.n	800262e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0208 	orr.w	r2, r2, #8
 8002612:	60da      	str	r2, [r3, #12]
      break;
 8002614:	e00b      	b.n	800262e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0210 	orr.w	r2, r2, #16
 8002624:	60da      	str	r2, [r3, #12]
      break;
 8002626:	e002      	b.n	800262e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	bf00      	nop
  }

  if (status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d14b      	bne.n	80026cc <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fc47 	bl	8002ed0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a24      	ldr	r2, [pc, #144]	@ (80026d8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d107      	bne.n	800265c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1d      	ldr	r2, [pc, #116]	@ (80026d8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800266e:	d013      	beq.n	8002698 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	@ (80026dc <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_TIM_PWM_Start_IT+0x1a8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a18      	ldr	r2, [pc, #96]	@ (80026e0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a16      	ldr	r2, [pc, #88]	@ (80026e4 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_TIM_PWM_Start_IT+0x1a8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d111      	bne.n	80026bc <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d010      	beq.n	80026cc <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ba:	e007      	b.n	80026cc <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40000800 	.word	0x40000800
 80026e4:	40000c00 	.word	0x40000c00
 80026e8:	40014000 	.word	0x40014000

080026ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0202 	mvn.w	r2, #2
 8002720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f994 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 800273c:	e005      	b.n	800274a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f986 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f997 	bl	8002a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d020      	beq.n	800279c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01b      	beq.n	800279c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0204 	mvn.w	r2, #4
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f96e 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f960 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f971 	bl	8002a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d020      	beq.n	80027e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01b      	beq.n	80027e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0208 	mvn.w	r2, #8
 80027b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f948 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f93a 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f94b 	bl	8002a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d020      	beq.n	8002834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0210 	mvn.w	r2, #16
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2208      	movs	r2, #8
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f922 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f914 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f925 	bl	8002a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00c      	beq.n	8002858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0201 	mvn.w	r2, #1
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe f8fc 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00c      	beq.n	800287c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fc1a 	bl	80030b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8f6 	bl	8002a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0220 	mvn.w	r2, #32
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fbec 	bl	800309c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e0ae      	b.n	8002a48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	f200 809f 	bhi.w	8002a38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002935 	.word	0x08002935
 8002904:	08002a39 	.word	0x08002a39
 8002908:	08002a39 	.word	0x08002a39
 800290c:	08002a39 	.word	0x08002a39
 8002910:	08002975 	.word	0x08002975
 8002914:	08002a39 	.word	0x08002a39
 8002918:	08002a39 	.word	0x08002a39
 800291c:	08002a39 	.word	0x08002a39
 8002920:	080029b7 	.word	0x080029b7
 8002924:	08002a39 	.word	0x08002a39
 8002928:	08002a39 	.word	0x08002a39
 800292c:	08002a39 	.word	0x08002a39
 8002930:	080029f7 	.word	0x080029f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f93c 	bl	8002bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6999      	ldr	r1, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	619a      	str	r2, [r3, #24]
      break;
 8002972:	e064      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f982 	bl	8002c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800298e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800299e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6999      	ldr	r1, [r3, #24]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	021a      	lsls	r2, r3, #8
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
      break;
 80029b4:	e043      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f9cd 	bl	8002d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0208 	orr.w	r2, r2, #8
 80029d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0204 	bic.w	r2, r2, #4
 80029e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69d9      	ldr	r1, [r3, #28]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	61da      	str	r2, [r3, #28]
      break;
 80029f4:	e023      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fa17 	bl	8002e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69d9      	ldr	r1, [r3, #28]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	021a      	lsls	r2, r3, #8
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	61da      	str	r2, [r3, #28]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3a      	ldr	r2, [pc, #232]	@ (8002b9c <TIM_Base_SetConfig+0xfc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00f      	beq.n	8002ad8 <TIM_Base_SetConfig+0x38>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002abe:	d00b      	beq.n	8002ad8 <TIM_Base_SetConfig+0x38>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a37      	ldr	r2, [pc, #220]	@ (8002ba0 <TIM_Base_SetConfig+0x100>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <TIM_Base_SetConfig+0x38>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a36      	ldr	r2, [pc, #216]	@ (8002ba4 <TIM_Base_SetConfig+0x104>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <TIM_Base_SetConfig+0x38>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a35      	ldr	r2, [pc, #212]	@ (8002ba8 <TIM_Base_SetConfig+0x108>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2b      	ldr	r2, [pc, #172]	@ (8002b9c <TIM_Base_SetConfig+0xfc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01b      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af8:	d017      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a28      	ldr	r2, [pc, #160]	@ (8002ba0 <TIM_Base_SetConfig+0x100>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a27      	ldr	r2, [pc, #156]	@ (8002ba4 <TIM_Base_SetConfig+0x104>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ba8 <TIM_Base_SetConfig+0x108>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a25      	ldr	r2, [pc, #148]	@ (8002bac <TIM_Base_SetConfig+0x10c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <TIM_Base_SetConfig+0x110>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <TIM_Base_SetConfig+0x114>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a0e      	ldr	r2, [pc, #56]	@ (8002b9c <TIM_Base_SetConfig+0xfc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d103      	bne.n	8002b70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f023 0201 	bic.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40014400 	.word	0x40014400
 8002bb4:	40014800 	.word	0x40014800

08002bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f023 0201 	bic.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 0302 	bic.w	r3, r3, #2
 8002c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <TIM_OC1_SetConfig+0xc8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10c      	bne.n	8002c2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0308 	bic.w	r3, r3, #8
 8002c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a13      	ldr	r2, [pc, #76]	@ (8002c80 <TIM_OC1_SetConfig+0xc8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d111      	bne.n	8002c5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	621a      	str	r2, [r3, #32]
}
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40010000 	.word	0x40010000

08002c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f023 0210 	bic.w	r2, r3, #16
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0320 	bic.w	r3, r3, #32
 8002cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a1e      	ldr	r2, [pc, #120]	@ (8002d58 <TIM_OC2_SetConfig+0xd4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10d      	bne.n	8002d00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a15      	ldr	r2, [pc, #84]	@ (8002d58 <TIM_OC2_SetConfig+0xd4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d113      	bne.n	8002d30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	bf00      	nop
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40010000 	.word	0x40010000

08002d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0303 	bic.w	r3, r3, #3
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <TIM_OC3_SetConfig+0xd0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10d      	bne.n	8002dd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a14      	ldr	r2, [pc, #80]	@ (8002e2c <TIM_OC3_SetConfig+0xd0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d113      	bne.n	8002e06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40010000 	.word	0x40010000

08002e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	031b      	lsls	r3, r3, #12
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a10      	ldr	r2, [pc, #64]	@ (8002ecc <TIM_OC4_SetConfig+0x9c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d109      	bne.n	8002ea4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	621a      	str	r2, [r3, #32]
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40010000 	.word	0x40010000

08002ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1a      	ldr	r2, [r3, #32]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e050      	b.n	8002fd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d018      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f80:	d013      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a18      	ldr	r2, [pc, #96]	@ (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a16      	ldr	r2, [pc, #88]	@ (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d009      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a13      	ldr	r2, [pc, #76]	@ (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	40014000 	.word	0x40014000

08002ff8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003010:	2302      	movs	r3, #2
 8003012:	e03d      	b.n	8003090 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e042      	b.n	800315c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe f86c 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	@ 0x24
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fcbb 	bl	8003a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800311c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800312c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800313c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d121      	bne.n	80031c2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_UART_Transmit_IT+0x26>
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e01a      	b.n	80031c4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	88fa      	ldrh	r2, [r7, #6]
 800319e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2221      	movs	r2, #33	@ 0x21
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b0ba      	sub	sp, #232	@ 0xe8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800320e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_UART_IRQHandler+0x66>
 8003222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fb69 	bl	8003906 <UART_Receive_IT>
      return;
 8003234:	e25b      	b.n	80036ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80de 	beq.w	80033fc <HAL_UART_IRQHandler+0x22c>
 8003240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d106      	bne.n	800325a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003250:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80d1 	beq.w	80033fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_UART_IRQHandler+0xae>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_UART_IRQHandler+0xd2>
 800328a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_UART_IRQHandler+0xf6>
 80032ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f043 0204 	orr.w	r2, r3, #4
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d011      	beq.n	80032f6 <HAL_UART_IRQHandler+0x126>
 80032d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f043 0208 	orr.w	r2, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 81f2 	beq.w	80036e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_UART_IRQHandler+0x14e>
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 faf4 	bl	8003906 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_UART_IRQHandler+0x17a>
 8003342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d04f      	beq.n	80033ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9fc 	bl	8003748 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335a:	2b40      	cmp	r3, #64	@ 0x40
 800335c:	d141      	bne.n	80033e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3314      	adds	r3, #20
 8003364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800337c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3314      	adds	r3, #20
 8003386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800338a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800338e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1d9      	bne.n	800335e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d013      	beq.n	80033da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b6:	4a7e      	ldr	r2, [pc, #504]	@ (80035b0 <HAL_UART_IRQHandler+0x3e0>)
 80033b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe f910 	bl	80015e4 <HAL_DMA_Abort_IT>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033d4:	4610      	mov	r0, r2
 80033d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e00e      	b.n	80033f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f99e 	bl	800371c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e0:	e00a      	b.n	80033f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f99a 	bl	800371c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	e006      	b.n	80033f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f996 	bl	800371c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033f6:	e175      	b.n	80036e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	bf00      	nop
    return;
 80033fa:	e173      	b.n	80036e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	2b01      	cmp	r3, #1
 8003402:	f040 814f 	bne.w	80036a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8148 	beq.w	80036a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8141 	beq.w	80036a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003442:	2b40      	cmp	r3, #64	@ 0x40
 8003444:	f040 80b6 	bne.w	80035b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8145 	beq.w	80036e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003466:	429a      	cmp	r2, r3
 8003468:	f080 813e 	bcs.w	80036e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003472:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800347e:	f000 8088 	beq.w	8003592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800349c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	330c      	adds	r3, #12
 80034aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1d9      	bne.n	8003482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3314      	adds	r3, #20
 80034d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3314      	adds	r3, #20
 80034ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e1      	bne.n	80034ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3314      	adds	r3, #20
 8003510:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800351a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800351c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3314      	adds	r3, #20
 800352a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800352e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003530:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003534:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800353c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e3      	bne.n	800350a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003562:	f023 0310 	bic.w	r3, r3, #16
 8003566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003574:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003576:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800357a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e3      	bne.n	8003550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	4618      	mov	r0, r3
 800358e:	f7fd ffb9 	bl	8001504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f8c1 	bl	8003730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ae:	e09b      	b.n	80036e8 <HAL_UART_IRQHandler+0x518>
 80035b0:	0800380f 	.word	0x0800380f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 808e 	beq.w	80036ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8089 	beq.w	80036ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	330c      	adds	r3, #12
 80035e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003600:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800360c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3314      	adds	r3, #20
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	623b      	str	r3, [r7, #32]
   return(result);
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3314      	adds	r3, #20
 8003632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003636:	633a      	str	r2, [r7, #48]	@ 0x30
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800363c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e3      	bne.n	8003612 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	60fb      	str	r3, [r7, #12]
   return(result);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0310 	bic.w	r3, r3, #16
 800366e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	330c      	adds	r3, #12
 8003678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800367c:	61fa      	str	r2, [r7, #28]
 800367e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	617b      	str	r3, [r7, #20]
   return(result);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e3      	bne.n	8003658 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f847 	bl	8003730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036a2:	e023      	b.n	80036ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_UART_IRQHandler+0x4f4>
 80036b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8ba 	bl	8003836 <UART_Transmit_IT>
    return;
 80036c2:	e014      	b.n	80036ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00e      	beq.n	80036ee <HAL_UART_IRQHandler+0x51e>
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8fa 	bl	80038d6 <UART_EndTransmit_IT>
    return;
 80036e2:	e004      	b.n	80036ee <HAL_UART_IRQHandler+0x51e>
    return;
 80036e4:	bf00      	nop
 80036e6:	e002      	b.n	80036ee <HAL_UART_IRQHandler+0x51e>
      return;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_UART_IRQHandler+0x51e>
      return;
 80036ec:	bf00      	nop
  }
}
 80036ee:	37e8      	adds	r7, #232	@ 0xe8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003748:	b480      	push	{r7}
 800374a:	b095      	sub	sp, #84	@ 0x54
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003770:	643a      	str	r2, [r7, #64]	@ 0x40
 8003772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	61fb      	str	r3, [r7, #28]
   return(result);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d119      	bne.n	80037f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0310 	bic.w	r3, r3, #16
 80037d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037e0:	61ba      	str	r2, [r7, #24]
 80037e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6979      	ldr	r1, [r7, #20]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	613b      	str	r3, [r7, #16]
   return(result);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003802:	bf00      	nop
 8003804:	3754      	adds	r7, #84	@ 0x54
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff ff77 	bl	800371c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b21      	cmp	r3, #33	@ 0x21
 8003848:	d13e      	bne.n	80038c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003852:	d114      	bne.n	800387e <UART_Transmit_IT+0x48>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d110      	bne.n	800387e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003870:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	1c9a      	adds	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	621a      	str	r2, [r3, #32]
 800387c:	e008      	b.n	8003890 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6211      	str	r1, [r2, #32]
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29b      	uxth	r3, r3
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4619      	mov	r1, r3
 800389e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10f      	bne.n	80038c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fefc 	bl	80036f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b08c      	sub	sp, #48	@ 0x30
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b22      	cmp	r3, #34	@ 0x22
 8003918:	f040 80ae 	bne.w	8003a78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003924:	d117      	bne.n	8003956 <UART_Receive_IT+0x50>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d113      	bne.n	8003956 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	b29a      	uxth	r2, r3
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394e:	1c9a      	adds	r2, r3, #2
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28
 8003954:	e026      	b.n	80039a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003968:	d007      	beq.n	800397a <UART_Receive_IT+0x74>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <UART_Receive_IT+0x82>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e008      	b.n	800399a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003994:	b2da      	uxtb	r2, r3
 8003996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003998:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4619      	mov	r1, r3
 80039b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d15d      	bne.n	8003a74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0220 	bic.w	r2, r2, #32
 80039c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d135      	bne.n	8003a6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	613b      	str	r3, [r7, #16]
   return(result);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f023 0310 	bic.w	r3, r3, #16
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	330c      	adds	r3, #12
 8003a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a24:	623a      	str	r2, [r7, #32]
 8003a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a28:	69f9      	ldr	r1, [r7, #28]
 8003a2a:	6a3a      	ldr	r2, [r7, #32]
 8003a2c:	e841 2300 	strex	r3, r2, [r1]
 8003a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e5      	bne.n	8003a04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d10a      	bne.n	8003a5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fe64 	bl	8003730 <HAL_UARTEx_RxEventCallback>
 8003a68:	e002      	b.n	8003a70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fe4c 	bl	8003708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e002      	b.n	8003a7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e000      	b.n	8003a7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
  }
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3730      	adds	r7, #48	@ 0x30
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a88:	b0c0      	sub	sp, #256	@ 0x100
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	68d9      	ldr	r1, [r3, #12]
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	ea40 0301 	orr.w	r3, r0, r1
 8003aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003adc:	f021 010c 	bic.w	r1, r1, #12
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aea:	430b      	orrs	r3, r1
 8003aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	6999      	ldr	r1, [r3, #24]
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	ea40 0301 	orr.w	r3, r0, r1
 8003b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b8f      	ldr	r3, [pc, #572]	@ (8003d50 <UART_SetConfig+0x2cc>)
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d005      	beq.n	8003b24 <UART_SetConfig+0xa0>
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d54 <UART_SetConfig+0x2d0>)
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d104      	bne.n	8003b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe fb92 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8003b28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b2c:	e003      	b.n	8003b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b2e:	f7fe fb79 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003b32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b40:	f040 810c 	bne.w	8003d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b56:	4622      	mov	r2, r4
 8003b58:	462b      	mov	r3, r5
 8003b5a:	1891      	adds	r1, r2, r2
 8003b5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b5e:	415b      	adcs	r3, r3
 8003b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b66:	4621      	mov	r1, r4
 8003b68:	eb12 0801 	adds.w	r8, r2, r1
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	eb43 0901 	adc.w	r9, r3, r1
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b86:	4690      	mov	r8, r2
 8003b88:	4699      	mov	r9, r3
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	eb18 0303 	adds.w	r3, r8, r3
 8003b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b94:	462b      	mov	r3, r5
 8003b96:	eb49 0303 	adc.w	r3, r9, r3
 8003b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003baa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	18db      	adds	r3, r3, r3
 8003bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bb8:	4613      	mov	r3, r2
 8003bba:	eb42 0303 	adc.w	r3, r2, r3
 8003bbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bc8:	f7fc fb62 	bl	8000290 <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4b61      	ldr	r3, [pc, #388]	@ (8003d58 <UART_SetConfig+0x2d4>)
 8003bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	011c      	lsls	r4, r3, #4
 8003bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	1891      	adds	r1, r2, r2
 8003bf2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8003c02:	4649      	mov	r1, r9
 8003c04:	eb43 0b01 	adc.w	fp, r3, r1
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c1c:	4692      	mov	sl, r2
 8003c1e:	469b      	mov	fp, r3
 8003c20:	4643      	mov	r3, r8
 8003c22:	eb1a 0303 	adds.w	r3, sl, r3
 8003c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	18db      	adds	r3, r3, r3
 8003c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c4e:	4613      	mov	r3, r2
 8003c50:	eb42 0303 	adc.w	r3, r2, r3
 8003c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c5e:	f7fc fb17 	bl	8000290 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	4b3b      	ldr	r3, [pc, #236]	@ (8003d58 <UART_SetConfig+0x2d4>)
 8003c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2264      	movs	r2, #100	@ 0x64
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	1acb      	subs	r3, r1, r3
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c7e:	4b36      	ldr	r3, [pc, #216]	@ (8003d58 <UART_SetConfig+0x2d4>)
 8003c80:	fba3 2302 	umull	r2, r3, r3, r2
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c8c:	441c      	add	r4, r3
 8003c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	1891      	adds	r1, r2, r2
 8003ca6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ca8:	415b      	adcs	r3, r3
 8003caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	1851      	adds	r1, r2, r1
 8003cb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	414b      	adcs	r3, r1
 8003cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cc8:	4659      	mov	r1, fp
 8003cca:	00cb      	lsls	r3, r1, #3
 8003ccc:	4651      	mov	r1, sl
 8003cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	00ca      	lsls	r2, r1, #3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4642      	mov	r2, r8
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	460a      	mov	r2, r1
 8003ce8:	eb42 0303 	adc.w	r3, r2, r3
 8003cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d04:	460b      	mov	r3, r1
 8003d06:	18db      	adds	r3, r3, r3
 8003d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d1a:	f7fc fab9 	bl	8000290 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4b0d      	ldr	r3, [pc, #52]	@ (8003d58 <UART_SetConfig+0x2d4>)
 8003d24:	fba3 1302 	umull	r1, r3, r3, r2
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	2164      	movs	r1, #100	@ 0x64
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	3332      	adds	r3, #50	@ 0x32
 8003d36:	4a08      	ldr	r2, [pc, #32]	@ (8003d58 <UART_SetConfig+0x2d4>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	f003 0207 	and.w	r2, r3, #7
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4422      	add	r2, r4
 8003d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d4c:	e106      	b.n	8003f5c <UART_SetConfig+0x4d8>
 8003d4e:	bf00      	nop
 8003d50:	40011000 	.word	0x40011000
 8003d54:	40011400 	.word	0x40011400
 8003d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d6e:	4642      	mov	r2, r8
 8003d70:	464b      	mov	r3, r9
 8003d72:	1891      	adds	r1, r2, r2
 8003d74:	6239      	str	r1, [r7, #32]
 8003d76:	415b      	adcs	r3, r3
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d7e:	4641      	mov	r1, r8
 8003d80:	1854      	adds	r4, r2, r1
 8003d82:	4649      	mov	r1, r9
 8003d84:	eb43 0501 	adc.w	r5, r3, r1
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	00eb      	lsls	r3, r5, #3
 8003d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d96:	00e2      	lsls	r2, r4, #3
 8003d98:	4614      	mov	r4, r2
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	18e3      	adds	r3, r4, r3
 8003da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003da4:	464b      	mov	r3, r9
 8003da6:	eb45 0303 	adc.w	r3, r5, r3
 8003daa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dca:	4629      	mov	r1, r5
 8003dcc:	008b      	lsls	r3, r1, #2
 8003dce:	4621      	mov	r1, r4
 8003dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	008a      	lsls	r2, r1, #2
 8003dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ddc:	f7fc fa58 	bl	8000290 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4b60      	ldr	r3, [pc, #384]	@ (8003f68 <UART_SetConfig+0x4e4>)
 8003de6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	011c      	lsls	r4, r3, #4
 8003dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003df8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	61b9      	str	r1, [r7, #24]
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e10:	4641      	mov	r1, r8
 8003e12:	1851      	adds	r1, r2, r1
 8003e14:	6139      	str	r1, [r7, #16]
 8003e16:	4649      	mov	r1, r9
 8003e18:	414b      	adcs	r3, r1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e28:	4659      	mov	r1, fp
 8003e2a:	00cb      	lsls	r3, r1, #3
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e32:	4651      	mov	r1, sl
 8003e34:	00ca      	lsls	r2, r1, #3
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e44:	464b      	mov	r3, r9
 8003e46:	460a      	mov	r2, r1
 8003e48:	eb42 0303 	adc.w	r3, r2, r3
 8003e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e68:	4649      	mov	r1, r9
 8003e6a:	008b      	lsls	r3, r1, #2
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e72:	4641      	mov	r1, r8
 8003e74:	008a      	lsls	r2, r1, #2
 8003e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e7a:	f7fc fa09 	bl	8000290 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	4b38      	ldr	r3, [pc, #224]	@ (8003f68 <UART_SetConfig+0x4e4>)
 8003e86:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2264      	movs	r2, #100	@ 0x64
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	1acb      	subs	r3, r1, r3
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	3332      	adds	r3, #50	@ 0x32
 8003e98:	4a33      	ldr	r2, [pc, #204]	@ (8003f68 <UART_SetConfig+0x4e4>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea4:	441c      	add	r4, r3
 8003ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eaa:	2200      	movs	r2, #0
 8003eac:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eae:	677a      	str	r2, [r7, #116]	@ 0x74
 8003eb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	1891      	adds	r1, r2, r2
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	415b      	adcs	r3, r3
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	1851      	adds	r1, r2, r1
 8003ec8:	6039      	str	r1, [r7, #0]
 8003eca:	4649      	mov	r1, r9
 8003ecc:	414b      	adcs	r3, r1
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003edc:	4659      	mov	r1, fp
 8003ede:	00cb      	lsls	r3, r1, #3
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	00ca      	lsls	r2, r1, #3
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	460a      	mov	r2, r1
 8003efa:	eb42 0303 	adc.w	r3, r2, r3
 8003efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f18:	4649      	mov	r1, r9
 8003f1a:	008b      	lsls	r3, r1, #2
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f22:	4641      	mov	r1, r8
 8003f24:	008a      	lsls	r2, r1, #2
 8003f26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f2a:	f7fc f9b1 	bl	8000290 <__aeabi_uldivmod>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <UART_SetConfig+0x4e4>)
 8003f34:	fba3 1302 	umull	r1, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	2164      	movs	r1, #100	@ 0x64
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	3332      	adds	r3, #50	@ 0x32
 8003f46:	4a08      	ldr	r2, [pc, #32]	@ (8003f68 <UART_SetConfig+0x4e4>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	f003 020f 	and.w	r2, r3, #15
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4422      	add	r2, r4
 8003f5a:	609a      	str	r2, [r3, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f62:	46bd      	mov	sp, r7
 8003f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f68:	51eb851f 	.word	0x51eb851f

08003f6c <__NVIC_SetPriority>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	6039      	str	r1, [r7, #0]
 8003f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	db0a      	blt.n	8003f96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	490c      	ldr	r1, [pc, #48]	@ (8003fb8 <__NVIC_SetPriority+0x4c>)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	0112      	lsls	r2, r2, #4
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f94:	e00a      	b.n	8003fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4908      	ldr	r1, [pc, #32]	@ (8003fbc <__NVIC_SetPriority+0x50>)
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	3b04      	subs	r3, #4
 8003fa4:	0112      	lsls	r2, r2, #4
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	440b      	add	r3, r1
 8003faa:	761a      	strb	r2, [r3, #24]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000e100 	.word	0xe000e100
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <SysTick_Handler+0x1c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003fc8:	f001 fd76 	bl	8005ab8 <xTaskGetSchedulerState>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003fd2:	f002 fca9 	bl	8006928 <xPortSysTickHandler>
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	e000e010 	.word	0xe000e010

08003fe0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	f06f 0004 	mvn.w	r0, #4
 8003fea:	f7ff ffbf 	bl	8003f6c <__NVIC_SetPriority>
#endif
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ffa:	f3ef 8305 	mrs	r3, IPSR
 8003ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8004000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004006:	f06f 0305 	mvn.w	r3, #5
 800400a:	607b      	str	r3, [r7, #4]
 800400c:	e00c      	b.n	8004028 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800400e:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <osKernelInitialize+0x44>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <osKernelInitialize+0x44>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800401c:	2300      	movs	r3, #0
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	e002      	b.n	8004028 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004028:	687b      	ldr	r3, [r7, #4]
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	200001bc 	.word	0x200001bc

0800403c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004042:	f3ef 8305 	mrs	r3, IPSR
 8004046:	603b      	str	r3, [r7, #0]
  return(result);
 8004048:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <osKernelStart+0x1a>
    stat = osErrorISR;
 800404e:	f06f 0305 	mvn.w	r3, #5
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e010      	b.n	8004078 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004056:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <osKernelStart+0x48>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d109      	bne.n	8004072 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800405e:	f7ff ffbf 	bl	8003fe0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004062:	4b08      	ldr	r3, [pc, #32]	@ (8004084 <osKernelStart+0x48>)
 8004064:	2202      	movs	r2, #2
 8004066:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004068:	f001 f8d8 	bl	800521c <vTaskStartScheduler>
      stat = osOK;
 800406c:	2300      	movs	r3, #0
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	e002      	b.n	8004078 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004078:	687b      	ldr	r3, [r7, #4]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200001bc 	.word	0x200001bc

08004088 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b08e      	sub	sp, #56	@ 0x38
 800408c:	af04      	add	r7, sp, #16
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004098:	f3ef 8305 	mrs	r3, IPSR
 800409c:	617b      	str	r3, [r7, #20]
  return(result);
 800409e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d17e      	bne.n	80041a2 <osThreadNew+0x11a>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d07b      	beq.n	80041a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80040aa:	2380      	movs	r3, #128	@ 0x80
 80040ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80040ae:	2318      	movs	r3, #24
 80040b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d045      	beq.n	800414e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <osThreadNew+0x48>
        name = attr->name;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <osThreadNew+0x6e>
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b38      	cmp	r3, #56	@ 0x38
 80040e8:	d805      	bhi.n	80040f6 <osThreadNew+0x6e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <osThreadNew+0x72>
        return (NULL);
 80040f6:	2300      	movs	r3, #0
 80040f8:	e054      	b.n	80041a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <osThreadNew+0xa8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b5b      	cmp	r3, #91	@ 0x5b
 8004118:	d90a      	bls.n	8004130 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <osThreadNew+0xa8>
        mem = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e010      	b.n	8004152 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10c      	bne.n	8004152 <osThreadNew+0xca>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d108      	bne.n	8004152 <osThreadNew+0xca>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <osThreadNew+0xca>
          mem = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e001      	b.n	8004152 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d110      	bne.n	800417a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004160:	9202      	str	r2, [sp, #8]
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6a3a      	ldr	r2, [r7, #32]
 800416c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 feae 	bl	8004ed0 <xTaskCreateStatic>
 8004174:	4603      	mov	r3, r0
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	e013      	b.n	80041a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d110      	bne.n	80041a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	b29a      	uxth	r2, r3
 8004184:	f107 0310 	add.w	r3, r7, #16
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fefc 	bl	8004f90 <xTaskCreate>
 8004198:	4603      	mov	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d001      	beq.n	80041a2 <osThreadNew+0x11a>
            hTask = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041a2:	693b      	ldr	r3, [r7, #16]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3728      	adds	r7, #40	@ 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	@ 0x28
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041bc:	f3ef 8305 	mrs	r3, IPSR
 80041c0:	613b      	str	r3, [r7, #16]
  return(result);
 80041c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d15f      	bne.n	8004288 <osMessageQueueNew+0xdc>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d05c      	beq.n	8004288 <osMessageQueueNew+0xdc>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d059      	beq.n	8004288 <osMessageQueueNew+0xdc>
    mem = -1;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d029      	beq.n	8004234 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <osMessageQueueNew+0x62>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b4f      	cmp	r3, #79	@ 0x4f
 80041ee:	d90e      	bls.n	800420e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	429a      	cmp	r2, r3
 8004206:	d302      	bcc.n	800420e <osMessageQueueNew+0x62>
        mem = 1;
 8004208:	2301      	movs	r3, #1
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e014      	b.n	8004238 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d110      	bne.n	8004238 <osMessageQueueNew+0x8c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10c      	bne.n	8004238 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <osMessageQueueNew+0x8c>
          mem = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e001      	b.n	8004238 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10b      	bne.n	8004256 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2100      	movs	r1, #0
 8004248:	9100      	str	r1, [sp, #0]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f973 	bl	8004538 <xQueueGenericCreateStatic>
 8004252:	61f8      	str	r0, [r7, #28]
 8004254:	e008      	b.n	8004268 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800425c:	2200      	movs	r2, #0
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f9e6 	bl	8004632 <xQueueGenericCreate>
 8004266:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <osMessageQueueNew+0xd0>
        name = attr->name;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e001      	b.n	8004280 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	69f8      	ldr	r0, [r7, #28]
 8004284:	f000 fdc6 	bl	8004e14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004288:	69fb      	ldr	r3, [r7, #28]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a07      	ldr	r2, [pc, #28]	@ (80042c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80042a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a06      	ldr	r2, [pc, #24]	@ (80042c4 <vApplicationGetIdleTaskMemory+0x30>)
 80042aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200001c0 	.word	0x200001c0
 80042c4:	2000021c 	.word	0x2000021c

080042c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a07      	ldr	r2, [pc, #28]	@ (80042f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80042d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a06      	ldr	r2, [pc, #24]	@ (80042f8 <vApplicationGetTimerTaskMemory+0x30>)
 80042de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	2000041c 	.word	0x2000041c
 80042f8:	20000478 	.word	0x20000478

080042fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f103 0208 	add.w	r2, r3, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 32ff 	mov.w	r2, #4294967295
 8004314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f103 0208 	add.w	r2, r3, #8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f103 0208 	add.w	r2, r3, #8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d103      	bne.n	80043be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e00c      	b.n	80043d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3308      	adds	r3, #8
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e002      	b.n	80043cc <vListInsert+0x2e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d2f6      	bcs.n	80043c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6892      	ldr	r2, [r2, #8]
 8004426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6852      	ldr	r2, [r2, #4]
 8004430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d103      	bne.n	8004444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1e5a      	subs	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004490:	f002 f9ba 	bl	8006808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	68f9      	ldr	r1, [r7, #12]
 800449e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c0:	3b01      	subs	r3, #1
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	441a      	add	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	22ff      	movs	r2, #255	@ 0xff
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	22ff      	movs	r2, #255	@ 0xff
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d114      	bne.n	8004510 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01a      	beq.n	8004524 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3310      	adds	r3, #16
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 f920 	bl	8005738 <xTaskRemoveFromEventList>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d012      	beq.n	8004524 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <xQueueGenericReset+0xd0>)
 8004500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	e009      	b.n	8004524 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3310      	adds	r3, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fef1 	bl	80042fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3324      	adds	r3, #36	@ 0x24
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff feec 	bl	80042fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004524:	f002 f9a2 	bl	800686c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004528:	2301      	movs	r3, #1
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08e      	sub	sp, #56	@ 0x38
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	e7fd      	b.n	800457e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <xQueueGenericCreateStatic+0x56>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <xQueueGenericCreateStatic+0x5a>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <xQueueGenericCreateStatic+0x5c>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	623b      	str	r3, [r7, #32]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <xQueueGenericCreateStatic+0x84>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <xQueueGenericCreateStatic+0x88>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <xQueueGenericCreateStatic+0x8a>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	61fb      	str	r3, [r7, #28]
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	e7fd      	b.n	80045da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045de:	2350      	movs	r3, #80	@ 0x50
 80045e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b50      	cmp	r3, #80	@ 0x50
 80045e6:	d00b      	beq.n	8004600 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	61bb      	str	r3, [r7, #24]
}
 80045fa:	bf00      	nop
 80045fc:	bf00      	nop
 80045fe:	e7fd      	b.n	80045fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004600:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004614:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f840 	bl	80046a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800462a:	4618      	mov	r0, r3
 800462c:	3730      	adds	r7, #48	@ 0x30
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004632:	b580      	push	{r7, lr}
 8004634:	b08a      	sub	sp, #40	@ 0x28
 8004636:	af02      	add	r7, sp, #8
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	4613      	mov	r3, r2
 800463e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	613b      	str	r3, [r7, #16]
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	e7fd      	b.n	800465a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	3350      	adds	r3, #80	@ 0x50
 800466c:	4618      	mov	r0, r3
 800466e:	f002 f9ed 	bl	8006a4c <pvPortMalloc>
 8004672:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3350      	adds	r3, #80	@ 0x50
 8004682:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800468c:	79fa      	ldrb	r2, [r7, #7]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f805 	bl	80046a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800469e:	69bb      	ldr	r3, [r7, #24]
	}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e002      	b.n	80046ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046d6:	2101      	movs	r1, #1
 80046d8:	69b8      	ldr	r0, [r7, #24]
 80046da:	f7ff fec3 	bl	8004464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	@ 0x38
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046fe:	2300      	movs	r3, #0
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <xQueueGenericSend+0x34>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	e7fd      	b.n	8004720 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <xQueueGenericSend+0x42>
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <xQueueGenericSend+0x46>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericSend+0x48>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <xQueueGenericSend+0x64>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d103      	bne.n	8004762 <xQueueGenericSend+0x72>
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <xQueueGenericSend+0x76>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <xQueueGenericSend+0x78>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <xQueueGenericSend+0x94>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	623b      	str	r3, [r7, #32]
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004784:	f001 f998 	bl	8005ab8 <xTaskGetSchedulerState>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <xQueueGenericSend+0xa4>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <xQueueGenericSend+0xa8>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <xQueueGenericSend+0xaa>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	61fb      	str	r3, [r7, #28]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047b6:	f002 f827 	bl	8006808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <xQueueGenericSend+0xdc>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d129      	bne.n	8004820 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047d2:	f000 fa0f 	bl	8004bf4 <prvCopyDataToQueue>
 80047d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d010      	beq.n	8004802 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	3324      	adds	r3, #36	@ 0x24
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 ffa7 	bl	8005738 <xTaskRemoveFromEventList>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047f0:	4b3f      	ldr	r3, [pc, #252]	@ (80048f0 <xQueueGenericSend+0x200>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	e00a      	b.n	8004818 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004808:	4b39      	ldr	r3, [pc, #228]	@ (80048f0 <xQueueGenericSend+0x200>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004818:	f002 f828 	bl	800686c <vPortExitCritical>
				return pdPASS;
 800481c:	2301      	movs	r3, #1
 800481e:	e063      	b.n	80048e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004826:	f002 f821 	bl	800686c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800482a:	2300      	movs	r3, #0
 800482c:	e05c      	b.n	80048e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800482e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004834:	f107 0314 	add.w	r3, r7, #20
 8004838:	4618      	mov	r0, r3
 800483a:	f000 ffe1 	bl	8005800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800483e:	2301      	movs	r3, #1
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004842:	f002 f813 	bl	800686c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004846:	f000 fd51 	bl	80052ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800484a:	f001 ffdd 	bl	8006808 <vPortEnterCritical>
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004854:	b25b      	sxtb	r3, r3
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d103      	bne.n	8004864 <xQueueGenericSend+0x174>
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800486a:	b25b      	sxtb	r3, r3
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d103      	bne.n	800487a <xQueueGenericSend+0x18a>
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800487a:	f001 fff7 	bl	800686c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800487e:	1d3a      	adds	r2, r7, #4
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 ffd0 	bl	800582c <xTaskCheckForTimeOut>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d124      	bne.n	80048dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004892:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004894:	f000 faa6 	bl	8004de4 <prvIsQueueFull>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d018      	beq.n	80048d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	3310      	adds	r3, #16
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fef4 	bl	8005694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048ae:	f000 fa31 	bl	8004d14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048b2:	f000 fd29 	bl	8005308 <xTaskResumeAll>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f af7c 	bne.w	80047b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048be:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <xQueueGenericSend+0x200>)
 80048c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	e772      	b.n	80047b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048d2:	f000 fa1f 	bl	8004d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048d6:	f000 fd17 	bl	8005308 <xTaskResumeAll>
 80048da:	e76c      	b.n	80047b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048de:	f000 fa19 	bl	8004d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048e2:	f000 fd11 	bl	8005308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3738      	adds	r7, #56	@ 0x38
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	e000ed04 	.word	0xe000ed04

080048f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b090      	sub	sp, #64	@ 0x40
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <xQueueGenericSendFromISR+0x3e>
 800492a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <xQueueGenericSendFromISR+0x42>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <xQueueGenericSendFromISR+0x44>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	e7fd      	b.n	8004950 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d103      	bne.n	8004962 <xQueueGenericSendFromISR+0x6e>
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <xQueueGenericSendFromISR+0x72>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <xQueueGenericSendFromISR+0x74>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	623b      	str	r3, [r7, #32]
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	e7fd      	b.n	8004980 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004984:	f002 f820 	bl	80069c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004988:	f3ef 8211 	mrs	r2, BASEPRI
 800498c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	61fa      	str	r2, [r7, #28]
 800499e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <xQueueGenericSendFromISR+0xc2>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d12f      	bne.n	8004a16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049cc:	f000 f912 	bl	8004bf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d112      	bne.n	8004a00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	3324      	adds	r3, #36	@ 0x24
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fea6 	bl	8005738 <xTaskRemoveFromEventList>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00e      	beq.n	8004a10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e007      	b.n	8004a10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a04:	3301      	adds	r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	b25a      	sxtb	r2, r3
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a10:	2301      	movs	r3, #1
 8004a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004a14:	e001      	b.n	8004a1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3740      	adds	r7, #64	@ 0x40
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08c      	sub	sp, #48	@ 0x30
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <xQueueReceive+0x32>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	623b      	str	r3, [r7, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	e7fd      	b.n	8004a5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <xQueueReceive+0x40>
 8004a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <xQueueReceive+0x44>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <xQueueReceive+0x46>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <xQueueReceive+0x62>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61fb      	str	r3, [r7, #28]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a92:	f001 f811 	bl	8005ab8 <xTaskGetSchedulerState>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <xQueueReceive+0x72>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <xQueueReceive+0x76>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <xQueueReceive+0x78>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <xQueueReceive+0x94>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	61bb      	str	r3, [r7, #24]
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ac4:	f001 fea0 	bl	8006808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01f      	beq.n	8004b14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ad8:	f000 f8f6 	bl	8004cc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00f      	beq.n	8004b0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	3310      	adds	r3, #16
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fe21 	bl	8005738 <xTaskRemoveFromEventList>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004afc:	4b3c      	ldr	r3, [pc, #240]	@ (8004bf0 <xQueueReceive+0x1c0>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b0c:	f001 feae 	bl	800686c <vPortExitCritical>
				return pdPASS;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e069      	b.n	8004be8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b1a:	f001 fea7 	bl	800686c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e062      	b.n	8004be8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fe67 	bl	8005800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b32:	2301      	movs	r3, #1
 8004b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b36:	f001 fe99 	bl	800686c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b3a:	f000 fbd7 	bl	80052ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b3e:	f001 fe63 	bl	8006808 <vPortEnterCritical>
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d103      	bne.n	8004b58 <xQueueReceive+0x128>
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b5e:	b25b      	sxtb	r3, r3
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d103      	bne.n	8004b6e <xQueueReceive+0x13e>
 8004b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b6e:	f001 fe7d 	bl	800686c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b72:	1d3a      	adds	r2, r7, #4
 8004b74:	f107 0310 	add.w	r3, r7, #16
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fe56 	bl	800582c <xTaskCheckForTimeOut>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d123      	bne.n	8004bce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b88:	f000 f916 	bl	8004db8 <prvIsQueueEmpty>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d017      	beq.n	8004bc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	3324      	adds	r3, #36	@ 0x24
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fd7a 	bl	8005694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ba0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ba2:	f000 f8b7 	bl	8004d14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ba6:	f000 fbaf 	bl	8005308 <xTaskResumeAll>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d189      	bne.n	8004ac4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <xQueueReceive+0x1c0>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	e780      	b.n	8004ac4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bc4:	f000 f8a6 	bl	8004d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bc8:	f000 fb9e 	bl	8005308 <xTaskResumeAll>
 8004bcc:	e77a      	b.n	8004ac4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bd0:	f000 f8a0 	bl	8004d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bd4:	f000 fb98 	bl	8005308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bda:	f000 f8ed 	bl	8004db8 <prvIsQueueEmpty>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f43f af6f 	beq.w	8004ac4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004be6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3730      	adds	r7, #48	@ 0x30
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10d      	bne.n	8004c2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d14d      	bne.n	8004cb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 ff68 	bl	8005af4 <xTaskPriorityDisinherit>
 8004c24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	e043      	b.n	8004cb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d119      	bne.n	8004c68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6858      	ldr	r0, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	f002 f946 	bl	8006ed0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	441a      	add	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d32b      	bcc.n	8004cb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	e026      	b.n	8004cb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68d8      	ldr	r0, [r3, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	461a      	mov	r2, r3
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	f002 f92c 	bl	8006ed0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	425b      	negs	r3, r3
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d207      	bcs.n	8004ca4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	441a      	add	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d105      	bne.n	8004cb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004cbe:	697b      	ldr	r3, [r7, #20]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d018      	beq.n	8004d0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	441a      	add	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d303      	bcc.n	8004cfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68d9      	ldr	r1, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	461a      	mov	r2, r3
 8004d06:	6838      	ldr	r0, [r7, #0]
 8004d08:	f002 f8e2 	bl	8006ed0 <memcpy>
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d1c:	f001 fd74 	bl	8006808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d28:	e011      	b.n	8004d4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d012      	beq.n	8004d58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3324      	adds	r3, #36	@ 0x24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fcfe 	bl	8005738 <xTaskRemoveFromEventList>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d42:	f000 fdd7 	bl	80058f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	dce9      	bgt.n	8004d2a <prvUnlockQueue+0x16>
 8004d56:	e000      	b.n	8004d5a <prvUnlockQueue+0x46>
					break;
 8004d58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	22ff      	movs	r2, #255	@ 0xff
 8004d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004d62:	f001 fd83 	bl	800686c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d66:	f001 fd4f 	bl	8006808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d72:	e011      	b.n	8004d98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d012      	beq.n	8004da2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3310      	adds	r3, #16
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fcd9 	bl	8005738 <xTaskRemoveFromEventList>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d8c:	f000 fdb2 	bl	80058f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d90:	7bbb      	ldrb	r3, [r7, #14]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	dce9      	bgt.n	8004d74 <prvUnlockQueue+0x60>
 8004da0:	e000      	b.n	8004da4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004da2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	22ff      	movs	r2, #255	@ 0xff
 8004da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004dac:	f001 fd5e 	bl	800686c <vPortExitCritical>
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc0:	f001 fd22 	bl	8006808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e001      	b.n	8004dd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dd6:	f001 fd49 	bl	800686c <vPortExitCritical>

	return xReturn;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dec:	f001 fd0c 	bl	8006808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d102      	bne.n	8004e02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e001      	b.n	8004e06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e06:	f001 fd31 	bl	800686c <vPortExitCritical>

	return xReturn;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	e014      	b.n	8004e4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e24:	4a0f      	ldr	r2, [pc, #60]	@ (8004e64 <vQueueAddToRegistry+0x50>)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10b      	bne.n	8004e48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e30:	490c      	ldr	r1, [pc, #48]	@ (8004e64 <vQueueAddToRegistry+0x50>)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e64 <vQueueAddToRegistry+0x50>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e46:	e006      	b.n	8004e56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b07      	cmp	r3, #7
 8004e52:	d9e7      	bls.n	8004e24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000878 	.word	0x20000878

08004e68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e78:	f001 fcc6 	bl	8006808 <vPortEnterCritical>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e82:	b25b      	sxtb	r3, r3
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d103      	bne.n	8004e92 <vQueueWaitForMessageRestricted+0x2a>
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d103      	bne.n	8004ea8 <vQueueWaitForMessageRestricted+0x40>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ea8:	f001 fce0 	bl	800686c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	3324      	adds	r3, #36	@ 0x24
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fc0f 	bl	80056e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ec2:	6978      	ldr	r0, [r7, #20]
 8004ec4:	f7ff ff26 	bl	8004d14 <prvUnlockQueue>
	}
 8004ec8:	bf00      	nop
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08e      	sub	sp, #56	@ 0x38
 8004ed4:	af04      	add	r7, sp, #16
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <xTaskCreateStatic+0x2c>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	623b      	str	r3, [r7, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	e7fd      	b.n	8004ef8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	61fb      	str	r3, [r7, #28]
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	e7fd      	b.n	8004f16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f1a:	235c      	movs	r3, #92	@ 0x5c
 8004f1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b5c      	cmp	r3, #92	@ 0x5c
 8004f22:	d00b      	beq.n	8004f3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	61bb      	str	r3, [r7, #24]
}
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	e7fd      	b.n	8004f38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01e      	beq.n	8004f82 <xTaskCreateStatic+0xb2>
 8004f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01b      	beq.n	8004f82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9303      	str	r3, [sp, #12]
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	9302      	str	r3, [sp, #8]
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f850 	bl	800501a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f7c:	f000 f8de 	bl	800513c <prvAddNewTaskToReadyList>
 8004f80:	e001      	b.n	8004f86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f86:	697b      	ldr	r3, [r7, #20]
	}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3728      	adds	r7, #40	@ 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08c      	sub	sp, #48	@ 0x30
 8004f94:	af04      	add	r7, sp, #16
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fd51 	bl	8006a4c <pvPortMalloc>
 8004faa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00e      	beq.n	8004fd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fb2:	205c      	movs	r0, #92	@ 0x5c
 8004fb4:	f001 fd4a 	bl	8006a4c <pvPortMalloc>
 8004fb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fc6:	e005      	b.n	8004fd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fc8:	6978      	ldr	r0, [r7, #20]
 8004fca:	f001 fe0d 	bl	8006be8 <vPortFree>
 8004fce:	e001      	b.n	8004fd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d017      	beq.n	800500a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	9302      	str	r3, [sp, #8]
 8004fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f80e 	bl	800501a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ffe:	69f8      	ldr	r0, [r7, #28]
 8005000:	f000 f89c 	bl	800513c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005004:	2301      	movs	r3, #1
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e002      	b.n	8005010 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800500a:	f04f 33ff 	mov.w	r3, #4294967295
 800500e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005010:	69bb      	ldr	r3, [r7, #24]
	}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b088      	sub	sp, #32
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	461a      	mov	r2, r3
 8005032:	21a5      	movs	r1, #165	@ 0xa5
 8005034:	f001 ff18 	bl	8006e68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005042:	3b01      	subs	r3, #1
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f023 0307 	bic.w	r3, r3, #7
 8005050:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	617b      	str	r3, [r7, #20]
}
 800506e:	bf00      	nop
 8005070:	bf00      	nop
 8005072:	e7fd      	b.n	8005070 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01f      	beq.n	80050ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	e012      	b.n	80050a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	7819      	ldrb	r1, [r3, #0]
 8005088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	3334      	adds	r3, #52	@ 0x34
 8005090:	460a      	mov	r2, r1
 8005092:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d006      	beq.n	80050ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b0f      	cmp	r3, #15
 80050aa:	d9e9      	bls.n	8005080 <prvInitialiseNewTask+0x66>
 80050ac:	e000      	b.n	80050b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80050ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050b8:	e003      	b.n	80050c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	2b37      	cmp	r3, #55	@ 0x37
 80050c6:	d901      	bls.n	80050cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050c8:	2337      	movs	r3, #55	@ 0x37
 80050ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050da:	2200      	movs	r2, #0
 80050dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	3304      	adds	r3, #4
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff f92a 	bl	800433c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	3318      	adds	r3, #24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff f925 	bl	800433c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005106:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	68f9      	ldr	r1, [r7, #12]
 800511a:	69b8      	ldr	r0, [r7, #24]
 800511c:	f001 fa42 	bl	80065a4 <pxPortInitialiseStack>
 8005120:	4602      	mov	r2, r0
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005132:	bf00      	nop
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005144:	f001 fb60 	bl	8006808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005148:	4b2d      	ldr	r3, [pc, #180]	@ (8005200 <prvAddNewTaskToReadyList+0xc4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	4a2c      	ldr	r2, [pc, #176]	@ (8005200 <prvAddNewTaskToReadyList+0xc4>)
 8005150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005152:	4b2c      	ldr	r3, [pc, #176]	@ (8005204 <prvAddNewTaskToReadyList+0xc8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800515a:	4a2a      	ldr	r2, [pc, #168]	@ (8005204 <prvAddNewTaskToReadyList+0xc8>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005160:	4b27      	ldr	r3, [pc, #156]	@ (8005200 <prvAddNewTaskToReadyList+0xc4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d110      	bne.n	800518a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005168:	f000 fbe8 	bl	800593c <prvInitialiseTaskLists>
 800516c:	e00d      	b.n	800518a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800516e:	4b26      	ldr	r3, [pc, #152]	@ (8005208 <prvAddNewTaskToReadyList+0xcc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005176:	4b23      	ldr	r3, [pc, #140]	@ (8005204 <prvAddNewTaskToReadyList+0xc8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d802      	bhi.n	800518a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005184:	4a1f      	ldr	r2, [pc, #124]	@ (8005204 <prvAddNewTaskToReadyList+0xc8>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800518a:	4b20      	ldr	r3, [pc, #128]	@ (800520c <prvAddNewTaskToReadyList+0xd0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	4a1e      	ldr	r2, [pc, #120]	@ (800520c <prvAddNewTaskToReadyList+0xd0>)
 8005192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005194:	4b1d      	ldr	r3, [pc, #116]	@ (800520c <prvAddNewTaskToReadyList+0xd0>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <prvAddNewTaskToReadyList+0xd4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d903      	bls.n	80051b0 <prvAddNewTaskToReadyList+0x74>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	4a18      	ldr	r2, [pc, #96]	@ (8005210 <prvAddNewTaskToReadyList+0xd4>)
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <prvAddNewTaskToReadyList+0xd8>)
 80051be:	441a      	add	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f7ff f8c5 	bl	8004356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051cc:	f001 fb4e 	bl	800686c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <prvAddNewTaskToReadyList+0xcc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00e      	beq.n	80051f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <prvAddNewTaskToReadyList+0xc8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d207      	bcs.n	80051f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <prvAddNewTaskToReadyList+0xdc>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000d8c 	.word	0x20000d8c
 8005204:	200008b8 	.word	0x200008b8
 8005208:	20000d98 	.word	0x20000d98
 800520c:	20000da8 	.word	0x20000da8
 8005210:	20000d94 	.word	0x20000d94
 8005214:	200008bc 	.word	0x200008bc
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800522a:	463a      	mov	r2, r7
 800522c:	1d39      	adds	r1, r7, #4
 800522e:	f107 0308 	add.w	r3, r7, #8
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f82e 	bl	8004294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	9202      	str	r2, [sp, #8]
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	2300      	movs	r3, #0
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2300      	movs	r3, #0
 8005248:	460a      	mov	r2, r1
 800524a:	4922      	ldr	r1, [pc, #136]	@ (80052d4 <vTaskStartScheduler+0xb8>)
 800524c:	4822      	ldr	r0, [pc, #136]	@ (80052d8 <vTaskStartScheduler+0xbc>)
 800524e:	f7ff fe3f 	bl	8004ed0 <xTaskCreateStatic>
 8005252:	4603      	mov	r3, r0
 8005254:	4a21      	ldr	r2, [pc, #132]	@ (80052dc <vTaskStartScheduler+0xc0>)
 8005256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005258:	4b20      	ldr	r3, [pc, #128]	@ (80052dc <vTaskStartScheduler+0xc0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005260:	2301      	movs	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e001      	b.n	800526a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d102      	bne.n	8005276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005270:	f000 fe3e 	bl	8005ef0 <xTimerCreateTimerTask>
 8005274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d116      	bne.n	80052aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	613b      	str	r3, [r7, #16]
}
 800528e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005290:	4b13      	ldr	r3, [pc, #76]	@ (80052e0 <vTaskStartScheduler+0xc4>)
 8005292:	f04f 32ff 	mov.w	r2, #4294967295
 8005296:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005298:	4b12      	ldr	r3, [pc, #72]	@ (80052e4 <vTaskStartScheduler+0xc8>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800529e:	4b12      	ldr	r3, [pc, #72]	@ (80052e8 <vTaskStartScheduler+0xcc>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052a4:	f001 fa0c 	bl	80066c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052a8:	e00f      	b.n	80052ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d10b      	bne.n	80052ca <vTaskStartScheduler+0xae>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	60fb      	str	r3, [r7, #12]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <vTaskStartScheduler+0xaa>
}
 80052ca:	bf00      	nop
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	08007814 	.word	0x08007814
 80052d8:	0800590d 	.word	0x0800590d
 80052dc:	20000db0 	.word	0x20000db0
 80052e0:	20000dac 	.word	0x20000dac
 80052e4:	20000d98 	.word	0x20000d98
 80052e8:	20000d90 	.word	0x20000d90

080052ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052f0:	4b04      	ldr	r3, [pc, #16]	@ (8005304 <vTaskSuspendAll+0x18>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3301      	adds	r3, #1
 80052f6:	4a03      	ldr	r2, [pc, #12]	@ (8005304 <vTaskSuspendAll+0x18>)
 80052f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052fa:	bf00      	nop
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000db4 	.word	0x20000db4

08005308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005316:	4b42      	ldr	r3, [pc, #264]	@ (8005420 <xTaskResumeAll+0x118>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <xTaskResumeAll+0x2e>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	603b      	str	r3, [r7, #0]
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	e7fd      	b.n	8005332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005336:	f001 fa67 	bl	8006808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800533a:	4b39      	ldr	r3, [pc, #228]	@ (8005420 <xTaskResumeAll+0x118>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3b01      	subs	r3, #1
 8005340:	4a37      	ldr	r2, [pc, #220]	@ (8005420 <xTaskResumeAll+0x118>)
 8005342:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005344:	4b36      	ldr	r3, [pc, #216]	@ (8005420 <xTaskResumeAll+0x118>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d162      	bne.n	8005412 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800534c:	4b35      	ldr	r3, [pc, #212]	@ (8005424 <xTaskResumeAll+0x11c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d05e      	beq.n	8005412 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005354:	e02f      	b.n	80053b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005356:	4b34      	ldr	r3, [pc, #208]	@ (8005428 <xTaskResumeAll+0x120>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3318      	adds	r3, #24
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff f854 	bl	8004410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff f84f 	bl	8004410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <xTaskResumeAll+0x124>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d903      	bls.n	8005386 <xTaskResumeAll+0x7e>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	4a2a      	ldr	r2, [pc, #168]	@ (800542c <xTaskResumeAll+0x124>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4a27      	ldr	r2, [pc, #156]	@ (8005430 <xTaskResumeAll+0x128>)
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fe ffda 	bl	8004356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a6:	4b23      	ldr	r3, [pc, #140]	@ (8005434 <xTaskResumeAll+0x12c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d302      	bcc.n	80053b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80053b0:	4b21      	ldr	r3, [pc, #132]	@ (8005438 <xTaskResumeAll+0x130>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005428 <xTaskResumeAll+0x120>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1cb      	bne.n	8005356 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053c4:	f000 fb58 	bl	8005a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053c8:	4b1c      	ldr	r3, [pc, #112]	@ (800543c <xTaskResumeAll+0x134>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053d4:	f000 f846 	bl	8005464 <xTaskIncrementTick>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80053de:	4b16      	ldr	r3, [pc, #88]	@ (8005438 <xTaskResumeAll+0x130>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f1      	bne.n	80053d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80053f0:	4b12      	ldr	r3, [pc, #72]	@ (800543c <xTaskResumeAll+0x134>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053f6:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <xTaskResumeAll+0x130>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d009      	beq.n	8005412 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053fe:	2301      	movs	r3, #1
 8005400:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005402:	4b0f      	ldr	r3, [pc, #60]	@ (8005440 <xTaskResumeAll+0x138>)
 8005404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005412:	f001 fa2b 	bl	800686c <vPortExitCritical>

	return xAlreadyYielded;
 8005416:	68bb      	ldr	r3, [r7, #8]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20000db4 	.word	0x20000db4
 8005424:	20000d8c 	.word	0x20000d8c
 8005428:	20000d4c 	.word	0x20000d4c
 800542c:	20000d94 	.word	0x20000d94
 8005430:	200008bc 	.word	0x200008bc
 8005434:	200008b8 	.word	0x200008b8
 8005438:	20000da0 	.word	0x20000da0
 800543c:	20000d9c 	.word	0x20000d9c
 8005440:	e000ed04 	.word	0xe000ed04

08005444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800544a:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <xTaskGetTickCount+0x1c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005450:	687b      	ldr	r3, [r7, #4]
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000d90 	.word	0x20000d90

08005464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546e:	4b4f      	ldr	r3, [pc, #316]	@ (80055ac <xTaskIncrementTick+0x148>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 8090 	bne.w	8005598 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005478:	4b4d      	ldr	r3, [pc, #308]	@ (80055b0 <xTaskIncrementTick+0x14c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005480:	4a4b      	ldr	r2, [pc, #300]	@ (80055b0 <xTaskIncrementTick+0x14c>)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d121      	bne.n	80054d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800548c:	4b49      	ldr	r3, [pc, #292]	@ (80055b4 <xTaskIncrementTick+0x150>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	603b      	str	r3, [r7, #0]
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	e7fd      	b.n	80054aa <xTaskIncrementTick+0x46>
 80054ae:	4b41      	ldr	r3, [pc, #260]	@ (80055b4 <xTaskIncrementTick+0x150>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	4b40      	ldr	r3, [pc, #256]	@ (80055b8 <xTaskIncrementTick+0x154>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a3e      	ldr	r2, [pc, #248]	@ (80055b4 <xTaskIncrementTick+0x150>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4a3e      	ldr	r2, [pc, #248]	@ (80055b8 <xTaskIncrementTick+0x154>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b3e      	ldr	r3, [pc, #248]	@ (80055bc <xTaskIncrementTick+0x158>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	4a3c      	ldr	r2, [pc, #240]	@ (80055bc <xTaskIncrementTick+0x158>)
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	f000 fad4 	bl	8005a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054d0:	4b3b      	ldr	r3, [pc, #236]	@ (80055c0 <xTaskIncrementTick+0x15c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d349      	bcc.n	800556e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054da:	4b36      	ldr	r3, [pc, #216]	@ (80055b4 <xTaskIncrementTick+0x150>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e4:	4b36      	ldr	r3, [pc, #216]	@ (80055c0 <xTaskIncrementTick+0x15c>)
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ea:	601a      	str	r2, [r3, #0]
					break;
 80054ec:	e03f      	b.n	800556e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ee:	4b31      	ldr	r3, [pc, #196]	@ (80055b4 <xTaskIncrementTick+0x150>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d203      	bcs.n	800550e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005506:	4a2e      	ldr	r2, [pc, #184]	@ (80055c0 <xTaskIncrementTick+0x15c>)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800550c:	e02f      	b.n	800556e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3304      	adds	r3, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe ff7c 	bl	8004410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	3318      	adds	r3, #24
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe ff73 	bl	8004410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552e:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <xTaskIncrementTick+0x160>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d903      	bls.n	800553e <xTaskIncrementTick+0xda>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <xTaskIncrementTick+0x160>)
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4a1f      	ldr	r2, [pc, #124]	@ (80055c8 <xTaskIncrementTick+0x164>)
 800554c:	441a      	add	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f7fe fefe 	bl	8004356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555e:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <xTaskIncrementTick+0x168>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	429a      	cmp	r2, r3
 8005566:	d3b8      	bcc.n	80054da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556c:	e7b5      	b.n	80054da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800556e:	4b17      	ldr	r3, [pc, #92]	@ (80055cc <xTaskIncrementTick+0x168>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005574:	4914      	ldr	r1, [pc, #80]	@ (80055c8 <xTaskIncrementTick+0x164>)
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d901      	bls.n	800558a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800558a:	4b11      	ldr	r3, [pc, #68]	@ (80055d0 <xTaskIncrementTick+0x16c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005592:	2301      	movs	r3, #1
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e004      	b.n	80055a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005598:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <xTaskIncrementTick+0x170>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	4a0d      	ldr	r2, [pc, #52]	@ (80055d4 <xTaskIncrementTick+0x170>)
 80055a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055a2:	697b      	ldr	r3, [r7, #20]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000db4 	.word	0x20000db4
 80055b0:	20000d90 	.word	0x20000d90
 80055b4:	20000d44 	.word	0x20000d44
 80055b8:	20000d48 	.word	0x20000d48
 80055bc:	20000da4 	.word	0x20000da4
 80055c0:	20000dac 	.word	0x20000dac
 80055c4:	20000d94 	.word	0x20000d94
 80055c8:	200008bc 	.word	0x200008bc
 80055cc:	200008b8 	.word	0x200008b8
 80055d0:	20000da0 	.word	0x20000da0
 80055d4:	20000d9c 	.word	0x20000d9c

080055d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055de:	4b28      	ldr	r3, [pc, #160]	@ (8005680 <vTaskSwitchContext+0xa8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055e6:	4b27      	ldr	r3, [pc, #156]	@ (8005684 <vTaskSwitchContext+0xac>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055ec:	e042      	b.n	8005674 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80055ee:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <vTaskSwitchContext+0xac>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f4:	4b24      	ldr	r3, [pc, #144]	@ (8005688 <vTaskSwitchContext+0xb0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e011      	b.n	8005620 <vTaskSwitchContext+0x48>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <vTaskSwitchContext+0x42>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	607b      	str	r3, [r7, #4]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <vTaskSwitchContext+0x3e>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3b01      	subs	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	491a      	ldr	r1, [pc, #104]	@ (800568c <vTaskSwitchContext+0xb4>)
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0e3      	beq.n	80055fc <vTaskSwitchContext+0x24>
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a13      	ldr	r2, [pc, #76]	@ (800568c <vTaskSwitchContext+0xb4>)
 8005640:	4413      	add	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	3308      	adds	r3, #8
 8005656:	429a      	cmp	r2, r3
 8005658:	d104      	bne.n	8005664 <vTaskSwitchContext+0x8c>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	4a09      	ldr	r2, [pc, #36]	@ (8005690 <vTaskSwitchContext+0xb8>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4a06      	ldr	r2, [pc, #24]	@ (8005688 <vTaskSwitchContext+0xb0>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6013      	str	r3, [r2, #0]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	20000db4 	.word	0x20000db4
 8005684:	20000da0 	.word	0x20000da0
 8005688:	20000d94 	.word	0x20000d94
 800568c:	200008bc 	.word	0x200008bc
 8005690:	200008b8 	.word	0x200008b8

08005694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	60fb      	str	r3, [r7, #12]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056bc:	4b07      	ldr	r3, [pc, #28]	@ (80056dc <vTaskPlaceOnEventList+0x48>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3318      	adds	r3, #24
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fe fe6a 	bl	800439e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056ca:	2101      	movs	r1, #1
 80056cc:	6838      	ldr	r0, [r7, #0]
 80056ce:	f000 fbbb 	bl	8005e48 <prvAddCurrentTaskToDelayedList>
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200008b8 	.word	0x200008b8

080056e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	617b      	str	r3, [r7, #20]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800570a:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <vTaskPlaceOnEventListRestricted+0x54>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3318      	adds	r3, #24
 8005710:	4619      	mov	r1, r3
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7fe fe1f 	bl	8004356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
 8005722:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	68b8      	ldr	r0, [r7, #8]
 8005728:	f000 fb8e 	bl	8005e48 <prvAddCurrentTaskToDelayedList>
	}
 800572c:	bf00      	nop
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	200008b8 	.word	0x200008b8

08005738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	60fb      	str	r3, [r7, #12]
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3318      	adds	r3, #24
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fe50 	bl	8004410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005770:	4b1d      	ldr	r3, [pc, #116]	@ (80057e8 <xTaskRemoveFromEventList+0xb0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11d      	bne.n	80057b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fe47 	bl	8004410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	4b19      	ldr	r3, [pc, #100]	@ (80057ec <xTaskRemoveFromEventList+0xb4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d903      	bls.n	8005796 <xTaskRemoveFromEventList+0x5e>
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005792:	4a16      	ldr	r2, [pc, #88]	@ (80057ec <xTaskRemoveFromEventList+0xb4>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4a13      	ldr	r2, [pc, #76]	@ (80057f0 <xTaskRemoveFromEventList+0xb8>)
 80057a4:	441a      	add	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fe fdd2 	bl	8004356 <vListInsertEnd>
 80057b2:	e005      	b.n	80057c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	3318      	adds	r3, #24
 80057b8:	4619      	mov	r1, r3
 80057ba:	480e      	ldr	r0, [pc, #56]	@ (80057f4 <xTaskRemoveFromEventList+0xbc>)
 80057bc:	f7fe fdcb 	bl	8004356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <xTaskRemoveFromEventList+0xc0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d905      	bls.n	80057da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <xTaskRemoveFromEventList+0xc4>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e001      	b.n	80057de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000db4 	.word	0x20000db4
 80057ec:	20000d94 	.word	0x20000d94
 80057f0:	200008bc 	.word	0x200008bc
 80057f4:	20000d4c 	.word	0x20000d4c
 80057f8:	200008b8 	.word	0x200008b8
 80057fc:	20000da0 	.word	0x20000da0

08005800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005808:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <vTaskInternalSetTimeOutState+0x24>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <vTaskInternalSetTimeOutState+0x28>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	605a      	str	r2, [r3, #4]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	20000da4 	.word	0x20000da4
 8005828:	20000d90 	.word	0x20000d90

0800582c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10b      	bne.n	8005854 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	613b      	str	r3, [r7, #16]
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	e7fd      	b.n	8005850 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	60fb      	str	r3, [r7, #12]
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	e7fd      	b.n	800586e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005872:	f000 ffc9 	bl	8006808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005876:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <xTaskCheckForTimeOut+0xc0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d102      	bne.n	8005896 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e023      	b.n	80058de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <xTaskCheckForTimeOut+0xc4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d007      	beq.n	80058b2 <xTaskCheckForTimeOut+0x86>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	e015      	b.n	80058de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d20b      	bcs.n	80058d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad2      	subs	r2, r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ff99 	bl	8005800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e004      	b.n	80058de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058da:	2301      	movs	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058de:	f000 ffc5 	bl	800686c <vPortExitCritical>

	return xReturn;
 80058e2:	69fb      	ldr	r3, [r7, #28]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000d90 	.word	0x20000d90
 80058f0:	20000da4 	.word	0x20000da4

080058f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058f8:	4b03      	ldr	r3, [pc, #12]	@ (8005908 <vTaskMissedYield+0x14>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20000da0 	.word	0x20000da0

0800590c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005914:	f000 f852 	bl	80059bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005918:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <prvIdleTask+0x28>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d9f9      	bls.n	8005914 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005920:	4b05      	ldr	r3, [pc, #20]	@ (8005938 <prvIdleTask+0x2c>)
 8005922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005930:	e7f0      	b.n	8005914 <prvIdleTask+0x8>
 8005932:	bf00      	nop
 8005934:	200008bc 	.word	0x200008bc
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	e00c      	b.n	8005962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4a12      	ldr	r2, [pc, #72]	@ (800599c <prvInitialiseTaskLists+0x60>)
 8005954:	4413      	add	r3, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fcd0 	bl	80042fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3301      	adds	r3, #1
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b37      	cmp	r3, #55	@ 0x37
 8005966:	d9ef      	bls.n	8005948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005968:	480d      	ldr	r0, [pc, #52]	@ (80059a0 <prvInitialiseTaskLists+0x64>)
 800596a:	f7fe fcc7 	bl	80042fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800596e:	480d      	ldr	r0, [pc, #52]	@ (80059a4 <prvInitialiseTaskLists+0x68>)
 8005970:	f7fe fcc4 	bl	80042fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005974:	480c      	ldr	r0, [pc, #48]	@ (80059a8 <prvInitialiseTaskLists+0x6c>)
 8005976:	f7fe fcc1 	bl	80042fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800597a:	480c      	ldr	r0, [pc, #48]	@ (80059ac <prvInitialiseTaskLists+0x70>)
 800597c:	f7fe fcbe 	bl	80042fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005980:	480b      	ldr	r0, [pc, #44]	@ (80059b0 <prvInitialiseTaskLists+0x74>)
 8005982:	f7fe fcbb 	bl	80042fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005986:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <prvInitialiseTaskLists+0x78>)
 8005988:	4a05      	ldr	r2, [pc, #20]	@ (80059a0 <prvInitialiseTaskLists+0x64>)
 800598a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800598c:	4b0a      	ldr	r3, [pc, #40]	@ (80059b8 <prvInitialiseTaskLists+0x7c>)
 800598e:	4a05      	ldr	r2, [pc, #20]	@ (80059a4 <prvInitialiseTaskLists+0x68>)
 8005990:	601a      	str	r2, [r3, #0]
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200008bc 	.word	0x200008bc
 80059a0:	20000d1c 	.word	0x20000d1c
 80059a4:	20000d30 	.word	0x20000d30
 80059a8:	20000d4c 	.word	0x20000d4c
 80059ac:	20000d60 	.word	0x20000d60
 80059b0:	20000d78 	.word	0x20000d78
 80059b4:	20000d44 	.word	0x20000d44
 80059b8:	20000d48 	.word	0x20000d48

080059bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059c2:	e019      	b.n	80059f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059c4:	f000 ff20 	bl	8006808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c8:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <prvCheckTasksWaitingTermination+0x50>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fd1b 	bl	8004410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059da:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <prvCheckTasksWaitingTermination+0x54>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3b01      	subs	r3, #1
 80059e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005a10 <prvCheckTasksWaitingTermination+0x54>)
 80059e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ee:	f000 ff3d 	bl	800686c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f810 	bl	8005a18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f8:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e1      	bne.n	80059c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000d60 	.word	0x20000d60
 8005a10:	20000d8c 	.word	0x20000d8c
 8005a14:	20000d74 	.word	0x20000d74

08005a18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f8da 	bl	8006be8 <vPortFree>
				vPortFree( pxTCB );
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 f8d7 	bl	8006be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a3a:	e019      	b.n	8005a70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d103      	bne.n	8005a4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 f8ce 	bl	8006be8 <vPortFree>
	}
 8005a4c:	e010      	b.n	8005a70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d00b      	beq.n	8005a70 <prvDeleteTCB+0x58>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	60fb      	str	r3, [r7, #12]
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	e7fd      	b.n	8005a6c <prvDeleteTCB+0x54>
	}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab0 <prvResetNextTaskUnblockTime+0x38>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a90:	e008      	b.n	8005aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a92:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <prvResetNextTaskUnblockTime+0x38>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a04      	ldr	r2, [pc, #16]	@ (8005ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8005aa2:	6013      	str	r3, [r2, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000d44 	.word	0x20000d44
 8005ab4:	20000dac 	.word	0x20000dac

08005ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005abe:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <xTaskGetSchedulerState+0x34>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e008      	b.n	8005ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005acc:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <xTaskGetSchedulerState+0x38>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	607b      	str	r3, [r7, #4]
 8005ad8:	e001      	b.n	8005ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ade:	687b      	ldr	r3, [r7, #4]
	}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000d98 	.word	0x20000d98
 8005af0:	20000db4 	.word	0x20000db4

08005af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d058      	beq.n	8005bbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc8 <xTaskPriorityDisinherit+0xd4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d00b      	beq.n	8005b2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60bb      	str	r3, [r7, #8]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b50:	1e5a      	subs	r2, r3, #1
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d02c      	beq.n	8005bbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d128      	bne.n	8005bbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fc4e 	bl	8004410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bcc <xTaskPriorityDisinherit+0xd8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d903      	bls.n	8005b9c <xTaskPriorityDisinherit+0xa8>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	4a0c      	ldr	r2, [pc, #48]	@ (8005bcc <xTaskPriorityDisinherit+0xd8>)
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <xTaskPriorityDisinherit+0xdc>)
 8005baa:	441a      	add	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7fe fbcf 	bl	8004356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bbc:	697b      	ldr	r3, [r7, #20]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200008b8 	.word	0x200008b8
 8005bcc:	20000d94 	.word	0x20000d94
 8005bd0:	200008bc 	.word	0x200008bc

08005bd4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005be2:	f000 fe11 	bl	8006808 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005be6:	4b26      	ldr	r3, [pc, #152]	@ (8005c80 <xTaskNotifyWait+0xac>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d01a      	beq.n	8005c2a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005bf4:	4b22      	ldr	r3, [pc, #136]	@ (8005c80 <xTaskNotifyWait+0xac>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	43d2      	mvns	r2, r2
 8005bfe:	400a      	ands	r2, r1
 8005c00:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005c02:	4b1f      	ldr	r3, [pc, #124]	@ (8005c80 <xTaskNotifyWait+0xac>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c12:	2101      	movs	r1, #1
 8005c14:	6838      	ldr	r0, [r7, #0]
 8005c16:	f000 f917 	bl	8005e48 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005c84 <xTaskNotifyWait+0xb0>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005c2a:	f000 fe1f 	bl	800686c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005c2e:	f000 fdeb 	bl	8006808 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005c38:	4b11      	ldr	r3, [pc, #68]	@ (8005c80 <xTaskNotifyWait+0xac>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005c42:	4b0f      	ldr	r3, [pc, #60]	@ (8005c80 <xTaskNotifyWait+0xac>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d002      	beq.n	8005c56 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e008      	b.n	8005c68 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005c56:	4b0a      	ldr	r3, [pc, #40]	@ (8005c80 <xTaskNotifyWait+0xac>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	43d2      	mvns	r2, r2
 8005c60:	400a      	ands	r2, r1
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c68:	4b05      	ldr	r3, [pc, #20]	@ (8005c80 <xTaskNotifyWait+0xac>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8005c72:	f000 fdfb 	bl	800686c <vPortExitCritical>

		return xReturn;
 8005c76:	697b      	ldr	r3, [r7, #20]
	}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	200008b8 	.word	0x200008b8
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08e      	sub	sp, #56	@ 0x38
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	e7fd      	b.n	8005cb6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cba:	f000 fe85 	bl	80069c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8005cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8005cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	623a      	str	r2, [r7, #32]
 8005cd8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005cda:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d829      	bhi.n	8005d58 <xTaskGenericNotifyFromISR+0xd0>
 8005d04:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <xTaskGenericNotifyFromISR+0x84>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d7b 	.word	0x08005d7b
 8005d10:	08005d21 	.word	0x08005d21
 8005d14:	08005d2f 	.word	0x08005d2f
 8005d18:	08005d3b 	.word	0x08005d3b
 8005d1c:	08005d43 	.word	0x08005d43
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8005d2c:	e028      	b.n	8005d80 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8005d38:	e022      	b.n	8005d80 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8005d40:	e01e      	b.n	8005d80 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005d42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d003      	beq.n	8005d52 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005d50:	e016      	b.n	8005d80 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8005d56:	e013      	b.n	8005d80 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d60:	d00d      	beq.n	8005d7e <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	61bb      	str	r3, [r7, #24]
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <xTaskGenericNotifyFromISR+0xee>
					break;
 8005d7a:	bf00      	nop
 8005d7c:	e000      	b.n	8005d80 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8005d7e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005d80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d147      	bne.n	8005e18 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	617b      	str	r3, [r7, #20]
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005da8:	4b21      	ldr	r3, [pc, #132]	@ (8005e30 <xTaskGenericNotifyFromISR+0x1a8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d11d      	bne.n	8005dec <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	3304      	adds	r3, #4
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fb2b 	bl	8004410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <xTaskGenericNotifyFromISR+0x1ac>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d903      	bls.n	8005dce <xTaskGenericNotifyFromISR+0x146>
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dca:	4a1a      	ldr	r2, [pc, #104]	@ (8005e34 <xTaskGenericNotifyFromISR+0x1ac>)
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <xTaskGenericNotifyFromISR+0x1b0>)
 8005ddc:	441a      	add	r2, r3
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	3304      	adds	r3, #4
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7fe fab6 	bl	8004356 <vListInsertEnd>
 8005dea:	e005      	b.n	8005df8 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dee:	3318      	adds	r3, #24
 8005df0:	4619      	mov	r1, r3
 8005df2:	4812      	ldr	r0, [pc, #72]	@ (8005e3c <xTaskGenericNotifyFromISR+0x1b4>)
 8005df4:	f7fe faaf 	bl	8004356 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dfc:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <xTaskGenericNotifyFromISR+0x1b8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d908      	bls.n	8005e18 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005e12:	4b0c      	ldr	r3, [pc, #48]	@ (8005e44 <xTaskGenericNotifyFromISR+0x1bc>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f383 8811 	msr	BASEPRI, r3
}
 8005e22:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3738      	adds	r7, #56	@ 0x38
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000db4 	.word	0x20000db4
 8005e34:	20000d94 	.word	0x20000d94
 8005e38:	200008bc 	.word	0x200008bc
 8005e3c:	20000d4c 	.word	0x20000d4c
 8005e40:	200008b8 	.word	0x200008b8
 8005e44:	20000da0 	.word	0x20000da0

08005e48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e52:	4b21      	ldr	r3, [pc, #132]	@ (8005ed8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e58:	4b20      	ldr	r3, [pc, #128]	@ (8005edc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe fad6 	bl	8004410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d10a      	bne.n	8005e82 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e72:	4b1a      	ldr	r3, [pc, #104]	@ (8005edc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4819      	ldr	r0, [pc, #100]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e7c:	f7fe fa6b 	bl	8004356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e80:	e026      	b.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e8a:	4b14      	ldr	r3, [pc, #80]	@ (8005edc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d209      	bcs.n	8005eae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7fe fa79 	bl	800439e <vListInsert>
}
 8005eac:	e010      	b.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f7fe fa6f 	bl	800439e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8005eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d202      	bcs.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005eca:	4a08      	ldr	r2, [pc, #32]	@ (8005eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6013      	str	r3, [r2, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000d90 	.word	0x20000d90
 8005edc:	200008b8 	.word	0x200008b8
 8005ee0:	20000d78 	.word	0x20000d78
 8005ee4:	20000d48 	.word	0x20000d48
 8005ee8:	20000d44 	.word	0x20000d44
 8005eec:	20000dac 	.word	0x20000dac

08005ef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	@ 0x28
 8005ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005efa:	f000 fb13 	bl	8006524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005efe:	4b1d      	ldr	r3, [pc, #116]	@ (8005f74 <xTimerCreateTimerTask+0x84>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d021      	beq.n	8005f4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f0e:	1d3a      	adds	r2, r7, #4
 8005f10:	f107 0108 	add.w	r1, r7, #8
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe f9d5 	bl	80042c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	9202      	str	r2, [sp, #8]
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	2302      	movs	r3, #2
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	460a      	mov	r2, r1
 8005f30:	4911      	ldr	r1, [pc, #68]	@ (8005f78 <xTimerCreateTimerTask+0x88>)
 8005f32:	4812      	ldr	r0, [pc, #72]	@ (8005f7c <xTimerCreateTimerTask+0x8c>)
 8005f34:	f7fe ffcc 	bl	8004ed0 <xTaskCreateStatic>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	4a11      	ldr	r2, [pc, #68]	@ (8005f80 <xTimerCreateTimerTask+0x90>)
 8005f3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f3e:	4b10      	ldr	r3, [pc, #64]	@ (8005f80 <xTimerCreateTimerTask+0x90>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f46:	2301      	movs	r3, #1
 8005f48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f68:	697b      	ldr	r3, [r7, #20]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000de8 	.word	0x20000de8
 8005f78:	0800781c 	.word	0x0800781c
 8005f7c:	080060bd 	.word	0x080060bd
 8005f80:	20000dec 	.word	0x20000dec

08005f84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	@ 0x28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10b      	bne.n	8005fb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	623b      	str	r3, [r7, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fb4:	4b19      	ldr	r3, [pc, #100]	@ (800601c <xTimerGenericCommand+0x98>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d02a      	beq.n	8006012 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	dc18      	bgt.n	8006000 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fce:	f7ff fd73 	bl	8005ab8 <xTaskGetSchedulerState>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d109      	bne.n	8005fec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fd8:	4b10      	ldr	r3, [pc, #64]	@ (800601c <xTimerGenericCommand+0x98>)
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	f107 0110 	add.w	r1, r7, #16
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe4:	f7fe fb84 	bl	80046f0 <xQueueGenericSend>
 8005fe8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fea:	e012      	b.n	8006012 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <xTimerGenericCommand+0x98>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	f107 0110 	add.w	r1, r7, #16
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f7fe fb7a 	bl	80046f0 <xQueueGenericSend>
 8005ffc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ffe:	e008      	b.n	8006012 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006000:	4b06      	ldr	r3, [pc, #24]	@ (800601c <xTimerGenericCommand+0x98>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	f107 0110 	add.w	r1, r7, #16
 8006008:	2300      	movs	r3, #0
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	f7fe fc72 	bl	80048f4 <xQueueGenericSendFromISR>
 8006010:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006014:	4618      	mov	r0, r3
 8006016:	3728      	adds	r7, #40	@ 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000de8 	.word	0x20000de8

08006020 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af02      	add	r7, sp, #8
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602a:	4b23      	ldr	r3, [pc, #140]	@ (80060b8 <prvProcessExpiredTimer+0x98>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	3304      	adds	r3, #4
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe f9e9 	bl	8004410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d023      	beq.n	8006094 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	18d1      	adds	r1, r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	6978      	ldr	r0, [r7, #20]
 800605a:	f000 f8d5 	bl	8006208 <prvInsertTimerInActiveList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d020      	beq.n	80060a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006064:	2300      	movs	r3, #0
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	2300      	movs	r3, #0
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	2100      	movs	r1, #0
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f7ff ff88 	bl	8005f84 <xTimerGenericCommand>
 8006074:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d114      	bne.n	80060a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60fb      	str	r3, [r7, #12]
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	4798      	blx	r3
}
 80060ae:	bf00      	nop
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000de0 	.word	0x20000de0

080060bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f859 	bl	8006180 <prvGetNextExpireTime>
 80060ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4619      	mov	r1, r3
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f805 	bl	80060e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060da:	f000 f8d7 	bl	800628c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060de:	bf00      	nop
 80060e0:	e7f0      	b.n	80060c4 <prvTimerTask+0x8>
	...

080060e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060ee:	f7ff f8fd 	bl	80052ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060f2:	f107 0308 	add.w	r3, r7, #8
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f866 	bl	80061c8 <prvSampleTimeNow>
 80060fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d130      	bne.n	8006166 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <prvProcessTimerOrBlockTask+0x3c>
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	429a      	cmp	r2, r3
 8006110:	d806      	bhi.n	8006120 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006112:	f7ff f8f9 	bl	8005308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff ff81 	bl	8006020 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800611e:	e024      	b.n	800616a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006126:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <prvProcessTimerOrBlockTask+0x90>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <prvProcessTimerOrBlockTask+0x50>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <prvProcessTimerOrBlockTask+0x52>
 8006134:	2300      	movs	r3, #0
 8006136:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006138:	4b0f      	ldr	r3, [pc, #60]	@ (8006178 <prvProcessTimerOrBlockTask+0x94>)
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	f7fe fe8f 	bl	8004e68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800614a:	f7ff f8dd 	bl	8005308 <xTaskResumeAll>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006154:	4b09      	ldr	r3, [pc, #36]	@ (800617c <prvProcessTimerOrBlockTask+0x98>)
 8006156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	f3bf 8f6f 	isb	sy
}
 8006164:	e001      	b.n	800616a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006166:	f7ff f8cf 	bl	8005308 <xTaskResumeAll>
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000de4 	.word	0x20000de4
 8006178:	20000de8 	.word	0x20000de8
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006188:	4b0e      	ldr	r3, [pc, #56]	@ (80061c4 <prvGetNextExpireTime+0x44>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <prvGetNextExpireTime+0x16>
 8006192:	2201      	movs	r2, #1
 8006194:	e000      	b.n	8006198 <prvGetNextExpireTime+0x18>
 8006196:	2200      	movs	r2, #0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061a4:	4b07      	ldr	r3, [pc, #28]	@ (80061c4 <prvGetNextExpireTime+0x44>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e001      	b.n	80061b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061b4:	68fb      	ldr	r3, [r7, #12]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20000de0 	.word	0x20000de0

080061c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061d0:	f7ff f938 	bl	8005444 <xTaskGetTickCount>
 80061d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <prvSampleTimeNow+0x3c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d205      	bcs.n	80061ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061e0:	f000 f93a 	bl	8006458 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061f2:	4a04      	ldr	r2, [pc, #16]	@ (8006204 <prvSampleTimeNow+0x3c>)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061f8:	68fb      	ldr	r3, [r7, #12]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000df0 	.word	0x20000df0

08006208 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d812      	bhi.n	8006254 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	429a      	cmp	r2, r3
 800623a:	d302      	bcc.n	8006242 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e01b      	b.n	800627a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006242:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <prvInsertTimerInActiveList+0x7c>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3304      	adds	r3, #4
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f7fe f8a6 	bl	800439e <vListInsert>
 8006252:	e012      	b.n	800627a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d206      	bcs.n	800626a <prvInsertTimerInActiveList+0x62>
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e007      	b.n	800627a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800626a:	4b07      	ldr	r3, [pc, #28]	@ (8006288 <prvInsertTimerInActiveList+0x80>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3304      	adds	r3, #4
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f7fe f892 	bl	800439e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800627a:	697b      	ldr	r3, [r7, #20]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000de4 	.word	0x20000de4
 8006288:	20000de0 	.word	0x20000de0

0800628c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08e      	sub	sp, #56	@ 0x38
 8006290:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006292:	e0ce      	b.n	8006432 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da19      	bge.n	80062ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800629a:	1d3b      	adds	r3, r7, #4
 800629c:	3304      	adds	r3, #4
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <prvProcessReceivedCommands+0x32>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	61fb      	str	r3, [r7, #28]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c4:	6850      	ldr	r0, [r2, #4]
 80062c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c8:	6892      	ldr	r2, [r2, #8]
 80062ca:	4611      	mov	r1, r2
 80062cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f2c0 80ae 	blt.w	8006432 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e4:	3304      	adds	r3, #4
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe f892 	bl	8004410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062ec:	463b      	mov	r3, r7
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff ff6a 	bl	80061c8 <prvSampleTimeNow>
 80062f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b09      	cmp	r3, #9
 80062fa:	f200 8097 	bhi.w	800642c <prvProcessReceivedCommands+0x1a0>
 80062fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <prvProcessReceivedCommands+0x78>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	0800632d 	.word	0x0800632d
 8006308:	0800632d 	.word	0x0800632d
 800630c:	0800632d 	.word	0x0800632d
 8006310:	080063a3 	.word	0x080063a3
 8006314:	080063b7 	.word	0x080063b7
 8006318:	08006403 	.word	0x08006403
 800631c:	0800632d 	.word	0x0800632d
 8006320:	0800632d 	.word	0x0800632d
 8006324:	080063a3 	.word	0x080063a3
 8006328:	080063b7 	.word	0x080063b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	18d1      	adds	r1, r2, r3
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800634c:	f7ff ff5c 	bl	8006208 <prvInsertTimerInActiveList>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d06c      	beq.n	8006430 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800635c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d061      	beq.n	8006430 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	441a      	add	r2, r3
 8006374:	2300      	movs	r3, #0
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	2100      	movs	r1, #0
 800637c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800637e:	f7ff fe01 	bl	8005f84 <xTimerGenericCommand>
 8006382:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d152      	bne.n	8006430 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	61bb      	str	r3, [r7, #24]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063b4:	e03d      	b.n	8006432 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	617b      	str	r3, [r7, #20]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	18d1      	adds	r1, r2, r3
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063fc:	f7ff ff04 	bl	8006208 <prvInsertTimerInActiveList>
					break;
 8006400:	e017      	b.n	8006432 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d103      	bne.n	8006418 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006412:	f000 fbe9 	bl	8006be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006416:	e00c      	b.n	8006432 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800642a:	e002      	b.n	8006432 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <prvProcessReceivedCommands+0x1a6>
					break;
 8006430:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006432:	4b08      	ldr	r3, [pc, #32]	@ (8006454 <prvProcessReceivedCommands+0x1c8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	1d39      	adds	r1, r7, #4
 8006438:	2200      	movs	r2, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe faf8 	bl	8004a30 <xQueueReceive>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	f47f af26 	bne.w	8006294 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	3730      	adds	r7, #48	@ 0x30
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000de8 	.word	0x20000de8

08006458 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800645e:	e049      	b.n	80064f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006460:	4b2e      	ldr	r3, [pc, #184]	@ (800651c <prvSwitchTimerLists+0xc4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646a:	4b2c      	ldr	r3, [pc, #176]	@ (800651c <prvSwitchTimerLists+0xc4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3304      	adds	r3, #4
 8006478:	4618      	mov	r0, r3
 800647a:	f7fd ffc9 	bl	8004410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d02f      	beq.n	80064f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4413      	add	r3, r2
 800649c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d90e      	bls.n	80064c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064b2:	4b1a      	ldr	r3, [pc, #104]	@ (800651c <prvSwitchTimerLists+0xc4>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7fd ff6e 	bl	800439e <vListInsert>
 80064c2:	e017      	b.n	80064f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064c4:	2300      	movs	r3, #0
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2300      	movs	r3, #0
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	2100      	movs	r1, #0
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fd58 	bl	8005f84 <xTimerGenericCommand>
 80064d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	603b      	str	r3, [r7, #0]
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064f4:	4b09      	ldr	r3, [pc, #36]	@ (800651c <prvSwitchTimerLists+0xc4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1b0      	bne.n	8006460 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064fe:	4b07      	ldr	r3, [pc, #28]	@ (800651c <prvSwitchTimerLists+0xc4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006504:	4b06      	ldr	r3, [pc, #24]	@ (8006520 <prvSwitchTimerLists+0xc8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a04      	ldr	r2, [pc, #16]	@ (800651c <prvSwitchTimerLists+0xc4>)
 800650a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800650c:	4a04      	ldr	r2, [pc, #16]	@ (8006520 <prvSwitchTimerLists+0xc8>)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6013      	str	r3, [r2, #0]
}
 8006512:	bf00      	nop
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000de0 	.word	0x20000de0
 8006520:	20000de4 	.word	0x20000de4

08006524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800652a:	f000 f96d 	bl	8006808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800652e:	4b15      	ldr	r3, [pc, #84]	@ (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d120      	bne.n	8006578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006536:	4814      	ldr	r0, [pc, #80]	@ (8006588 <prvCheckForValidListAndQueue+0x64>)
 8006538:	f7fd fee0 	bl	80042fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800653c:	4813      	ldr	r0, [pc, #76]	@ (800658c <prvCheckForValidListAndQueue+0x68>)
 800653e:	f7fd fedd 	bl	80042fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006542:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <prvCheckForValidListAndQueue+0x6c>)
 8006544:	4a10      	ldr	r2, [pc, #64]	@ (8006588 <prvCheckForValidListAndQueue+0x64>)
 8006546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006548:	4b12      	ldr	r3, [pc, #72]	@ (8006594 <prvCheckForValidListAndQueue+0x70>)
 800654a:	4a10      	ldr	r2, [pc, #64]	@ (800658c <prvCheckForValidListAndQueue+0x68>)
 800654c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800654e:	2300      	movs	r3, #0
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4b11      	ldr	r3, [pc, #68]	@ (8006598 <prvCheckForValidListAndQueue+0x74>)
 8006554:	4a11      	ldr	r2, [pc, #68]	@ (800659c <prvCheckForValidListAndQueue+0x78>)
 8006556:	2110      	movs	r1, #16
 8006558:	200a      	movs	r0, #10
 800655a:	f7fd ffed 	bl	8004538 <xQueueGenericCreateStatic>
 800655e:	4603      	mov	r3, r0
 8006560:	4a08      	ldr	r2, [pc, #32]	@ (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006564:	4b07      	ldr	r3, [pc, #28]	@ (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800656c:	4b05      	ldr	r3, [pc, #20]	@ (8006584 <prvCheckForValidListAndQueue+0x60>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	490b      	ldr	r1, [pc, #44]	@ (80065a0 <prvCheckForValidListAndQueue+0x7c>)
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fc4e 	bl	8004e14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006578:	f000 f978 	bl	800686c <vPortExitCritical>
}
 800657c:	bf00      	nop
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000de8 	.word	0x20000de8
 8006588:	20000db8 	.word	0x20000db8
 800658c:	20000dcc 	.word	0x20000dcc
 8006590:	20000de0 	.word	0x20000de0
 8006594:	20000de4 	.word	0x20000de4
 8006598:	20000e94 	.word	0x20000e94
 800659c:	20000df4 	.word	0x20000df4
 80065a0:	08007824 	.word	0x08007824

080065a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3b04      	subs	r3, #4
 80065b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3b04      	subs	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006608 <pxPortInitialiseStack+0x64>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3b14      	subs	r3, #20
 80065de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b04      	subs	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f06f 0202 	mvn.w	r2, #2
 80065f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3b20      	subs	r3, #32
 80065f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	0800660d 	.word	0x0800660d

0800660c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006616:	4b13      	ldr	r3, [pc, #76]	@ (8006664 <prvTaskExitError+0x58>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d00b      	beq.n	8006638 <prvTaskExitError+0x2c>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	60fb      	str	r3, [r7, #12]
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	e7fd      	b.n	8006634 <prvTaskExitError+0x28>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	60bb      	str	r3, [r7, #8]
}
 800664a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800664c:	bf00      	nop
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0fc      	beq.n	800664e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c
	...

08006670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <pxCurrentTCBConst2>)
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	6808      	ldr	r0, [r1, #0]
 8006676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	f380 8809 	msr	PSP, r0
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	4770      	bx	lr
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst2>:
 8006690:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006698:	4808      	ldr	r0, [pc, #32]	@ (80066bc <prvPortStartFirstTask+0x24>)
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f380 8808 	msr	MSP, r0
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8814 	msr	CONTROL, r0
 80066aa:	b662      	cpsie	i
 80066ac:	b661      	cpsie	f
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	df00      	svc	0
 80066b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ba:	bf00      	nop
 80066bc:	e000ed08 	.word	0xe000ed08

080066c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066c6:	4b47      	ldr	r3, [pc, #284]	@ (80067e4 <xPortStartScheduler+0x124>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a47      	ldr	r2, [pc, #284]	@ (80067e8 <xPortStartScheduler+0x128>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10b      	bne.n	80066e8 <xPortStartScheduler+0x28>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066e8:	4b3e      	ldr	r3, [pc, #248]	@ (80067e4 <xPortStartScheduler+0x124>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3f      	ldr	r2, [pc, #252]	@ (80067ec <xPortStartScheduler+0x12c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10b      	bne.n	800670a <xPortStartScheduler+0x4a>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60fb      	str	r3, [r7, #12]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800670a:	4b39      	ldr	r3, [pc, #228]	@ (80067f0 <xPortStartScheduler+0x130>)
 800670c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	22ff      	movs	r2, #255	@ 0xff
 800671a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4b31      	ldr	r3, [pc, #196]	@ (80067f4 <xPortStartScheduler+0x134>)
 8006730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006732:	4b31      	ldr	r3, [pc, #196]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006734:	2207      	movs	r2, #7
 8006736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006738:	e009      	b.n	800674e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800673a:	4b2f      	ldr	r3, [pc, #188]	@ (80067f8 <xPortStartScheduler+0x138>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3b01      	subs	r3, #1
 8006740:	4a2d      	ldr	r2, [pc, #180]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006756:	2b80      	cmp	r3, #128	@ 0x80
 8006758:	d0ef      	beq.n	800673a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800675a:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <xPortStartScheduler+0x138>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1c3 0307 	rsb	r3, r3, #7
 8006762:	2b04      	cmp	r3, #4
 8006764:	d00b      	beq.n	800677e <xPortStartScheduler+0xbe>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60bb      	str	r3, [r7, #8]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800677e:	4b1e      	ldr	r3, [pc, #120]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006788:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <xPortStartScheduler+0x138>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006790:	4a19      	ldr	r2, [pc, #100]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800679c:	4b17      	ldr	r3, [pc, #92]	@ (80067fc <xPortStartScheduler+0x13c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a16      	ldr	r2, [pc, #88]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067a8:	4b14      	ldr	r3, [pc, #80]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a13      	ldr	r2, [pc, #76]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067b4:	f000 f8da 	bl	800696c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067b8:	4b11      	ldr	r3, [pc, #68]	@ (8006800 <xPortStartScheduler+0x140>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067be:	f000 f8f9 	bl	80069b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067c2:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <xPortStartScheduler+0x144>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006804 <xPortStartScheduler+0x144>)
 80067c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067ce:	f7ff ff63 	bl	8006698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067d2:	f7fe ff01 	bl	80055d8 <vTaskSwitchContext>
	prvTaskExitError();
 80067d6:	f7ff ff19 	bl	800660c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	e000ed00 	.word	0xe000ed00
 80067e8:	410fc271 	.word	0x410fc271
 80067ec:	410fc270 	.word	0x410fc270
 80067f0:	e000e400 	.word	0xe000e400
 80067f4:	20000ee4 	.word	0x20000ee4
 80067f8:	20000ee8 	.word	0x20000ee8
 80067fc:	e000ed20 	.word	0xe000ed20
 8006800:	2000000c 	.word	0x2000000c
 8006804:	e000ef34 	.word	0xe000ef34

08006808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006822:	4b10      	ldr	r3, [pc, #64]	@ (8006864 <vPortEnterCritical+0x5c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3301      	adds	r3, #1
 8006828:	4a0e      	ldr	r2, [pc, #56]	@ (8006864 <vPortEnterCritical+0x5c>)
 800682a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800682c:	4b0d      	ldr	r3, [pc, #52]	@ (8006864 <vPortEnterCritical+0x5c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d110      	bne.n	8006856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <vPortEnterCritical+0x60>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <vPortEnterCritical+0x4e>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	603b      	str	r3, [r7, #0]
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <vPortEnterCritical+0x4a>
	}
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000000c 	.word	0x2000000c
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006872:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <vPortExitCritical+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <vPortExitCritical+0x26>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	607b      	str	r3, [r7, #4]
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	e7fd      	b.n	800688e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006892:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <vPortExitCritical+0x50>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3b01      	subs	r3, #1
 8006898:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <vPortExitCritical+0x50>)
 800689a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800689c:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <vPortExitCritical+0x50>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <vPortExitCritical+0x44>
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	2000000c 	.word	0x2000000c

080068c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068c0:	f3ef 8009 	mrs	r0, PSP
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4b15      	ldr	r3, [pc, #84]	@ (8006920 <pxCurrentTCBConst>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f01e 0f10 	tst.w	lr, #16
 80068d0:	bf08      	it	eq
 80068d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	6010      	str	r0, [r2, #0]
 80068dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068e4:	f380 8811 	msr	BASEPRI, r0
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f7fe fe72 	bl	80055d8 <vTaskSwitchContext>
 80068f4:	f04f 0000 	mov.w	r0, #0
 80068f8:	f380 8811 	msr	BASEPRI, r0
 80068fc:	bc09      	pop	{r0, r3}
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	6808      	ldr	r0, [r1, #0]
 8006902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	f01e 0f10 	tst.w	lr, #16
 800690a:	bf08      	it	eq
 800690c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006910:	f380 8809 	msr	PSP, r0
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w

08006920 <pxCurrentTCBConst>:
 8006920:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop

08006928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006942:	f7fe fd8f 	bl	8005464 <xTaskIncrementTick>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <xPortSysTickHandler+0x40>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f383 8811 	msr	BASEPRI, r3
}
 800695e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <vPortSetupTimerInterrupt+0x38>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800697c:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <vPortSetupTimerInterrupt+0x3c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <vPortSetupTimerInterrupt+0x40>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	4a09      	ldr	r2, [pc, #36]	@ (80069b0 <vPortSetupTimerInterrupt+0x44>)
 800698a:	3b01      	subs	r3, #1
 800698c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800698e:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	e000e010 	.word	0xe000e010
 80069a4:	e000e018 	.word	0xe000e018
 80069a8:	20000000 	.word	0x20000000
 80069ac:	10624dd3 	.word	0x10624dd3
 80069b0:	e000e014 	.word	0xe000e014

080069b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069c4 <vPortEnableVFP+0x10>
 80069b8:	6801      	ldr	r1, [r0, #0]
 80069ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069be:	6001      	str	r1, [r0, #0]
 80069c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069c2:	bf00      	nop
 80069c4:	e000ed88 	.word	0xe000ed88

080069c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ce:	f3ef 8305 	mrs	r3, IPSR
 80069d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d915      	bls.n	8006a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069da:	4a18      	ldr	r2, [pc, #96]	@ (8006a3c <vPortValidateInterruptPriority+0x74>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069e4:	4b16      	ldr	r3, [pc, #88]	@ (8006a40 <vPortValidateInterruptPriority+0x78>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	7afa      	ldrb	r2, [r7, #11]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d20b      	bcs.n	8006a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a06:	4b0f      	ldr	r3, [pc, #60]	@ (8006a44 <vPortValidateInterruptPriority+0x7c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a48 <vPortValidateInterruptPriority+0x80>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90b      	bls.n	8006a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	603b      	str	r3, [r7, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <vPortValidateInterruptPriority+0x62>
	}
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	e000e3f0 	.word	0xe000e3f0
 8006a40:	20000ee4 	.word	0x20000ee4
 8006a44:	e000ed0c 	.word	0xe000ed0c
 8006a48:	20000ee8 	.word	0x20000ee8

08006a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	@ 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a58:	f7fe fc48 	bl	80052ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8006bd0 <pvPortMalloc+0x184>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a64:	f000 f924 	bl	8006cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a68:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd4 <pvPortMalloc+0x188>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 8095 	bne.w	8006ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01e      	beq.n	8006aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f023 0307 	bic.w	r3, r3, #7
 8006a94:	3308      	adds	r3, #8
 8006a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <pvPortMalloc+0x6e>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	617b      	str	r3, [r7, #20]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d06f      	beq.n	8006ba0 <pvPortMalloc+0x154>
 8006ac0:	4b45      	ldr	r3, [pc, #276]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d86a      	bhi.n	8006ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aca:	4b44      	ldr	r3, [pc, #272]	@ (8006bdc <pvPortMalloc+0x190>)
 8006acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ace:	4b43      	ldr	r3, [pc, #268]	@ (8006bdc <pvPortMalloc+0x190>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ad4:	e004      	b.n	8006ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d903      	bls.n	8006af2 <pvPortMalloc+0xa6>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f1      	bne.n	8006ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006af2:	4b37      	ldr	r3, [pc, #220]	@ (8006bd0 <pvPortMalloc+0x184>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d051      	beq.n	8006ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2208      	movs	r2, #8
 8006b02:	4413      	add	r3, r2
 8006b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	1ad2      	subs	r2, r2, r3
 8006b16:	2308      	movs	r3, #8
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d920      	bls.n	8006b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <pvPortMalloc+0xfc>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b5a:	69b8      	ldr	r0, [r7, #24]
 8006b5c:	f000 f90a 	bl	8006d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b60:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b1b      	ldr	r3, [pc, #108]	@ (8006be0 <pvPortMalloc+0x194>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d203      	bcs.n	8006b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b7a:	4b17      	ldr	r3, [pc, #92]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a18      	ldr	r2, [pc, #96]	@ (8006be0 <pvPortMalloc+0x194>)
 8006b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4b13      	ldr	r3, [pc, #76]	@ (8006bd4 <pvPortMalloc+0x188>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b96:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <pvPortMalloc+0x198>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	4a11      	ldr	r2, [pc, #68]	@ (8006be4 <pvPortMalloc+0x198>)
 8006b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ba0:	f7fe fbb2 	bl	8005308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	60fb      	str	r3, [r7, #12]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3728      	adds	r7, #40	@ 0x28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20004af4 	.word	0x20004af4
 8006bd4:	20004b08 	.word	0x20004b08
 8006bd8:	20004af8 	.word	0x20004af8
 8006bdc:	20004aec 	.word	0x20004aec
 8006be0:	20004afc 	.word	0x20004afc
 8006be4:	20004b00 	.word	0x20004b00

08006be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d04f      	beq.n	8006c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	425b      	negs	r3, r3
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4413      	add	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	4b25      	ldr	r3, [pc, #148]	@ (8006ca4 <vPortFree+0xbc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <vPortFree+0x46>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60fb      	str	r3, [r7, #12]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <vPortFree+0x66>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	60bb      	str	r3, [r7, #8]
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	e7fd      	b.n	8006c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	4b14      	ldr	r3, [pc, #80]	@ (8006ca4 <vPortFree+0xbc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01e      	beq.n	8006c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11a      	bne.n	8006c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca4 <vPortFree+0xbc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	401a      	ands	r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c74:	f7fe fb3a 	bl	80052ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <vPortFree+0xc0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4413      	add	r3, r2
 8006c82:	4a09      	ldr	r2, [pc, #36]	@ (8006ca8 <vPortFree+0xc0>)
 8006c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c86:	6938      	ldr	r0, [r7, #16]
 8006c88:	f000 f874 	bl	8006d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c8c:	4b07      	ldr	r3, [pc, #28]	@ (8006cac <vPortFree+0xc4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	4a06      	ldr	r2, [pc, #24]	@ (8006cac <vPortFree+0xc4>)
 8006c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c96:	f7fe fb37 	bl	8005308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20004b08 	.word	0x20004b08
 8006ca8:	20004af8 	.word	0x20004af8
 8006cac:	20004b04 	.word	0x20004b04

08006cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cbc:	4b27      	ldr	r3, [pc, #156]	@ (8006d5c <prvHeapInit+0xac>)
 8006cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3307      	adds	r3, #7
 8006cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0307 	bic.w	r3, r3, #7
 8006cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <prvHeapInit+0xac>)
 8006ce0:	4413      	add	r3, r2
 8006ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <prvHeapInit+0xb0>)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cee:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <prvHeapInit+0xb0>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a15      	ldr	r2, [pc, #84]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d12:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d1a:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	1ad2      	subs	r2, r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d30:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d68 <prvHeapInit+0xb8>)
 8006d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a09      	ldr	r2, [pc, #36]	@ (8006d6c <prvHeapInit+0xbc>)
 8006d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d48:	4b09      	ldr	r3, [pc, #36]	@ (8006d70 <prvHeapInit+0xc0>)
 8006d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d4e:	601a      	str	r2, [r3, #0]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000eec 	.word	0x20000eec
 8006d60:	20004aec 	.word	0x20004aec
 8006d64:	20004af4 	.word	0x20004af4
 8006d68:	20004afc 	.word	0x20004afc
 8006d6c:	20004af8 	.word	0x20004af8
 8006d70:	20004b08 	.word	0x20004b08

08006d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d7c:	4b28      	ldr	r3, [pc, #160]	@ (8006e20 <prvInsertBlockIntoFreeList+0xac>)
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e002      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x14>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d8f7      	bhi.n	8006d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d108      	bne.n	8006db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	441a      	add	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d118      	bne.n	8006dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b15      	ldr	r3, [pc, #84]	@ (8006e24 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d00d      	beq.n	8006df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	e008      	b.n	8006e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006df2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <prvInsertBlockIntoFreeList+0xb0>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	e003      	b.n	8006e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d002      	beq.n	8006e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20004aec 	.word	0x20004aec
 8006e24:	20004af4 	.word	0x20004af4

08006e28 <siprintf>:
 8006e28:	b40e      	push	{r1, r2, r3}
 8006e2a:	b500      	push	{lr}
 8006e2c:	b09c      	sub	sp, #112	@ 0x70
 8006e2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e30:	9002      	str	r0, [sp, #8]
 8006e32:	9006      	str	r0, [sp, #24]
 8006e34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e38:	4809      	ldr	r0, [pc, #36]	@ (8006e60 <siprintf+0x38>)
 8006e3a:	9107      	str	r1, [sp, #28]
 8006e3c:	9104      	str	r1, [sp, #16]
 8006e3e:	4909      	ldr	r1, [pc, #36]	@ (8006e64 <siprintf+0x3c>)
 8006e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e44:	9105      	str	r1, [sp, #20]
 8006e46:	6800      	ldr	r0, [r0, #0]
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	a902      	add	r1, sp, #8
 8006e4c:	f000 f9a2 	bl	8007194 <_svfiprintf_r>
 8006e50:	9b02      	ldr	r3, [sp, #8]
 8006e52:	2200      	movs	r2, #0
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	b01c      	add	sp, #112	@ 0x70
 8006e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e5c:	b003      	add	sp, #12
 8006e5e:	4770      	bx	lr
 8006e60:	20000010 	.word	0x20000010
 8006e64:	ffff0208 	.word	0xffff0208

08006e68 <memset>:
 8006e68:	4402      	add	r2, r0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d100      	bne.n	8006e72 <memset+0xa>
 8006e70:	4770      	bx	lr
 8006e72:	f803 1b01 	strb.w	r1, [r3], #1
 8006e76:	e7f9      	b.n	8006e6c <memset+0x4>

08006e78 <__errno>:
 8006e78:	4b01      	ldr	r3, [pc, #4]	@ (8006e80 <__errno+0x8>)
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20000010 	.word	0x20000010

08006e84 <__libc_init_array>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4d0d      	ldr	r5, [pc, #52]	@ (8006ebc <__libc_init_array+0x38>)
 8006e88:	4c0d      	ldr	r4, [pc, #52]	@ (8006ec0 <__libc_init_array+0x3c>)
 8006e8a:	1b64      	subs	r4, r4, r5
 8006e8c:	10a4      	asrs	r4, r4, #2
 8006e8e:	2600      	movs	r6, #0
 8006e90:	42a6      	cmp	r6, r4
 8006e92:	d109      	bne.n	8006ea8 <__libc_init_array+0x24>
 8006e94:	4d0b      	ldr	r5, [pc, #44]	@ (8006ec4 <__libc_init_array+0x40>)
 8006e96:	4c0c      	ldr	r4, [pc, #48]	@ (8006ec8 <__libc_init_array+0x44>)
 8006e98:	f000 fc66 	bl	8007768 <_init>
 8006e9c:	1b64      	subs	r4, r4, r5
 8006e9e:	10a4      	asrs	r4, r4, #2
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	42a6      	cmp	r6, r4
 8006ea4:	d105      	bne.n	8006eb2 <__libc_init_array+0x2e>
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eac:	4798      	blx	r3
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7ee      	b.n	8006e90 <__libc_init_array+0xc>
 8006eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb6:	4798      	blx	r3
 8006eb8:	3601      	adds	r6, #1
 8006eba:	e7f2      	b.n	8006ea2 <__libc_init_array+0x1e>
 8006ebc:	08007934 	.word	0x08007934
 8006ec0:	08007934 	.word	0x08007934
 8006ec4:	08007934 	.word	0x08007934
 8006ec8:	08007938 	.word	0x08007938

08006ecc <__retarget_lock_acquire_recursive>:
 8006ecc:	4770      	bx	lr

08006ece <__retarget_lock_release_recursive>:
 8006ece:	4770      	bx	lr

08006ed0 <memcpy>:
 8006ed0:	440a      	add	r2, r1
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed8:	d100      	bne.n	8006edc <memcpy+0xc>
 8006eda:	4770      	bx	lr
 8006edc:	b510      	push	{r4, lr}
 8006ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee6:	4291      	cmp	r1, r2
 8006ee8:	d1f9      	bne.n	8006ede <memcpy+0xe>
 8006eea:	bd10      	pop	{r4, pc}

08006eec <_free_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4605      	mov	r5, r0
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	d041      	beq.n	8006f78 <_free_r+0x8c>
 8006ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef8:	1f0c      	subs	r4, r1, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfb8      	it	lt
 8006efe:	18e4      	addlt	r4, r4, r3
 8006f00:	f000 f8e0 	bl	80070c4 <__malloc_lock>
 8006f04:	4a1d      	ldr	r2, [pc, #116]	@ (8006f7c <_free_r+0x90>)
 8006f06:	6813      	ldr	r3, [r2, #0]
 8006f08:	b933      	cbnz	r3, 8006f18 <_free_r+0x2c>
 8006f0a:	6063      	str	r3, [r4, #4]
 8006f0c:	6014      	str	r4, [r2, #0]
 8006f0e:	4628      	mov	r0, r5
 8006f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f14:	f000 b8dc 	b.w	80070d0 <__malloc_unlock>
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d908      	bls.n	8006f2e <_free_r+0x42>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf01      	itttt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	e7ed      	b.n	8006f0a <_free_r+0x1e>
 8006f2e:	461a      	mov	r2, r3
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b10b      	cbz	r3, 8006f38 <_free_r+0x4c>
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	d9fa      	bls.n	8006f2e <_free_r+0x42>
 8006f38:	6811      	ldr	r1, [r2, #0]
 8006f3a:	1850      	adds	r0, r2, r1
 8006f3c:	42a0      	cmp	r0, r4
 8006f3e:	d10b      	bne.n	8006f58 <_free_r+0x6c>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	4401      	add	r1, r0
 8006f44:	1850      	adds	r0, r2, r1
 8006f46:	4283      	cmp	r3, r0
 8006f48:	6011      	str	r1, [r2, #0]
 8006f4a:	d1e0      	bne.n	8006f0e <_free_r+0x22>
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	6053      	str	r3, [r2, #4]
 8006f52:	4408      	add	r0, r1
 8006f54:	6010      	str	r0, [r2, #0]
 8006f56:	e7da      	b.n	8006f0e <_free_r+0x22>
 8006f58:	d902      	bls.n	8006f60 <_free_r+0x74>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	e7d6      	b.n	8006f0e <_free_r+0x22>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	1821      	adds	r1, r4, r0
 8006f64:	428b      	cmp	r3, r1
 8006f66:	bf04      	itt	eq
 8006f68:	6819      	ldreq	r1, [r3, #0]
 8006f6a:	685b      	ldreq	r3, [r3, #4]
 8006f6c:	6063      	str	r3, [r4, #4]
 8006f6e:	bf04      	itt	eq
 8006f70:	1809      	addeq	r1, r1, r0
 8006f72:	6021      	streq	r1, [r4, #0]
 8006f74:	6054      	str	r4, [r2, #4]
 8006f76:	e7ca      	b.n	8006f0e <_free_r+0x22>
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20004c50 	.word	0x20004c50

08006f80 <sbrk_aligned>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4e0f      	ldr	r6, [pc, #60]	@ (8006fc0 <sbrk_aligned+0x40>)
 8006f84:	460c      	mov	r4, r1
 8006f86:	6831      	ldr	r1, [r6, #0]
 8006f88:	4605      	mov	r5, r0
 8006f8a:	b911      	cbnz	r1, 8006f92 <sbrk_aligned+0x12>
 8006f8c:	f000 fba6 	bl	80076dc <_sbrk_r>
 8006f90:	6030      	str	r0, [r6, #0]
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	f000 fba1 	bl	80076dc <_sbrk_r>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d103      	bne.n	8006fa6 <sbrk_aligned+0x26>
 8006f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	1cc4      	adds	r4, r0, #3
 8006fa8:	f024 0403 	bic.w	r4, r4, #3
 8006fac:	42a0      	cmp	r0, r4
 8006fae:	d0f8      	beq.n	8006fa2 <sbrk_aligned+0x22>
 8006fb0:	1a21      	subs	r1, r4, r0
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 fb92 	bl	80076dc <_sbrk_r>
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d1f2      	bne.n	8006fa2 <sbrk_aligned+0x22>
 8006fbc:	e7ef      	b.n	8006f9e <sbrk_aligned+0x1e>
 8006fbe:	bf00      	nop
 8006fc0:	20004c4c 	.word	0x20004c4c

08006fc4 <_malloc_r>:
 8006fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc8:	1ccd      	adds	r5, r1, #3
 8006fca:	f025 0503 	bic.w	r5, r5, #3
 8006fce:	3508      	adds	r5, #8
 8006fd0:	2d0c      	cmp	r5, #12
 8006fd2:	bf38      	it	cc
 8006fd4:	250c      	movcc	r5, #12
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	4606      	mov	r6, r0
 8006fda:	db01      	blt.n	8006fe0 <_malloc_r+0x1c>
 8006fdc:	42a9      	cmp	r1, r5
 8006fde:	d904      	bls.n	8006fea <_malloc_r+0x26>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	6033      	str	r3, [r6, #0]
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070c0 <_malloc_r+0xfc>
 8006fee:	f000 f869 	bl	80070c4 <__malloc_lock>
 8006ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	bb44      	cbnz	r4, 800704c <_malloc_r+0x88>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7ff ffbf 	bl	8006f80 <sbrk_aligned>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	4604      	mov	r4, r0
 8007006:	d158      	bne.n	80070ba <_malloc_r+0xf6>
 8007008:	f8d8 4000 	ldr.w	r4, [r8]
 800700c:	4627      	mov	r7, r4
 800700e:	2f00      	cmp	r7, #0
 8007010:	d143      	bne.n	800709a <_malloc_r+0xd6>
 8007012:	2c00      	cmp	r4, #0
 8007014:	d04b      	beq.n	80070ae <_malloc_r+0xea>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	4639      	mov	r1, r7
 800701a:	4630      	mov	r0, r6
 800701c:	eb04 0903 	add.w	r9, r4, r3
 8007020:	f000 fb5c 	bl	80076dc <_sbrk_r>
 8007024:	4581      	cmp	r9, r0
 8007026:	d142      	bne.n	80070ae <_malloc_r+0xea>
 8007028:	6821      	ldr	r1, [r4, #0]
 800702a:	1a6d      	subs	r5, r5, r1
 800702c:	4629      	mov	r1, r5
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ffa6 	bl	8006f80 <sbrk_aligned>
 8007034:	3001      	adds	r0, #1
 8007036:	d03a      	beq.n	80070ae <_malloc_r+0xea>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	442b      	add	r3, r5
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	f8d8 3000 	ldr.w	r3, [r8]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	bb62      	cbnz	r2, 80070a0 <_malloc_r+0xdc>
 8007046:	f8c8 7000 	str.w	r7, [r8]
 800704a:	e00f      	b.n	800706c <_malloc_r+0xa8>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	1b52      	subs	r2, r2, r5
 8007050:	d420      	bmi.n	8007094 <_malloc_r+0xd0>
 8007052:	2a0b      	cmp	r2, #11
 8007054:	d917      	bls.n	8007086 <_malloc_r+0xc2>
 8007056:	1961      	adds	r1, r4, r5
 8007058:	42a3      	cmp	r3, r4
 800705a:	6025      	str	r5, [r4, #0]
 800705c:	bf18      	it	ne
 800705e:	6059      	strne	r1, [r3, #4]
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	bf08      	it	eq
 8007064:	f8c8 1000 	streq.w	r1, [r8]
 8007068:	5162      	str	r2, [r4, r5]
 800706a:	604b      	str	r3, [r1, #4]
 800706c:	4630      	mov	r0, r6
 800706e:	f000 f82f 	bl	80070d0 <__malloc_unlock>
 8007072:	f104 000b 	add.w	r0, r4, #11
 8007076:	1d23      	adds	r3, r4, #4
 8007078:	f020 0007 	bic.w	r0, r0, #7
 800707c:	1ac2      	subs	r2, r0, r3
 800707e:	bf1c      	itt	ne
 8007080:	1a1b      	subne	r3, r3, r0
 8007082:	50a3      	strne	r3, [r4, r2]
 8007084:	e7af      	b.n	8006fe6 <_malloc_r+0x22>
 8007086:	6862      	ldr	r2, [r4, #4]
 8007088:	42a3      	cmp	r3, r4
 800708a:	bf0c      	ite	eq
 800708c:	f8c8 2000 	streq.w	r2, [r8]
 8007090:	605a      	strne	r2, [r3, #4]
 8007092:	e7eb      	b.n	800706c <_malloc_r+0xa8>
 8007094:	4623      	mov	r3, r4
 8007096:	6864      	ldr	r4, [r4, #4]
 8007098:	e7ae      	b.n	8006ff8 <_malloc_r+0x34>
 800709a:	463c      	mov	r4, r7
 800709c:	687f      	ldr	r7, [r7, #4]
 800709e:	e7b6      	b.n	800700e <_malloc_r+0x4a>
 80070a0:	461a      	mov	r2, r3
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	d1fb      	bne.n	80070a0 <_malloc_r+0xdc>
 80070a8:	2300      	movs	r3, #0
 80070aa:	6053      	str	r3, [r2, #4]
 80070ac:	e7de      	b.n	800706c <_malloc_r+0xa8>
 80070ae:	230c      	movs	r3, #12
 80070b0:	6033      	str	r3, [r6, #0]
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 f80c 	bl	80070d0 <__malloc_unlock>
 80070b8:	e794      	b.n	8006fe4 <_malloc_r+0x20>
 80070ba:	6005      	str	r5, [r0, #0]
 80070bc:	e7d6      	b.n	800706c <_malloc_r+0xa8>
 80070be:	bf00      	nop
 80070c0:	20004c50 	.word	0x20004c50

080070c4 <__malloc_lock>:
 80070c4:	4801      	ldr	r0, [pc, #4]	@ (80070cc <__malloc_lock+0x8>)
 80070c6:	f7ff bf01 	b.w	8006ecc <__retarget_lock_acquire_recursive>
 80070ca:	bf00      	nop
 80070cc:	20004c48 	.word	0x20004c48

080070d0 <__malloc_unlock>:
 80070d0:	4801      	ldr	r0, [pc, #4]	@ (80070d8 <__malloc_unlock+0x8>)
 80070d2:	f7ff befc 	b.w	8006ece <__retarget_lock_release_recursive>
 80070d6:	bf00      	nop
 80070d8:	20004c48 	.word	0x20004c48

080070dc <__ssputs_r>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	688e      	ldr	r6, [r1, #8]
 80070e2:	461f      	mov	r7, r3
 80070e4:	42be      	cmp	r6, r7
 80070e6:	680b      	ldr	r3, [r1, #0]
 80070e8:	4682      	mov	sl, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4690      	mov	r8, r2
 80070ee:	d82d      	bhi.n	800714c <__ssputs_r+0x70>
 80070f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070f8:	d026      	beq.n	8007148 <__ssputs_r+0x6c>
 80070fa:	6965      	ldr	r5, [r4, #20]
 80070fc:	6909      	ldr	r1, [r1, #16]
 80070fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007102:	eba3 0901 	sub.w	r9, r3, r1
 8007106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800710a:	1c7b      	adds	r3, r7, #1
 800710c:	444b      	add	r3, r9
 800710e:	106d      	asrs	r5, r5, #1
 8007110:	429d      	cmp	r5, r3
 8007112:	bf38      	it	cc
 8007114:	461d      	movcc	r5, r3
 8007116:	0553      	lsls	r3, r2, #21
 8007118:	d527      	bpl.n	800716a <__ssputs_r+0x8e>
 800711a:	4629      	mov	r1, r5
 800711c:	f7ff ff52 	bl	8006fc4 <_malloc_r>
 8007120:	4606      	mov	r6, r0
 8007122:	b360      	cbz	r0, 800717e <__ssputs_r+0xa2>
 8007124:	6921      	ldr	r1, [r4, #16]
 8007126:	464a      	mov	r2, r9
 8007128:	f7ff fed2 	bl	8006ed0 <memcpy>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	6126      	str	r6, [r4, #16]
 800713a:	6165      	str	r5, [r4, #20]
 800713c:	444e      	add	r6, r9
 800713e:	eba5 0509 	sub.w	r5, r5, r9
 8007142:	6026      	str	r6, [r4, #0]
 8007144:	60a5      	str	r5, [r4, #8]
 8007146:	463e      	mov	r6, r7
 8007148:	42be      	cmp	r6, r7
 800714a:	d900      	bls.n	800714e <__ssputs_r+0x72>
 800714c:	463e      	mov	r6, r7
 800714e:	6820      	ldr	r0, [r4, #0]
 8007150:	4632      	mov	r2, r6
 8007152:	4641      	mov	r1, r8
 8007154:	f000 faa8 	bl	80076a8 <memmove>
 8007158:	68a3      	ldr	r3, [r4, #8]
 800715a:	1b9b      	subs	r3, r3, r6
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	4433      	add	r3, r6
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	2000      	movs	r0, #0
 8007166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716a:	462a      	mov	r2, r5
 800716c:	f000 fac6 	bl	80076fc <_realloc_r>
 8007170:	4606      	mov	r6, r0
 8007172:	2800      	cmp	r0, #0
 8007174:	d1e0      	bne.n	8007138 <__ssputs_r+0x5c>
 8007176:	6921      	ldr	r1, [r4, #16]
 8007178:	4650      	mov	r0, sl
 800717a:	f7ff feb7 	bl	8006eec <_free_r>
 800717e:	230c      	movs	r3, #12
 8007180:	f8ca 3000 	str.w	r3, [sl]
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800718a:	81a3      	strh	r3, [r4, #12]
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	e7e9      	b.n	8007166 <__ssputs_r+0x8a>
	...

08007194 <_svfiprintf_r>:
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	4698      	mov	r8, r3
 800719a:	898b      	ldrh	r3, [r1, #12]
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	b09d      	sub	sp, #116	@ 0x74
 80071a0:	4607      	mov	r7, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	4614      	mov	r4, r2
 80071a6:	d510      	bpl.n	80071ca <_svfiprintf_r+0x36>
 80071a8:	690b      	ldr	r3, [r1, #16]
 80071aa:	b973      	cbnz	r3, 80071ca <_svfiprintf_r+0x36>
 80071ac:	2140      	movs	r1, #64	@ 0x40
 80071ae:	f7ff ff09 	bl	8006fc4 <_malloc_r>
 80071b2:	6028      	str	r0, [r5, #0]
 80071b4:	6128      	str	r0, [r5, #16]
 80071b6:	b930      	cbnz	r0, 80071c6 <_svfiprintf_r+0x32>
 80071b8:	230c      	movs	r3, #12
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	b01d      	add	sp, #116	@ 0x74
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	2340      	movs	r3, #64	@ 0x40
 80071c8:	616b      	str	r3, [r5, #20]
 80071ca:	2300      	movs	r3, #0
 80071cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ce:	2320      	movs	r3, #32
 80071d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d8:	2330      	movs	r3, #48	@ 0x30
 80071da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007378 <_svfiprintf_r+0x1e4>
 80071de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071e2:	f04f 0901 	mov.w	r9, #1
 80071e6:	4623      	mov	r3, r4
 80071e8:	469a      	mov	sl, r3
 80071ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ee:	b10a      	cbz	r2, 80071f4 <_svfiprintf_r+0x60>
 80071f0:	2a25      	cmp	r2, #37	@ 0x25
 80071f2:	d1f9      	bne.n	80071e8 <_svfiprintf_r+0x54>
 80071f4:	ebba 0b04 	subs.w	fp, sl, r4
 80071f8:	d00b      	beq.n	8007212 <_svfiprintf_r+0x7e>
 80071fa:	465b      	mov	r3, fp
 80071fc:	4622      	mov	r2, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff ff6b 	bl	80070dc <__ssputs_r>
 8007206:	3001      	adds	r0, #1
 8007208:	f000 80a7 	beq.w	800735a <_svfiprintf_r+0x1c6>
 800720c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800720e:	445a      	add	r2, fp
 8007210:	9209      	str	r2, [sp, #36]	@ 0x24
 8007212:	f89a 3000 	ldrb.w	r3, [sl]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 809f 	beq.w	800735a <_svfiprintf_r+0x1c6>
 800721c:	2300      	movs	r3, #0
 800721e:	f04f 32ff 	mov.w	r2, #4294967295
 8007222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007226:	f10a 0a01 	add.w	sl, sl, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	9307      	str	r3, [sp, #28]
 800722e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007232:	931a      	str	r3, [sp, #104]	@ 0x68
 8007234:	4654      	mov	r4, sl
 8007236:	2205      	movs	r2, #5
 8007238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800723c:	484e      	ldr	r0, [pc, #312]	@ (8007378 <_svfiprintf_r+0x1e4>)
 800723e:	f7f8 ffd7 	bl	80001f0 <memchr>
 8007242:	9a04      	ldr	r2, [sp, #16]
 8007244:	b9d8      	cbnz	r0, 800727e <_svfiprintf_r+0xea>
 8007246:	06d0      	lsls	r0, r2, #27
 8007248:	bf44      	itt	mi
 800724a:	2320      	movmi	r3, #32
 800724c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007250:	0711      	lsls	r1, r2, #28
 8007252:	bf44      	itt	mi
 8007254:	232b      	movmi	r3, #43	@ 0x2b
 8007256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800725a:	f89a 3000 	ldrb.w	r3, [sl]
 800725e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007260:	d015      	beq.n	800728e <_svfiprintf_r+0xfa>
 8007262:	9a07      	ldr	r2, [sp, #28]
 8007264:	4654      	mov	r4, sl
 8007266:	2000      	movs	r0, #0
 8007268:	f04f 0c0a 	mov.w	ip, #10
 800726c:	4621      	mov	r1, r4
 800726e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007272:	3b30      	subs	r3, #48	@ 0x30
 8007274:	2b09      	cmp	r3, #9
 8007276:	d94b      	bls.n	8007310 <_svfiprintf_r+0x17c>
 8007278:	b1b0      	cbz	r0, 80072a8 <_svfiprintf_r+0x114>
 800727a:	9207      	str	r2, [sp, #28]
 800727c:	e014      	b.n	80072a8 <_svfiprintf_r+0x114>
 800727e:	eba0 0308 	sub.w	r3, r0, r8
 8007282:	fa09 f303 	lsl.w	r3, r9, r3
 8007286:	4313      	orrs	r3, r2
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	46a2      	mov	sl, r4
 800728c:	e7d2      	b.n	8007234 <_svfiprintf_r+0xa0>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	1d19      	adds	r1, r3, #4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	9103      	str	r1, [sp, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	bfbb      	ittet	lt
 800729a:	425b      	neglt	r3, r3
 800729c:	f042 0202 	orrlt.w	r2, r2, #2
 80072a0:	9307      	strge	r3, [sp, #28]
 80072a2:	9307      	strlt	r3, [sp, #28]
 80072a4:	bfb8      	it	lt
 80072a6:	9204      	strlt	r2, [sp, #16]
 80072a8:	7823      	ldrb	r3, [r4, #0]
 80072aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ac:	d10a      	bne.n	80072c4 <_svfiprintf_r+0x130>
 80072ae:	7863      	ldrb	r3, [r4, #1]
 80072b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072b2:	d132      	bne.n	800731a <_svfiprintf_r+0x186>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	1d1a      	adds	r2, r3, #4
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	9203      	str	r2, [sp, #12]
 80072bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072c0:	3402      	adds	r4, #2
 80072c2:	9305      	str	r3, [sp, #20]
 80072c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007388 <_svfiprintf_r+0x1f4>
 80072c8:	7821      	ldrb	r1, [r4, #0]
 80072ca:	2203      	movs	r2, #3
 80072cc:	4650      	mov	r0, sl
 80072ce:	f7f8 ff8f 	bl	80001f0 <memchr>
 80072d2:	b138      	cbz	r0, 80072e4 <_svfiprintf_r+0x150>
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	eba0 000a 	sub.w	r0, r0, sl
 80072da:	2240      	movs	r2, #64	@ 0x40
 80072dc:	4082      	lsls	r2, r0
 80072de:	4313      	orrs	r3, r2
 80072e0:	3401      	adds	r4, #1
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e8:	4824      	ldr	r0, [pc, #144]	@ (800737c <_svfiprintf_r+0x1e8>)
 80072ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072ee:	2206      	movs	r2, #6
 80072f0:	f7f8 ff7e 	bl	80001f0 <memchr>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d036      	beq.n	8007366 <_svfiprintf_r+0x1d2>
 80072f8:	4b21      	ldr	r3, [pc, #132]	@ (8007380 <_svfiprintf_r+0x1ec>)
 80072fa:	bb1b      	cbnz	r3, 8007344 <_svfiprintf_r+0x1b0>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	3307      	adds	r3, #7
 8007300:	f023 0307 	bic.w	r3, r3, #7
 8007304:	3308      	adds	r3, #8
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730a:	4433      	add	r3, r6
 800730c:	9309      	str	r3, [sp, #36]	@ 0x24
 800730e:	e76a      	b.n	80071e6 <_svfiprintf_r+0x52>
 8007310:	fb0c 3202 	mla	r2, ip, r2, r3
 8007314:	460c      	mov	r4, r1
 8007316:	2001      	movs	r0, #1
 8007318:	e7a8      	b.n	800726c <_svfiprintf_r+0xd8>
 800731a:	2300      	movs	r3, #0
 800731c:	3401      	adds	r4, #1
 800731e:	9305      	str	r3, [sp, #20]
 8007320:	4619      	mov	r1, r3
 8007322:	f04f 0c0a 	mov.w	ip, #10
 8007326:	4620      	mov	r0, r4
 8007328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800732c:	3a30      	subs	r2, #48	@ 0x30
 800732e:	2a09      	cmp	r2, #9
 8007330:	d903      	bls.n	800733a <_svfiprintf_r+0x1a6>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0c6      	beq.n	80072c4 <_svfiprintf_r+0x130>
 8007336:	9105      	str	r1, [sp, #20]
 8007338:	e7c4      	b.n	80072c4 <_svfiprintf_r+0x130>
 800733a:	fb0c 2101 	mla	r1, ip, r1, r2
 800733e:	4604      	mov	r4, r0
 8007340:	2301      	movs	r3, #1
 8007342:	e7f0      	b.n	8007326 <_svfiprintf_r+0x192>
 8007344:	ab03      	add	r3, sp, #12
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	462a      	mov	r2, r5
 800734a:	4b0e      	ldr	r3, [pc, #56]	@ (8007384 <_svfiprintf_r+0x1f0>)
 800734c:	a904      	add	r1, sp, #16
 800734e:	4638      	mov	r0, r7
 8007350:	f3af 8000 	nop.w
 8007354:	1c42      	adds	r2, r0, #1
 8007356:	4606      	mov	r6, r0
 8007358:	d1d6      	bne.n	8007308 <_svfiprintf_r+0x174>
 800735a:	89ab      	ldrh	r3, [r5, #12]
 800735c:	065b      	lsls	r3, r3, #25
 800735e:	f53f af2d 	bmi.w	80071bc <_svfiprintf_r+0x28>
 8007362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007364:	e72c      	b.n	80071c0 <_svfiprintf_r+0x2c>
 8007366:	ab03      	add	r3, sp, #12
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	462a      	mov	r2, r5
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <_svfiprintf_r+0x1f0>)
 800736e:	a904      	add	r1, sp, #16
 8007370:	4638      	mov	r0, r7
 8007372:	f000 f879 	bl	8007468 <_printf_i>
 8007376:	e7ed      	b.n	8007354 <_svfiprintf_r+0x1c0>
 8007378:	080078f8 	.word	0x080078f8
 800737c:	08007902 	.word	0x08007902
 8007380:	00000000 	.word	0x00000000
 8007384:	080070dd 	.word	0x080070dd
 8007388:	080078fe 	.word	0x080078fe

0800738c <_printf_common>:
 800738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	4616      	mov	r6, r2
 8007392:	4698      	mov	r8, r3
 8007394:	688a      	ldr	r2, [r1, #8]
 8007396:	690b      	ldr	r3, [r1, #16]
 8007398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800739c:	4293      	cmp	r3, r2
 800739e:	bfb8      	it	lt
 80073a0:	4613      	movlt	r3, r2
 80073a2:	6033      	str	r3, [r6, #0]
 80073a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073a8:	4607      	mov	r7, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	b10a      	cbz	r2, 80073b2 <_printf_common+0x26>
 80073ae:	3301      	adds	r3, #1
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	0699      	lsls	r1, r3, #26
 80073b6:	bf42      	ittt	mi
 80073b8:	6833      	ldrmi	r3, [r6, #0]
 80073ba:	3302      	addmi	r3, #2
 80073bc:	6033      	strmi	r3, [r6, #0]
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	f015 0506 	ands.w	r5, r5, #6
 80073c4:	d106      	bne.n	80073d4 <_printf_common+0x48>
 80073c6:	f104 0a19 	add.w	sl, r4, #25
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	6832      	ldr	r2, [r6, #0]
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dc26      	bgt.n	8007422 <_printf_common+0x96>
 80073d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	3b00      	subs	r3, #0
 80073dc:	bf18      	it	ne
 80073de:	2301      	movne	r3, #1
 80073e0:	0692      	lsls	r2, r2, #26
 80073e2:	d42b      	bmi.n	800743c <_printf_common+0xb0>
 80073e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073e8:	4641      	mov	r1, r8
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c8      	blx	r9
 80073ee:	3001      	adds	r0, #1
 80073f0:	d01e      	beq.n	8007430 <_printf_common+0xa4>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	f003 0306 	and.w	r3, r3, #6
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	bf02      	ittt	eq
 80073fe:	68e5      	ldreq	r5, [r4, #12]
 8007400:	6833      	ldreq	r3, [r6, #0]
 8007402:	1aed      	subeq	r5, r5, r3
 8007404:	68a3      	ldr	r3, [r4, #8]
 8007406:	bf0c      	ite	eq
 8007408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800740c:	2500      	movne	r5, #0
 800740e:	4293      	cmp	r3, r2
 8007410:	bfc4      	itt	gt
 8007412:	1a9b      	subgt	r3, r3, r2
 8007414:	18ed      	addgt	r5, r5, r3
 8007416:	2600      	movs	r6, #0
 8007418:	341a      	adds	r4, #26
 800741a:	42b5      	cmp	r5, r6
 800741c:	d11a      	bne.n	8007454 <_printf_common+0xc8>
 800741e:	2000      	movs	r0, #0
 8007420:	e008      	b.n	8007434 <_printf_common+0xa8>
 8007422:	2301      	movs	r3, #1
 8007424:	4652      	mov	r2, sl
 8007426:	4641      	mov	r1, r8
 8007428:	4638      	mov	r0, r7
 800742a:	47c8      	blx	r9
 800742c:	3001      	adds	r0, #1
 800742e:	d103      	bne.n	8007438 <_printf_common+0xac>
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007438:	3501      	adds	r5, #1
 800743a:	e7c6      	b.n	80073ca <_printf_common+0x3e>
 800743c:	18e1      	adds	r1, r4, r3
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	2030      	movs	r0, #48	@ 0x30
 8007442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007446:	4422      	add	r2, r4
 8007448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800744c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007450:	3302      	adds	r3, #2
 8007452:	e7c7      	b.n	80073e4 <_printf_common+0x58>
 8007454:	2301      	movs	r3, #1
 8007456:	4622      	mov	r2, r4
 8007458:	4641      	mov	r1, r8
 800745a:	4638      	mov	r0, r7
 800745c:	47c8      	blx	r9
 800745e:	3001      	adds	r0, #1
 8007460:	d0e6      	beq.n	8007430 <_printf_common+0xa4>
 8007462:	3601      	adds	r6, #1
 8007464:	e7d9      	b.n	800741a <_printf_common+0x8e>
	...

08007468 <_printf_i>:
 8007468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	7e0f      	ldrb	r7, [r1, #24]
 800746e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007470:	2f78      	cmp	r7, #120	@ 0x78
 8007472:	4691      	mov	r9, r2
 8007474:	4680      	mov	r8, r0
 8007476:	460c      	mov	r4, r1
 8007478:	469a      	mov	sl, r3
 800747a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800747e:	d807      	bhi.n	8007490 <_printf_i+0x28>
 8007480:	2f62      	cmp	r7, #98	@ 0x62
 8007482:	d80a      	bhi.n	800749a <_printf_i+0x32>
 8007484:	2f00      	cmp	r7, #0
 8007486:	f000 80d2 	beq.w	800762e <_printf_i+0x1c6>
 800748a:	2f58      	cmp	r7, #88	@ 0x58
 800748c:	f000 80b9 	beq.w	8007602 <_printf_i+0x19a>
 8007490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007498:	e03a      	b.n	8007510 <_printf_i+0xa8>
 800749a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800749e:	2b15      	cmp	r3, #21
 80074a0:	d8f6      	bhi.n	8007490 <_printf_i+0x28>
 80074a2:	a101      	add	r1, pc, #4	@ (adr r1, 80074a8 <_printf_i+0x40>)
 80074a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a8:	08007501 	.word	0x08007501
 80074ac:	08007515 	.word	0x08007515
 80074b0:	08007491 	.word	0x08007491
 80074b4:	08007491 	.word	0x08007491
 80074b8:	08007491 	.word	0x08007491
 80074bc:	08007491 	.word	0x08007491
 80074c0:	08007515 	.word	0x08007515
 80074c4:	08007491 	.word	0x08007491
 80074c8:	08007491 	.word	0x08007491
 80074cc:	08007491 	.word	0x08007491
 80074d0:	08007491 	.word	0x08007491
 80074d4:	08007615 	.word	0x08007615
 80074d8:	0800753f 	.word	0x0800753f
 80074dc:	080075cf 	.word	0x080075cf
 80074e0:	08007491 	.word	0x08007491
 80074e4:	08007491 	.word	0x08007491
 80074e8:	08007637 	.word	0x08007637
 80074ec:	08007491 	.word	0x08007491
 80074f0:	0800753f 	.word	0x0800753f
 80074f4:	08007491 	.word	0x08007491
 80074f8:	08007491 	.word	0x08007491
 80074fc:	080075d7 	.word	0x080075d7
 8007500:	6833      	ldr	r3, [r6, #0]
 8007502:	1d1a      	adds	r2, r3, #4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6032      	str	r2, [r6, #0]
 8007508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800750c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007510:	2301      	movs	r3, #1
 8007512:	e09d      	b.n	8007650 <_printf_i+0x1e8>
 8007514:	6833      	ldr	r3, [r6, #0]
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	6031      	str	r1, [r6, #0]
 800751c:	0606      	lsls	r6, r0, #24
 800751e:	d501      	bpl.n	8007524 <_printf_i+0xbc>
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	e003      	b.n	800752c <_printf_i+0xc4>
 8007524:	0645      	lsls	r5, r0, #25
 8007526:	d5fb      	bpl.n	8007520 <_printf_i+0xb8>
 8007528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800752c:	2d00      	cmp	r5, #0
 800752e:	da03      	bge.n	8007538 <_printf_i+0xd0>
 8007530:	232d      	movs	r3, #45	@ 0x2d
 8007532:	426d      	negs	r5, r5
 8007534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007538:	4859      	ldr	r0, [pc, #356]	@ (80076a0 <_printf_i+0x238>)
 800753a:	230a      	movs	r3, #10
 800753c:	e011      	b.n	8007562 <_printf_i+0xfa>
 800753e:	6821      	ldr	r1, [r4, #0]
 8007540:	6833      	ldr	r3, [r6, #0]
 8007542:	0608      	lsls	r0, r1, #24
 8007544:	f853 5b04 	ldr.w	r5, [r3], #4
 8007548:	d402      	bmi.n	8007550 <_printf_i+0xe8>
 800754a:	0649      	lsls	r1, r1, #25
 800754c:	bf48      	it	mi
 800754e:	b2ad      	uxthmi	r5, r5
 8007550:	2f6f      	cmp	r7, #111	@ 0x6f
 8007552:	4853      	ldr	r0, [pc, #332]	@ (80076a0 <_printf_i+0x238>)
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	bf14      	ite	ne
 8007558:	230a      	movne	r3, #10
 800755a:	2308      	moveq	r3, #8
 800755c:	2100      	movs	r1, #0
 800755e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007562:	6866      	ldr	r6, [r4, #4]
 8007564:	60a6      	str	r6, [r4, #8]
 8007566:	2e00      	cmp	r6, #0
 8007568:	bfa2      	ittt	ge
 800756a:	6821      	ldrge	r1, [r4, #0]
 800756c:	f021 0104 	bicge.w	r1, r1, #4
 8007570:	6021      	strge	r1, [r4, #0]
 8007572:	b90d      	cbnz	r5, 8007578 <_printf_i+0x110>
 8007574:	2e00      	cmp	r6, #0
 8007576:	d04b      	beq.n	8007610 <_printf_i+0x1a8>
 8007578:	4616      	mov	r6, r2
 800757a:	fbb5 f1f3 	udiv	r1, r5, r3
 800757e:	fb03 5711 	mls	r7, r3, r1, r5
 8007582:	5dc7      	ldrb	r7, [r0, r7]
 8007584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007588:	462f      	mov	r7, r5
 800758a:	42bb      	cmp	r3, r7
 800758c:	460d      	mov	r5, r1
 800758e:	d9f4      	bls.n	800757a <_printf_i+0x112>
 8007590:	2b08      	cmp	r3, #8
 8007592:	d10b      	bne.n	80075ac <_printf_i+0x144>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	07df      	lsls	r7, r3, #31
 8007598:	d508      	bpl.n	80075ac <_printf_i+0x144>
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	6861      	ldr	r1, [r4, #4]
 800759e:	4299      	cmp	r1, r3
 80075a0:	bfde      	ittt	le
 80075a2:	2330      	movle	r3, #48	@ 0x30
 80075a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075ac:	1b92      	subs	r2, r2, r6
 80075ae:	6122      	str	r2, [r4, #16]
 80075b0:	f8cd a000 	str.w	sl, [sp]
 80075b4:	464b      	mov	r3, r9
 80075b6:	aa03      	add	r2, sp, #12
 80075b8:	4621      	mov	r1, r4
 80075ba:	4640      	mov	r0, r8
 80075bc:	f7ff fee6 	bl	800738c <_printf_common>
 80075c0:	3001      	adds	r0, #1
 80075c2:	d14a      	bne.n	800765a <_printf_i+0x1f2>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	b004      	add	sp, #16
 80075ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	f043 0320 	orr.w	r3, r3, #32
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	4833      	ldr	r0, [pc, #204]	@ (80076a4 <_printf_i+0x23c>)
 80075d8:	2778      	movs	r7, #120	@ 0x78
 80075da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	6831      	ldr	r1, [r6, #0]
 80075e2:	061f      	lsls	r7, r3, #24
 80075e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80075e8:	d402      	bmi.n	80075f0 <_printf_i+0x188>
 80075ea:	065f      	lsls	r7, r3, #25
 80075ec:	bf48      	it	mi
 80075ee:	b2ad      	uxthmi	r5, r5
 80075f0:	6031      	str	r1, [r6, #0]
 80075f2:	07d9      	lsls	r1, r3, #31
 80075f4:	bf44      	itt	mi
 80075f6:	f043 0320 	orrmi.w	r3, r3, #32
 80075fa:	6023      	strmi	r3, [r4, #0]
 80075fc:	b11d      	cbz	r5, 8007606 <_printf_i+0x19e>
 80075fe:	2310      	movs	r3, #16
 8007600:	e7ac      	b.n	800755c <_printf_i+0xf4>
 8007602:	4827      	ldr	r0, [pc, #156]	@ (80076a0 <_printf_i+0x238>)
 8007604:	e7e9      	b.n	80075da <_printf_i+0x172>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	f023 0320 	bic.w	r3, r3, #32
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	e7f6      	b.n	80075fe <_printf_i+0x196>
 8007610:	4616      	mov	r6, r2
 8007612:	e7bd      	b.n	8007590 <_printf_i+0x128>
 8007614:	6833      	ldr	r3, [r6, #0]
 8007616:	6825      	ldr	r5, [r4, #0]
 8007618:	6961      	ldr	r1, [r4, #20]
 800761a:	1d18      	adds	r0, r3, #4
 800761c:	6030      	str	r0, [r6, #0]
 800761e:	062e      	lsls	r6, r5, #24
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	d501      	bpl.n	8007628 <_printf_i+0x1c0>
 8007624:	6019      	str	r1, [r3, #0]
 8007626:	e002      	b.n	800762e <_printf_i+0x1c6>
 8007628:	0668      	lsls	r0, r5, #25
 800762a:	d5fb      	bpl.n	8007624 <_printf_i+0x1bc>
 800762c:	8019      	strh	r1, [r3, #0]
 800762e:	2300      	movs	r3, #0
 8007630:	6123      	str	r3, [r4, #16]
 8007632:	4616      	mov	r6, r2
 8007634:	e7bc      	b.n	80075b0 <_printf_i+0x148>
 8007636:	6833      	ldr	r3, [r6, #0]
 8007638:	1d1a      	adds	r2, r3, #4
 800763a:	6032      	str	r2, [r6, #0]
 800763c:	681e      	ldr	r6, [r3, #0]
 800763e:	6862      	ldr	r2, [r4, #4]
 8007640:	2100      	movs	r1, #0
 8007642:	4630      	mov	r0, r6
 8007644:	f7f8 fdd4 	bl	80001f0 <memchr>
 8007648:	b108      	cbz	r0, 800764e <_printf_i+0x1e6>
 800764a:	1b80      	subs	r0, r0, r6
 800764c:	6060      	str	r0, [r4, #4]
 800764e:	6863      	ldr	r3, [r4, #4]
 8007650:	6123      	str	r3, [r4, #16]
 8007652:	2300      	movs	r3, #0
 8007654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007658:	e7aa      	b.n	80075b0 <_printf_i+0x148>
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	4632      	mov	r2, r6
 800765e:	4649      	mov	r1, r9
 8007660:	4640      	mov	r0, r8
 8007662:	47d0      	blx	sl
 8007664:	3001      	adds	r0, #1
 8007666:	d0ad      	beq.n	80075c4 <_printf_i+0x15c>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	079b      	lsls	r3, r3, #30
 800766c:	d413      	bmi.n	8007696 <_printf_i+0x22e>
 800766e:	68e0      	ldr	r0, [r4, #12]
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	4298      	cmp	r0, r3
 8007674:	bfb8      	it	lt
 8007676:	4618      	movlt	r0, r3
 8007678:	e7a6      	b.n	80075c8 <_printf_i+0x160>
 800767a:	2301      	movs	r3, #1
 800767c:	4632      	mov	r2, r6
 800767e:	4649      	mov	r1, r9
 8007680:	4640      	mov	r0, r8
 8007682:	47d0      	blx	sl
 8007684:	3001      	adds	r0, #1
 8007686:	d09d      	beq.n	80075c4 <_printf_i+0x15c>
 8007688:	3501      	adds	r5, #1
 800768a:	68e3      	ldr	r3, [r4, #12]
 800768c:	9903      	ldr	r1, [sp, #12]
 800768e:	1a5b      	subs	r3, r3, r1
 8007690:	42ab      	cmp	r3, r5
 8007692:	dcf2      	bgt.n	800767a <_printf_i+0x212>
 8007694:	e7eb      	b.n	800766e <_printf_i+0x206>
 8007696:	2500      	movs	r5, #0
 8007698:	f104 0619 	add.w	r6, r4, #25
 800769c:	e7f5      	b.n	800768a <_printf_i+0x222>
 800769e:	bf00      	nop
 80076a0:	08007909 	.word	0x08007909
 80076a4:	0800791a 	.word	0x0800791a

080076a8 <memmove>:
 80076a8:	4288      	cmp	r0, r1
 80076aa:	b510      	push	{r4, lr}
 80076ac:	eb01 0402 	add.w	r4, r1, r2
 80076b0:	d902      	bls.n	80076b8 <memmove+0x10>
 80076b2:	4284      	cmp	r4, r0
 80076b4:	4623      	mov	r3, r4
 80076b6:	d807      	bhi.n	80076c8 <memmove+0x20>
 80076b8:	1e43      	subs	r3, r0, #1
 80076ba:	42a1      	cmp	r1, r4
 80076bc:	d008      	beq.n	80076d0 <memmove+0x28>
 80076be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076c6:	e7f8      	b.n	80076ba <memmove+0x12>
 80076c8:	4402      	add	r2, r0
 80076ca:	4601      	mov	r1, r0
 80076cc:	428a      	cmp	r2, r1
 80076ce:	d100      	bne.n	80076d2 <memmove+0x2a>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076da:	e7f7      	b.n	80076cc <memmove+0x24>

080076dc <_sbrk_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d06      	ldr	r5, [pc, #24]	@ (80076f8 <_sbrk_r+0x1c>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	602b      	str	r3, [r5, #0]
 80076e8:	f7f9 fb40 	bl	8000d6c <_sbrk>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_sbrk_r+0x1a>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_sbrk_r+0x1a>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20004c44 	.word	0x20004c44

080076fc <_realloc_r>:
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	4680      	mov	r8, r0
 8007702:	4615      	mov	r5, r2
 8007704:	460c      	mov	r4, r1
 8007706:	b921      	cbnz	r1, 8007712 <_realloc_r+0x16>
 8007708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	4611      	mov	r1, r2
 800770e:	f7ff bc59 	b.w	8006fc4 <_malloc_r>
 8007712:	b92a      	cbnz	r2, 8007720 <_realloc_r+0x24>
 8007714:	f7ff fbea 	bl	8006eec <_free_r>
 8007718:	2400      	movs	r4, #0
 800771a:	4620      	mov	r0, r4
 800771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007720:	f000 f81a 	bl	8007758 <_malloc_usable_size_r>
 8007724:	4285      	cmp	r5, r0
 8007726:	4606      	mov	r6, r0
 8007728:	d802      	bhi.n	8007730 <_realloc_r+0x34>
 800772a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800772e:	d8f4      	bhi.n	800771a <_realloc_r+0x1e>
 8007730:	4629      	mov	r1, r5
 8007732:	4640      	mov	r0, r8
 8007734:	f7ff fc46 	bl	8006fc4 <_malloc_r>
 8007738:	4607      	mov	r7, r0
 800773a:	2800      	cmp	r0, #0
 800773c:	d0ec      	beq.n	8007718 <_realloc_r+0x1c>
 800773e:	42b5      	cmp	r5, r6
 8007740:	462a      	mov	r2, r5
 8007742:	4621      	mov	r1, r4
 8007744:	bf28      	it	cs
 8007746:	4632      	movcs	r2, r6
 8007748:	f7ff fbc2 	bl	8006ed0 <memcpy>
 800774c:	4621      	mov	r1, r4
 800774e:	4640      	mov	r0, r8
 8007750:	f7ff fbcc 	bl	8006eec <_free_r>
 8007754:	463c      	mov	r4, r7
 8007756:	e7e0      	b.n	800771a <_realloc_r+0x1e>

08007758 <_malloc_usable_size_r>:
 8007758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775c:	1f18      	subs	r0, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfbc      	itt	lt
 8007762:	580b      	ldrlt	r3, [r1, r0]
 8007764:	18c0      	addlt	r0, r0, r3
 8007766:	4770      	bx	lr

08007768 <_init>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr

08007774 <_fini>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr
