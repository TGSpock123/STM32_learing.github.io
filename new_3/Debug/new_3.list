
new_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08002668  08002668  00003668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800279c  0800279c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800279c  0800279c  0000379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027a4  080027a4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a4  080027a4  000037a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027a8  080027a8  000037a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000040  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000505e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001568  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000578  00000000  00000000  0000a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003f3  00000000  00000000  0000ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe72  00000000  00000000  0000af73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000084cb  00000000  00000000  0002ade5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c24de  00000000  00000000  000332b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f578e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013c4  00000000  00000000  000f57d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000f6b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002650 	.word	0x08002650

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002650 	.word	0x08002650

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * EXTI
     PC9   ------> RCC_MCO_2
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]
 80004d2:	4b3b      	ldr	r3, [pc, #236]	@ (80005c0 <MX_GPIO_Init+0x108>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a3a      	ldr	r2, [pc, #232]	@ (80005c0 <MX_GPIO_Init+0x108>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b38      	ldr	r3, [pc, #224]	@ (80005c0 <MX_GPIO_Init+0x108>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	4b34      	ldr	r3, [pc, #208]	@ (80005c0 <MX_GPIO_Init+0x108>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a33      	ldr	r2, [pc, #204]	@ (80005c0 <MX_GPIO_Init+0x108>)
 80004f4:	f043 0320 	orr.w	r3, r3, #32
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b31      	ldr	r3, [pc, #196]	@ (80005c0 <MX_GPIO_Init+0x108>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <MX_GPIO_Init+0x108>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a2c      	ldr	r2, [pc, #176]	@ (80005c0 <MX_GPIO_Init+0x108>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b2a      	ldr	r3, [pc, #168]	@ (80005c0 <MX_GPIO_Init+0x108>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <MX_GPIO_Init+0x108>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a25      	ldr	r2, [pc, #148]	@ (80005c0 <MX_GPIO_Init+0x108>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_GPIO_Init+0x108>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000544:	481f      	ldr	r0, [pc, #124]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 8000546:	f000 fe33 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000550:	481c      	ldr	r0, [pc, #112]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 8000552:	f000 fe2d 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 8000556:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	4815      	ldr	r0, [pc, #84]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 8000570:	f000 fb3e 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	2302      	movs	r3, #2
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000586:	2300      	movs	r3, #0
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <MX_GPIO_Init+0x110>)
 8000592:	f000 fb2d 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000596:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	@ (80005cc <MX_GPIO_Init+0x114>)
 80005b4:	f000 fb1c 	bl	8000bf0 <HAL_GPIO_Init>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	@ 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40021400 	.word	0x40021400
 80005c8:	40020800 	.word	0x40020800
 80005cc:	40020000 	.word	0x40020000

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 f98f 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f81d 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ff6b 	bl	80004b8 <MX_GPIO_Init>
  MX_RTC_Init();
 80005e2:	f000 f8a5 	bl	8000730 <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (int cnt = 16800000; cnt > 0; cnt --)
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <main+0x40>)
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	e003      	b.n	80005f4 <main+0x24>
	  {
		  __NOP();
 80005ec:	bf00      	nop
	  for (int cnt = 16800000; cnt > 0; cnt --)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dcf8      	bgt.n	80005ec <main+0x1c>
	  }

	    HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80005fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <main+0x44>)
 8000600:	f000 fe02 	bl	8001208 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8000604:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <main+0x44>)
 800060a:	f000 fdfd 	bl	8001208 <HAL_GPIO_TogglePin>
	  for (int cnt = 16800000; cnt > 0; cnt --)
 800060e:	e7ea      	b.n	80005e6 <main+0x16>
 8000610:	01005900 	.word	0x01005900
 8000614:	40021400 	.word	0x40021400

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 ffe6 	bl	80025f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <SystemClock_Config+0xec>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a2f      	ldr	r2, [pc, #188]	@ (8000704 <SystemClock_Config+0xec>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <SystemClock_Config+0xec>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <SystemClock_Config+0xf0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <SystemClock_Config+0xf0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <SystemClock_Config+0xf0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000674:	2307      	movs	r3, #7
 8000676:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000698:	23a8      	movs	r3, #168	@ 0xa8
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fdcf 	bl	800124c <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006b4:	f000 f82a 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2105      	movs	r1, #5
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f8e4 	bl	80018a4 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006e2:	f000 f813 	bl	800070c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2000      	movs	r0, #0
 80006ec:	f001 fa68 	bl	8001bc0 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2001      	movs	r0, #1
 80006f6:	f001 fa63 	bl	8001bc0 <HAL_RCC_MCOConfig>
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <Error_Handler+0x8>

08000718 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_RTC_Init+0x44>)
 8000736:	4a10      	ldr	r2, [pc, #64]	@ (8000778 <MX_RTC_Init+0x48>)
 8000738:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_RTC_Init+0x44>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_RTC_Init+0x44>)
 8000742:	227f      	movs	r2, #127	@ 0x7f
 8000744:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_RTC_Init+0x44>)
 8000748:	22ff      	movs	r2, #255	@ 0xff
 800074a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_RTC_Init+0x44>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_RTC_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_RTC_Init+0x44>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_RTC_Init+0x44>)
 8000760:	f001 fde2 	bl	8002328 <HAL_RTC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800076a:	f7ff ffcf 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000028 	.word	0x20000028
 8000778:	40002800 	.word	0x40002800

0800077c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0c      	ldr	r2, [pc, #48]	@ (80007c8 <HAL_RTC_MspInit+0x4c>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d111      	bne.n	80007c0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800079c:	2302      	movs	r3, #2
 800079e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fbc2 	bl	8001f34 <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80007b6:	f7ff ffa9 	bl	800070c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007ba:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <HAL_RTC_MspInit+0x50>)
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40002800 	.word	0x40002800
 80007cc:	42470e3c 	.word	0x42470e3c

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <NMI_Handler+0x4>

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <UsageFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000876:	f000 f891 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a8:	f7ff ffea 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fe99 	bl	8002608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe7b 	bl	80005d0 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e8:	080027ac 	.word	0x080027ac
  ldr r2, =_sbss
 80008ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f0:	2000004c 	.word	0x2000004c

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f90d 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff ff50 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f93c 	bl	8000bd8 <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f902 	bl	8000b80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	@ (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000048 	.word	0x20000048

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000048 	.word	0x20000048

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	@ 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	@ 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f7ff ff8e 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d00f      	beq.n	8000b6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d00c      	beq.n	8000b6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b05      	cmp	r3, #5
 8000b58:	d009      	beq.n	8000b6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d006      	beq.n	8000b6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d003      	beq.n	8000b6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b66:	2190      	movs	r1, #144	@ 0x90
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000b6a:	f7ff fdd5 	bl	8000718 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ff34 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	08002668 	.word	0x08002668

08000b80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d903      	bls.n	8000ba0 <HAL_NVIC_SetPriority+0x20>
 8000b98:	21a8      	movs	r1, #168	@ 0xa8
 8000b9a:	480e      	ldr	r0, [pc, #56]	@ (8000bd4 <HAL_NVIC_SetPriority+0x54>)
 8000b9c:	f7ff fdbc 	bl	8000718 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	d903      	bls.n	8000bae <HAL_NVIC_SetPriority+0x2e>
 8000ba6:	21a9      	movs	r1, #169	@ 0xa9
 8000ba8:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <HAL_NVIC_SetPriority+0x54>)
 8000baa:	f7ff fdb5 	bl	8000718 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bae:	f7ff ff39 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000bb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	6978      	ldr	r0, [r7, #20]
 8000bba:	f7ff ff6b 	bl	8000a94 <NVIC_EncodePriority>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff3a 	bl	8000a40 <__NVIC_SetPriority>
}
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08002668 	.word	0x08002668

08000bd8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff8b 	bl	8000afc <SysTick_Config>
 8000be6:	4603      	mov	r3, r0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a38      	ldr	r2, [pc, #224]	@ (8000cec <HAL_GPIO_Init+0xfc>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d023      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a37      	ldr	r2, [pc, #220]	@ (8000cf0 <HAL_GPIO_Init+0x100>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d01f      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a36      	ldr	r2, [pc, #216]	@ (8000cf4 <HAL_GPIO_Init+0x104>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01b      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a35      	ldr	r2, [pc, #212]	@ (8000cf8 <HAL_GPIO_Init+0x108>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d017      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a34      	ldr	r2, [pc, #208]	@ (8000cfc <HAL_GPIO_Init+0x10c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d013      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a33      	ldr	r2, [pc, #204]	@ (8000d00 <HAL_GPIO_Init+0x110>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d00f      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a32      	ldr	r2, [pc, #200]	@ (8000d04 <HAL_GPIO_Init+0x114>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d00b      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a31      	ldr	r2, [pc, #196]	@ (8000d08 <HAL_GPIO_Init+0x118>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d007      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a30      	ldr	r2, [pc, #192]	@ (8000d0c <HAL_GPIO_Init+0x11c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x66>
 8000c4e:	21ac      	movs	r1, #172	@ 0xac
 8000c50:	482f      	ldr	r0, [pc, #188]	@ (8000d10 <HAL_GPIO_Init+0x120>)
 8000c52:	f7ff fd61 	bl	8000718 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <HAL_GPIO_Init+0x7a>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c68:	d303      	bcc.n	8000c72 <HAL_GPIO_Init+0x82>
 8000c6a:	21ad      	movs	r1, #173	@ 0xad
 8000c6c:	4828      	ldr	r0, [pc, #160]	@ (8000d10 <HAL_GPIO_Init+0x120>)
 8000c6e:	f7ff fd53 	bl	8000718 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d035      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d031      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b11      	cmp	r3, #17
 8000c88:	d02d      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d029      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d025      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8000ca2:	d020      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8000cac:	d01b      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8000cb6:	d016      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8000cc0:	d011      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8000cca:	d00c      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8000cd4:	d007      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0xf6>
 8000cde:	21ae      	movs	r1, #174	@ 0xae
 8000ce0:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <HAL_GPIO_Init+0x120>)
 8000ce2:	f7ff fd19 	bl	8000718 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e241      	b.n	8001170 <HAL_GPIO_Init+0x580>
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40021400 	.word	0x40021400
 8000d04:	40021800 	.word	0x40021800
 8000d08:	40021c00 	.word	0x40021c00
 8000d0c:	40022000 	.word	0x40022000
 8000d10:	080026a4 	.word	0x080026a4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d14:	2201      	movs	r2, #1
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f040 821c 	bne.w	800116a <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d005      	beq.n	8000d4a <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d144      	bne.n	8000dd4 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00f      	beq.n	8000d72 <HAL_GPIO_Init+0x182>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00b      	beq.n	8000d72 <HAL_GPIO_Init+0x182>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d007      	beq.n	8000d72 <HAL_GPIO_Init+0x182>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x182>
 8000d6a:	21c0      	movs	r1, #192	@ 0xc0
 8000d6c:	4881      	ldr	r0, [pc, #516]	@ (8000f74 <HAL_GPIO_Init+0x384>)
 8000d6e:	f7ff fcd3 	bl	8000718 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d027      	beq.n	8000e30 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00b      	beq.n	8000e00 <HAL_GPIO_Init+0x210>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d007      	beq.n	8000e00 <HAL_GPIO_Init+0x210>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x210>
 8000df8:	21d1      	movs	r1, #209	@ 0xd1
 8000dfa:	485e      	ldr	r0, [pc, #376]	@ (8000f74 <HAL_GPIO_Init+0x384>)
 8000dfc:	f7ff fc8c 	bl	8000718 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	f040 80c1 	bne.w	8000fc0 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8098 	beq.w	8000f78 <HAL_GPIO_Init+0x388>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	2b09      	cmp	r3, #9
 8000e4e:	f000 8093 	beq.w	8000f78 <HAL_GPIO_Init+0x388>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 808e 	beq.w	8000f78 <HAL_GPIO_Init+0x388>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 8089 	beq.w	8000f78 <HAL_GPIO_Init+0x388>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8084 	beq.w	8000f78 <HAL_GPIO_Init+0x388>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d07f      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d07b      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d077      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d073      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d06f      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d06b      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d067      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d063      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d05f      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d05b      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d057      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d053      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	d04f      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	2b06      	cmp	r3, #6
 8000ede:	d04b      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	2b09      	cmp	r3, #9
 8000ee6:	d047      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d043      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	2b07      	cmp	r3, #7
 8000ef6:	d03f      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	d03b      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d037      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d033      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d02f      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	d02b      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d027      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	2b0a      	cmp	r3, #10
 8000f2e:	d023      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	2b0a      	cmp	r3, #10
 8000f36:	d01f      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	2b0b      	cmp	r3, #11
 8000f3e:	d01b      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	2b0c      	cmp	r3, #12
 8000f46:	d017      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b0c      	cmp	r3, #12
 8000f4e:	d013      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	2b0d      	cmp	r3, #13
 8000f56:	d00f      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	2b0c      	cmp	r3, #12
 8000f5e:	d00b      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d007      	beq.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f68:	21de      	movs	r1, #222	@ 0xde
 8000f6a:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <HAL_GPIO_Init+0x384>)
 8000f6c:	f7ff fbd4 	bl	8000718 <assert_failed>
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x388>
 8000f72:	bf00      	nop
 8000f74:	080026a4 	.word	0x080026a4
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80b4 	beq.w	800116a <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b5f      	ldr	r3, [pc, #380]	@ (8001184 <HAL_GPIO_Init+0x594>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a5e      	ldr	r2, [pc, #376]	@ (8001184 <HAL_GPIO_Init+0x594>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b5c      	ldr	r3, [pc, #368]	@ (8001184 <HAL_GPIO_Init+0x594>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a5a      	ldr	r2, [pc, #360]	@ (8001188 <HAL_GPIO_Init+0x598>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a51      	ldr	r2, [pc, #324]	@ (800118c <HAL_GPIO_Init+0x59c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d02b      	beq.n	80010a2 <HAL_GPIO_Init+0x4b2>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a50      	ldr	r2, [pc, #320]	@ (8001190 <HAL_GPIO_Init+0x5a0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d025      	beq.n	800109e <HAL_GPIO_Init+0x4ae>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4f      	ldr	r2, [pc, #316]	@ (8001194 <HAL_GPIO_Init+0x5a4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d01f      	beq.n	800109a <HAL_GPIO_Init+0x4aa>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4e      	ldr	r2, [pc, #312]	@ (8001198 <HAL_GPIO_Init+0x5a8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x4a6>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4d      	ldr	r2, [pc, #308]	@ (800119c <HAL_GPIO_Init+0x5ac>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x4a2>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4c      	ldr	r2, [pc, #304]	@ (80011a0 <HAL_GPIO_Init+0x5b0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x49e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4b      	ldr	r2, [pc, #300]	@ (80011a4 <HAL_GPIO_Init+0x5b4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x49a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4a      	ldr	r2, [pc, #296]	@ (80011a8 <HAL_GPIO_Init+0x5b8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x496>
 8001082:	2307      	movs	r3, #7
 8001084:	e00e      	b.n	80010a4 <HAL_GPIO_Init+0x4b4>
 8001086:	2308      	movs	r3, #8
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_Init+0x4b4>
 800108a:	2306      	movs	r3, #6
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x4b4>
 800108e:	2305      	movs	r3, #5
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x4b4>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x4b4>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x4b4>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x4b4>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x4b4>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4934      	ldr	r1, [pc, #208]	@ (8001188 <HAL_GPIO_Init+0x598>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <HAL_GPIO_Init+0x5bc>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a31      	ldr	r2, [pc, #196]	@ (80011ac <HAL_GPIO_Init+0x5bc>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <HAL_GPIO_Init+0x5bc>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a26      	ldr	r2, [pc, #152]	@ (80011ac <HAL_GPIO_Init+0x5bc>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <HAL_GPIO_Init+0x5bc>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <HAL_GPIO_Init+0x5bc>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <HAL_GPIO_Init+0x5bc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <HAL_GPIO_Init+0x5bc>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f adce 	bls.w	8000d14 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40021c00 	.word	0x40021c00
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d104      	bne.n	80011d0 <HAL_GPIO_WritePin+0x20>
 80011c6:	f240 119d 	movw	r1, #413	@ 0x19d
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <HAL_GPIO_WritePin+0x54>)
 80011cc:	f7ff faa4 	bl	8000718 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_WritePin+0x36>
 80011d6:	787b      	ldrb	r3, [r7, #1]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d004      	beq.n	80011e6 <HAL_GPIO_WritePin+0x36>
 80011dc:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80011e0:	4808      	ldr	r0, [pc, #32]	@ (8001204 <HAL_GPIO_WritePin+0x54>)
 80011e2:	f7ff fa99 	bl	8000718 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80011e6:	787b      	ldrb	r3, [r7, #1]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ec:	887a      	ldrh	r2, [r7, #2]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f2:	e003      	b.n	80011fc <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	041a      	lsls	r2, r3, #16
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	080026a4 	.word	0x080026a4

08001208 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d104      	bne.n	8001224 <HAL_GPIO_TogglePin+0x1c>
 800121a:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 800121e:	480a      	ldr	r0, [pc, #40]	@ (8001248 <HAL_GPIO_TogglePin+0x40>)
 8001220:	f7ff fa7a 	bl	8000718 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43d9      	mvns	r1, r3
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	400b      	ands	r3, r1
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	080026a4 	.word	0x080026a4

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e318      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	d903      	bls.n	800126e <HAL_RCC_OscConfig+0x22>
 8001266:	21e6      	movs	r1, #230	@ 0xe6
 8001268:	4897      	ldr	r0, [pc, #604]	@ (80014c8 <HAL_RCC_OscConfig+0x27c>)
 800126a:	f7ff fa55 	bl	8000718 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8088 	beq.w	800138c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00d      	beq.n	80012a0 <HAL_RCC_OscConfig+0x54>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128c:	d008      	beq.n	80012a0 <HAL_RCC_OscConfig+0x54>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001296:	d003      	beq.n	80012a0 <HAL_RCC_OscConfig+0x54>
 8001298:	21eb      	movs	r1, #235	@ 0xeb
 800129a:	488b      	ldr	r0, [pc, #556]	@ (80014c8 <HAL_RCC_OscConfig+0x27c>)
 800129c:	f7ff fa3c 	bl	8000718 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a0:	4b8a      	ldr	r3, [pc, #552]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d00c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ac:	4b87      	ldr	r3, [pc, #540]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d112      	bne.n	80012de <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b8:	4b84      	ldr	r3, [pc, #528]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012c4:	d10b      	bne.n	80012de <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	4b81      	ldr	r3, [pc, #516]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d05b      	beq.n	800138a <HAL_RCC_OscConfig+0x13e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d157      	bne.n	800138a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e2d8      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0xaa>
 80012e8:	4b78      	ldr	r3, [pc, #480]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a77      	ldr	r2, [pc, #476]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e01d      	b.n	8001332 <HAL_RCC_OscConfig+0xe6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012fe:	d10c      	bne.n	800131a <HAL_RCC_OscConfig+0xce>
 8001300:	4b72      	ldr	r3, [pc, #456]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a71      	ldr	r2, [pc, #452]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001306:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b6f      	ldr	r3, [pc, #444]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a6e      	ldr	r2, [pc, #440]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e00b      	b.n	8001332 <HAL_RCC_OscConfig+0xe6>
 800131a:	4b6c      	ldr	r3, [pc, #432]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6b      	ldr	r2, [pc, #428]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b69      	ldr	r3, [pc, #420]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a68      	ldr	r2, [pc, #416]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 800132c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d013      	beq.n	8001362 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fb43 	bl	80009c4 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001342:	f7ff fb3f 	bl	80009c4 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	@ 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e29d      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001354:	4b5d      	ldr	r3, [pc, #372]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0xf6>
 8001360:	e014      	b.n	800138c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fb2f 	bl	80009c4 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136a:	f7ff fb2b 	bl	80009c4 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b64      	cmp	r3, #100	@ 0x64
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e289      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137c:	4b53      	ldr	r3, [pc, #332]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x11e>
 8001388:	e000      	b.n	800138c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d079      	beq.n	800148c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_RCC_OscConfig+0x166>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d004      	beq.n	80013b2 <HAL_RCC_OscConfig+0x166>
 80013a8:	f240 111d 	movw	r1, #285	@ 0x11d
 80013ac:	4846      	ldr	r0, [pc, #280]	@ (80014c8 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	f7ff f9b3 	bl	8000718 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	d904      	bls.n	80013c4 <HAL_RCC_OscConfig+0x178>
 80013ba:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80013be:	4842      	ldr	r0, [pc, #264]	@ (80014c8 <HAL_RCC_OscConfig+0x27c>)
 80013c0:	f7ff f9aa 	bl	8000718 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c4:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d0:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d11c      	bne.n	8001416 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013dc:	4b3b      	ldr	r3, [pc, #236]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d116      	bne.n	8001416 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e8:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x1b4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e247      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	492f      	ldr	r1, [pc, #188]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	e03a      	b.n	800148c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d020      	beq.n	8001460 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141e:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <HAL_RCC_OscConfig+0x284>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff face 	bl	80009c4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff faca 	bl	80009c4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e228      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	491c      	ldr	r1, [pc, #112]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
 800145e:	e015      	b.n	800148c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_RCC_OscConfig+0x284>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff faad 	bl	80009c4 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff faa9 	bl	80009c4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e207      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_RCC_OscConfig+0x280>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d045      	beq.n	8001524 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_RCC_OscConfig+0x266>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d004      	beq.n	80014b2 <HAL_RCC_OscConfig+0x266>
 80014a8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80014ac:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	f7ff f933 	bl	8000718 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01e      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_RCC_OscConfig+0x288>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa80 	bl	80009c4 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e010      	b.n	80014ea <HAL_RCC_OscConfig+0x29e>
 80014c8:	080026e0 	.word	0x080026e0
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470000 	.word	0x42470000
 80014d4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fa74 	bl	80009c4 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1d2      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x28c>
 80014f6:	e015      	b.n	8001524 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001668 <HAL_RCC_OscConfig+0x41c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa61 	bl	80009c4 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fa5d 	bl	80009c4 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1bb      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	4b52      	ldr	r3, [pc, #328]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 800151a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80b0 	beq.w	8001692 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00c      	beq.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d008      	beq.n	8001558 <HAL_RCC_OscConfig+0x30c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b05      	cmp	r3, #5
 800154c:	d004      	beq.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800154e:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8001552:	4846      	ldr	r0, [pc, #280]	@ (800166c <HAL_RCC_OscConfig+0x420>)
 8001554:	f7ff f8e0 	bl	8000718 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001558:	4b42      	ldr	r3, [pc, #264]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10f      	bne.n	8001584 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b3e      	ldr	r3, [pc, #248]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a3d      	ldr	r2, [pc, #244]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
 8001574:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001580:	2301      	movs	r3, #1
 8001582:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b3a      	ldr	r3, [pc, #232]	@ (8001670 <HAL_RCC_OscConfig+0x424>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d118      	bne.n	80015c2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001590:	4b37      	ldr	r3, [pc, #220]	@ (8001670 <HAL_RCC_OscConfig+0x424>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a36      	ldr	r2, [pc, #216]	@ (8001670 <HAL_RCC_OscConfig+0x424>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159c:	f7ff fa12 	bl	80009c4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a4:	f7ff fa0e 	bl	80009c4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e16c      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <HAL_RCC_OscConfig+0x424>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d106      	bne.n	80015d8 <HAL_RCC_OscConfig+0x38c>
 80015ca:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ce:	4a25      	ldr	r2, [pc, #148]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d6:	e01c      	b.n	8001612 <HAL_RCC_OscConfig+0x3c6>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x3ae>
 80015e0:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x3c6>
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fe:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6713      	str	r3, [r2, #112]	@ 0x70
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160a:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d015      	beq.n	8001646 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff f9d3 	bl	80009c4 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff f9cf 	bl	80009c4 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e12b      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_RCC_OscConfig+0x418>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ee      	beq.n	8001622 <HAL_RCC_OscConfig+0x3d6>
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff f9bd 	bl	80009c4 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	e012      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff f9b9 	bl	80009c4 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d909      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e115      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
 8001664:	40023800 	.word	0x40023800
 8001668:	42470e80 	.word	0x42470e80
 800166c:	080026e0 	.word	0x080026e0
 8001670:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001674:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e6      	bne.n	800164e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001686:	4b84      	ldr	r3, [pc, #528]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a83      	ldr	r2, [pc, #524]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 800168c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x468>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d008      	beq.n	80016b4 <HAL_RCC_OscConfig+0x468>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d004      	beq.n	80016b4 <HAL_RCC_OscConfig+0x468>
 80016aa:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80016ae:	487b      	ldr	r0, [pc, #492]	@ (800189c <HAL_RCC_OscConfig+0x650>)
 80016b0:	f7ff f832 	bl	8000718 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80e8 	beq.w	800188e <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016be:	4b76      	ldr	r3, [pc, #472]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	f000 80a9 	beq.w	800181e <HAL_RCC_OscConfig+0x5d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	f040 808d 	bne.w	80017f0 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_OscConfig+0x4a6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016e6:	d004      	beq.n	80016f2 <HAL_RCC_OscConfig+0x4a6>
 80016e8:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 80016ec:	486b      	ldr	r0, [pc, #428]	@ (800189c <HAL_RCC_OscConfig+0x650>)
 80016ee:	f7ff f813 	bl	8000718 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d903      	bls.n	8001702 <HAL_RCC_OscConfig+0x4b6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001700:	d904      	bls.n	800170c <HAL_RCC_OscConfig+0x4c0>
 8001702:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8001706:	4865      	ldr	r0, [pc, #404]	@ (800189c <HAL_RCC_OscConfig+0x650>)
 8001708:	f7ff f806 	bl	8000718 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	2b31      	cmp	r3, #49	@ 0x31
 8001712:	d904      	bls.n	800171e <HAL_RCC_OscConfig+0x4d2>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 800171c:	d904      	bls.n	8001728 <HAL_RCC_OscConfig+0x4dc>
 800171e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8001722:	485e      	ldr	r0, [pc, #376]	@ (800189c <HAL_RCC_OscConfig+0x650>)
 8001724:	f7fe fff8 	bl	8000718 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	2b02      	cmp	r3, #2
 800172e:	d010      	beq.n	8001752 <HAL_RCC_OscConfig+0x506>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001734:	2b04      	cmp	r3, #4
 8001736:	d00c      	beq.n	8001752 <HAL_RCC_OscConfig+0x506>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173c:	2b06      	cmp	r3, #6
 800173e:	d008      	beq.n	8001752 <HAL_RCC_OscConfig+0x506>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	2b08      	cmp	r3, #8
 8001746:	d004      	beq.n	8001752 <HAL_RCC_OscConfig+0x506>
 8001748:	f240 11d9 	movw	r1, #473	@ 0x1d9
 800174c:	4853      	ldr	r0, [pc, #332]	@ (800189c <HAL_RCC_OscConfig+0x650>)
 800174e:	f7fe ffe3 	bl	8000718 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001756:	2b01      	cmp	r3, #1
 8001758:	d903      	bls.n	8001762 <HAL_RCC_OscConfig+0x516>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	2b0f      	cmp	r3, #15
 8001760:	d904      	bls.n	800176c <HAL_RCC_OscConfig+0x520>
 8001762:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8001766:	484d      	ldr	r0, [pc, #308]	@ (800189c <HAL_RCC_OscConfig+0x650>)
 8001768:	f7fe ffd6 	bl	8000718 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	4b4c      	ldr	r3, [pc, #304]	@ (80018a0 <HAL_RCC_OscConfig+0x654>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff f927 	bl	80009c4 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff f923 	bl	80009c4 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e081      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178c:	4b42      	ldr	r3, [pc, #264]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69da      	ldr	r2, [r3, #28]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	019b      	lsls	r3, r3, #6
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	3b01      	subs	r3, #1
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	061b      	lsls	r3, r3, #24
 80017bc:	4936      	ldr	r1, [pc, #216]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c2:	4b37      	ldr	r3, [pc, #220]	@ (80018a0 <HAL_RCC_OscConfig+0x654>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff f8fc 	bl	80009c4 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f8f8 	bl	80009c4 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e056      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x584>
 80017ee:	e04e      	b.n	800188e <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <HAL_RCC_OscConfig+0x654>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff f8e5 	bl	80009c4 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff f8e1 	bl	80009c4 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e03f      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001810:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x5b2>
 800181c:	e037      	b.n	800188e <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e032      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x64c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d028      	beq.n	800188a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d121      	bne.n	800188a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d11a      	bne.n	800188a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800185a:	4013      	ands	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001860:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001862:	4293      	cmp	r3, r2
 8001864:	d111      	bne.n	800188a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d107      	bne.n	800188a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001884:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x642>
#endif
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	080026e0 	.word	0x080026e0
 80018a0:	42470060 	.word	0x42470060

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e174      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x24>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d904      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x2e>
 80018c8:	f240 215a 	movw	r1, #602	@ 0x25a
 80018cc:	487b      	ldr	r0, [pc, #492]	@ (8001abc <HAL_RCC_ClockConfig+0x218>)
 80018ce:	f7fe ff23 	bl	8000718 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d019      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d016      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d013      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d010      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d00d      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d00a      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b06      	cmp	r3, #6
 80018fa:	d007      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b07      	cmp	r3, #7
 8001900:	d004      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
 8001902:	f240 215b 	movw	r1, #603	@ 0x25b
 8001906:	486d      	ldr	r0, [pc, #436]	@ (8001abc <HAL_RCC_ClockConfig+0x218>)
 8001908:	f7fe ff06 	bl	8000718 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac0 <HAL_RCC_ClockConfig+0x21c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d90c      	bls.n	8001934 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b69      	ldr	r3, [pc, #420]	@ (8001ac0 <HAL_RCC_ClockConfig+0x21c>)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b67      	ldr	r3, [pc, #412]	@ (8001ac0 <HAL_RCC_ClockConfig+0x21c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e136      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d049      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800194c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 8001952:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001964:	4b57      	ldr	r3, [pc, #348]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a56      	ldr	r2, [pc, #344]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 800196a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800196e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d024      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b80      	cmp	r3, #128	@ 0x80
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b90      	cmp	r3, #144	@ 0x90
 8001986:	d01c      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2ba0      	cmp	r3, #160	@ 0xa0
 800198e:	d018      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2bb0      	cmp	r3, #176	@ 0xb0
 8001996:	d014      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2bc0      	cmp	r3, #192	@ 0xc0
 800199e:	d010      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2bd0      	cmp	r3, #208	@ 0xd0
 80019a6:	d00c      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2be0      	cmp	r3, #224	@ 0xe0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2bf0      	cmp	r3, #240	@ 0xf0
 80019b6:	d004      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11e>
 80019b8:	f240 217e 	movw	r1, #638	@ 0x27e
 80019bc:	483f      	ldr	r0, [pc, #252]	@ (8001abc <HAL_RCC_ClockConfig+0x218>)
 80019be:	f7fe feab 	bl	8000718 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c2:	4b40      	ldr	r3, [pc, #256]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	493d      	ldr	r1, [pc, #244]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d059      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d010      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d00c      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d004      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
 8001a00:	f240 2185 	movw	r1, #645	@ 0x285
 8001a04:	482d      	ldr	r0, [pc, #180]	@ (8001abc <HAL_RCC_ClockConfig+0x218>)
 8001a06:	f7fe fe87 	bl	8000718 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d119      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0bf      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0af      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0a7      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4919      	ldr	r1, [pc, #100]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a64:	f7fe ffae 	bl	80009c4 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7fe ffaa 	bl	80009c4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e08f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_RCC_ClockConfig+0x220>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_RCC_ClockConfig+0x21c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d212      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <HAL_RCC_ClockConfig+0x21c>)
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_RCC_ClockConfig+0x21c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d007      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e072      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x2fe>
 8001abc:	080026e0 	.word	0x080026e0
 8001ac0:	40023c00 	.word	0x40023c00
 8001ac4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d025      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d018      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x26a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae4:	d013      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x26a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8001aee:	d00e      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x26a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x26a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8001b02:	d004      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x26a>
 8001b04:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8001b08:	4828      	ldr	r0, [pc, #160]	@ (8001bac <HAL_RCC_ClockConfig+0x308>)
 8001b0a:	f7fe fe05 	bl	8000718 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0e:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <HAL_RCC_ClockConfig+0x30c>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	4925      	ldr	r1, [pc, #148]	@ (8001bb0 <HAL_RCC_ClockConfig+0x30c>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d026      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d018      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x2c2>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b3c:	d013      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x2c2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8001b46:	d00e      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x2c2>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x2c2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8001b5a:	d004      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x2c2>
 8001b5c:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8001b60:	4812      	ldr	r0, [pc, #72]	@ (8001bac <HAL_RCC_ClockConfig+0x308>)
 8001b62:	f7fe fdd9 	bl	8000718 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b66:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_RCC_ClockConfig+0x30c>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	490e      	ldr	r1, [pc, #56]	@ (8001bb0 <HAL_RCC_ClockConfig+0x30c>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7a:	f000 f8d5 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <HAL_RCC_ClockConfig+0x30c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	490a      	ldr	r1, [pc, #40]	@ (8001bb4 <HAL_RCC_ClockConfig+0x310>)
 8001b8c:	5ccb      	ldrb	r3, [r1, r3]
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <HAL_RCC_ClockConfig+0x314>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_RCC_ClockConfig+0x318>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fece 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	080026e0 	.word	0x080026e0
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	0800278c 	.word	0x0800278c
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	@ 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_RCC_MCOConfig+0x22>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d004      	beq.n	8001be2 <HAL_RCC_MCOConfig+0x22>
 8001bd8:	f240 310b 	movw	r1, #779	@ 0x30b
 8001bdc:	484e      	ldr	r0, [pc, #312]	@ (8001d18 <HAL_RCC_MCOConfig+0x158>)
 8001bde:	f7fe fd9b 	bl	8000718 <assert_failed>
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d014      	beq.n	8001c12 <HAL_RCC_MCOConfig+0x52>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001bee:	d010      	beq.n	8001c12 <HAL_RCC_MCOConfig+0x52>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8001bf6:	d00c      	beq.n	8001c12 <HAL_RCC_MCOConfig+0x52>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_MCOConfig+0x52>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8001c06:	d004      	beq.n	8001c12 <HAL_RCC_MCOConfig+0x52>
 8001c08:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8001c0c:	4842      	ldr	r0, [pc, #264]	@ (8001d18 <HAL_RCC_MCOConfig+0x158>)
 8001c0e:	f7fe fd83 	bl	8000718 <assert_failed>
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d13d      	bne.n	8001c94 <HAL_RCC_MCOConfig+0xd4>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d010      	beq.n	8001c40 <HAL_RCC_MCOConfig+0x80>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c24:	d00c      	beq.n	8001c40 <HAL_RCC_MCOConfig+0x80>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c2c:	d008      	beq.n	8001c40 <HAL_RCC_MCOConfig+0x80>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001c34:	d004      	beq.n	8001c40 <HAL_RCC_MCOConfig+0x80>
 8001c36:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8001c3a:	4837      	ldr	r0, [pc, #220]	@ (8001d18 <HAL_RCC_MCOConfig+0x158>)
 8001c3c:	f7fe fd6c 	bl	8000718 <assert_failed>

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	4a34      	ldr	r2, [pc, #208]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c50:	4b32      	ldr	r3, [pc, #200]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4829      	ldr	r0, [pc, #164]	@ (8001d20 <HAL_RCC_MCOConfig+0x160>)
 8001c7a:	f7fe ffb9 	bl	8000bf0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001c7e:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	4923      	ldr	r1, [pc, #140]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001c92:	e03d      	b.n	8001d10 <HAL_RCC_MCOConfig+0x150>
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d010      	beq.n	8001cbc <HAL_RCC_MCOConfig+0xfc>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca0:	d00c      	beq.n	8001cbc <HAL_RCC_MCOConfig+0xfc>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ca8:	d008      	beq.n	8001cbc <HAL_RCC_MCOConfig+0xfc>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001cb0:	d004      	beq.n	8001cbc <HAL_RCC_MCOConfig+0xfc>
 8001cb2:	f44f 714a 	mov.w	r1, #808	@ 0x328
 8001cb6:	4818      	ldr	r0, [pc, #96]	@ (8001d18 <HAL_RCC_MCOConfig+0x158>)
 8001cb8:	f7fe fd2e 	bl	8000718 <assert_failed>
    __MCO2_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	4a15      	ldr	r2, [pc, #84]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ccc:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480b      	ldr	r0, [pc, #44]	@ (8001d24 <HAL_RCC_MCOConfig+0x164>)
 8001cf6:	f7fe ff7b 	bl	8000bf0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001cfa:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	00d9      	lsls	r1, r3, #3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	4904      	ldr	r1, [pc, #16]	@ (8001d1c <HAL_RCC_MCOConfig+0x15c>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
}
 8001d10:	bf00      	nop
 8001d12:	3730      	adds	r7, #48	@ 0x30
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	080026e0 	.word	0x080026e0
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020800 	.word	0x40020800

08001d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d2c:	b094      	sub	sp, #80	@ 0x50
 8001d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d34:	2300      	movs	r3, #0
 8001d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d38:	2300      	movs	r3, #0
 8001d3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d40:	4b79      	ldr	r3, [pc, #484]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d00d      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x40>
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	f200 80e1 	bhi.w	8001f14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x34>
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d003      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d5a:	e0db      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b73      	ldr	r3, [pc, #460]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001d60:	e0db      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d62:	4b73      	ldr	r3, [pc, #460]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d66:	e0d8      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d68:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d70:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d72:	4b6d      	ldr	r3, [pc, #436]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d063      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	2200      	movs	r2, #0
 8001d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d92:	2300      	movs	r3, #0
 8001d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	462b      	mov	r3, r5
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	0159      	lsls	r1, r3, #5
 8001da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dac:	0150      	lsls	r0, r2, #5
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4621      	mov	r1, r4
 8001db4:	1a51      	subs	r1, r2, r1
 8001db6:	6139      	str	r1, [r7, #16]
 8001db8:	4629      	mov	r1, r5
 8001dba:	eb63 0301 	sbc.w	r3, r3, r1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dcc:	4659      	mov	r1, fp
 8001dce:	018b      	lsls	r3, r1, #6
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd6:	4651      	mov	r1, sl
 8001dd8:	018a      	lsls	r2, r1, #6
 8001dda:	4651      	mov	r1, sl
 8001ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8001de0:	4659      	mov	r1, fp
 8001de2:	eb63 0901 	sbc.w	r9, r3, r1
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	4699      	mov	r9, r3
 8001dfe:	4623      	mov	r3, r4
 8001e00:	eb18 0303 	adds.w	r3, r8, r3
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	462b      	mov	r3, r5
 8001e08:	eb49 0303 	adc.w	r3, r9, r3
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	024b      	lsls	r3, r1, #9
 8001e1e:	4621      	mov	r1, r4
 8001e20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e24:	4621      	mov	r1, r4
 8001e26:	024a      	lsls	r2, r1, #9
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2e:	2200      	movs	r2, #0
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e38:	f7fe f9c6 	bl	80001c8 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4613      	mov	r3, r2
 8001e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e44:	e058      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	099b      	lsrs	r3, r3, #6
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4611      	mov	r1, r2
 8001e52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e60:	4642      	mov	r2, r8
 8001e62:	464b      	mov	r3, r9
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	0159      	lsls	r1, r3, #5
 8001e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e72:	0150      	lsls	r0, r2, #5
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4641      	mov	r1, r8
 8001e7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e7e:	4649      	mov	r1, r9
 8001e80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e98:	ebb2 040a 	subs.w	r4, r2, sl
 8001e9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	00eb      	lsls	r3, r5, #3
 8001eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eae:	00e2      	lsls	r2, r4, #3
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	4643      	mov	r3, r8
 8001eb6:	18e3      	adds	r3, r4, r3
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	464b      	mov	r3, r9
 8001ebc:	eb45 0303 	adc.w	r3, r5, r3
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	028b      	lsls	r3, r1, #10
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed8:	4621      	mov	r1, r4
 8001eda:	028a      	lsls	r2, r1, #10
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	61fa      	str	r2, [r7, #28]
 8001ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eec:	f7fe f96c 	bl	80001c8 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001f08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3750      	adds	r7, #80	@ 0x50
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	00f42400 	.word	0x00f42400
 8001f30:	007a1200 	.word	0x007a1200

08001f34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b07      	cmp	r3, #7
 8001f52:	d904      	bls.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8001f54:	f640 11eb 	movw	r1, #2539	@ 0x9eb
 8001f58:	482c      	ldr	r0, [pc, #176]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8001f5a:	f7fe fbdd 	bl	8000718 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d056      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d903      	bls.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b07      	cmp	r3, #7
 8001f84:	d904      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f86:	f640 11f2 	movw	r1, #2546	@ 0x9f2
 8001f8a:	4820      	ldr	r0, [pc, #128]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8001f8c:	f7fe fbc4 	bl	8000718 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b31      	cmp	r3, #49	@ 0x31
 8001f96:	d904      	bls.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8001fa0:	d904      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001fa2:	f640 11f3 	movw	r1, #2547	@ 0x9f3
 8001fa6:	4819      	ldr	r0, [pc, #100]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8001fa8:	f7fe fbb6 	bl	8000718 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fd07 	bl	80009c4 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fba:	f7fe fd03 	bl	80009c4 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1a6      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	019a      	lsls	r2, r3, #6
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	071b      	lsls	r3, r3, #28
 8001fe4:	490b      	ldr	r1, [pc, #44]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ff2:	f7fe fce7 	bl	80009c4 <HAL_GetTick>
 8001ff6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ffa:	f7fe fce3 	bl	80009c4 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d907      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e186      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800200c:	08002718 	.word	0x08002718
 8002010:	42470068 	.word	0x42470068
 8002014:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002018:	4b88      	ldr	r3, [pc, #544]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ea      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8173 	beq.w	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800203a:	f000 80a6 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002046:	f000 80a0 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4a7c      	ldr	r2, [pc, #496]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	f000 809a 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	4a7a      	ldr	r2, [pc, #488]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800205c:	4293      	cmp	r3, r2
 800205e:	f000 8094 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4a78      	ldr	r2, [pc, #480]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002068:	4293      	cmp	r3, r2
 800206a:	f000 808e 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4a76      	ldr	r2, [pc, #472]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002074:	4293      	cmp	r3, r2
 8002076:	f000 8088 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4a74      	ldr	r2, [pc, #464]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	f000 8082 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4a72      	ldr	r2, [pc, #456]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d07c      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a70      	ldr	r2, [pc, #448]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d077      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4a6f      	ldr	r2, [pc, #444]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d072      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a6d      	ldr	r2, [pc, #436]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d06d      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d068      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d063      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	4a69      	ldr	r2, [pc, #420]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d05e      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a67      	ldr	r2, [pc, #412]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d059      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a66      	ldr	r2, [pc, #408]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d054      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a64      	ldr	r2, [pc, #400]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d04f      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4a63      	ldr	r2, [pc, #396]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d04a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a61      	ldr	r2, [pc, #388]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d045      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a60      	ldr	r2, [pc, #384]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d040      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a5e      	ldr	r2, [pc, #376]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d03b      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a5d      	ldr	r2, [pc, #372]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d036      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a5b      	ldr	r2, [pc, #364]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d031      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	4a5a      	ldr	r2, [pc, #360]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d02c      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a58      	ldr	r2, [pc, #352]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d027      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	4a57      	ldr	r2, [pc, #348]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a55      	ldr	r2, [pc, #340]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01d      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4a54      	ldr	r2, [pc, #336]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d018      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a52      	ldr	r2, [pc, #328]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4a51      	ldr	r2, [pc, #324]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00e      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a4f      	ldr	r2, [pc, #316]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	4a4e      	ldr	r2, [pc, #312]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002180:	f640 2124 	movw	r1, #2596	@ 0xa24
 8002184:	484c      	ldr	r0, [pc, #304]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002186:	f7fe fac7 	bl	8000718 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6413      	str	r3, [r2, #64]	@ 0x40
 800219a:	4b28      	ldr	r3, [pc, #160]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021a6:	4b45      	ldr	r3, [pc, #276]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a44      	ldr	r2, [pc, #272]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021b2:	f7fe fc07 	bl	80009c4 <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fc03 	bl	80009c4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0a6      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021cc:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x286>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d8:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d073      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d06c      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002200:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002206:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800220c:	4a0b      	ldr	r2, [pc, #44]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d158      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fbd1 	bl	80009c4 <HAL_GetTick>
 8002222:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	e04e      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x390>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fbcd 	bl	80009c4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d945      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e06e      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800223c:	40023800 	.word	0x40023800
 8002240:	00020300 	.word	0x00020300
 8002244:	00030300 	.word	0x00030300
 8002248:	00040300 	.word	0x00040300
 800224c:	00050300 	.word	0x00050300
 8002250:	00060300 	.word	0x00060300
 8002254:	00070300 	.word	0x00070300
 8002258:	00080300 	.word	0x00080300
 800225c:	00090300 	.word	0x00090300
 8002260:	000a0300 	.word	0x000a0300
 8002264:	000b0300 	.word	0x000b0300
 8002268:	000c0300 	.word	0x000c0300
 800226c:	000d0300 	.word	0x000d0300
 8002270:	000e0300 	.word	0x000e0300
 8002274:	000f0300 	.word	0x000f0300
 8002278:	00100300 	.word	0x00100300
 800227c:	00110300 	.word	0x00110300
 8002280:	00120300 	.word	0x00120300
 8002284:	00130300 	.word	0x00130300
 8002288:	00140300 	.word	0x00140300
 800228c:	00150300 	.word	0x00150300
 8002290:	00160300 	.word	0x00160300
 8002294:	00170300 	.word	0x00170300
 8002298:	00180300 	.word	0x00180300
 800229c:	00190300 	.word	0x00190300
 80022a0:	001a0300 	.word	0x001a0300
 80022a4:	001b0300 	.word	0x001b0300
 80022a8:	001c0300 	.word	0x001c0300
 80022ac:	001d0300 	.word	0x001d0300
 80022b0:	001e0300 	.word	0x001e0300
 80022b4:	001f0300 	.word	0x001f0300
 80022b8:	08002718 	.word	0x08002718
 80022bc:	40007000 	.word	0x40007000
 80022c0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0aa      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022dc:	d10d      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80022ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022f2:	490c      	ldr	r1, [pc, #48]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
 80022f8:	e005      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80022fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4a09      	ldr	r2, [pc, #36]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8002300:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002304:	6093      	str	r3, [r2, #8]
 8002306:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8002308:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002312:	4904      	ldr	r1, [pc, #16]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0d1      	b.n	80024e2 <HAL_RTC_Init+0x1ba>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6a      	ldr	r2, [pc, #424]	@ (80024ec <HAL_RTC_Init+0x1c4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_RTC_Init+0x2a>
 8002348:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800234c:	4868      	ldr	r0, [pc, #416]	@ (80024f0 <HAL_RTC_Init+0x1c8>)
 800234e:	f7fe f9e3 	bl	8000718 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b40      	cmp	r3, #64	@ 0x40
 8002358:	d008      	beq.n	800236c <HAL_RTC_Init+0x44>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_RTC_Init+0x44>
 8002362:	f240 1105 	movw	r1, #261	@ 0x105
 8002366:	4862      	ldr	r0, [pc, #392]	@ (80024f0 <HAL_RTC_Init+0x1c8>)
 8002368:	f7fe f9d6 	bl	8000718 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b7f      	cmp	r3, #127	@ 0x7f
 8002372:	d904      	bls.n	800237e <HAL_RTC_Init+0x56>
 8002374:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8002378:	485d      	ldr	r0, [pc, #372]	@ (80024f0 <HAL_RTC_Init+0x1c8>)
 800237a:	f7fe f9cd 	bl	8000718 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002386:	d304      	bcc.n	8002392 <HAL_RTC_Init+0x6a>
 8002388:	f240 1107 	movw	r1, #263	@ 0x107
 800238c:	4858      	ldr	r0, [pc, #352]	@ (80024f0 <HAL_RTC_Init+0x1c8>)
 800238e:	f7fe f9c3 	bl	8000718 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d013      	beq.n	80023c2 <HAL_RTC_Init+0x9a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023a2:	d00e      	beq.n	80023c2 <HAL_RTC_Init+0x9a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ac:	d009      	beq.n	80023c2 <HAL_RTC_Init+0x9a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80023b6:	d004      	beq.n	80023c2 <HAL_RTC_Init+0x9a>
 80023b8:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80023bc:	484c      	ldr	r0, [pc, #304]	@ (80024f0 <HAL_RTC_Init+0x1c8>)
 80023be:	f7fe f9ab 	bl	8000718 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RTC_Init+0xb6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023d2:	d004      	beq.n	80023de <HAL_RTC_Init+0xb6>
 80023d4:	f240 1109 	movw	r1, #265	@ 0x109
 80023d8:	4845      	ldr	r0, [pc, #276]	@ (80024f0 <HAL_RTC_Init+0x1c8>)
 80023da:	f7fe f99d 	bl	8000718 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RTC_Init+0xd2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80023ee:	d004      	beq.n	80023fa <HAL_RTC_Init+0xd2>
 80023f0:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80023f4:	483e      	ldr	r0, [pc, #248]	@ (80024f0 <HAL_RTC_Init+0x1c8>)
 80023f6:	f7fe f98f 	bl	8000718 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7f5b      	ldrb	r3, [r3, #29]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe f9b6 	bl	800077c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d055      	beq.n	80024d0 <HAL_RTC_Init+0x1a8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	22ca      	movs	r2, #202	@ 0xca
 800242a:	625a      	str	r2, [r3, #36]	@ 0x24
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2253      	movs	r2, #83	@ 0x53
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f883 	bl	8002540 <RTC_EnterInitMode>
 800243a:	4603      	mov	r3, r0
 800243c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d12c      	bne.n	800249e <HAL_RTC_Init+0x176>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002456:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6899      	ldr	r1, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68d2      	ldr	r2, [r2, #12]
 800247e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	041a      	lsls	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f88a 	bl	80025ae <RTC_ExitInitMode>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d110      	bne.n	80024c6 <HAL_RTC_Init+0x19e>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	22ff      	movs	r2, #255	@ 0xff
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80024ce:	e001      	b.n	80024d4 <HAL_RTC_Init+0x1ac>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_RTC_Init+0x1b8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40002800 	.word	0x40002800
 80024f0:	08002754 	.word	0x08002754

080024f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0d      	ldr	r2, [pc, #52]	@ (800253c <HAL_RTC_WaitForSynchro+0x48>)
 8002506:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002508:	f7fe fa5c 	bl	80009c4 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800250e:	e009      	b.n	8002524 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002510:	f7fe fa58 	bl	80009c4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800251e:	d901      	bls.n	8002524 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e007      	b.n	8002534 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	00017f5f 	.word	0x00017f5f

08002540 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d122      	bne.n	80025a4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800256c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800256e:	f7fe fa29 	bl	80009c4 <HAL_GetTick>
 8002572:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002574:	e00c      	b.n	8002590 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002576:	f7fe fa25 	bl	80009c4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002584:	d904      	bls.n	8002590 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <RTC_EnterInitMode+0x64>
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d1e8      	bne.n	8002576 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff8b 	bl	80024f4 <HAL_RTC_WaitForSynchro>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2204      	movs	r2, #4
 80025e8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <memset>:
 80025f8:	4402      	add	r2, r0
 80025fa:	4603      	mov	r3, r0
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d100      	bne.n	8002602 <memset+0xa>
 8002600:	4770      	bx	lr
 8002602:	f803 1b01 	strb.w	r1, [r3], #1
 8002606:	e7f9      	b.n	80025fc <memset+0x4>

08002608 <__libc_init_array>:
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	4d0d      	ldr	r5, [pc, #52]	@ (8002640 <__libc_init_array+0x38>)
 800260c:	4c0d      	ldr	r4, [pc, #52]	@ (8002644 <__libc_init_array+0x3c>)
 800260e:	1b64      	subs	r4, r4, r5
 8002610:	10a4      	asrs	r4, r4, #2
 8002612:	2600      	movs	r6, #0
 8002614:	42a6      	cmp	r6, r4
 8002616:	d109      	bne.n	800262c <__libc_init_array+0x24>
 8002618:	4d0b      	ldr	r5, [pc, #44]	@ (8002648 <__libc_init_array+0x40>)
 800261a:	4c0c      	ldr	r4, [pc, #48]	@ (800264c <__libc_init_array+0x44>)
 800261c:	f000 f818 	bl	8002650 <_init>
 8002620:	1b64      	subs	r4, r4, r5
 8002622:	10a4      	asrs	r4, r4, #2
 8002624:	2600      	movs	r6, #0
 8002626:	42a6      	cmp	r6, r4
 8002628:	d105      	bne.n	8002636 <__libc_init_array+0x2e>
 800262a:	bd70      	pop	{r4, r5, r6, pc}
 800262c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002630:	4798      	blx	r3
 8002632:	3601      	adds	r6, #1
 8002634:	e7ee      	b.n	8002614 <__libc_init_array+0xc>
 8002636:	f855 3b04 	ldr.w	r3, [r5], #4
 800263a:	4798      	blx	r3
 800263c:	3601      	adds	r6, #1
 800263e:	e7f2      	b.n	8002626 <__libc_init_array+0x1e>
 8002640:	080027a4 	.word	0x080027a4
 8002644:	080027a4 	.word	0x080027a4
 8002648:	080027a4 	.word	0x080027a4
 800264c:	080027a8 	.word	0x080027a8

08002650 <_init>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	bf00      	nop
 8002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002656:	bc08      	pop	{r3}
 8002658:	469e      	mov	lr, r3
 800265a:	4770      	bx	lr

0800265c <_fini>:
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265e:	bf00      	nop
 8002660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002662:	bc08      	pop	{r3}
 8002664:	469e      	mov	lr, r3
 8002666:	4770      	bx	lr
