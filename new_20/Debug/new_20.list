
new_20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080052b4  080052b4  000062b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a0  080053a0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080053a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a18  20000010  080053b8  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a28  080053b8  00007a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016816  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b7  00000000  00000000  0001d856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00020e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9d  00000000  00000000  00022238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e2d  00000000  00000000  000231d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017789  00000000  00000000  0003c002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000987db  00000000  00000000  0005378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebf66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f8  00000000  00000000  000ebfac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f13a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800529c 	.word	0x0800529c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800529c 	.word	0x0800529c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart_to_output */
  uart_to_outputHandle = osMessageQueueNew (10, sizeof(uint32_t), &uart_to_output_attributes);
 80004d4:	4a10      	ldr	r2, [pc, #64]	@ (8000518 <MX_FREERTOS_Init+0x48>)
 80004d6:	2104      	movs	r1, #4
 80004d8:	200a      	movs	r0, #10
 80004da:	f002 f96f 	bl	80027bc <osMessageQueueNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0e      	ldr	r2, [pc, #56]	@ (800051c <MX_FREERTOS_Init+0x4c>)
 80004e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of read_uart */
  read_uartHandle = osThreadNew(start_read_uart, NULL, &read_uart_attributes);
 80004e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <MX_FREERTOS_Init+0x50>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480e      	ldr	r0, [pc, #56]	@ (8000524 <MX_FREERTOS_Init+0x54>)
 80004ea:	f002 f8d5 	bl	8002698 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <MX_FREERTOS_Init+0x58>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of output */
  outputHandle = osThreadNew(start_output, NULL, &output_attributes);
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <MX_FREERTOS_Init+0x5c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480d      	ldr	r0, [pc, #52]	@ (8000530 <MX_FREERTOS_Init+0x60>)
 80004fa:	f002 f8cd 	bl	8002698 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <MX_FREERTOS_Init+0x64>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of count_time */
  count_timeHandle = osThreadNew(start_count_time, NULL, &count_time_attributes);
 8000504:	4a0c      	ldr	r2, [pc, #48]	@ (8000538 <MX_FREERTOS_Init+0x68>)
 8000506:	2100      	movs	r1, #0
 8000508:	480c      	ldr	r0, [pc, #48]	@ (800053c <MX_FREERTOS_Init+0x6c>)
 800050a:	f002 f8c5 	bl	8002698 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <MX_FREERTOS_Init+0x70>)
 8000512:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08005368 	.word	0x08005368
 800051c:	20000040 	.word	0x20000040
 8000520:	080052fc 	.word	0x080052fc
 8000524:	08000545 	.word	0x08000545
 8000528:	20000034 	.word	0x20000034
 800052c:	08005320 	.word	0x08005320
 8000530:	08000559 	.word	0x08000559
 8000534:	20000038 	.word	0x20000038
 8000538:	08005344 	.word	0x08005344
 800053c:	080005a1 	.word	0x080005a1
 8000540:	2000003c 	.word	0x2000003c

08000544 <start_read_uart>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_read_uart */
void start_read_uart(void *argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_read_uart */
  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(6000);
 800054c:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000550:	f003 f96c 	bl	800382c <vTaskDelay>
 8000554:	e7fa      	b.n	800054c <start_read_uart+0x8>
	...

08000558 <start_output>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_output */
void start_output(void *argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_output */

  /* Infinite loop */
  for(;;)
  {
        toggle_led(WHITE, counter[WHITE]);
 8000560:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <start_output+0x44>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4619      	mov	r1, r3
 8000568:	2000      	movs	r0, #0
 800056a:	f000 f979 	bl	8000860 <toggle_led>
        toggle_led(RED, counter[RED]);
 800056e:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <start_output+0x44>)
 8000570:	885b      	ldrh	r3, [r3, #2]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	4619      	mov	r1, r3
 8000576:	2001      	movs	r0, #1
 8000578:	f000 f972 	bl	8000860 <toggle_led>
        toggle_led(YELLOW, counter[YELLOW]);
 800057c:	4b07      	ldr	r3, [pc, #28]	@ (800059c <start_output+0x44>)
 800057e:	889b      	ldrh	r3, [r3, #4]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	2002      	movs	r0, #2
 8000586:	f000 f96b 	bl	8000860 <toggle_led>
        toggle_led(GREEN, counter[GREEN]);
 800058a:	4b04      	ldr	r3, [pc, #16]	@ (800059c <start_output+0x44>)
 800058c:	88db      	ldrh	r3, [r3, #6]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f964 	bl	8000860 <toggle_led>
        toggle_led(WHITE, counter[WHITE]);
 8000598:	bf00      	nop
 800059a:	e7e1      	b.n	8000560 <start_output+0x8>
 800059c:	2000002c 	.word	0x2000002c

080005a0 <start_count_time>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_count_time */
void start_count_time(void *argument)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_count_time */
  uint32_t time = HAL_GetTick();
 80005a8:	f000 fb80 	bl	8000cac <HAL_GetTick>
 80005ac:	60f8      	str	r0, [r7, #12]
  _Bool buffer = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
    {
      counter[WHITE] = MAX_NUM;
 80005b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <start_count_time+0xc0>)
 80005b4:	2205      	movs	r2, #5
 80005b6:	801a      	strh	r2, [r3, #0]
      counter[RED] = MAX_NUM;
 80005b8:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <start_count_time+0xc0>)
 80005ba:	2205      	movs	r2, #5
 80005bc:	805a      	strh	r2, [r3, #2]
      counter[YELLOW] = MAX_NUM;
 80005be:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <start_count_time+0xc0>)
 80005c0:	2205      	movs	r2, #5
 80005c2:	809a      	strh	r2, [r3, #4]
      counter[GREEN] = MAX_NUM;
 80005c4:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <start_count_time+0xc0>)
 80005c6:	2205      	movs	r2, #5
 80005c8:	80da      	strh	r2, [r3, #6]

      for(;;)
      {
        if(HAL_GetTick() - time >= 1000)
 80005ca:	f000 fb6f 	bl	8000cac <HAL_GetTick>
 80005ce:	4602      	mov	r2, r0
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005d8:	d3f7      	bcc.n	80005ca <start_count_time+0x2a>
        {
          if (counter[GREEN] > MIN_NUM)
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <start_count_time+0xc0>)
 80005dc:	88db      	ldrh	r3, [r3, #6]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <start_count_time+0x50>
          {
            counter[GREEN] --;
 80005e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <start_count_time+0xc0>)
 80005e4:	88db      	ldrh	r3, [r3, #6]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <start_count_time+0xc0>)
 80005ec:	80da      	strh	r2, [r3, #6]
 80005ee:	e031      	b.n	8000654 <start_count_time+0xb4>
          }else if (counter[YELLOW] > MIN_NUM)
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <start_count_time+0xc0>)
 80005f2:	889b      	ldrh	r3, [r3, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d009      	beq.n	800060c <start_count_time+0x6c>
          {
            counter[YELLOW] --;
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <start_count_time+0xc0>)
 80005fa:	889b      	ldrh	r3, [r3, #4]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <start_count_time+0xc0>)
 8000602:	809a      	strh	r2, [r3, #4]
            counter[GREEN] = MAX_NUM;
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <start_count_time+0xc0>)
 8000606:	2205      	movs	r2, #5
 8000608:	80da      	strh	r2, [r3, #6]
 800060a:	e023      	b.n	8000654 <start_count_time+0xb4>
          }else if (counter[RED] > MIN_NUM)
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <start_count_time+0xc0>)
 800060e:	885b      	ldrh	r3, [r3, #2]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00c      	beq.n	800062e <start_count_time+0x8e>
          {
            counter[RED] --;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <start_count_time+0xc0>)
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	3b01      	subs	r3, #1
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <start_count_time+0xc0>)
 800061e:	805a      	strh	r2, [r3, #2]
            counter[YELLOW] = MAX_NUM;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <start_count_time+0xc0>)
 8000622:	2205      	movs	r2, #5
 8000624:	809a      	strh	r2, [r3, #4]
            counter[GREEN] = MAX_NUM;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <start_count_time+0xc0>)
 8000628:	2205      	movs	r2, #5
 800062a:	80da      	strh	r2, [r3, #6]
 800062c:	e012      	b.n	8000654 <start_count_time+0xb4>
          }else if (counter[WHITE] > MIN_NUM)
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <start_count_time+0xc0>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d012      	beq.n	800065c <start_count_time+0xbc>
          {
            counter[WHITE]--;
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <start_count_time+0xc0>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <start_count_time+0xc0>)
 8000640:	801a      	strh	r2, [r3, #0]
            counter[RED] = MAX_NUM;
 8000642:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <start_count_time+0xc0>)
 8000644:	2205      	movs	r2, #5
 8000646:	805a      	strh	r2, [r3, #2]
            counter[YELLOW] = MAX_NUM;
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <start_count_time+0xc0>)
 800064a:	2205      	movs	r2, #5
 800064c:	809a      	strh	r2, [r3, #4]
            counter[GREEN] = MAX_NUM;
 800064e:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <start_count_time+0xc0>)
 8000650:	2205      	movs	r2, #5
 8000652:	80da      	strh	r2, [r3, #6]
          }else
          {
            break;
          }

          time = HAL_GetTick();
 8000654:	f000 fb2a 	bl	8000cac <HAL_GetTick>
 8000658:	60f8      	str	r0, [r7, #12]
        if(HAL_GetTick() - time >= 1000)
 800065a:	e7b6      	b.n	80005ca <start_count_time+0x2a>
            break;
 800065c:	bf00      	nop
      counter[WHITE] = MAX_NUM;
 800065e:	e7a8      	b.n	80005b2 <start_count_time+0x12>
 8000660:	2000002c 	.word	0x2000002c

08000664 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <MX_GPIO_Init+0xcc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a2b      	ldr	r2, [pc, #172]	@ (8000730 <MX_GPIO_Init+0xcc>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <MX_GPIO_Init+0xcc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_GPIO_Init+0xcc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a24      	ldr	r2, [pc, #144]	@ (8000730 <MX_GPIO_Init+0xcc>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_GPIO_Init+0xcc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <MX_GPIO_Init+0xcc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000730 <MX_GPIO_Init+0xcc>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_GPIO_Init+0xcc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, col_yellow_Pin|col_green_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2103      	movs	r1, #3
 80006d2:	4818      	ldr	r0, [pc, #96]	@ (8000734 <MX_GPIO_Init+0xd0>)
 80006d4:	f000 fd5c 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, row_4_Pin|row_3_Pin|row_2_Pin|row_1_Pin
 80006d8:	2201      	movs	r2, #1
 80006da:	21f8      	movs	r1, #248	@ 0xf8
 80006dc:	4816      	ldr	r0, [pc, #88]	@ (8000738 <MX_GPIO_Init+0xd4>)
 80006de:	f000 fd57 	bl	8001190 <HAL_GPIO_WritePin>
                          |row_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, col_white_Pin|col_red_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80006e8:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_GPIO_Init+0xd4>)
 80006ea:	f000 fd51 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = col_yellow_Pin|col_green_Pin;
 80006ee:	2303      	movs	r3, #3
 80006f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4619      	mov	r1, r3
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <MX_GPIO_Init+0xd0>)
 8000706:	f000 fbbf 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = row_4_Pin|row_3_Pin|row_2_Pin|row_1_Pin
 800070a:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 800070e:	60fb      	str	r3, [r7, #12]
                          |row_0_Pin|col_white_Pin|col_red_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_GPIO_Init+0xd4>)
 8000724:	f000 fbb0 	bl	8000e88 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fa7e 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f80c 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f7ff ff8c 	bl	8000664 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074c:	f000 f9dc 	bl	8000b08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000750:	f001 ff58 	bl	8002604 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000754:	f7ff febc 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000758:	f001 ff78 	bl	800264c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <main+0x20>

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	@ 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	@ 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fd5a 	bl	8005228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <SystemClock_Config+0xc8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	4a26      	ldr	r2, [pc, #152]	@ (8000828 <SystemClock_Config+0xc8>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	@ 0x40
 8000794:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <SystemClock_Config+0xc8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b21      	ldr	r3, [pc, #132]	@ (800082c <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a20      	ldr	r2, [pc, #128]	@ (800082c <SystemClock_Config+0xcc>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <SystemClock_Config+0xcc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80007d0:	230c      	movs	r3, #12
 80007d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007d4:	2360      	movs	r3, #96	@ 0x60
 80007d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fd07 	bl	80011f8 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f000 f830 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2103      	movs	r1, #3
 8000810:	4618      	mov	r0, r3
 8000812:	f000 ff69 	bl	80016e8 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800081c:	f000 f81a 	bl	8000854 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	@ 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000842:	f000 fa1f 	bl	8000c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40000800 	.word	0x40000800

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <toggle_led>:
#include "self.h"

void toggle_led (enum_color color, enum_number number)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(GPIOB, row_4_Pin|row_3_Pin|row_2_Pin|row_1_Pin |row_0_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	21f8      	movs	r1, #248	@ 0xf8
 8000874:	4832      	ldr	r0, [pc, #200]	@ (8000940 <toggle_led+0xe0>)
 8000876:	f000 fc8b 	bl	8001190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, col_yellow_Pin|col_green_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2103      	movs	r1, #3
 800087e:	4831      	ldr	r0, [pc, #196]	@ (8000944 <toggle_led+0xe4>)
 8000880:	f000 fc86 	bl	8001190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, col_white_Pin|col_red_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800088a:	482d      	ldr	r0, [pc, #180]	@ (8000940 <toggle_led+0xe0>)
 800088c:	f000 fc80 	bl	8001190 <HAL_GPIO_WritePin>

  switch (color)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d820      	bhi.n	80008d8 <toggle_led+0x78>
 8000896:	a201      	add	r2, pc, #4	@ (adr r2, 800089c <toggle_led+0x3c>)
 8000898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089c:	080008cd 	.word	0x080008cd
 80008a0:	080008ad 	.word	0x080008ad
 80008a4:	080008b9 	.word	0x080008b9
 80008a8:	080008c3 	.word	0x080008c3
  {
    case RED:
      HAL_GPIO_TogglePin(col_red_GPIO_Port, col_red_Pin);
 80008ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b0:	4823      	ldr	r0, [pc, #140]	@ (8000940 <toggle_led+0xe0>)
 80008b2:	f000 fc86 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 80008b6:	e010      	b.n	80008da <toggle_led+0x7a>
    case YELLOW:
      HAL_GPIO_TogglePin(col_yellow_GPIO_Port, col_yellow_Pin);
 80008b8:	2101      	movs	r1, #1
 80008ba:	4822      	ldr	r0, [pc, #136]	@ (8000944 <toggle_led+0xe4>)
 80008bc:	f000 fc81 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 80008c0:	e00b      	b.n	80008da <toggle_led+0x7a>
    case GREEN:
      HAL_GPIO_TogglePin(col_green_GPIO_Port, col_green_Pin);
 80008c2:	2102      	movs	r1, #2
 80008c4:	481f      	ldr	r0, [pc, #124]	@ (8000944 <toggle_led+0xe4>)
 80008c6:	f000 fc7c 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 80008ca:	e006      	b.n	80008da <toggle_led+0x7a>
    case WHITE:
      HAL_GPIO_TogglePin(col_white_GPIO_Port, col_white_Pin);
 80008cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d0:	481b      	ldr	r0, [pc, #108]	@ (8000940 <toggle_led+0xe0>)
 80008d2:	f000 fc76 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 80008d6:	e000      	b.n	80008da <toggle_led+0x7a>
    default:
      break;
 80008d8:	bf00      	nop
  }
  switch (number)
 80008da:	79bb      	ldrb	r3, [r7, #6]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d826      	bhi.n	800092e <toggle_led+0xce>
 80008e0:	a201      	add	r2, pc, #4	@ (adr r2, 80008e8 <toggle_led+0x88>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	080008fd 	.word	0x080008fd
 80008ec:	08000907 	.word	0x08000907
 80008f0:	08000911 	.word	0x08000911
 80008f4:	0800091b 	.word	0x0800091b
 80008f8:	08000925 	.word	0x08000925
  {
    case ZERO:
      HAL_GPIO_TogglePin(row_0_GPIO_Port, row_0_Pin);
 80008fc:	2180      	movs	r1, #128	@ 0x80
 80008fe:	4810      	ldr	r0, [pc, #64]	@ (8000940 <toggle_led+0xe0>)
 8000900:	f000 fc5f 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 8000904:	e014      	b.n	8000930 <toggle_led+0xd0>
    case ONE:
      HAL_GPIO_TogglePin(row_1_GPIO_Port, row_1_Pin);
 8000906:	2140      	movs	r1, #64	@ 0x40
 8000908:	480d      	ldr	r0, [pc, #52]	@ (8000940 <toggle_led+0xe0>)
 800090a:	f000 fc5a 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 800090e:	e00f      	b.n	8000930 <toggle_led+0xd0>
    case TWO:
      HAL_GPIO_TogglePin(row_2_GPIO_Port, row_2_Pin);
 8000910:	2120      	movs	r1, #32
 8000912:	480b      	ldr	r0, [pc, #44]	@ (8000940 <toggle_led+0xe0>)
 8000914:	f000 fc55 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 8000918:	e00a      	b.n	8000930 <toggle_led+0xd0>
    case THREE:
      HAL_GPIO_TogglePin(row_3_GPIO_Port, row_3_Pin);
 800091a:	2110      	movs	r1, #16
 800091c:	4808      	ldr	r0, [pc, #32]	@ (8000940 <toggle_led+0xe0>)
 800091e:	f000 fc50 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 8000922:	e005      	b.n	8000930 <toggle_led+0xd0>
    case FOUR:
      HAL_GPIO_TogglePin(row_4_GPIO_Port, row_4_Pin);
 8000924:	2108      	movs	r1, #8
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <toggle_led+0xe0>)
 8000928:	f000 fc4b 	bl	80011c2 <HAL_GPIO_TogglePin>
      break;
 800092c:	e000      	b.n	8000930 <toggle_led+0xd0>
    default:
      break;
 800092e:	bf00      	nop
  }

  vTaskDelay(pdMS_TO_TICKS(1));
 8000930:	2001      	movs	r0, #1
 8000932:	f002 ff7b 	bl	800382c <vTaskDelay>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020400 	.word	0x40020400
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a11      	ldr	r2, [pc, #68]	@ (800099c <HAL_MspInit+0x54>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_MspInit+0x54>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	210f      	movs	r1, #15
 800098a:	f06f 0001 	mvn.w	r0, #1
 800098e:	f000 fa51 	bl	8000e34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	@ 0x38
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4b33      	ldr	r3, [pc, #204]	@ (8000a84 <HAL_InitTick+0xe4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	4a32      	ldr	r2, [pc, #200]	@ (8000a84 <HAL_InitTick+0xe4>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c0:	4b30      	ldr	r3, [pc, #192]	@ (8000a84 <HAL_InitTick+0xe4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009cc:	f107 0210 	add.w	r2, r7, #16
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f866 	bl	8001aa8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d103      	bne.n	80009ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e6:	f001 f837 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 80009ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80009ec:	e004      	b.n	80009f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ee:	f001 f833 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 80009f2:	4603      	mov	r3, r0
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009fa:	4a23      	ldr	r2, [pc, #140]	@ (8000a88 <HAL_InitTick+0xe8>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	0c9b      	lsrs	r3, r3, #18
 8000a02:	3b01      	subs	r3, #1
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a06:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <HAL_InitTick+0xec>)
 8000a08:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <HAL_InitTick+0xf0>)
 8000a0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <HAL_InitTick+0xec>)
 8000a0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a12:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <HAL_InitTick+0xec>)
 8000a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a18:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <HAL_InitTick+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <HAL_InitTick+0xec>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HAL_InitTick+0xec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a2c:	4817      	ldr	r0, [pc, #92]	@ (8000a8c <HAL_InitTick+0xec>)
 8000a2e:	f001 f86d 	bl	8001b0c <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d11b      	bne.n	8000a78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a40:	4812      	ldr	r0, [pc, #72]	@ (8000a8c <HAL_InitTick+0xec>)
 8000a42:	f001 f8bd 	bl	8001bc0 <HAL_TIM_Base_Start_IT>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d111      	bne.n	8000a78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a54:	201e      	movs	r0, #30
 8000a56:	f000 fa09 	bl	8000e6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d808      	bhi.n	8000a72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	201e      	movs	r0, #30
 8000a66:	f000 f9e5 	bl	8000e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_InitTick+0xf4>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	e002      	b.n	8000a78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3738      	adds	r7, #56	@ 0x38
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	431bde83 	.word	0x431bde83
 8000a8c:	20000044 	.word	0x20000044
 8000a90:	40000800 	.word	0x40000800
 8000a94:	20000004 	.word	0x20000004

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <MemManage_Handler+0x4>

08000ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <UsageFault_Handler+0x4>

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <TIM4_IRQHandler+0x10>)
 8000ad6:	f001 f8d5 	bl	8001c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000044 	.word	0x20000044

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_USART2_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f001 fa58 	bl	8001ff4 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f7ff fe83 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000008c 	.word	0x2000008c
 8000b58:	40004400 	.word	0x40004400

08000b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	@ (8000be0 <HAL_UART_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <HAL_UART_MspInit+0x8c>)
 8000bd2:	f000 f959 	bl	8000e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	@ 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf0:	f7ff ff78 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f004 fb0d 	bl	8005238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fd8d 	bl	800073c <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c30:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8000c34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c38:	20004a28 	.word	0x20004a28

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <HAL_Init+0x40>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <HAL_Init+0x40>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <HAL_Init+0x40>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f8d8 	bl	8000e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f7ff fe96 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fe68 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	200000d4 	.word	0x200000d4

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	200000d4 	.word	0x200000d4

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4907      	ldr	r1, [pc, #28]	@ (8000d60 <__NVIC_EnableIRQ+0x38>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	@ (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	@ (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	@ 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ff4c 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e46:	f7ff ff61 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	6978      	ldr	r0, [r7, #20]
 8000e52:	f7ff ffb1 	bl	8000db8 <NVIC_EncodePriority>
 8000e56:	4602      	mov	r2, r0
 8000e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff80 	bl	8000d64 <__NVIC_SetPriority>
}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff54 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	@ 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e159      	b.n	8001158 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8148 	bne.w	8001152 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d005      	beq.n	8000eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d130      	bne.n	8000f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d017      	beq.n	8000f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80a2 	beq.w	8001152 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b57      	ldr	r3, [pc, #348]	@ (8001170 <HAL_GPIO_Init+0x2e8>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a56      	ldr	r2, [pc, #344]	@ (8001170 <HAL_GPIO_Init+0x2e8>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b54      	ldr	r3, [pc, #336]	@ (8001170 <HAL_GPIO_Init+0x2e8>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102a:	4a52      	ldr	r2, [pc, #328]	@ (8001174 <HAL_GPIO_Init+0x2ec>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a49      	ldr	r2, [pc, #292]	@ (8001178 <HAL_GPIO_Init+0x2f0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x202>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a48      	ldr	r2, [pc, #288]	@ (800117c <HAL_GPIO_Init+0x2f4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x1fe>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a47      	ldr	r2, [pc, #284]	@ (8001180 <HAL_GPIO_Init+0x2f8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x1fa>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a46      	ldr	r2, [pc, #280]	@ (8001184 <HAL_GPIO_Init+0x2fc>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x1f6>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a45      	ldr	r2, [pc, #276]	@ (8001188 <HAL_GPIO_Init+0x300>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x1f2>
 8001076:	2304      	movs	r3, #4
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x204>
 800107a:	2307      	movs	r3, #7
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x204>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x204>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x204>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x204>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4935      	ldr	r1, [pc, #212]	@ (8001174 <HAL_GPIO_Init+0x2ec>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010aa:	4b38      	ldr	r3, [pc, #224]	@ (800118c <HAL_GPIO_Init+0x304>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ce:	4a2f      	ldr	r2, [pc, #188]	@ (800118c <HAL_GPIO_Init+0x304>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <HAL_GPIO_Init+0x304>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f8:	4a24      	ldr	r2, [pc, #144]	@ (800118c <HAL_GPIO_Init+0x304>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010fe:	4b23      	ldr	r3, [pc, #140]	@ (800118c <HAL_GPIO_Init+0x304>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001122:	4a1a      	ldr	r2, [pc, #104]	@ (800118c <HAL_GPIO_Init+0x304>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <HAL_GPIO_Init+0x304>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114c:	4a0f      	ldr	r2, [pc, #60]	@ (800118c <HAL_GPIO_Init+0x304>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f aea2 	bls.w	8000ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40013800 	.word	0x40013800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40013c00 	.word	0x40013c00

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
 800119c:	4613      	mov	r3, r2
 800119e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ac:	e003      	b.n	80011b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011d4:	887a      	ldrh	r2, [r7, #2]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4013      	ands	r3, r2
 80011da:	041a      	lsls	r2, r3, #16
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43d9      	mvns	r1, r3
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	400b      	ands	r3, r1
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e267      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d075      	beq.n	8001302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001216:	4b88      	ldr	r3, [pc, #544]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b04      	cmp	r3, #4
 8001220:	d00c      	beq.n	800123c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001222:	4b85      	ldr	r3, [pc, #532]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800122a:	2b08      	cmp	r3, #8
 800122c:	d112      	bne.n	8001254 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122e:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800123a:	d10b      	bne.n	8001254 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	4b7e      	ldr	r3, [pc, #504]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d05b      	beq.n	8001300 <HAL_RCC_OscConfig+0x108>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d157      	bne.n	8001300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e242      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800125c:	d106      	bne.n	800126c <HAL_RCC_OscConfig+0x74>
 800125e:	4b76      	ldr	r3, [pc, #472]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a75      	ldr	r2, [pc, #468]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e01d      	b.n	80012a8 <HAL_RCC_OscConfig+0xb0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x98>
 8001276:	4b70      	ldr	r3, [pc, #448]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6f      	ldr	r2, [pc, #444]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 800127c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b6d      	ldr	r3, [pc, #436]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6c      	ldr	r2, [pc, #432]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e00b      	b.n	80012a8 <HAL_RCC_OscConfig+0xb0>
 8001290:	4b69      	ldr	r3, [pc, #420]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a68      	ldr	r2, [pc, #416]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b66      	ldr	r3, [pc, #408]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a65      	ldr	r2, [pc, #404]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 80012a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d013      	beq.n	80012d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fcfc 	bl	8000cac <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fcf8 	bl	8000cac <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	@ 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e207      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0xc0>
 80012d6:	e014      	b.n	8001302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fce8 	bl	8000cac <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fce4 	bl	8000cac <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	@ 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e1f3      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	4b51      	ldr	r3, [pc, #324]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0xe8>
 80012fe:	e000      	b.n	8001302 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d063      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800130e:	4b4a      	ldr	r3, [pc, #296]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131a:	4b47      	ldr	r3, [pc, #284]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001322:	2b08      	cmp	r3, #8
 8001324:	d11c      	bne.n	8001360 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b44      	ldr	r3, [pc, #272]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d116      	bne.n	8001360 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001332:	4b41      	ldr	r3, [pc, #260]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <HAL_RCC_OscConfig+0x152>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d001      	beq.n	800134a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e1c7      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134a:	4b3b      	ldr	r3, [pc, #236]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4937      	ldr	r1, [pc, #220]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135e:	e03a      	b.n	80013d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d020      	beq.n	80013aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001368:	4b34      	ldr	r3, [pc, #208]	@ (800143c <HAL_RCC_OscConfig+0x244>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff fc9d 	bl	8000cac <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001376:	f7ff fc99 	bl	8000cac <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e1a8      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001394:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4925      	ldr	r1, [pc, #148]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
 80013a8:	e015      	b.n	80013d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013aa:	4b24      	ldr	r3, [pc, #144]	@ (800143c <HAL_RCC_OscConfig+0x244>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc7c 	bl	8000cac <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc78 	bl	8000cac <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e187      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d036      	beq.n	8001450 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d016      	beq.n	8001418 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_RCC_OscConfig+0x248>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f0:	f7ff fc5c 	bl	8000cac <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc58 	bl	8000cac <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e167      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <HAL_RCC_OscConfig+0x240>)
 800140c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x200>
 8001416:	e01b      	b.n	8001450 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_RCC_OscConfig+0x248>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fc45 	bl	8000cac <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	e00e      	b.n	8001444 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001426:	f7ff fc41 	bl	8000cac <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d907      	bls.n	8001444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e150      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
 8001438:	40023800 	.word	0x40023800
 800143c:	42470000 	.word	0x42470000
 8001440:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	4b88      	ldr	r3, [pc, #544]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ea      	bne.n	8001426 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8097 	beq.w	800158c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b81      	ldr	r3, [pc, #516]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10f      	bne.n	800148e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b7d      	ldr	r3, [pc, #500]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	4a7c      	ldr	r2, [pc, #496]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	@ 0x40
 800147e:	4b7a      	ldr	r3, [pc, #488]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148a:	2301      	movs	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148e:	4b77      	ldr	r3, [pc, #476]	@ (800166c <HAL_RCC_OscConfig+0x474>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d118      	bne.n	80014cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149a:	4b74      	ldr	r3, [pc, #464]	@ (800166c <HAL_RCC_OscConfig+0x474>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a73      	ldr	r2, [pc, #460]	@ (800166c <HAL_RCC_OscConfig+0x474>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fc01 	bl	8000cac <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ae:	f7ff fbfd 	bl	8000cac <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e10c      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	4b6a      	ldr	r3, [pc, #424]	@ (800166c <HAL_RCC_OscConfig+0x474>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2ea>
 80014d4:	4b64      	ldr	r3, [pc, #400]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d8:	4a63      	ldr	r2, [pc, #396]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e0:	e01c      	b.n	800151c <HAL_RCC_OscConfig+0x324>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x30c>
 80014ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	@ 0x70
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0x324>
 8001504:	4b58      	ldr	r3, [pc, #352]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001508:	4a57      	ldr	r2, [pc, #348]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001510:	4b55      	ldr	r3, [pc, #340]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001514:	4a54      	ldr	r2, [pc, #336]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001516:	f023 0304 	bic.w	r3, r3, #4
 800151a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d015      	beq.n	8001550 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff fbc2 	bl	8000cac <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152a:	e00a      	b.n	8001542 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152c:	f7ff fbbe 	bl	8000cac <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e0cb      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001542:	4b49      	ldr	r3, [pc, #292]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0ee      	beq.n	800152c <HAL_RCC_OscConfig+0x334>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fbac 	bl	8000cac <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff fba8 	bl	8000cac <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0b5      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156e:	4b3e      	ldr	r3, [pc, #248]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ee      	bne.n	8001558 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d105      	bne.n	800158c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001580:	4b39      	ldr	r3, [pc, #228]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	4a38      	ldr	r2, [pc, #224]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800158a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a1 	beq.w	80016d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001596:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d05c      	beq.n	800165c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d141      	bne.n	800162e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b31      	ldr	r3, [pc, #196]	@ (8001670 <HAL_RCC_OscConfig+0x478>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb7c 	bl	8000cac <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff fb78 	bl	8000cac <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e087      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e4:	019b      	lsls	r3, r3, #6
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	3b01      	subs	r3, #1
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f8:	061b      	lsls	r3, r3, #24
 80015fa:	491b      	ldr	r1, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <HAL_RCC_OscConfig+0x478>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb51 	bl	8000cac <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fb4d 	bl	8000cac <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e05c      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x416>
 800162c:	e054      	b.n	80016d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <HAL_RCC_OscConfig+0x478>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fb3a 	bl	8000cac <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fb36 	bl	8000cac <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e045      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_RCC_OscConfig+0x470>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x444>
 800165a:	e03d      	b.n	80016d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d107      	bne.n	8001674 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e038      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000
 8001670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001674:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_RCC_OscConfig+0x4ec>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d028      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d121      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d11a      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016a4:	4013      	ands	r3, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d111      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	3b01      	subs	r3, #1
 80016be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d107      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0cc      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b68      	ldr	r3, [pc, #416]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d90c      	bls.n	8001724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b65      	ldr	r3, [pc, #404]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b63      	ldr	r3, [pc, #396]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0b8      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800173c:	4b59      	ldr	r3, [pc, #356]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a58      	ldr	r2, [pc, #352]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001746:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001754:	4b53      	ldr	r3, [pc, #332]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a52      	ldr	r2, [pc, #328]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800175e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b50      	ldr	r3, [pc, #320]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	494d      	ldr	r1, [pc, #308]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d044      	beq.n	8001808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b47      	ldr	r3, [pc, #284]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d119      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e07f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b3f      	ldr	r3, [pc, #252]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e06f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e067      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4934      	ldr	r1, [pc, #208]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d8:	f7ff fa68 	bl	8000cac <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7ff fa64 	bl	8000cac <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e04f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 020c 	and.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1eb      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d20c      	bcs.n	8001830 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e032      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4916      	ldr	r1, [pc, #88]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	490e      	ldr	r1, [pc, #56]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800186e:	f000 f821 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8001872:	4602      	mov	r2, r0
 8001874:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	490a      	ldr	r1, [pc, #40]	@ (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	5ccb      	ldrb	r3, [r1, r3]
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	4a09      	ldr	r2, [pc, #36]	@ (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f886 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00
 80018a4:	40023800 	.word	0x40023800
 80018a8:	08005380 	.word	0x08005380
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b8:	b090      	sub	sp, #64	@ 0x40
 80018ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018cc:	4b59      	ldr	r3, [pc, #356]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d00d      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x40>
 80018d8:	2b08      	cmp	r3, #8
 80018da:	f200 80a1 	bhi.w	8001a20 <HAL_RCC_GetSysClockFreq+0x16c>
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x34>
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d003      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x3a>
 80018e6:	e09b      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ec:	e09b      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ee:	4b53      	ldr	r3, [pc, #332]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x188>)
 80018f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018f2:	e098      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d028      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x180>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	099b      	lsrs	r3, r3, #6
 8001910:	2200      	movs	r2, #0
 8001912:	623b      	str	r3, [r7, #32]
 8001914:	627a      	str	r2, [r7, #36]	@ 0x24
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800191c:	2100      	movs	r1, #0
 800191e:	4b47      	ldr	r3, [pc, #284]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x188>)
 8001920:	fb03 f201 	mul.w	r2, r3, r1
 8001924:	2300      	movs	r3, #0
 8001926:	fb00 f303 	mul.w	r3, r0, r3
 800192a:	4413      	add	r3, r2
 800192c:	4a43      	ldr	r2, [pc, #268]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x188>)
 800192e:	fba0 1202 	umull	r1, r2, r0, r2
 8001932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001934:	460a      	mov	r2, r1
 8001936:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800193a:	4413      	add	r3, r2
 800193c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800193e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001940:	2200      	movs	r2, #0
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	61fa      	str	r2, [r7, #28]
 8001946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800194a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800194e:	f7fe fc47 	bl	80001e0 <__aeabi_uldivmod>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4613      	mov	r3, r2
 8001958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800195a:	e053      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195c:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x180>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	2200      	movs	r2, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	617a      	str	r2, [r7, #20]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800196e:	f04f 0b00 	mov.w	fp, #0
 8001972:	4652      	mov	r2, sl
 8001974:	465b      	mov	r3, fp
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	0159      	lsls	r1, r3, #5
 8001980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001984:	0150      	lsls	r0, r2, #5
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	ebb2 080a 	subs.w	r8, r2, sl
 800198e:	eb63 090b 	sbc.w	r9, r3, fp
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800199e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019a6:	ebb2 0408 	subs.w	r4, r2, r8
 80019aa:	eb63 0509 	sbc.w	r5, r3, r9
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	00eb      	lsls	r3, r5, #3
 80019b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019bc:	00e2      	lsls	r2, r4, #3
 80019be:	4614      	mov	r4, r2
 80019c0:	461d      	mov	r5, r3
 80019c2:	eb14 030a 	adds.w	r3, r4, sl
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	eb45 030b 	adc.w	r3, r5, fp
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019da:	4629      	mov	r1, r5
 80019dc:	028b      	lsls	r3, r1, #10
 80019de:	4621      	mov	r1, r4
 80019e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e4:	4621      	mov	r1, r4
 80019e6:	028a      	lsls	r2, r1, #10
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ee:	2200      	movs	r2, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	60fa      	str	r2, [r7, #12]
 80019f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f8:	f7fe fbf2 	bl	80001e0 <__aeabi_uldivmod>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4613      	mov	r3, r2
 8001a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a1e:	e002      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3740      	adds	r7, #64	@ 0x40
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	00f42400 	.word	0x00f42400
 8001a3c:	017d7840 	.word	0x017d7840

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a5c:	f7ff fff0 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0a9b      	lsrs	r3, r3, #10
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	@ (8001a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08005390 	.word	0x08005390

08001a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a84:	f7ff ffdc 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0b5b      	lsrs	r3, r3, #13
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	@ (8001aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08005390 	.word	0x08005390

08001aa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0203 	and.w	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aea:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <HAL_RCC_GetClockConfig+0x60>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0207 	and.w	r2, r3, #7
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e041      	b.n	8001ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f839 	bl	8001baa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f000 f9b2 	bl	8001eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d001      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e044      	b.n	8001c62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c70 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d018      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c02:	d013      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1a      	ldr	r2, [pc, #104]	@ (8001c74 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00e      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d009      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_TIM_Base_Start_IT+0xbc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d004      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a16      	ldr	r2, [pc, #88]	@ (8001c80 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d111      	bne.n	8001c50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d010      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4e:	e007      	b.n	8001c60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40000800 	.word	0x40000800
 8001c7c:	40000c00 	.word	0x40000c00
 8001c80:	40014000 	.word	0x40014000

08001c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d020      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01b      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0202 	mvn.w	r2, #2
 8001cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8d2 	bl	8001e78 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8c4 	bl	8001e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8d5 	bl	8001e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d020      	beq.n	8001d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0204 	mvn.w	r2, #4
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8ac 	bl	8001e78 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f89e 	bl	8001e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8af 	bl	8001e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d020      	beq.n	8001d80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0208 	mvn.w	r2, #8
 8001d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2204      	movs	r2, #4
 8001d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f886 	bl	8001e78 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f878 	bl	8001e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f889 	bl	8001e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d020      	beq.n	8001dcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0210 	mvn.w	r2, #16
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2208      	movs	r2, #8
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f860 	bl	8001e78 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f852 	bl	8001e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f863 	bl	8001e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00c      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0201 	mvn.w	r2, #1
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fd20 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8e6 	bl	8001fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00c      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f834 	bl	8001ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00c      	beq.n	8001e5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0220 	mvn.w	r2, #32
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8b8 	bl	8001fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb0 <TIM_Base_SetConfig+0xfc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00f      	beq.n	8001eec <TIM_Base_SetConfig+0x38>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed2:	d00b      	beq.n	8001eec <TIM_Base_SetConfig+0x38>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a37      	ldr	r2, [pc, #220]	@ (8001fb4 <TIM_Base_SetConfig+0x100>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <TIM_Base_SetConfig+0x38>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a36      	ldr	r2, [pc, #216]	@ (8001fb8 <TIM_Base_SetConfig+0x104>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <TIM_Base_SetConfig+0x38>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a35      	ldr	r2, [pc, #212]	@ (8001fbc <TIM_Base_SetConfig+0x108>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d108      	bne.n	8001efe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <TIM_Base_SetConfig+0xfc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01b      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f0c:	d017      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a28      	ldr	r2, [pc, #160]	@ (8001fb4 <TIM_Base_SetConfig+0x100>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a27      	ldr	r2, [pc, #156]	@ (8001fb8 <TIM_Base_SetConfig+0x104>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00f      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a26      	ldr	r2, [pc, #152]	@ (8001fbc <TIM_Base_SetConfig+0x108>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00b      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a25      	ldr	r2, [pc, #148]	@ (8001fc0 <TIM_Base_SetConfig+0x10c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a24      	ldr	r2, [pc, #144]	@ (8001fc4 <TIM_Base_SetConfig+0x110>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a23      	ldr	r2, [pc, #140]	@ (8001fc8 <TIM_Base_SetConfig+0x114>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d108      	bne.n	8001f50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <TIM_Base_SetConfig+0xfc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d103      	bne.n	8001f84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f023 0201 	bic.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40000c00 	.word	0x40000c00
 8001fc0:	40014000 	.word	0x40014000
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800

08001fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e042      	b.n	800208c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fd9e 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f82b 	bl	8002094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800204c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800205c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800206c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002098:	b0c0      	sub	sp, #256	@ 0x100
 800209a:	af00      	add	r7, sp, #0
 800209c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	ea40 0301 	orr.w	r3, r0, r1
 80020bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80020ec:	f021 010c 	bic.w	r1, r1, #12
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80020fa:	430b      	orrs	r3, r1
 80020fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800210a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800210e:	6999      	ldr	r1, [r3, #24]
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	ea40 0301 	orr.w	r3, r0, r1
 800211a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b8f      	ldr	r3, [pc, #572]	@ (8002360 <UART_SetConfig+0x2cc>)
 8002124:	429a      	cmp	r2, r3
 8002126:	d005      	beq.n	8002134 <UART_SetConfig+0xa0>
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b8d      	ldr	r3, [pc, #564]	@ (8002364 <UART_SetConfig+0x2d0>)
 8002130:	429a      	cmp	r2, r3
 8002132:	d104      	bne.n	800213e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002134:	f7ff fca4 	bl	8001a80 <HAL_RCC_GetPCLK2Freq>
 8002138:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800213c:	e003      	b.n	8002146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800213e:	f7ff fc8b 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002142:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002150:	f040 810c 	bne.w	800236c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002158:	2200      	movs	r2, #0
 800215a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800215e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	1891      	adds	r1, r2, r2
 800216c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800216e:	415b      	adcs	r3, r3
 8002170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002176:	4621      	mov	r1, r4
 8002178:	eb12 0801 	adds.w	r8, r2, r1
 800217c:	4629      	mov	r1, r5
 800217e:	eb43 0901 	adc.w	r9, r3, r1
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002196:	4690      	mov	r8, r2
 8002198:	4699      	mov	r9, r3
 800219a:	4623      	mov	r3, r4
 800219c:	eb18 0303 	adds.w	r3, r8, r3
 80021a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80021a4:	462b      	mov	r3, r5
 80021a6:	eb49 0303 	adc.w	r3, r9, r3
 80021aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80021ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80021be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80021c2:	460b      	mov	r3, r1
 80021c4:	18db      	adds	r3, r3, r3
 80021c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80021c8:	4613      	mov	r3, r2
 80021ca:	eb42 0303 	adc.w	r3, r2, r3
 80021ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80021d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80021d8:	f7fe f802 	bl	80001e0 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4b61      	ldr	r3, [pc, #388]	@ (8002368 <UART_SetConfig+0x2d4>)
 80021e2:	fba3 2302 	umull	r2, r3, r3, r2
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	011c      	lsls	r4, r3, #4
 80021ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80021f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	1891      	adds	r1, r2, r2
 8002202:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002204:	415b      	adcs	r3, r3
 8002206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800220c:	4641      	mov	r1, r8
 800220e:	eb12 0a01 	adds.w	sl, r2, r1
 8002212:	4649      	mov	r1, r9
 8002214:	eb43 0b01 	adc.w	fp, r3, r1
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800222c:	4692      	mov	sl, r2
 800222e:	469b      	mov	fp, r3
 8002230:	4643      	mov	r3, r8
 8002232:	eb1a 0303 	adds.w	r3, sl, r3
 8002236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800223a:	464b      	mov	r3, r9
 800223c:	eb4b 0303 	adc.w	r3, fp, r3
 8002240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002250:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002258:	460b      	mov	r3, r1
 800225a:	18db      	adds	r3, r3, r3
 800225c:	643b      	str	r3, [r7, #64]	@ 0x40
 800225e:	4613      	mov	r3, r2
 8002260:	eb42 0303 	adc.w	r3, r2, r3
 8002264:	647b      	str	r3, [r7, #68]	@ 0x44
 8002266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800226a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800226e:	f7fd ffb7 	bl	80001e0 <__aeabi_uldivmod>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4611      	mov	r1, r2
 8002278:	4b3b      	ldr	r3, [pc, #236]	@ (8002368 <UART_SetConfig+0x2d4>)
 800227a:	fba3 2301 	umull	r2, r3, r3, r1
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2264      	movs	r2, #100	@ 0x64
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	1acb      	subs	r3, r1, r3
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800228e:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <UART_SetConfig+0x2d4>)
 8002290:	fba3 2302 	umull	r2, r3, r3, r2
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800229c:	441c      	add	r4, r3
 800229e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80022ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80022b0:	4642      	mov	r2, r8
 80022b2:	464b      	mov	r3, r9
 80022b4:	1891      	adds	r1, r2, r2
 80022b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022b8:	415b      	adcs	r3, r3
 80022ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80022c0:	4641      	mov	r1, r8
 80022c2:	1851      	adds	r1, r2, r1
 80022c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80022c6:	4649      	mov	r1, r9
 80022c8:	414b      	adcs	r3, r1
 80022ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80022d8:	4659      	mov	r1, fp
 80022da:	00cb      	lsls	r3, r1, #3
 80022dc:	4651      	mov	r1, sl
 80022de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e2:	4651      	mov	r1, sl
 80022e4:	00ca      	lsls	r2, r1, #3
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	4642      	mov	r2, r8
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022f4:	464b      	mov	r3, r9
 80022f6:	460a      	mov	r2, r1
 80022f8:	eb42 0303 	adc.w	r3, r2, r3
 80022fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800230c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002314:	460b      	mov	r3, r1
 8002316:	18db      	adds	r3, r3, r3
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231a:	4613      	mov	r3, r2
 800231c:	eb42 0303 	adc.w	r3, r2, r3
 8002320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800232a:	f7fd ff59 	bl	80001e0 <__aeabi_uldivmod>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <UART_SetConfig+0x2d4>)
 8002334:	fba3 1302 	umull	r1, r3, r3, r2
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	2164      	movs	r1, #100	@ 0x64
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	3332      	adds	r3, #50	@ 0x32
 8002346:	4a08      	ldr	r2, [pc, #32]	@ (8002368 <UART_SetConfig+0x2d4>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	f003 0207 	and.w	r2, r3, #7
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4422      	add	r2, r4
 800235a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800235c:	e106      	b.n	800256c <UART_SetConfig+0x4d8>
 800235e:	bf00      	nop
 8002360:	40011000 	.word	0x40011000
 8002364:	40011400 	.word	0x40011400
 8002368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800236c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002370:	2200      	movs	r2, #0
 8002372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002376:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800237a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800237e:	4642      	mov	r2, r8
 8002380:	464b      	mov	r3, r9
 8002382:	1891      	adds	r1, r2, r2
 8002384:	6239      	str	r1, [r7, #32]
 8002386:	415b      	adcs	r3, r3
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
 800238a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800238e:	4641      	mov	r1, r8
 8002390:	1854      	adds	r4, r2, r1
 8002392:	4649      	mov	r1, r9
 8002394:	eb43 0501 	adc.w	r5, r3, r1
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	00eb      	lsls	r3, r5, #3
 80023a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a6:	00e2      	lsls	r2, r4, #3
 80023a8:	4614      	mov	r4, r2
 80023aa:	461d      	mov	r5, r3
 80023ac:	4643      	mov	r3, r8
 80023ae:	18e3      	adds	r3, r4, r3
 80023b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023b4:	464b      	mov	r3, r9
 80023b6:	eb45 0303 	adc.w	r3, r5, r3
 80023ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023da:	4629      	mov	r1, r5
 80023dc:	008b      	lsls	r3, r1, #2
 80023de:	4621      	mov	r1, r4
 80023e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e4:	4621      	mov	r1, r4
 80023e6:	008a      	lsls	r2, r1, #2
 80023e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80023ec:	f7fd fef8 	bl	80001e0 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4b60      	ldr	r3, [pc, #384]	@ (8002578 <UART_SetConfig+0x4e4>)
 80023f6:	fba3 2302 	umull	r2, r3, r3, r2
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	011c      	lsls	r4, r3, #4
 80023fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800240c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002410:	4642      	mov	r2, r8
 8002412:	464b      	mov	r3, r9
 8002414:	1891      	adds	r1, r2, r2
 8002416:	61b9      	str	r1, [r7, #24]
 8002418:	415b      	adcs	r3, r3
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002420:	4641      	mov	r1, r8
 8002422:	1851      	adds	r1, r2, r1
 8002424:	6139      	str	r1, [r7, #16]
 8002426:	4649      	mov	r1, r9
 8002428:	414b      	adcs	r3, r1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002438:	4659      	mov	r1, fp
 800243a:	00cb      	lsls	r3, r1, #3
 800243c:	4651      	mov	r1, sl
 800243e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002442:	4651      	mov	r1, sl
 8002444:	00ca      	lsls	r2, r1, #3
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	4603      	mov	r3, r0
 800244c:	4642      	mov	r2, r8
 800244e:	189b      	adds	r3, r3, r2
 8002450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002454:	464b      	mov	r3, r9
 8002456:	460a      	mov	r2, r1
 8002458:	eb42 0303 	adc.w	r3, r2, r3
 800245c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800246a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002478:	4649      	mov	r1, r9
 800247a:	008b      	lsls	r3, r1, #2
 800247c:	4641      	mov	r1, r8
 800247e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002482:	4641      	mov	r1, r8
 8002484:	008a      	lsls	r2, r1, #2
 8002486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800248a:	f7fd fea9 	bl	80001e0 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4611      	mov	r1, r2
 8002494:	4b38      	ldr	r3, [pc, #224]	@ (8002578 <UART_SetConfig+0x4e4>)
 8002496:	fba3 2301 	umull	r2, r3, r3, r1
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2264      	movs	r2, #100	@ 0x64
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	1acb      	subs	r3, r1, r3
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	3332      	adds	r3, #50	@ 0x32
 80024a8:	4a33      	ldr	r2, [pc, #204]	@ (8002578 <UART_SetConfig+0x4e4>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b4:	441c      	add	r4, r3
 80024b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ba:	2200      	movs	r2, #0
 80024bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80024be:	677a      	str	r2, [r7, #116]	@ 0x74
 80024c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80024c4:	4642      	mov	r2, r8
 80024c6:	464b      	mov	r3, r9
 80024c8:	1891      	adds	r1, r2, r2
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	415b      	adcs	r3, r3
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d4:	4641      	mov	r1, r8
 80024d6:	1851      	adds	r1, r2, r1
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	4649      	mov	r1, r9
 80024dc:	414b      	adcs	r3, r1
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024ec:	4659      	mov	r1, fp
 80024ee:	00cb      	lsls	r3, r1, #3
 80024f0:	4651      	mov	r1, sl
 80024f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f6:	4651      	mov	r1, sl
 80024f8:	00ca      	lsls	r2, r1, #3
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	4642      	mov	r2, r8
 8002502:	189b      	adds	r3, r3, r2
 8002504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002506:	464b      	mov	r3, r9
 8002508:	460a      	mov	r2, r1
 800250a:	eb42 0303 	adc.w	r3, r2, r3
 800250e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	663b      	str	r3, [r7, #96]	@ 0x60
 800251a:	667a      	str	r2, [r7, #100]	@ 0x64
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002528:	4649      	mov	r1, r9
 800252a:	008b      	lsls	r3, r1, #2
 800252c:	4641      	mov	r1, r8
 800252e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002532:	4641      	mov	r1, r8
 8002534:	008a      	lsls	r2, r1, #2
 8002536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800253a:	f7fd fe51 	bl	80001e0 <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <UART_SetConfig+0x4e4>)
 8002544:	fba3 1302 	umull	r1, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	2164      	movs	r1, #100	@ 0x64
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	3332      	adds	r3, #50	@ 0x32
 8002556:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <UART_SetConfig+0x4e4>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4422      	add	r2, r4
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002572:	46bd      	mov	sp, r7
 8002574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002578:	51eb851f 	.word	0x51eb851f

0800257c <__NVIC_SetPriority>:
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	@ (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	@ (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <SysTick_Handler+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025d8:	f001 fdac 	bl	8004134 <xTaskGetSchedulerState>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025e2:	f002 fba1 	bl	8004d28 <xPortSysTickHandler>
  }
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80025f4:	2100      	movs	r1, #0
 80025f6:	f06f 0004 	mvn.w	r0, #4
 80025fa:	f7ff ffbf 	bl	800257c <__NVIC_SetPriority>
#endif
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260a:	f3ef 8305 	mrs	r3, IPSR
 800260e:	603b      	str	r3, [r7, #0]
  return(result);
 8002610:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002616:	f06f 0305 	mvn.w	r3, #5
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	e00c      	b.n	8002638 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800261e:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <osKernelInitialize+0x44>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <osKernelInitialize+0x44>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800262c:	2300      	movs	r3, #0
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	e002      	b.n	8002638 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002638:	687b      	ldr	r3, [r7, #4]
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	200000d8 	.word	0x200000d8

0800264c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002652:	f3ef 8305 	mrs	r3, IPSR
 8002656:	603b      	str	r3, [r7, #0]
  return(result);
 8002658:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <osKernelStart+0x1a>
    stat = osErrorISR;
 800265e:	f06f 0305 	mvn.w	r3, #5
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	e010      	b.n	8002688 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <osKernelStart+0x48>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d109      	bne.n	8002682 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800266e:	f7ff ffbf 	bl	80025f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002672:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <osKernelStart+0x48>)
 8002674:	2202      	movs	r2, #2
 8002676:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002678:	f001 f90e 	bl	8003898 <vTaskStartScheduler>
      stat = osOK;
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	e002      	b.n	8002688 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002688:	687b      	ldr	r3, [r7, #4]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200000d8 	.word	0x200000d8

08002698 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b08e      	sub	sp, #56	@ 0x38
 800269c:	af04      	add	r7, sp, #16
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026a8:	f3ef 8305 	mrs	r3, IPSR
 80026ac:	617b      	str	r3, [r7, #20]
  return(result);
 80026ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d17e      	bne.n	80027b2 <osThreadNew+0x11a>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d07b      	beq.n	80027b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80026be:	2318      	movs	r3, #24
 80026c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d045      	beq.n	800275e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <osThreadNew+0x48>
        name = attr->name;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <osThreadNew+0x6e>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b38      	cmp	r3, #56	@ 0x38
 80026f8:	d805      	bhi.n	8002706 <osThreadNew+0x6e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <osThreadNew+0x72>
        return (NULL);
 8002706:	2300      	movs	r3, #0
 8002708:	e054      	b.n	80027b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00e      	beq.n	8002740 <osThreadNew+0xa8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b5b      	cmp	r3, #91	@ 0x5b
 8002728:	d90a      	bls.n	8002740 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <osThreadNew+0xa8>
        mem = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e010      	b.n	8002762 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <osThreadNew+0xca>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d108      	bne.n	8002762 <osThreadNew+0xca>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <osThreadNew+0xca>
          mem = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	e001      	b.n	8002762 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d110      	bne.n	800278a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002770:	9202      	str	r2, [sp, #8]
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 feae 	bl	80034e0 <xTaskCreateStatic>
 8002784:	4603      	mov	r3, r0
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e013      	b.n	80027b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d110      	bne.n	80027b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	b29a      	uxth	r2, r3
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fefc 	bl	80035a0 <xTaskCreate>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d001      	beq.n	80027b2 <osThreadNew+0x11a>
            hTask = NULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027b2:	693b      	ldr	r3, [r7, #16]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3728      	adds	r7, #40	@ 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027cc:	f3ef 8305 	mrs	r3, IPSR
 80027d0:	613b      	str	r3, [r7, #16]
  return(result);
 80027d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d15f      	bne.n	8002898 <osMessageQueueNew+0xdc>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d05c      	beq.n	8002898 <osMessageQueueNew+0xdc>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d059      	beq.n	8002898 <osMessageQueueNew+0xdc>
    mem = -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d029      	beq.n	8002844 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <osMessageQueueNew+0x62>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80027fe:	d90e      	bls.n	800281e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	429a      	cmp	r2, r3
 8002816:	d302      	bcc.n	800281e <osMessageQueueNew+0x62>
        mem = 1;
 8002818:	2301      	movs	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e014      	b.n	8002848 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d110      	bne.n	8002848 <osMessageQueueNew+0x8c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002832:	2b00      	cmp	r3, #0
 8002834:	d108      	bne.n	8002848 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <osMessageQueueNew+0x8c>
          mem = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e001      	b.n	8002848 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10b      	bne.n	8002866 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2100      	movs	r1, #0
 8002858:	9100      	str	r1, [sp, #0]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f973 	bl	8002b48 <xQueueGenericCreateStatic>
 8002862:	61f8      	str	r0, [r7, #28]
 8002864:	e008      	b.n	8002878 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800286c:	2200      	movs	r2, #0
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f9e6 	bl	8002c42 <xQueueGenericCreate>
 8002876:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <osMessageQueueNew+0xd0>
        name = attr->name;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e001      	b.n	8002890 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002890:	6979      	ldr	r1, [r7, #20]
 8002892:	69f8      	ldr	r0, [r7, #28]
 8002894:	f000 fdc6 	bl	8003424 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002898:	69fb      	ldr	r3, [r7, #28]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a07      	ldr	r2, [pc, #28]	@ (80028d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80028b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4a06      	ldr	r2, [pc, #24]	@ (80028d4 <vApplicationGetIdleTaskMemory+0x30>)
 80028ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2280      	movs	r2, #128	@ 0x80
 80028c0:	601a      	str	r2, [r3, #0]
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	200000dc 	.word	0x200000dc
 80028d4:	20000138 	.word	0x20000138

080028d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a07      	ldr	r2, [pc, #28]	@ (8002904 <vApplicationGetTimerTaskMemory+0x2c>)
 80028e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4a06      	ldr	r2, [pc, #24]	@ (8002908 <vApplicationGetTimerTaskMemory+0x30>)
 80028ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f6:	601a      	str	r2, [r3, #0]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	20000338 	.word	0x20000338
 8002908:	20000394 	.word	0x20000394

0800290c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f103 0208 	add.w	r2, r3, #8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f103 0208 	add.w	r2, r3, #8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f103 0208 	add.w	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d103      	bne.n	80029ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e00c      	b.n	80029e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3308      	adds	r3, #8
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	e002      	b.n	80029dc <vListInsert+0x2e>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d2f6      	bcs.n	80029d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6892      	ldr	r2, [r2, #8]
 8002a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6852      	ldr	r2, [r2, #4]
 8002a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d103      	bne.n	8002a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1e5a      	subs	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002aa0:	f002 f8b2 	bl	8004c08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	441a      	add	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	441a      	add	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	22ff      	movs	r2, #255	@ 0xff
 8002ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	22ff      	movs	r2, #255	@ 0xff
 8002aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d114      	bne.n	8002b20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01a      	beq.n	8002b34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3310      	adds	r3, #16
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f956 	bl	8003db4 <xTaskRemoveFromEventList>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d012      	beq.n	8002b34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <xQueueGenericReset+0xd0>)
 8002b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	e009      	b.n	8002b34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3310      	adds	r3, #16
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fef1 	bl	800290c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3324      	adds	r3, #36	@ 0x24
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff feec 	bl	800290c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b34:	f002 f89a 	bl	8004c6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	e000ed04 	.word	0xe000ed04

08002b48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	@ 0x38
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	e7fd      	b.n	8002b70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	e7fd      	b.n	8002b8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <xQueueGenericCreateStatic+0x56>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <xQueueGenericCreateStatic+0x5a>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <xQueueGenericCreateStatic+0x5c>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10b      	bne.n	8002bc0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	623b      	str	r3, [r7, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <xQueueGenericCreateStatic+0x84>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <xQueueGenericCreateStatic+0x88>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <xQueueGenericCreateStatic+0x8a>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	61fb      	str	r3, [r7, #28]
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bee:	2350      	movs	r3, #80	@ 0x50
 8002bf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b50      	cmp	r3, #80	@ 0x50
 8002bf6:	d00b      	beq.n	8002c10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61bb      	str	r3, [r7, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f840 	bl	8002cb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3730      	adds	r7, #48	@ 0x30
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b08a      	sub	sp, #40	@ 0x28
 8002c46:	af02      	add	r7, sp, #8
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	613b      	str	r3, [r7, #16]
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	3350      	adds	r3, #80	@ 0x50
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 f8e5 	bl	8004e4c <pvPortMalloc>
 8002c82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d011      	beq.n	8002cae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3350      	adds	r3, #80	@ 0x50
 8002c92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f805 	bl	8002cb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cae:	69bb      	ldr	r3, [r7, #24]
	}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e002      	b.n	8002cda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	69b8      	ldr	r0, [r7, #24]
 8002cea:	f7ff fec3 	bl	8002a74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08e      	sub	sp, #56	@ 0x38
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <xQueueGenericSend+0x34>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <xQueueGenericSend+0x42>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <xQueueGenericSend+0x46>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueGenericSend+0x48>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <xQueueGenericSend+0x64>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d103      	bne.n	8002d72 <xQueueGenericSend+0x72>
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <xQueueGenericSend+0x76>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <xQueueGenericSend+0x78>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <xQueueGenericSend+0x94>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	623b      	str	r3, [r7, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d94:	f001 f9ce 	bl	8004134 <xTaskGetSchedulerState>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <xQueueGenericSend+0xa4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <xQueueGenericSend+0xa8>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <xQueueGenericSend+0xaa>
 8002da8:	2300      	movs	r3, #0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <xQueueGenericSend+0xc6>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	61fb      	str	r3, [r7, #28]
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dc6:	f001 ff1f 	bl	8004c08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <xQueueGenericSend+0xdc>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d129      	bne.n	8002e30 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002de2:	f000 fa0f 	bl	8003204 <prvCopyDataToQueue>
 8002de6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d010      	beq.n	8002e12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df2:	3324      	adds	r3, #36	@ 0x24
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 ffdd 	bl	8003db4 <xTaskRemoveFromEventList>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e00:	4b3f      	ldr	r3, [pc, #252]	@ (8002f00 <xQueueGenericSend+0x200>)
 8002e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	e00a      	b.n	8002e28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e18:	4b39      	ldr	r3, [pc, #228]	@ (8002f00 <xQueueGenericSend+0x200>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e28:	f001 ff20 	bl	8004c6c <vPortExitCritical>
				return pdPASS;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e063      	b.n	8002ef8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e36:	f001 ff19 	bl	8004c6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e05c      	b.n	8002ef8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f817 	bl	8003e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e52:	f001 ff0b 	bl	8004c6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e56:	f000 fd87 	bl	8003968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e5a:	f001 fed5 	bl	8004c08 <vPortEnterCritical>
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	d103      	bne.n	8002e74 <xQueueGenericSend+0x174>
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d103      	bne.n	8002e8a <xQueueGenericSend+0x18a>
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e8a:	f001 feef 	bl	8004c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e8e:	1d3a      	adds	r2, r7, #4
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f806 	bl	8003ea8 <xTaskCheckForTimeOut>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d124      	bne.n	8002eec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ea2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ea4:	f000 faa6 	bl	80033f4 <prvIsQueueFull>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	3310      	adds	r3, #16
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 ff2a 	bl	8003d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ebe:	f000 fa31 	bl	8003324 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ec2:	f000 fd5f 	bl	8003984 <xTaskResumeAll>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f47f af7c 	bne.w	8002dc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002ece:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <xQueueGenericSend+0x200>)
 8002ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	e772      	b.n	8002dc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ee2:	f000 fa1f 	bl	8003324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ee6:	f000 fd4d 	bl	8003984 <xTaskResumeAll>
 8002eea:	e76c      	b.n	8002dc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eee:	f000 fa19 	bl	8003324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ef2:	f000 fd47 	bl	8003984 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ef6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3738      	adds	r7, #56	@ 0x38
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b090      	sub	sp, #64	@ 0x40
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f2e:	bf00      	nop
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <xQueueGenericSendFromISR+0x3e>
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <xQueueGenericSendFromISR+0x42>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <xQueueGenericSendFromISR+0x44>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10b      	bne.n	8002f64 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f5e:	bf00      	nop
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d103      	bne.n	8002f72 <xQueueGenericSendFromISR+0x6e>
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <xQueueGenericSendFromISR+0x72>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <xQueueGenericSendFromISR+0x74>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	623b      	str	r3, [r7, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f94:	f001 ff18 	bl	8004dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f98:	f3ef 8211 	mrs	r2, BASEPRI
 8002f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61fa      	str	r2, [r7, #28]
 8002fae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d302      	bcc.n	8002fc6 <xQueueGenericSendFromISR+0xc2>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d12f      	bne.n	8003026 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002fdc:	f000 f912 	bl	8003204 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fe0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d112      	bne.n	8003010 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff4:	3324      	adds	r3, #36	@ 0x24
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fedc 	bl	8003db4 <xTaskRemoveFromEventList>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00e      	beq.n	8003020 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e007      	b.n	8003020 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003010:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003014:	3301      	adds	r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	b25a      	sxtb	r2, r3
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003020:	2301      	movs	r3, #1
 8003022:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003024:	e001      	b.n	800302a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003026:	2300      	movs	r3, #0
 8003028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003034:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003038:	4618      	mov	r0, r3
 800303a:	3740      	adds	r7, #64	@ 0x40
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08c      	sub	sp, #48	@ 0x30
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <xQueueReceive+0x32>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	623b      	str	r3, [r7, #32]
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	e7fd      	b.n	800306e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <xQueueReceive+0x40>
 8003078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <xQueueReceive+0x44>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <xQueueReceive+0x46>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <xQueueReceive+0x62>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	61fb      	str	r3, [r7, #28]
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	e7fd      	b.n	800309e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030a2:	f001 f847 	bl	8004134 <xTaskGetSchedulerState>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <xQueueReceive+0x72>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <xQueueReceive+0x76>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <xQueueReceive+0x78>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <xQueueReceive+0x94>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	61bb      	str	r3, [r7, #24]
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030d4:	f001 fd98 	bl	8004c08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01f      	beq.n	8003124 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030e8:	f000 f8f6 	bl	80032d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	1e5a      	subs	r2, r3, #1
 80030f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00f      	beq.n	800311c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fe:	3310      	adds	r3, #16
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fe57 	bl	8003db4 <xTaskRemoveFromEventList>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800310c:	4b3c      	ldr	r3, [pc, #240]	@ (8003200 <xQueueReceive+0x1c0>)
 800310e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800311c:	f001 fda6 	bl	8004c6c <vPortExitCritical>
				return pdPASS;
 8003120:	2301      	movs	r3, #1
 8003122:	e069      	b.n	80031f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800312a:	f001 fd9f 	bl	8004c6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800312e:	2300      	movs	r3, #0
 8003130:	e062      	b.n	80031f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fe9d 	bl	8003e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003142:	2301      	movs	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003146:	f001 fd91 	bl	8004c6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800314a:	f000 fc0d 	bl	8003968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800314e:	f001 fd5b 	bl	8004c08 <vPortEnterCritical>
 8003152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003158:	b25b      	sxtb	r3, r3
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d103      	bne.n	8003168 <xQueueReceive+0x128>
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800316e:	b25b      	sxtb	r3, r3
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d103      	bne.n	800317e <xQueueReceive+0x13e>
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800317e:	f001 fd75 	bl	8004c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003182:	1d3a      	adds	r2, r7, #4
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fe8c 	bl	8003ea8 <xTaskCheckForTimeOut>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d123      	bne.n	80031de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003198:	f000 f916 	bl	80033c8 <prvIsQueueEmpty>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d017      	beq.n	80031d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	3324      	adds	r3, #36	@ 0x24
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fdb0 	bl	8003d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031b2:	f000 f8b7 	bl	8003324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031b6:	f000 fbe5 	bl	8003984 <xTaskResumeAll>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d189      	bne.n	80030d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <xQueueReceive+0x1c0>)
 80031c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	e780      	b.n	80030d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031d4:	f000 f8a6 	bl	8003324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031d8:	f000 fbd4 	bl	8003984 <xTaskResumeAll>
 80031dc:	e77a      	b.n	80030d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031e0:	f000 f8a0 	bl	8003324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e4:	f000 fbce 	bl	8003984 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ea:	f000 f8ed 	bl	80033c8 <prvIsQueueEmpty>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f43f af6f 	beq.w	80030d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3730      	adds	r7, #48	@ 0x30
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	e000ed04 	.word	0xe000ed04

08003204 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d14d      	bne.n	80032c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 ff9e 	bl	8004170 <xTaskPriorityDisinherit>
 8003234:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	e043      	b.n	80032c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d119      	bne.n	8003278 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6858      	ldr	r0, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	461a      	mov	r2, r3
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	f002 f816 	bl	8005280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	d32b      	bcc.n	80032c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	e026      	b.n	80032c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68d8      	ldr	r0, [r3, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	461a      	mov	r2, r3
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	f001 fffc 	bl	8005280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	425b      	negs	r3, r3
 8003292:	441a      	add	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d207      	bcs.n	80032b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	425b      	negs	r3, r3
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d105      	bne.n	80032c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80032ce:	697b      	ldr	r3, [r7, #20]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	441a      	add	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	d303      	bcc.n	800330c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68d9      	ldr	r1, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	461a      	mov	r2, r3
 8003316:	6838      	ldr	r0, [r7, #0]
 8003318:	f001 ffb2 	bl	8005280 <memcpy>
	}
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800332c:	f001 fc6c 	bl	8004c08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003336:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003338:	e011      	b.n	800335e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	2b00      	cmp	r3, #0
 8003340:	d012      	beq.n	8003368 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3324      	adds	r3, #36	@ 0x24
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fd34 	bl	8003db4 <xTaskRemoveFromEventList>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003352:	f000 fe0d 	bl	8003f70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	3b01      	subs	r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800335e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	dce9      	bgt.n	800333a <prvUnlockQueue+0x16>
 8003366:	e000      	b.n	800336a <prvUnlockQueue+0x46>
					break;
 8003368:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	22ff      	movs	r2, #255	@ 0xff
 800336e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003372:	f001 fc7b 	bl	8004c6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003376:	f001 fc47 	bl	8004c08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003380:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003382:	e011      	b.n	80033a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d012      	beq.n	80033b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3310      	adds	r3, #16
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fd0f 	bl	8003db4 <xTaskRemoveFromEventList>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800339c:	f000 fde8 	bl	8003f70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033a0:	7bbb      	ldrb	r3, [r7, #14]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	dce9      	bgt.n	8003384 <prvUnlockQueue+0x60>
 80033b0:	e000      	b.n	80033b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	22ff      	movs	r2, #255	@ 0xff
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033bc:	f001 fc56 	bl	8004c6c <vPortExitCritical>
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033d0:	f001 fc1a 	bl	8004c08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033dc:	2301      	movs	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e001      	b.n	80033e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033e6:	f001 fc41 	bl	8004c6c <vPortExitCritical>

	return xReturn;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033fc:	f001 fc04 	bl	8004c08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	429a      	cmp	r2, r3
 800340a:	d102      	bne.n	8003412 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e001      	b.n	8003416 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003416:	f001 fc29 	bl	8004c6c <vPortExitCritical>

	return xReturn;
 800341a:	68fb      	ldr	r3, [r7, #12]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e014      	b.n	800345e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003434:	4a0f      	ldr	r2, [pc, #60]	@ (8003474 <vQueueAddToRegistry+0x50>)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003440:	490c      	ldr	r1, [pc, #48]	@ (8003474 <vQueueAddToRegistry+0x50>)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800344a:	4a0a      	ldr	r2, [pc, #40]	@ (8003474 <vQueueAddToRegistry+0x50>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003456:	e006      	b.n	8003466 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b07      	cmp	r3, #7
 8003462:	d9e7      	bls.n	8003434 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000794 	.word	0x20000794

08003478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003488:	f001 fbbe 	bl	8004c08 <vPortEnterCritical>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003492:	b25b      	sxtb	r3, r3
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d103      	bne.n	80034a2 <vQueueWaitForMessageRestricted+0x2a>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d103      	bne.n	80034b8 <vQueueWaitForMessageRestricted+0x40>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034b8:	f001 fbd8 	bl	8004c6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3324      	adds	r3, #36	@ 0x24
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fc45 	bl	8003d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff26 	bl	8003324 <prvUnlockQueue>
	}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	@ 0x38
 80034e4:	af04      	add	r7, sp, #16
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <xTaskCreateStatic+0x2c>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	623b      	str	r3, [r7, #32]
}
 8003506:	bf00      	nop
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800350c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	61fb      	str	r3, [r7, #28]
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	e7fd      	b.n	8003526 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800352a:	235c      	movs	r3, #92	@ 0x5c
 800352c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b5c      	cmp	r3, #92	@ 0x5c
 8003532:	d00b      	beq.n	800354c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	61bb      	str	r3, [r7, #24]
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800354c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01e      	beq.n	8003592 <xTaskCreateStatic+0xb2>
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01b      	beq.n	8003592 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800356c:	2300      	movs	r3, #0
 800356e:	9303      	str	r3, [sp, #12]
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	9302      	str	r3, [sp, #8]
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f850 	bl	800362a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800358a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800358c:	f000 f8de 	bl	800374c <prvAddNewTaskToReadyList>
 8003590:	e001      	b.n	8003596 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003596:	697b      	ldr	r3, [r7, #20]
	}
 8003598:	4618      	mov	r0, r3
 800359a:	3728      	adds	r7, #40	@ 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08c      	sub	sp, #48	@ 0x30
 80035a4:	af04      	add	r7, sp, #16
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fc49 	bl	8004e4c <pvPortMalloc>
 80035ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035c2:	205c      	movs	r0, #92	@ 0x5c
 80035c4:	f001 fc42 	bl	8004e4c <pvPortMalloc>
 80035c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d6:	e005      	b.n	80035e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035d8:	6978      	ldr	r0, [r7, #20]
 80035da:	f001 fd05 	bl	8004fe8 <vPortFree>
 80035de:	e001      	b.n	80035e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d017      	beq.n	800361a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035f2:	88fa      	ldrh	r2, [r7, #6]
 80035f4:	2300      	movs	r3, #0
 80035f6:	9303      	str	r3, [sp, #12]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	9302      	str	r3, [sp, #8]
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f80e 	bl	800362a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800360e:	69f8      	ldr	r0, [r7, #28]
 8003610:	f000 f89c 	bl	800374c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003614:	2301      	movs	r3, #1
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	e002      	b.n	8003620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003620:	69bb      	ldr	r3, [r7, #24]
	}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b088      	sub	sp, #32
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	461a      	mov	r2, r3
 8003642:	21a5      	movs	r1, #165	@ 0xa5
 8003644:	f001 fdf0 	bl	8005228 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003652:	3b01      	subs	r3, #1
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f023 0307 	bic.w	r3, r3, #7
 8003660:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	617b      	str	r3, [r7, #20]
}
 800367e:	bf00      	nop
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01f      	beq.n	80036ca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	e012      	b.n	80036b6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	7819      	ldrb	r1, [r3, #0]
 8003698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	3334      	adds	r3, #52	@ 0x34
 80036a0:	460a      	mov	r2, r1
 80036a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	3301      	adds	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d9e9      	bls.n	8003690 <prvInitialiseNewTask+0x66>
 80036bc:	e000      	b.n	80036c0 <prvInitialiseNewTask+0x96>
			{
				break;
 80036be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036c8:	e003      	b.n	80036d2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	2b37      	cmp	r3, #55	@ 0x37
 80036d6:	d901      	bls.n	80036dc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036d8:	2337      	movs	r3, #55	@ 0x37
 80036da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	2200      	movs	r2, #0
 80036ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	3304      	adds	r3, #4
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f92a 	bl	800294c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	3318      	adds	r3, #24
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f925 	bl	800294c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003706:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003710:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003716:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	2200      	movs	r2, #0
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	68f9      	ldr	r1, [r7, #12]
 800372a:	69b8      	ldr	r0, [r7, #24]
 800372c:	f001 f93e 	bl	80049ac <pxPortInitialiseStack>
 8003730:	4602      	mov	r2, r0
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003742:	bf00      	nop
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003754:	f001 fa58 	bl	8004c08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003758:	4b2d      	ldr	r3, [pc, #180]	@ (8003810 <prvAddNewTaskToReadyList+0xc4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <prvAddNewTaskToReadyList+0xc4>)
 8003760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003762:	4b2c      	ldr	r3, [pc, #176]	@ (8003814 <prvAddNewTaskToReadyList+0xc8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800376a:	4a2a      	ldr	r2, [pc, #168]	@ (8003814 <prvAddNewTaskToReadyList+0xc8>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003770:	4b27      	ldr	r3, [pc, #156]	@ (8003810 <prvAddNewTaskToReadyList+0xc4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d110      	bne.n	800379a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003778:	f000 fc1e 	bl	8003fb8 <prvInitialiseTaskLists>
 800377c:	e00d      	b.n	800379a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800377e:	4b26      	ldr	r3, [pc, #152]	@ (8003818 <prvAddNewTaskToReadyList+0xcc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003786:	4b23      	ldr	r3, [pc, #140]	@ (8003814 <prvAddNewTaskToReadyList+0xc8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	429a      	cmp	r2, r3
 8003792:	d802      	bhi.n	800379a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003794:	4a1f      	ldr	r2, [pc, #124]	@ (8003814 <prvAddNewTaskToReadyList+0xc8>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800379a:	4b20      	ldr	r3, [pc, #128]	@ (800381c <prvAddNewTaskToReadyList+0xd0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <prvAddNewTaskToReadyList+0xd0>)
 80037a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037a4:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <prvAddNewTaskToReadyList+0xd0>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <prvAddNewTaskToReadyList+0xd4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d903      	bls.n	80037c0 <prvAddNewTaskToReadyList+0x74>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	4a18      	ldr	r2, [pc, #96]	@ (8003820 <prvAddNewTaskToReadyList+0xd4>)
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4a15      	ldr	r2, [pc, #84]	@ (8003824 <prvAddNewTaskToReadyList+0xd8>)
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f7ff f8c5 	bl	8002966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037dc:	f001 fa46 	bl	8004c6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <prvAddNewTaskToReadyList+0xcc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <prvAddNewTaskToReadyList+0xc8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d207      	bcs.n	8003806 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <prvAddNewTaskToReadyList+0xdc>)
 80037f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000ca8 	.word	0x20000ca8
 8003814:	200007d4 	.word	0x200007d4
 8003818:	20000cb4 	.word	0x20000cb4
 800381c:	20000cc4 	.word	0x20000cc4
 8003820:	20000cb0 	.word	0x20000cb0
 8003824:	200007d8 	.word	0x200007d8
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800383e:	4b14      	ldr	r3, [pc, #80]	@ (8003890 <vTaskDelay+0x64>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <vTaskDelay+0x32>
	__asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	60bb      	str	r3, [r7, #8]
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	e7fd      	b.n	800385a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800385e:	f000 f883 	bl	8003968 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003862:	2100      	movs	r1, #0
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fcf3 	bl	8004250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800386a:	f000 f88b 	bl	8003984 <xTaskResumeAll>
 800386e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d107      	bne.n	8003886 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003876:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <vTaskDelay+0x68>)
 8003878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000cd0 	.word	0x20000cd0
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038a6:	463a      	mov	r2, r7
 80038a8:	1d39      	adds	r1, r7, #4
 80038aa:	f107 0308 	add.w	r3, r7, #8
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fff8 	bl	80028a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	9202      	str	r2, [sp, #8]
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	2300      	movs	r3, #0
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	460a      	mov	r2, r1
 80038c6:	4922      	ldr	r1, [pc, #136]	@ (8003950 <vTaskStartScheduler+0xb8>)
 80038c8:	4822      	ldr	r0, [pc, #136]	@ (8003954 <vTaskStartScheduler+0xbc>)
 80038ca:	f7ff fe09 	bl	80034e0 <xTaskCreateStatic>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4a21      	ldr	r2, [pc, #132]	@ (8003958 <vTaskStartScheduler+0xc0>)
 80038d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038d4:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <vTaskStartScheduler+0xc0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	e001      	b.n	80038e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038ec:	f000 fd04 	bl	80042f8 <xTimerCreateTimerTask>
 80038f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d116      	bne.n	8003926 <vTaskStartScheduler+0x8e>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	613b      	str	r3, [r7, #16]
}
 800390a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <vTaskStartScheduler+0xc4>)
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003914:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <vTaskStartScheduler+0xc8>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800391a:	4b12      	ldr	r3, [pc, #72]	@ (8003964 <vTaskStartScheduler+0xcc>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003920:	f001 f8ce 	bl	8004ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003924:	e00f      	b.n	8003946 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d10b      	bne.n	8003946 <vTaskStartScheduler+0xae>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	60fb      	str	r3, [r7, #12]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <vTaskStartScheduler+0xaa>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	080052e4 	.word	0x080052e4
 8003954:	08003f89 	.word	0x08003f89
 8003958:	20000ccc 	.word	0x20000ccc
 800395c:	20000cc8 	.word	0x20000cc8
 8003960:	20000cb4 	.word	0x20000cb4
 8003964:	20000cac 	.word	0x20000cac

08003968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <vTaskSuspendAll+0x18>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	4a03      	ldr	r2, [pc, #12]	@ (8003980 <vTaskSuspendAll+0x18>)
 8003974:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	20000cd0 	.word	0x20000cd0

08003984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003992:	4b42      	ldr	r3, [pc, #264]	@ (8003a9c <xTaskResumeAll+0x118>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	603b      	str	r3, [r7, #0]
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	e7fd      	b.n	80039ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039b2:	f001 f929 	bl	8004c08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039b6:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <xTaskResumeAll+0x118>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	4a37      	ldr	r2, [pc, #220]	@ (8003a9c <xTaskResumeAll+0x118>)
 80039be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c0:	4b36      	ldr	r3, [pc, #216]	@ (8003a9c <xTaskResumeAll+0x118>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d162      	bne.n	8003a8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039c8:	4b35      	ldr	r3, [pc, #212]	@ (8003aa0 <xTaskResumeAll+0x11c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05e      	beq.n	8003a8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039d0:	e02f      	b.n	8003a32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d2:	4b34      	ldr	r3, [pc, #208]	@ (8003aa4 <xTaskResumeAll+0x120>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3318      	adds	r3, #24
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff f81e 	bl	8002a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff f819 	bl	8002a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f2:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa8 <xTaskResumeAll+0x124>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d903      	bls.n	8003a02 <xTaskResumeAll+0x7e>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fe:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <xTaskResumeAll+0x124>)
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4a27      	ldr	r2, [pc, #156]	@ (8003aac <xTaskResumeAll+0x128>)
 8003a10:	441a      	add	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f7fe ffa4 	bl	8002966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a22:	4b23      	ldr	r3, [pc, #140]	@ (8003ab0 <xTaskResumeAll+0x12c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a2c:	4b21      	ldr	r3, [pc, #132]	@ (8003ab4 <xTaskResumeAll+0x130>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a32:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <xTaskResumeAll+0x120>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1cb      	bne.n	80039d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a40:	f000 fb58 	bl	80040f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a44:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab8 <xTaskResumeAll+0x134>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a50:	f000 f846 	bl	8003ae0 <xTaskIncrementTick>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a5a:	4b16      	ldr	r3, [pc, #88]	@ (8003ab4 <xTaskResumeAll+0x130>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f1      	bne.n	8003a50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <xTaskResumeAll+0x134>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a72:	4b10      	ldr	r3, [pc, #64]	@ (8003ab4 <xTaskResumeAll+0x130>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <xTaskResumeAll+0x138>)
 8003a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a8e:	f001 f8ed 	bl	8004c6c <vPortExitCritical>

	return xAlreadyYielded;
 8003a92:	68bb      	ldr	r3, [r7, #8]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000cd0 	.word	0x20000cd0
 8003aa0:	20000ca8 	.word	0x20000ca8
 8003aa4:	20000c68 	.word	0x20000c68
 8003aa8:	20000cb0 	.word	0x20000cb0
 8003aac:	200007d8 	.word	0x200007d8
 8003ab0:	200007d4 	.word	0x200007d4
 8003ab4:	20000cbc 	.word	0x20000cbc
 8003ab8:	20000cb8 	.word	0x20000cb8
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ac6:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <xTaskGetTickCount+0x1c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003acc:	687b      	ldr	r3, [r7, #4]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000cac 	.word	0x20000cac

08003ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aea:	4b4f      	ldr	r3, [pc, #316]	@ (8003c28 <xTaskIncrementTick+0x148>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 8090 	bne.w	8003c14 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003af4:	4b4d      	ldr	r3, [pc, #308]	@ (8003c2c <xTaskIncrementTick+0x14c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003afc:	4a4b      	ldr	r2, [pc, #300]	@ (8003c2c <xTaskIncrementTick+0x14c>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d121      	bne.n	8003b4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b08:	4b49      	ldr	r3, [pc, #292]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	603b      	str	r3, [r7, #0]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <xTaskIncrementTick+0x46>
 8003b2a:	4b41      	ldr	r3, [pc, #260]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	4b40      	ldr	r3, [pc, #256]	@ (8003c34 <xTaskIncrementTick+0x154>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3e      	ldr	r2, [pc, #248]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4a3e      	ldr	r2, [pc, #248]	@ (8003c34 <xTaskIncrementTick+0x154>)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <xTaskIncrementTick+0x158>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a3c      	ldr	r2, [pc, #240]	@ (8003c38 <xTaskIncrementTick+0x158>)
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	f000 fad4 	bl	80040f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <xTaskIncrementTick+0x15c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d349      	bcc.n	8003bea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b56:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b60:	4b36      	ldr	r3, [pc, #216]	@ (8003c3c <xTaskIncrementTick+0x15c>)
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	601a      	str	r2, [r3, #0]
					break;
 8003b68:	e03f      	b.n	8003bea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6a:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d203      	bcs.n	8003b8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b82:	4a2e      	ldr	r2, [pc, #184]	@ (8003c3c <xTaskIncrementTick+0x15c>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b88:	e02f      	b.n	8003bea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe ff46 	bl	8002a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3318      	adds	r3, #24
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe ff3d 	bl	8002a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003baa:	4b25      	ldr	r3, [pc, #148]	@ (8003c40 <xTaskIncrementTick+0x160>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d903      	bls.n	8003bba <xTaskIncrementTick+0xda>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	4a22      	ldr	r2, [pc, #136]	@ (8003c40 <xTaskIncrementTick+0x160>)
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <xTaskIncrementTick+0x164>)
 8003bc8:	441a      	add	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	f7fe fec8 	bl	8002966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bda:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <xTaskIncrementTick+0x168>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3b8      	bcc.n	8003b56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be8:	e7b5      	b.n	8003b56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bea:	4b17      	ldr	r3, [pc, #92]	@ (8003c48 <xTaskIncrementTick+0x168>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf0:	4914      	ldr	r1, [pc, #80]	@ (8003c44 <xTaskIncrementTick+0x164>)
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d901      	bls.n	8003c06 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003c02:	2301      	movs	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c06:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <xTaskIncrementTick+0x16c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e004      	b.n	8003c1e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c14:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <xTaskIncrementTick+0x170>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c50 <xTaskIncrementTick+0x170>)
 8003c1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c1e:	697b      	ldr	r3, [r7, #20]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000cd0 	.word	0x20000cd0
 8003c2c:	20000cac 	.word	0x20000cac
 8003c30:	20000c60 	.word	0x20000c60
 8003c34:	20000c64 	.word	0x20000c64
 8003c38:	20000cc0 	.word	0x20000cc0
 8003c3c:	20000cc8 	.word	0x20000cc8
 8003c40:	20000cb0 	.word	0x20000cb0
 8003c44:	200007d8 	.word	0x200007d8
 8003c48:	200007d4 	.word	0x200007d4
 8003c4c:	20000cbc 	.word	0x20000cbc
 8003c50:	20000cb8 	.word	0x20000cb8

08003c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c5a:	4b28      	ldr	r3, [pc, #160]	@ (8003cfc <vTaskSwitchContext+0xa8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c62:	4b27      	ldr	r3, [pc, #156]	@ (8003d00 <vTaskSwitchContext+0xac>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c68:	e042      	b.n	8003cf0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003c6a:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <vTaskSwitchContext+0xac>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c70:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <vTaskSwitchContext+0xb0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e011      	b.n	8003c9c <vTaskSwitchContext+0x48>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <vTaskSwitchContext+0x42>
	__asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	607b      	str	r3, [r7, #4]
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	e7fd      	b.n	8003c92 <vTaskSwitchContext+0x3e>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	491a      	ldr	r1, [pc, #104]	@ (8003d08 <vTaskSwitchContext+0xb4>)
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0e3      	beq.n	8003c78 <vTaskSwitchContext+0x24>
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4a13      	ldr	r2, [pc, #76]	@ (8003d08 <vTaskSwitchContext+0xb4>)
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d104      	bne.n	8003ce0 <vTaskSwitchContext+0x8c>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4a09      	ldr	r2, [pc, #36]	@ (8003d0c <vTaskSwitchContext+0xb8>)
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4a06      	ldr	r2, [pc, #24]	@ (8003d04 <vTaskSwitchContext+0xb0>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	20000cd0 	.word	0x20000cd0
 8003d00:	20000cbc 	.word	0x20000cbc
 8003d04:	20000cb0 	.word	0x20000cb0
 8003d08:	200007d8 	.word	0x200007d8
 8003d0c:	200007d4 	.word	0x200007d4

08003d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60fb      	str	r3, [r7, #12]
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d38:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <vTaskPlaceOnEventList+0x48>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3318      	adds	r3, #24
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fe fe34 	bl	80029ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d46:	2101      	movs	r1, #1
 8003d48:	6838      	ldr	r0, [r7, #0]
 8003d4a:	f000 fa81 	bl	8004250 <prvAddCurrentTaskToDelayedList>
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200007d4 	.word	0x200007d4

08003d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	617b      	str	r3, [r7, #20]
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	e7fd      	b.n	8003d82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d86:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3318      	adds	r3, #24
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f7fe fde9 	bl	8002966 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	68b8      	ldr	r0, [r7, #8]
 8003da4:	f000 fa54 	bl	8004250 <prvAddCurrentTaskToDelayedList>
	}
 8003da8:	bf00      	nop
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200007d4 	.word	0x200007d4

08003db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60fb      	str	r3, [r7, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	3318      	adds	r3, #24
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fe1a 	bl	8002a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dec:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <xTaskRemoveFromEventList+0xb0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11d      	bne.n	8003e30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fe11 	bl	8002a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e02:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <xTaskRemoveFromEventList+0xb4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d903      	bls.n	8003e12 <xTaskRemoveFromEventList+0x5e>
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	4a16      	ldr	r2, [pc, #88]	@ (8003e68 <xTaskRemoveFromEventList+0xb4>)
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4a13      	ldr	r2, [pc, #76]	@ (8003e6c <xTaskRemoveFromEventList+0xb8>)
 8003e20:	441a      	add	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f7fe fd9c 	bl	8002966 <vListInsertEnd>
 8003e2e:	e005      	b.n	8003e3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	3318      	adds	r3, #24
 8003e34:	4619      	mov	r1, r3
 8003e36:	480e      	ldr	r0, [pc, #56]	@ (8003e70 <xTaskRemoveFromEventList+0xbc>)
 8003e38:	f7fe fd95 	bl	8002966 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e40:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <xTaskRemoveFromEventList+0xc0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d905      	bls.n	8003e56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <xTaskRemoveFromEventList+0xc4>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e001      	b.n	8003e5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e5a:	697b      	ldr	r3, [r7, #20]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000cd0 	.word	0x20000cd0
 8003e68:	20000cb0 	.word	0x20000cb0
 8003e6c:	200007d8 	.word	0x200007d8
 8003e70:	20000c68 	.word	0x20000c68
 8003e74:	200007d4 	.word	0x200007d4
 8003e78:	20000cbc 	.word	0x20000cbc

08003e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e84:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <vTaskInternalSetTimeOutState+0x24>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <vTaskInternalSetTimeOutState+0x28>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	605a      	str	r2, [r3, #4]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	20000cc0 	.word	0x20000cc0
 8003ea4:	20000cac 	.word	0x20000cac

08003ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	613b      	str	r3, [r7, #16]
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	60fb      	str	r3, [r7, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	e7fd      	b.n	8003eea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003eee:	f000 fe8b 	bl	8004c08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <xTaskCheckForTimeOut+0xc0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d102      	bne.n	8003f12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	e023      	b.n	8003f5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <xTaskCheckForTimeOut+0xc4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d007      	beq.n	8003f2e <xTaskCheckForTimeOut+0x86>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e015      	b.n	8003f5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d20b      	bcs.n	8003f50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ff99 	bl	8003e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	e004      	b.n	8003f5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f5a:	f000 fe87 	bl	8004c6c <vPortExitCritical>

	return xReturn;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000cac 	.word	0x20000cac
 8003f6c:	20000cc0 	.word	0x20000cc0

08003f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f74:	4b03      	ldr	r3, [pc, #12]	@ (8003f84 <vTaskMissedYield+0x14>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	20000cbc 	.word	0x20000cbc

08003f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f90:	f000 f852 	bl	8004038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f94:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <prvIdleTask+0x28>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d9f9      	bls.n	8003f90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f9c:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <prvIdleTask+0x2c>)
 8003f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fac:	e7f0      	b.n	8003f90 <prvIdleTask+0x8>
 8003fae:	bf00      	nop
 8003fb0:	200007d8 	.word	0x200007d8
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	e00c      	b.n	8003fde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <prvInitialiseTaskLists+0x60>)
 8003fd0:	4413      	add	r3, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fc9a 	bl	800290c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b37      	cmp	r3, #55	@ 0x37
 8003fe2:	d9ef      	bls.n	8003fc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fe4:	480d      	ldr	r0, [pc, #52]	@ (800401c <prvInitialiseTaskLists+0x64>)
 8003fe6:	f7fe fc91 	bl	800290c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fea:	480d      	ldr	r0, [pc, #52]	@ (8004020 <prvInitialiseTaskLists+0x68>)
 8003fec:	f7fe fc8e 	bl	800290c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ff0:	480c      	ldr	r0, [pc, #48]	@ (8004024 <prvInitialiseTaskLists+0x6c>)
 8003ff2:	f7fe fc8b 	bl	800290c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ff6:	480c      	ldr	r0, [pc, #48]	@ (8004028 <prvInitialiseTaskLists+0x70>)
 8003ff8:	f7fe fc88 	bl	800290c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ffc:	480b      	ldr	r0, [pc, #44]	@ (800402c <prvInitialiseTaskLists+0x74>)
 8003ffe:	f7fe fc85 	bl	800290c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004002:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <prvInitialiseTaskLists+0x78>)
 8004004:	4a05      	ldr	r2, [pc, #20]	@ (800401c <prvInitialiseTaskLists+0x64>)
 8004006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004008:	4b0a      	ldr	r3, [pc, #40]	@ (8004034 <prvInitialiseTaskLists+0x7c>)
 800400a:	4a05      	ldr	r2, [pc, #20]	@ (8004020 <prvInitialiseTaskLists+0x68>)
 800400c:	601a      	str	r2, [r3, #0]
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200007d8 	.word	0x200007d8
 800401c:	20000c38 	.word	0x20000c38
 8004020:	20000c4c 	.word	0x20000c4c
 8004024:	20000c68 	.word	0x20000c68
 8004028:	20000c7c 	.word	0x20000c7c
 800402c:	20000c94 	.word	0x20000c94
 8004030:	20000c60 	.word	0x20000c60
 8004034:	20000c64 	.word	0x20000c64

08004038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800403e:	e019      	b.n	8004074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004040:	f000 fde2 	bl	8004c08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004044:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <prvCheckTasksWaitingTermination+0x50>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fce5 	bl	8002a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004056:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <prvCheckTasksWaitingTermination+0x54>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3b01      	subs	r3, #1
 800405c:	4a0b      	ldr	r2, [pc, #44]	@ (800408c <prvCheckTasksWaitingTermination+0x54>)
 800405e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <prvCheckTasksWaitingTermination+0x58>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3b01      	subs	r3, #1
 8004066:	4a0a      	ldr	r2, [pc, #40]	@ (8004090 <prvCheckTasksWaitingTermination+0x58>)
 8004068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800406a:	f000 fdff 	bl	8004c6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f810 	bl	8004094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <prvCheckTasksWaitingTermination+0x58>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e1      	bne.n	8004040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000c7c 	.word	0x20000c7c
 800408c:	20000ca8 	.word	0x20000ca8
 8004090:	20000c90 	.word	0x20000c90

08004094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d108      	bne.n	80040b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 ff9c 	bl	8004fe8 <vPortFree>
				vPortFree( pxTCB );
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 ff99 	bl	8004fe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040b6:	e019      	b.n	80040ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d103      	bne.n	80040ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 ff90 	bl	8004fe8 <vPortFree>
	}
 80040c8:	e010      	b.n	80040ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d00b      	beq.n	80040ec <prvDeleteTCB+0x58>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60fb      	str	r3, [r7, #12]
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <prvDeleteTCB+0x54>
	}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040fa:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <prvResetNextTaskUnblockTime+0x38>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <prvResetNextTaskUnblockTime+0x3c>)
 8004106:	f04f 32ff 	mov.w	r2, #4294967295
 800410a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800410c:	e008      	b.n	8004120 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800410e:	4b07      	ldr	r3, [pc, #28]	@ (800412c <prvResetNextTaskUnblockTime+0x38>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <prvResetNextTaskUnblockTime+0x3c>)
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	20000c60 	.word	0x20000c60
 8004130:	20000cc8 	.word	0x20000cc8

08004134 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800413a:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <xTaskGetSchedulerState+0x34>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004142:	2301      	movs	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	e008      	b.n	800415a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004148:	4b08      	ldr	r3, [pc, #32]	@ (800416c <xTaskGetSchedulerState+0x38>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004150:	2302      	movs	r3, #2
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	e001      	b.n	800415a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800415a:	687b      	ldr	r3, [r7, #4]
	}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	20000cb4 	.word	0x20000cb4
 800416c:	20000cd0 	.word	0x20000cd0

08004170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d058      	beq.n	8004238 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004186:	4b2f      	ldr	r3, [pc, #188]	@ (8004244 <xTaskPriorityDisinherit+0xd4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	429a      	cmp	r2, r3
 800418e:	d00b      	beq.n	80041a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60bb      	str	r3, [r7, #8]
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041cc:	1e5a      	subs	r2, r3, #1
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041da:	429a      	cmp	r2, r3
 80041dc:	d02c      	beq.n	8004238 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d128      	bne.n	8004238 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fc18 	bl	8002a20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004208:	4b0f      	ldr	r3, [pc, #60]	@ (8004248 <xTaskPriorityDisinherit+0xd8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d903      	bls.n	8004218 <xTaskPriorityDisinherit+0xa8>
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	4a0c      	ldr	r2, [pc, #48]	@ (8004248 <xTaskPriorityDisinherit+0xd8>)
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4a09      	ldr	r2, [pc, #36]	@ (800424c <xTaskPriorityDisinherit+0xdc>)
 8004226:	441a      	add	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f7fe fb99 	bl	8002966 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004238:	697b      	ldr	r3, [r7, #20]
	}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200007d4 	.word	0x200007d4
 8004248:	20000cb0 	.word	0x20000cb0
 800424c:	200007d8 	.word	0x200007d8

08004250 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800425a:	4b21      	ldr	r3, [pc, #132]	@ (80042e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004260:	4b20      	ldr	r3, [pc, #128]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3304      	adds	r3, #4
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fbda 	bl	8002a20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d10a      	bne.n	800428a <prvAddCurrentTaskToDelayedList+0x3a>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800427a:	4b1a      	ldr	r3, [pc, #104]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4819      	ldr	r0, [pc, #100]	@ (80042e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004284:	f7fe fb6f 	bl	8002966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004288:	e026      	b.n	80042d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004292:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d209      	bcs.n	80042b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a2:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f7fe fb7d 	bl	80029ae <vListInsert>
}
 80042b4:	e010      	b.n	80042d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b6:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fe fb73 	bl	80029ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042c8:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d202      	bcs.n	80042d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042d2:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000cac 	.word	0x20000cac
 80042e4:	200007d4 	.word	0x200007d4
 80042e8:	20000c94 	.word	0x20000c94
 80042ec:	20000c64 	.word	0x20000c64
 80042f0:	20000c60 	.word	0x20000c60
 80042f4:	20000cc8 	.word	0x20000cc8

080042f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	@ 0x28
 80042fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004302:	f000 fb13 	bl	800492c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004306:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <xTimerCreateTimerTask+0x84>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d021      	beq.n	8004352 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004316:	1d3a      	adds	r2, r7, #4
 8004318:	f107 0108 	add.w	r1, r7, #8
 800431c:	f107 030c 	add.w	r3, r7, #12
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fad9 	bl	80028d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	9202      	str	r2, [sp, #8]
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	2302      	movs	r3, #2
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	460a      	mov	r2, r1
 8004338:	4911      	ldr	r1, [pc, #68]	@ (8004380 <xTimerCreateTimerTask+0x88>)
 800433a:	4812      	ldr	r0, [pc, #72]	@ (8004384 <xTimerCreateTimerTask+0x8c>)
 800433c:	f7ff f8d0 	bl	80034e0 <xTaskCreateStatic>
 8004340:	4603      	mov	r3, r0
 8004342:	4a11      	ldr	r2, [pc, #68]	@ (8004388 <xTimerCreateTimerTask+0x90>)
 8004344:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004346:	4b10      	ldr	r3, [pc, #64]	@ (8004388 <xTimerCreateTimerTask+0x90>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800434e:	2301      	movs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	613b      	str	r3, [r7, #16]
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004370:	697b      	ldr	r3, [r7, #20]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000d04 	.word	0x20000d04
 8004380:	080052ec 	.word	0x080052ec
 8004384:	080044c5 	.word	0x080044c5
 8004388:	20000d08 	.word	0x20000d08

0800438c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800439a:	2300      	movs	r3, #0
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <xTimerGenericCommand+0x30>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	623b      	str	r3, [r7, #32]
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043bc:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <xTimerGenericCommand+0x98>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02a      	beq.n	800441a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	dc18      	bgt.n	8004408 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043d6:	f7ff fead 	bl	8004134 <xTaskGetSchedulerState>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d109      	bne.n	80043f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043e0:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <xTimerGenericCommand+0x98>)
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	f107 0110 	add.w	r1, r7, #16
 80043e8:	2300      	movs	r3, #0
 80043ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ec:	f7fe fc88 	bl	8002d00 <xQueueGenericSend>
 80043f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80043f2:	e012      	b.n	800441a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <xTimerGenericCommand+0x98>)
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	f107 0110 	add.w	r1, r7, #16
 80043fc:	2300      	movs	r3, #0
 80043fe:	2200      	movs	r2, #0
 8004400:	f7fe fc7e 	bl	8002d00 <xQueueGenericSend>
 8004404:	6278      	str	r0, [r7, #36]	@ 0x24
 8004406:	e008      	b.n	800441a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <xTimerGenericCommand+0x98>)
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	f107 0110 	add.w	r1, r7, #16
 8004410:	2300      	movs	r3, #0
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	f7fe fd76 	bl	8002f04 <xQueueGenericSendFromISR>
 8004418:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	@ 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000d04 	.word	0x20000d04

08004428 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af02      	add	r7, sp, #8
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004432:	4b23      	ldr	r3, [pc, #140]	@ (80044c0 <prvProcessExpiredTimer+0x98>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe faed 	bl	8002a20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d023      	beq.n	800449c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	18d1      	adds	r1, r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	6978      	ldr	r0, [r7, #20]
 8004462:	f000 f8d5 	bl	8004610 <prvInsertTimerInActiveList>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d020      	beq.n	80044ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800446c:	2300      	movs	r3, #0
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2300      	movs	r3, #0
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	2100      	movs	r1, #0
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff88 	bl	800438c <xTimerGenericCommand>
 800447c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d114      	bne.n	80044ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60fb      	str	r3, [r7, #12]
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	6978      	ldr	r0, [r7, #20]
 80044b4:	4798      	blx	r3
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000cfc 	.word	0x20000cfc

080044c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044cc:	f107 0308 	add.w	r3, r7, #8
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 f859 	bl	8004588 <prvGetNextExpireTime>
 80044d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4619      	mov	r1, r3
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f805 	bl	80044ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044e2:	f000 f8d7 	bl	8004694 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044e6:	bf00      	nop
 80044e8:	e7f0      	b.n	80044cc <prvTimerTask+0x8>
	...

080044ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044f6:	f7ff fa37 	bl	8003968 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f866 	bl	80045d0 <prvSampleTimeNow>
 8004504:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d130      	bne.n	800456e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <prvProcessTimerOrBlockTask+0x3c>
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	429a      	cmp	r2, r3
 8004518:	d806      	bhi.n	8004528 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800451a:	f7ff fa33 	bl	8003984 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff81 	bl	8004428 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004526:	e024      	b.n	8004572 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800452e:	4b13      	ldr	r3, [pc, #76]	@ (800457c <prvProcessTimerOrBlockTask+0x90>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <prvProcessTimerOrBlockTask+0x50>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <prvProcessTimerOrBlockTask+0x52>
 800453c:	2300      	movs	r3, #0
 800453e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004540:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <prvProcessTimerOrBlockTask+0x94>)
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	4619      	mov	r1, r3
 800454e:	f7fe ff93 	bl	8003478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004552:	f7ff fa17 	bl	8003984 <xTaskResumeAll>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <prvProcessTimerOrBlockTask+0x98>)
 800455e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	f3bf 8f6f 	isb	sy
}
 800456c:	e001      	b.n	8004572 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800456e:	f7ff fa09 	bl	8003984 <xTaskResumeAll>
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000d00 	.word	0x20000d00
 8004580:	20000d04 	.word	0x20000d04
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004590:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <prvGetNextExpireTime+0x44>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <prvGetNextExpireTime+0x16>
 800459a:	2201      	movs	r2, #1
 800459c:	e000      	b.n	80045a0 <prvGetNextExpireTime+0x18>
 800459e:	2200      	movs	r2, #0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045ac:	4b07      	ldr	r3, [pc, #28]	@ (80045cc <prvGetNextExpireTime+0x44>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e001      	b.n	80045bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045bc:	68fb      	ldr	r3, [r7, #12]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000cfc 	.word	0x20000cfc

080045d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045d8:	f7ff fa72 	bl	8003ac0 <xTaskGetTickCount>
 80045dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045de:	4b0b      	ldr	r3, [pc, #44]	@ (800460c <prvSampleTimeNow+0x3c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d205      	bcs.n	80045f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045e8:	f000 f93a 	bl	8004860 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e002      	b.n	80045fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045fa:	4a04      	ldr	r2, [pc, #16]	@ (800460c <prvSampleTimeNow+0x3c>)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004600:	68fb      	ldr	r3, [r7, #12]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000d0c 	.word	0x20000d0c

08004610 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d812      	bhi.n	800465c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	1ad2      	subs	r2, r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	429a      	cmp	r2, r3
 8004642:	d302      	bcc.n	800464a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e01b      	b.n	8004682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800464a:	4b10      	ldr	r3, [pc, #64]	@ (800468c <prvInsertTimerInActiveList+0x7c>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7fe f9aa 	bl	80029ae <vListInsert>
 800465a:	e012      	b.n	8004682 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d206      	bcs.n	8004672 <prvInsertTimerInActiveList+0x62>
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e007      	b.n	8004682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004672:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <prvInsertTimerInActiveList+0x80>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3304      	adds	r3, #4
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f7fe f996 	bl	80029ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004682:	697b      	ldr	r3, [r7, #20]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000d00 	.word	0x20000d00
 8004690:	20000cfc 	.word	0x20000cfc

08004694 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08e      	sub	sp, #56	@ 0x38
 8004698:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800469a:	e0ce      	b.n	800483a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da19      	bge.n	80046d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046a2:	1d3b      	adds	r3, r7, #4
 80046a4:	3304      	adds	r3, #4
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	61fb      	str	r3, [r7, #28]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046cc:	6850      	ldr	r0, [r2, #4]
 80046ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d0:	6892      	ldr	r2, [r2, #8]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f2c0 80ae 	blt.w	800483a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	3304      	adds	r3, #4
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe f996 	bl	8002a20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046f4:	463b      	mov	r3, r7
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff ff6a 	bl	80045d0 <prvSampleTimeNow>
 80046fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b09      	cmp	r3, #9
 8004702:	f200 8097 	bhi.w	8004834 <prvProcessReceivedCommands+0x1a0>
 8004706:	a201      	add	r2, pc, #4	@ (adr r2, 800470c <prvProcessReceivedCommands+0x78>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004735 	.word	0x08004735
 8004710:	08004735 	.word	0x08004735
 8004714:	08004735 	.word	0x08004735
 8004718:	080047ab 	.word	0x080047ab
 800471c:	080047bf 	.word	0x080047bf
 8004720:	0800480b 	.word	0x0800480b
 8004724:	08004735 	.word	0x08004735
 8004728:	08004735 	.word	0x08004735
 800472c:	080047ab 	.word	0x080047ab
 8004730:	080047bf 	.word	0x080047bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	b2da      	uxtb	r2, r3
 8004740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004742:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	18d1      	adds	r1, r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004754:	f7ff ff5c 	bl	8004610 <prvInsertTimerInActiveList>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d06c      	beq.n	8004838 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800475e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004764:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d061      	beq.n	8004838 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	441a      	add	r2, r3
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	2100      	movs	r1, #0
 8004784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004786:	f7ff fe01 	bl	800438c <xTimerGenericCommand>
 800478a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d152      	bne.n	8004838 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61bb      	str	r3, [r7, #24]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80047bc:	e03d      	b.n	800483a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	617b      	str	r3, [r7, #20]
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	e7fd      	b.n	80047f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	18d1      	adds	r1, r2, r3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004804:	f7ff ff04 	bl	8004610 <prvInsertTimerInActiveList>
					break;
 8004808:	e017      	b.n	800483a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d103      	bne.n	8004820 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800481a:	f000 fbe5 	bl	8004fe8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800481e:	e00c      	b.n	800483a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004832:	e002      	b.n	800483a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004834:	bf00      	nop
 8004836:	e000      	b.n	800483a <prvProcessReceivedCommands+0x1a6>
					break;
 8004838:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800483a:	4b08      	ldr	r3, [pc, #32]	@ (800485c <prvProcessReceivedCommands+0x1c8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1d39      	adds	r1, r7, #4
 8004840:	2200      	movs	r2, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fbfc 	bl	8003040 <xQueueReceive>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	f47f af26 	bne.w	800469c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	3730      	adds	r7, #48	@ 0x30
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000d04 	.word	0x20000d04

08004860 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004866:	e049      	b.n	80048fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004868:	4b2e      	ldr	r3, [pc, #184]	@ (8004924 <prvSwitchTimerLists+0xc4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004872:	4b2c      	ldr	r3, [pc, #176]	@ (8004924 <prvSwitchTimerLists+0xc4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe f8cd 	bl	8002a20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02f      	beq.n	80048fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d90e      	bls.n	80048cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <prvSwitchTimerLists+0xc4>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe f872 	bl	80029ae <vListInsert>
 80048ca:	e017      	b.n	80048fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048cc:	2300      	movs	r3, #0
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2300      	movs	r3, #0
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	2100      	movs	r1, #0
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff fd58 	bl	800438c <xTimerGenericCommand>
 80048dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	603b      	str	r3, [r7, #0]
}
 80048f6:	bf00      	nop
 80048f8:	bf00      	nop
 80048fa:	e7fd      	b.n	80048f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048fc:	4b09      	ldr	r3, [pc, #36]	@ (8004924 <prvSwitchTimerLists+0xc4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1b0      	bne.n	8004868 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004906:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <prvSwitchTimerLists+0xc4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800490c:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <prvSwitchTimerLists+0xc8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a04      	ldr	r2, [pc, #16]	@ (8004924 <prvSwitchTimerLists+0xc4>)
 8004912:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004914:	4a04      	ldr	r2, [pc, #16]	@ (8004928 <prvSwitchTimerLists+0xc8>)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6013      	str	r3, [r2, #0]
}
 800491a:	bf00      	nop
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000cfc 	.word	0x20000cfc
 8004928:	20000d00 	.word	0x20000d00

0800492c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004932:	f000 f969 	bl	8004c08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004936:	4b15      	ldr	r3, [pc, #84]	@ (800498c <prvCheckForValidListAndQueue+0x60>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d120      	bne.n	8004980 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800493e:	4814      	ldr	r0, [pc, #80]	@ (8004990 <prvCheckForValidListAndQueue+0x64>)
 8004940:	f7fd ffe4 	bl	800290c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004944:	4813      	ldr	r0, [pc, #76]	@ (8004994 <prvCheckForValidListAndQueue+0x68>)
 8004946:	f7fd ffe1 	bl	800290c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800494a:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <prvCheckForValidListAndQueue+0x6c>)
 800494c:	4a10      	ldr	r2, [pc, #64]	@ (8004990 <prvCheckForValidListAndQueue+0x64>)
 800494e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004950:	4b12      	ldr	r3, [pc, #72]	@ (800499c <prvCheckForValidListAndQueue+0x70>)
 8004952:	4a10      	ldr	r2, [pc, #64]	@ (8004994 <prvCheckForValidListAndQueue+0x68>)
 8004954:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004956:	2300      	movs	r3, #0
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	4b11      	ldr	r3, [pc, #68]	@ (80049a0 <prvCheckForValidListAndQueue+0x74>)
 800495c:	4a11      	ldr	r2, [pc, #68]	@ (80049a4 <prvCheckForValidListAndQueue+0x78>)
 800495e:	2110      	movs	r1, #16
 8004960:	200a      	movs	r0, #10
 8004962:	f7fe f8f1 	bl	8002b48 <xQueueGenericCreateStatic>
 8004966:	4603      	mov	r3, r0
 8004968:	4a08      	ldr	r2, [pc, #32]	@ (800498c <prvCheckForValidListAndQueue+0x60>)
 800496a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800496c:	4b07      	ldr	r3, [pc, #28]	@ (800498c <prvCheckForValidListAndQueue+0x60>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004974:	4b05      	ldr	r3, [pc, #20]	@ (800498c <prvCheckForValidListAndQueue+0x60>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	490b      	ldr	r1, [pc, #44]	@ (80049a8 <prvCheckForValidListAndQueue+0x7c>)
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fd52 	bl	8003424 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004980:	f000 f974 	bl	8004c6c <vPortExitCritical>
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000d04 	.word	0x20000d04
 8004990:	20000cd4 	.word	0x20000cd4
 8004994:	20000ce8 	.word	0x20000ce8
 8004998:	20000cfc 	.word	0x20000cfc
 800499c:	20000d00 	.word	0x20000d00
 80049a0:	20000db0 	.word	0x20000db0
 80049a4:	20000d10 	.word	0x20000d10
 80049a8:	080052f4 	.word	0x080052f4

080049ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3b04      	subs	r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3b04      	subs	r3, #4
 80049ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3b04      	subs	r3, #4
 80049da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004a10 <pxPortInitialiseStack+0x64>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3b14      	subs	r3, #20
 80049e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3b04      	subs	r3, #4
 80049f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f06f 0202 	mvn.w	r2, #2
 80049fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3b20      	subs	r3, #32
 8004a00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a02:	68fb      	ldr	r3, [r7, #12]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	08004a15 	.word	0x08004a15

08004a14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a1e:	4b13      	ldr	r3, [pc, #76]	@ (8004a6c <prvTaskExitError+0x58>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d00b      	beq.n	8004a40 <prvTaskExitError+0x2c>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	60fb      	str	r3, [r7, #12]
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <prvTaskExitError+0x28>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	60bb      	str	r3, [r7, #8]
}
 8004a52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a54:	bf00      	nop
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0fc      	beq.n	8004a56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	2000000c 	.word	0x2000000c

08004a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a70:	4b07      	ldr	r3, [pc, #28]	@ (8004a90 <pxCurrentTCBConst2>)
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	6808      	ldr	r0, [r1, #0]
 8004a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	f380 8809 	msr	PSP, r0
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8811 	msr	BASEPRI, r0
 8004a8a:	4770      	bx	lr
 8004a8c:	f3af 8000 	nop.w

08004a90 <pxCurrentTCBConst2>:
 8004a90:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a98:	4808      	ldr	r0, [pc, #32]	@ (8004abc <prvPortStartFirstTask+0x24>)
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	6800      	ldr	r0, [r0, #0]
 8004a9e:	f380 8808 	msr	MSP, r0
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8814 	msr	CONTROL, r0
 8004aaa:	b662      	cpsie	i
 8004aac:	b661      	cpsie	f
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	df00      	svc	0
 8004ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aba:	bf00      	nop
 8004abc:	e000ed08 	.word	0xe000ed08

08004ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ac6:	4b47      	ldr	r3, [pc, #284]	@ (8004be4 <xPortStartScheduler+0x124>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a47      	ldr	r2, [pc, #284]	@ (8004be8 <xPortStartScheduler+0x128>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10b      	bne.n	8004ae8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	613b      	str	r3, [r7, #16]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8004be4 <xPortStartScheduler+0x124>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a3f      	ldr	r2, [pc, #252]	@ (8004bec <xPortStartScheduler+0x12c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10b      	bne.n	8004b0a <xPortStartScheduler+0x4a>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60fb      	str	r3, [r7, #12]
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	e7fd      	b.n	8004b06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b0a:	4b39      	ldr	r3, [pc, #228]	@ (8004bf0 <xPortStartScheduler+0x130>)
 8004b0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	22ff      	movs	r2, #255	@ 0xff
 8004b1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	4b31      	ldr	r3, [pc, #196]	@ (8004bf4 <xPortStartScheduler+0x134>)
 8004b30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b32:	4b31      	ldr	r3, [pc, #196]	@ (8004bf8 <xPortStartScheduler+0x138>)
 8004b34:	2207      	movs	r2, #7
 8004b36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b38:	e009      	b.n	8004b4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf8 <xPortStartScheduler+0x138>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf8 <xPortStartScheduler+0x138>)
 8004b42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b56:	2b80      	cmp	r3, #128	@ 0x80
 8004b58:	d0ef      	beq.n	8004b3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b5a:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <xPortStartScheduler+0x138>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1c3 0307 	rsb	r3, r3, #7
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d00b      	beq.n	8004b7e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60bb      	str	r3, [r7, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	e7fd      	b.n	8004b7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <xPortStartScheduler+0x138>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf8 <xPortStartScheduler+0x138>)
 8004b86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b88:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf8 <xPortStartScheduler+0x138>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b90:	4a19      	ldr	r2, [pc, #100]	@ (8004bf8 <xPortStartScheduler+0x138>)
 8004b92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b9c:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <xPortStartScheduler+0x13c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <xPortStartScheduler+0x13c>)
 8004ba2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ba6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ba8:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <xPortStartScheduler+0x13c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a13      	ldr	r2, [pc, #76]	@ (8004bfc <xPortStartScheduler+0x13c>)
 8004bae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004bb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bb4:	f000 f8da 	bl	8004d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <xPortStartScheduler+0x140>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bbe:	f000 f8f9 	bl	8004db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bc2:	4b10      	ldr	r3, [pc, #64]	@ (8004c04 <xPortStartScheduler+0x144>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8004c04 <xPortStartScheduler+0x144>)
 8004bc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004bcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bce:	f7ff ff63 	bl	8004a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bd2:	f7ff f83f 	bl	8003c54 <vTaskSwitchContext>
	prvTaskExitError();
 8004bd6:	f7ff ff1d 	bl	8004a14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	e000ed00 	.word	0xe000ed00
 8004be8:	410fc271 	.word	0x410fc271
 8004bec:	410fc270 	.word	0x410fc270
 8004bf0:	e000e400 	.word	0xe000e400
 8004bf4:	20000e00 	.word	0x20000e00
 8004bf8:	20000e04 	.word	0x20000e04
 8004bfc:	e000ed20 	.word	0xe000ed20
 8004c00:	2000000c 	.word	0x2000000c
 8004c04:	e000ef34 	.word	0xe000ef34

08004c08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	607b      	str	r3, [r7, #4]
}
 8004c20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c22:	4b10      	ldr	r3, [pc, #64]	@ (8004c64 <vPortEnterCritical+0x5c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3301      	adds	r3, #1
 8004c28:	4a0e      	ldr	r2, [pc, #56]	@ (8004c64 <vPortEnterCritical+0x5c>)
 8004c2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <vPortEnterCritical+0x5c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d110      	bne.n	8004c56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c34:	4b0c      	ldr	r3, [pc, #48]	@ (8004c68 <vPortEnterCritical+0x60>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <vPortEnterCritical+0x4e>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	603b      	str	r3, [r7, #0]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <vPortEnterCritical+0x4a>
	}
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <vPortExitCritical+0x50>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10b      	bne.n	8004c92 <vPortExitCritical+0x26>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	607b      	str	r3, [r7, #4]
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	e7fd      	b.n	8004c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c92:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <vPortExitCritical+0x50>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	4a08      	ldr	r2, [pc, #32]	@ (8004cbc <vPortExitCritical+0x50>)
 8004c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c9c:	4b07      	ldr	r3, [pc, #28]	@ (8004cbc <vPortExitCritical+0x50>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <vPortExitCritical+0x44>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	f383 8811 	msr	BASEPRI, r3
}
 8004cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	2000000c 	.word	0x2000000c

08004cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cc0:	f3ef 8009 	mrs	r0, PSP
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4b15      	ldr	r3, [pc, #84]	@ (8004d20 <pxCurrentTCBConst>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	f01e 0f10 	tst.w	lr, #16
 8004cd0:	bf08      	it	eq
 8004cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	6010      	str	r0, [r2, #0]
 8004cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ce4:	f380 8811 	msr	BASEPRI, r0
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f7fe ffb0 	bl	8003c54 <vTaskSwitchContext>
 8004cf4:	f04f 0000 	mov.w	r0, #0
 8004cf8:	f380 8811 	msr	BASEPRI, r0
 8004cfc:	bc09      	pop	{r0, r3}
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	6808      	ldr	r0, [r1, #0]
 8004d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d06:	f01e 0f10 	tst.w	lr, #16
 8004d0a:	bf08      	it	eq
 8004d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d10:	f380 8809 	msr	PSP, r0
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	f3af 8000 	nop.w

08004d20 <pxCurrentTCBConst>:
 8004d20:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop

08004d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	607b      	str	r3, [r7, #4]
}
 8004d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d42:	f7fe fecd 	bl	8003ae0 <xTaskIncrementTick>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <xPortSysTickHandler+0x40>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f383 8811 	msr	BASEPRI, r3
}
 8004d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <vPortSetupTimerInterrupt+0x34>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d76:	4b0b      	ldr	r3, [pc, #44]	@ (8004da4 <vPortSetupTimerInterrupt+0x38>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <vPortSetupTimerInterrupt+0x3c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0a      	ldr	r2, [pc, #40]	@ (8004dac <vPortSetupTimerInterrupt+0x40>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	4a09      	ldr	r2, [pc, #36]	@ (8004db0 <vPortSetupTimerInterrupt+0x44>)
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d8e:	4b04      	ldr	r3, [pc, #16]	@ (8004da0 <vPortSetupTimerInterrupt+0x34>)
 8004d90:	2207      	movs	r2, #7
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000e010 	.word	0xe000e010
 8004da4:	e000e018 	.word	0xe000e018
 8004da8:	20000000 	.word	0x20000000
 8004dac:	10624dd3 	.word	0x10624dd3
 8004db0:	e000e014 	.word	0xe000e014

08004db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004db4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004dc4 <vPortEnableVFP+0x10>
 8004db8:	6801      	ldr	r1, [r0, #0]
 8004dba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004dbe:	6001      	str	r1, [r0, #0]
 8004dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dc2:	bf00      	nop
 8004dc4:	e000ed88 	.word	0xe000ed88

08004dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dce:	f3ef 8305 	mrs	r3, IPSR
 8004dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d915      	bls.n	8004e06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dda:	4a18      	ldr	r2, [pc, #96]	@ (8004e3c <vPortValidateInterruptPriority+0x74>)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004de4:	4b16      	ldr	r3, [pc, #88]	@ (8004e40 <vPortValidateInterruptPriority+0x78>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	7afa      	ldrb	r2, [r7, #11]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d20b      	bcs.n	8004e06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e06:	4b0f      	ldr	r3, [pc, #60]	@ (8004e44 <vPortValidateInterruptPriority+0x7c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e48 <vPortValidateInterruptPriority+0x80>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d90b      	bls.n	8004e2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	603b      	str	r3, [r7, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <vPortValidateInterruptPriority+0x62>
	}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	e000e3f0 	.word	0xe000e3f0
 8004e40:	20000e00 	.word	0x20000e00
 8004e44:	e000ed0c 	.word	0xe000ed0c
 8004e48:	20000e04 	.word	0x20000e04

08004e4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	@ 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e58:	f7fe fd86 	bl	8003968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8004fd0 <pvPortMalloc+0x184>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e64:	f000 f924 	bl	80050b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e68:	4b5a      	ldr	r3, [pc, #360]	@ (8004fd4 <pvPortMalloc+0x188>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f040 8095 	bne.w	8004fa0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01e      	beq.n	8004eba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d015      	beq.n	8004eba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	3308      	adds	r3, #8
 8004e96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <pvPortMalloc+0x6e>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	617b      	str	r3, [r7, #20]
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	e7fd      	b.n	8004eb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d06f      	beq.n	8004fa0 <pvPortMalloc+0x154>
 8004ec0:	4b45      	ldr	r3, [pc, #276]	@ (8004fd8 <pvPortMalloc+0x18c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d86a      	bhi.n	8004fa0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004eca:	4b44      	ldr	r3, [pc, #272]	@ (8004fdc <pvPortMalloc+0x190>)
 8004ecc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ece:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <pvPortMalloc+0x190>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ed4:	e004      	b.n	8004ee0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d903      	bls.n	8004ef2 <pvPortMalloc+0xa6>
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f1      	bne.n	8004ed6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ef2:	4b37      	ldr	r3, [pc, #220]	@ (8004fd0 <pvPortMalloc+0x184>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d051      	beq.n	8004fa0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2208      	movs	r2, #8
 8004f02:	4413      	add	r3, r2
 8004f04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	2308      	movs	r3, #8
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d920      	bls.n	8004f60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4413      	add	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <pvPortMalloc+0xfc>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	613b      	str	r3, [r7, #16]
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f5a:	69b8      	ldr	r0, [r7, #24]
 8004f5c:	f000 f90a 	bl	8005174 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f60:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd8 <pvPortMalloc+0x18c>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <pvPortMalloc+0x18c>)
 8004f6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <pvPortMalloc+0x18c>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe0 <pvPortMalloc+0x194>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d203      	bcs.n	8004f82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f7a:	4b17      	ldr	r3, [pc, #92]	@ (8004fd8 <pvPortMalloc+0x18c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <pvPortMalloc+0x194>)
 8004f80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	4b13      	ldr	r3, [pc, #76]	@ (8004fd4 <pvPortMalloc+0x188>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f96:	4b13      	ldr	r3, [pc, #76]	@ (8004fe4 <pvPortMalloc+0x198>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	4a11      	ldr	r2, [pc, #68]	@ (8004fe4 <pvPortMalloc+0x198>)
 8004f9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fa0:	f7fe fcf0 	bl	8003984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <pvPortMalloc+0x17a>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	60fb      	str	r3, [r7, #12]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <pvPortMalloc+0x176>
	return pvReturn;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3728      	adds	r7, #40	@ 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20004a10 	.word	0x20004a10
 8004fd4:	20004a24 	.word	0x20004a24
 8004fd8:	20004a14 	.word	0x20004a14
 8004fdc:	20004a08 	.word	0x20004a08
 8004fe0:	20004a18 	.word	0x20004a18
 8004fe4:	20004a1c 	.word	0x20004a1c

08004fe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d04f      	beq.n	800509a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	425b      	negs	r3, r3
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4b25      	ldr	r3, [pc, #148]	@ (80050a4 <vPortFree+0xbc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <vPortFree+0x46>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60fb      	str	r3, [r7, #12]
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <vPortFree+0x66>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	60bb      	str	r3, [r7, #8]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4b14      	ldr	r3, [pc, #80]	@ (80050a4 <vPortFree+0xbc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01e      	beq.n	800509a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d11a      	bne.n	800509a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4b0e      	ldr	r3, [pc, #56]	@ (80050a4 <vPortFree+0xbc>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	43db      	mvns	r3, r3
 800506e:	401a      	ands	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005074:	f7fe fc78 	bl	8003968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <vPortFree+0xc0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4413      	add	r3, r2
 8005082:	4a09      	ldr	r2, [pc, #36]	@ (80050a8 <vPortFree+0xc0>)
 8005084:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005086:	6938      	ldr	r0, [r7, #16]
 8005088:	f000 f874 	bl	8005174 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800508c:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <vPortFree+0xc4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a06      	ldr	r2, [pc, #24]	@ (80050ac <vPortFree+0xc4>)
 8005094:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005096:	f7fe fc75 	bl	8003984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20004a24 	.word	0x20004a24
 80050a8:	20004a14 	.word	0x20004a14
 80050ac:	20004a20 	.word	0x20004a20

080050b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80050ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050bc:	4b27      	ldr	r3, [pc, #156]	@ (800515c <prvHeapInit+0xac>)
 80050be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3307      	adds	r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	4a1f      	ldr	r2, [pc, #124]	@ (800515c <prvHeapInit+0xac>)
 80050e0:	4413      	add	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005160 <prvHeapInit+0xb0>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005160 <prvHeapInit+0xb0>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050fc:	2208      	movs	r2, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a15      	ldr	r2, [pc, #84]	@ (8005164 <prvHeapInit+0xb4>)
 8005110:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005112:	4b14      	ldr	r3, [pc, #80]	@ (8005164 <prvHeapInit+0xb4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800511a:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <prvHeapInit+0xb4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005130:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <prvHeapInit+0xb4>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a0a      	ldr	r2, [pc, #40]	@ (8005168 <prvHeapInit+0xb8>)
 800513e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4a09      	ldr	r2, [pc, #36]	@ (800516c <prvHeapInit+0xbc>)
 8005146:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005148:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <prvHeapInit+0xc0>)
 800514a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800514e:	601a      	str	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20000e08 	.word	0x20000e08
 8005160:	20004a08 	.word	0x20004a08
 8005164:	20004a10 	.word	0x20004a10
 8005168:	20004a18 	.word	0x20004a18
 800516c:	20004a14 	.word	0x20004a14
 8005170:	20004a24 	.word	0x20004a24

08005174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800517c:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <prvInsertBlockIntoFreeList+0xac>)
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e002      	b.n	8005188 <prvInsertBlockIntoFreeList+0x14>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d8f7      	bhi.n	8005182 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d108      	bne.n	80051b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	441a      	add	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d118      	bne.n	80051fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b15      	ldr	r3, [pc, #84]	@ (8005224 <prvInsertBlockIntoFreeList+0xb0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d00d      	beq.n	80051f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	441a      	add	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e008      	b.n	8005204 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <prvInsertBlockIntoFreeList+0xb0>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e003      	b.n	8005204 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d002      	beq.n	8005212 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20004a08 	.word	0x20004a08
 8005224:	20004a10 	.word	0x20004a10

08005228 <memset>:
 8005228:	4402      	add	r2, r0
 800522a:	4603      	mov	r3, r0
 800522c:	4293      	cmp	r3, r2
 800522e:	d100      	bne.n	8005232 <memset+0xa>
 8005230:	4770      	bx	lr
 8005232:	f803 1b01 	strb.w	r1, [r3], #1
 8005236:	e7f9      	b.n	800522c <memset+0x4>

08005238 <__libc_init_array>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	4d0d      	ldr	r5, [pc, #52]	@ (8005270 <__libc_init_array+0x38>)
 800523c:	4c0d      	ldr	r4, [pc, #52]	@ (8005274 <__libc_init_array+0x3c>)
 800523e:	1b64      	subs	r4, r4, r5
 8005240:	10a4      	asrs	r4, r4, #2
 8005242:	2600      	movs	r6, #0
 8005244:	42a6      	cmp	r6, r4
 8005246:	d109      	bne.n	800525c <__libc_init_array+0x24>
 8005248:	4d0b      	ldr	r5, [pc, #44]	@ (8005278 <__libc_init_array+0x40>)
 800524a:	4c0c      	ldr	r4, [pc, #48]	@ (800527c <__libc_init_array+0x44>)
 800524c:	f000 f826 	bl	800529c <_init>
 8005250:	1b64      	subs	r4, r4, r5
 8005252:	10a4      	asrs	r4, r4, #2
 8005254:	2600      	movs	r6, #0
 8005256:	42a6      	cmp	r6, r4
 8005258:	d105      	bne.n	8005266 <__libc_init_array+0x2e>
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005260:	4798      	blx	r3
 8005262:	3601      	adds	r6, #1
 8005264:	e7ee      	b.n	8005244 <__libc_init_array+0xc>
 8005266:	f855 3b04 	ldr.w	r3, [r5], #4
 800526a:	4798      	blx	r3
 800526c:	3601      	adds	r6, #1
 800526e:	e7f2      	b.n	8005256 <__libc_init_array+0x1e>
 8005270:	080053a0 	.word	0x080053a0
 8005274:	080053a0 	.word	0x080053a0
 8005278:	080053a0 	.word	0x080053a0
 800527c:	080053a4 	.word	0x080053a4

08005280 <memcpy>:
 8005280:	440a      	add	r2, r1
 8005282:	4291      	cmp	r1, r2
 8005284:	f100 33ff 	add.w	r3, r0, #4294967295
 8005288:	d100      	bne.n	800528c <memcpy+0xc>
 800528a:	4770      	bx	lr
 800528c:	b510      	push	{r4, lr}
 800528e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005296:	4291      	cmp	r1, r2
 8005298:	d1f9      	bne.n	800528e <memcpy+0xe>
 800529a:	bd10      	pop	{r4, pc}

0800529c <_init>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr

080052a8 <_fini>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr
