ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"stm32h7xx_hal_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c"
  19              		.section	.text.HAL_RTC_Init,"ax",%progbits
  20              		.align	1
  21              		.global	HAL_RTC_Init
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	HAL_RTC_Init:
  27              	.LFB144:
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @file    stm32h7xx_hal_rtc.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Initialization/de-initialization
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Calendar (Time and Date) configuration
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + WakeUp Timer configuration
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + TimeStamp configuration
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Tampers configuration
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Backup Data Registers configuration
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Interrupts and flags management
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @attention
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * Copyright (c) 2017 STMicroelectronics.
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * All rights reserved.
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * in the root directory of this software component.
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   @verbatim
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ##### RTC Operating Condition #####
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 2


  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The real-time clock (RTC) and the RTC backup registers can be powered
  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        from the VBAT voltage when the main VDD supply is powered off.
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        To retain the content of the RTC backup registers and supply the RTC
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        when VDD is turned off, VBAT pin can be connected to an optional
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        to their reset values.
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        A backup domain reset is generated when one of the following events occurs:
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Tamper detection event resets all data backup registers.
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        accesses.
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Call the function HAL_RCCEx_PeriphCLKConfig with RCC_PERIPHCLK_RTC for
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         PeriphClockSelection and select RTCClockSelection (LSE, LSI or HSEdiv32)
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() macro.
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ##### How to use RTC Driver #####
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Time and Date configuration ***
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ===================================
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Alarm configuration ***
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ===========================
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             You can also configure the RTC Alarm with interrupt mode using the
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             HAL_RTC_SetAlarm_IT() function.
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        function.
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 3


  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Standby low power modes.
  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        or the RTC wakeup events.
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        is LSE or LSI.
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Callback registration ***
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   =============================================
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   are set to the corresponding weak functions. This is the recommended configuration
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in order to optimize memory/code consumption footprint/performances.
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   The compilation define  USE_RTC_REGISTER_CALLBACKS when set to 1
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Use Function HAL_RTC_RegisterCallback() to register an interrupt callback.
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Function HAL_RTC_RegisterCallback() allows to register following callbacks:
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback. (*)
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper1EventCallback : RTC Internal Tamper 1 Callback ID (*)
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper2EventCallback : RTC Internal Tamper 2 Callback ID (*)
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper3EventCallback : RTC Internal Tamper 3 Callback ID (*)
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper4EventCallback : RTC Internal Tamper 4 Callback ID (*)
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper5EventCallback : RTC Internal Tamper 5 Callback ID (*)
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper6EventCallback : RTC Internal Tamper 6 Callback ID (*)
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper8EventCallback : RTC Internal Tamper 8 Callback ID (*)
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   (*) Not applicable to all devices.
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   and a pointer to the user callback function.
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Use function HAL_RTC_UnRegisterCallback() to reset a callback to the default
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   weak function.
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   and the Callback ID.
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   This function allows to reset following callbacks:
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback. (*)
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper1EventCallback : RTC Internal Tamper 1 Callback ID (*)
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper2EventCallback : RTC Internal Tamper 2 Callback ID (*)
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 4


 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper3EventCallback : RTC Internal Tamper 3 Callback ID (*)
 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper4EventCallback : RTC Internal Tamper 4 Callback ID (*)
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper5EventCallback : RTC Internal Tamper 5 Callback ID (*)
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper6EventCallback : RTC Internal Tamper 6 Callback ID (*)
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) InternalTamper8EventCallback : RTC Internal Tamper 8 Callback ID (*)
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   (*) Not applicable to all devices.
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   By default, after the HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions :
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   examples AlarmAEventCallback(), WakeUpTimerEventCallback().
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in the HAL_RTC_Init()/HAL_RTC_DeInit() only when these callbacks are null
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   (not registered beforehand).
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   If not, MspInit or MspDeInit are not null, HAL_RTC_Init()/HAL_RTC_DeInit()
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   In that case first register the MspInit/MspDeInit user callbacks
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   using HAL_RTC_RegisterCallback() before calling HAL_RTC_DeInit()
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   or HAL_RTC_Init() function.
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   are set to the corresponding weak functions.
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    @endverbatim
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #include "stm32h7xx_hal.h"
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup STM32H7xx_HAL_Driver
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief RTC HAL module driver
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Exported functions --------------------------------------------------------*/
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 5


 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group1
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode,
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 15-bit synchronous prescaler.
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Initialize the RTC peripheral
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
  28              		.loc 1 246 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 6


  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
  44              		.loc 1 247 21
  45 0008 0123     		movs	r3, #1
  46 000a FB73     		strb	r3, [r7, #15]
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check RTC handler */
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(hrtc != NULL)
  47              		.loc 1 250 5
  48 000c 7B68     		ldr	r3, [r7, #4]
  49 000e 002B     		cmp	r3, #0
  50 0010 71D0     		beq	.L2
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check the parameters */
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(hrtc->State == HAL_RTC_STATE_RESET)
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_TAMPER2_SUPPORT)
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_TAMPER2_SUPPORT */
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper4EventCallback =  HAL_RTCEx_InternalTamper4EventCallback;
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper6EventCallback =  HAL_RTCEx_InternalTamper6EventCallback;
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspInitCallback == NULL)
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 7


 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Init the low level hardware */
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspInitCallback(hrtc);
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspDeInitCallback == NULL)
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(hrtc->State == HAL_RTC_STATE_RESET)
  51              		.loc 1 305 12
  52 0012 7B68     		ldr	r3, [r7, #4]
  53 0014 93F82130 		ldrb	r3, [r3, #33]
  54 0018 DBB2     		uxtb	r3, r3
  55              		.loc 1 305 7
  56 001a 002B     		cmp	r3, #0
  57 001c 06D1     		bne	.L3
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
  58              		.loc 1 308 18
  59 001e 7B68     		ldr	r3, [r7, #4]
  60 0020 0022     		movs	r2, #0
  61 0022 83F82020 		strb	r2, [r3, #32]
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Initialize RTC MSP */
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_MspInit(hrtc);
  62              		.loc 1 311 7
  63 0026 7868     		ldr	r0, [r7, #4]
  64 0028 FFF7FEFF 		bl	HAL_RTC_MspInit
  65              	.L3:
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
  66              		.loc 1 316 17
  67 002c 7B68     		ldr	r3, [r7, #4]
  68 002e 0222     		movs	r2, #2
  69 0030 83F82120 		strb	r2, [r3, #33]
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check whether the calendar needs to be initialized */
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
  70              		.loc 1 319 9
  71 0034 7B68     		ldr	r3, [r7, #4]
  72 0036 1B68     		ldr	r3, [r3]
  73 0038 DB68     		ldr	r3, [r3, #12]
  74 003a 03F01003 		and	r3, r3, #16
  75              		.loc 1 319 8
  76 003e 102B     		cmp	r3, #16
  77 0040 50D0     		beq	.L4
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Disable the write protection for RTC registers */
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  78              		.loc 1 322 7
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 8


  79 0042 7B68     		ldr	r3, [r7, #4]
  80 0044 1B68     		ldr	r3, [r3]
  81 0046 CA22     		movs	r2, #202
  82 0048 5A62     		str	r2, [r3, #36]
  83 004a 7B68     		ldr	r3, [r7, #4]
  84 004c 1B68     		ldr	r3, [r3]
  85 004e 5322     		movs	r2, #83
  86 0050 5A62     		str	r2, [r3, #36]
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****      /* Enter Initialization mode */
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = RTC_EnterInitMode(hrtc);
  87              		.loc 1 325 16
  88 0052 7868     		ldr	r0, [r7, #4]
  89 0054 FFF7FEFF 		bl	RTC_EnterInitMode
  90 0058 0346     		mov	r3, r0
  91 005a FB73     		strb	r3, [r7, #15]
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if (status == HAL_OK)
  92              		.loc 1 326 10
  93 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  94 005e 002B     		cmp	r3, #0
  95 0060 24D1     		bne	.L5
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Clear RTC_CR FMT, OSEL and POL Bits */
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
  96              		.loc 1 333 13
  97 0062 7B68     		ldr	r3, [r7, #4]
  98 0064 1B68     		ldr	r3, [r3]
  99              		.loc 1 333 23
 100 0066 9968     		ldr	r1, [r3, #8]
 101              		.loc 1 333 13
 102 0068 7B68     		ldr	r3, [r7, #4]
 103 006a 1A68     		ldr	r2, [r3]
 104              		.loc 1 333 28
 105 006c 244B     		ldr	r3, .L9
 106 006e 0B40     		ands	r3, r3, r1
 107 0070 9360     		str	r3, [r2, #8]
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Set RTC_CR register */
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarit
 108              		.loc 1 337 13
 109 0072 7B68     		ldr	r3, [r7, #4]
 110 0074 1B68     		ldr	r3, [r3]
 111              		.loc 1 337 23
 112 0076 9968     		ldr	r1, [r3, #8]
 113              		.loc 1 337 42
 114 0078 7B68     		ldr	r3, [r7, #4]
 115 007a 5A68     		ldr	r2, [r3, #4]
 116              		.loc 1 337 66
 117 007c 7B68     		ldr	r3, [r7, #4]
 118 007e 1B69     		ldr	r3, [r3, #16]
 119              		.loc 1 337 54
 120 0080 1A43     		orrs	r2, r2, r3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 9


 121              		.loc 1 337 86
 122 0082 7B68     		ldr	r3, [r7, #4]
 123 0084 9B69     		ldr	r3, [r3, #24]
 124              		.loc 1 337 74
 125 0086 1A43     		orrs	r2, r2, r3
 126              		.loc 1 337 13
 127 0088 7B68     		ldr	r3, [r7, #4]
 128 008a 1B68     		ldr	r3, [r3]
 129              		.loc 1 337 28
 130 008c 0A43     		orrs	r2, r2, r1
 131 008e 9A60     		str	r2, [r3, #8]
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Configure the RTC PRER */
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.Syn
 132              		.loc 1 340 43
 133 0090 7B68     		ldr	r3, [r7, #4]
 134 0092 9B68     		ldr	r3, [r3, #8]
 135              		.loc 1 340 57
 136 0094 1904     		lsls	r1, r3, #16
 137              		.loc 1 340 109
 138 0096 7B68     		ldr	r3, [r7, #4]
 139 0098 DA68     		ldr	r2, [r3, #12]
 140              		.loc 1 340 13
 141 009a 7B68     		ldr	r3, [r7, #4]
 142 009c 1B68     		ldr	r3, [r3]
 143              		.loc 1 340 83
 144 009e 0A43     		orrs	r2, r2, r1
 145              		.loc 1 340 30
 146 00a0 1A61     		str	r2, [r3, #16]
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Exit Initialization mode */
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status = RTC_ExitInitMode(hrtc);
 147              		.loc 1 343 18
 148 00a2 7868     		ldr	r0, [r7, #4]
 149 00a4 FFF7FEFF 		bl	RTC_ExitInitMode
 150 00a8 0346     		mov	r3, r0
 151 00aa FB73     		strb	r3, [r7, #15]
 152              	.L5:
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(status == HAL_OK)
 153              		.loc 1 345 9
 154 00ac FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 155 00ae 002B     		cmp	r3, #0
 156 00b0 13D1     		bne	.L6
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutR
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 157              		.loc 1 351 13
 158 00b2 7B68     		ldr	r3, [r7, #4]
 159 00b4 1B68     		ldr	r3, [r3]
 160              		.loc 1 351 23
 161 00b6 DA6C     		ldr	r2, [r3, #76]
 162              		.loc 1 351 13
 163 00b8 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 10


 164 00ba 1B68     		ldr	r3, [r3]
 165              		.loc 1 351 28
 166 00bc 22F00302 		bic	r2, r2, #3
 167 00c0 DA64     		str	r2, [r3, #76]
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 168              		.loc 1 352 13
 169 00c2 7B68     		ldr	r3, [r7, #4]
 170 00c4 1B68     		ldr	r3, [r3]
 171              		.loc 1 352 23
 172 00c6 D96C     		ldr	r1, [r3, #76]
 173              		.loc 1 352 42
 174 00c8 7B68     		ldr	r3, [r7, #4]
 175 00ca DA69     		ldr	r2, [r3, #28]
 176              		.loc 1 352 66
 177 00cc 7B68     		ldr	r3, [r7, #4]
 178 00ce 5B69     		ldr	r3, [r3, #20]
 179              		.loc 1 352 54
 180 00d0 1A43     		orrs	r2, r2, r3
 181              		.loc 1 352 13
 182 00d2 7B68     		ldr	r3, [r7, #4]
 183 00d4 1B68     		ldr	r3, [r3]
 184              		.loc 1 352 28
 185 00d6 0A43     		orrs	r2, r2, r1
 186 00d8 DA64     		str	r2, [r3, #76]
 187              	.L6:
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 188              		.loc 1 357 5
 189 00da 7B68     		ldr	r3, [r7, #4]
 190 00dc 1B68     		ldr	r3, [r3]
 191 00de FF22     		movs	r2, #255
 192 00e0 5A62     		str	r2, [r3, #36]
 193 00e2 01E0     		b	.L7
 194              	.L4:
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* The calendar is already initialized */
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = HAL_OK;
 195              		.loc 1 362 14
 196 00e4 0023     		movs	r3, #0
 197 00e6 FB73     		strb	r3, [r7, #15]
 198              	.L7:
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 199              		.loc 1 365 8
 200 00e8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 201 00ea 002B     		cmp	r3, #0
 202 00ec 03D1     		bne	.L2
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC state */
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_READY;
 203              		.loc 1 368 19
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 11


 204 00ee 7B68     		ldr	r3, [r7, #4]
 205 00f0 0122     		movs	r2, #1
 206 00f2 83F82120 		strb	r2, [r3, #33]
 207              	.L2:
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* return status */
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 208              		.loc 1 373 10
 209 00f6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 210              		.loc 1 374 1
 211 00f8 1846     		mov	r0, r3
 212 00fa 1037     		adds	r7, r7, #16
 213              	.LCFI3:
 214              		.cfi_def_cfa_offset 8
 215 00fc BD46     		mov	sp, r7
 216              	.LCFI4:
 217              		.cfi_def_cfa_register 13
 218              		@ sp needed
 219 00fe 80BD     		pop	{r7, pc}
 220              	.L10:
 221              		.align	2
 222              	.L9:
 223 0100 BFFF8FFF 		.word	-7340097
 224              		.cfi_endproc
 225              	.LFE144:
 227              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 228              		.align	1
 229              		.global	HAL_RTC_DeInit
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 234              	HAL_RTC_DeInit:
 235              	.LFB145:
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  DeInitialize the RTC peripheral.
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 236              		.loc 1 383 1
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 16
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240 0000 80B5     		push	{r7, lr}
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 0002 84B0     		sub	sp, sp, #16
 246              	.LCFI6:
 247              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 12


 248 0004 00AF     		add	r7, sp, #0
 249              	.LCFI7:
 250              		.cfi_def_cfa_register 7
 251 0006 7860     		str	r0, [r7, #4]
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 252              		.loc 1 384 21
 253 0008 0123     		movs	r3, #1
 254 000a FB73     		strb	r3, [r7, #15]
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t          tickstart;
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check RTC handler */
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(hrtc != NULL)
 255              		.loc 1 388 5
 256 000c 7B68     		ldr	r3, [r7, #4]
 257 000e 002B     		cmp	r3, #0
 258 0010 00F08880 		beq	.L12
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check the parameters */
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
 259              		.loc 1 394 17
 260 0014 7B68     		ldr	r3, [r7, #4]
 261 0016 0222     		movs	r2, #2
 262 0018 83F82120 		strb	r2, [r3, #33]
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 263              		.loc 1 397 5
 264 001c 7B68     		ldr	r3, [r7, #4]
 265 001e 1B68     		ldr	r3, [r3]
 266 0020 CA22     		movs	r2, #202
 267 0022 5A62     		str	r2, [r3, #36]
 268 0024 7B68     		ldr	r3, [r7, #4]
 269 0026 1B68     		ldr	r3, [r3]
 270 0028 5322     		movs	r2, #83
 271 002a 5A62     		str	r2, [r3, #36]
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enter Initialization mode */
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_EnterInitMode(hrtc);
 272              		.loc 1 400 14
 273 002c 7868     		ldr	r0, [r7, #4]
 274 002e FFF7FEFF 		bl	RTC_EnterInitMode
 275 0032 0346     		mov	r3, r0
 276 0034 FB73     		strb	r3, [r7, #15]
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 277              		.loc 1 402 8
 278 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 279 0038 002B     		cmp	r3, #0
 280 003a 2CD1     		bne	.L13
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset TR, DR and CR registers */
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->TR = 0x00000000U;
 281              		.loc 1 405 11
 282 003c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 13


 283 003e 1B68     		ldr	r3, [r3]
 284              		.loc 1 405 26
 285 0040 0022     		movs	r2, #0
 286 0042 1A60     		str	r2, [r3]
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 287              		.loc 1 406 11
 288 0044 7B68     		ldr	r3, [r7, #4]
 289 0046 1B68     		ldr	r3, [r3]
 290              		.loc 1 406 26
 291 0048 42F20112 		movw	r2, #8449
 292 004c 5A60     		str	r2, [r3, #4]
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset All CR bits except CR[2:0] (which cannot be written before bit
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****            WUTE of CR is cleared) */
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR = 0x00000000U;
 293              		.loc 1 410 11
 294 004e 7B68     		ldr	r3, [r7, #4]
 295 0050 1B68     		ldr	r3, [r3]
 296              		.loc 1 410 26
 297 0052 0022     		movs	r2, #0
 298 0054 9A60     		str	r2, [r3, #8]
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Wait till WUTWF is set (to be able to reset CR[2:0] and WUTR) and if
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          timeout is reached exit */
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tickstart = HAL_GetTick();
 299              		.loc 1 414 19
 300 0056 FFF7FEFF 		bl	HAL_GetTick
 301 005a B860     		str	r0, [r7, #8]
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       while ((((hrtc->Instance->ICSR) & RTC_ICSR_WUTWF) == 0U) && (status != HAL_TIMEOUT))
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       while ((((hrtc->Instance->ISR)  & RTC_ISR_WUTWF)  == 0U) && (status != HAL_TIMEOUT))
 302              		.loc 1 419 13
 303 005c 11E0     		b	.L15
 304              	.L16:
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 305              		.loc 1 422 13
 306 005e FFF7FEFF 		bl	HAL_GetTick
 307 0062 0246     		mov	r2, r0
 308              		.loc 1 422 27 discriminator 1
 309 0064 BB68     		ldr	r3, [r7, #8]
 310 0066 D31A     		subs	r3, r2, r3
 311              		.loc 1 422 11 discriminator 1
 312 0068 B3F57A7F 		cmp	r3, #1000
 313 006c 09D9     		bls	.L15
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         {
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           /* Enable the write protection for RTC registers */
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 314              		.loc 1 425 11
 315 006e 7B68     		ldr	r3, [r7, #4]
 316 0070 1B68     		ldr	r3, [r3]
 317 0072 FF22     		movs	r2, #255
 318 0074 5A62     		str	r2, [r3, #36]
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 14


 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           /* Set RTC state */
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           hrtc->State = HAL_RTC_STATE_TIMEOUT;
 319              		.loc 1 428 23
 320 0076 7B68     		ldr	r3, [r7, #4]
 321 0078 0322     		movs	r2, #3
 322 007a 83F82120 		strb	r2, [r3, #33]
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           status = HAL_TIMEOUT;
 323              		.loc 1 429 18
 324 007e 0323     		movs	r3, #3
 325 0080 FB73     		strb	r3, [r7, #15]
 326              	.L15:
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 327              		.loc 1 419 21
 328 0082 7B68     		ldr	r3, [r7, #4]
 329 0084 1B68     		ldr	r3, [r3]
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 330              		.loc 1 419 31
 331 0086 DB68     		ldr	r3, [r3, #12]
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 332              		.loc 1 419 39
 333 0088 03F00403 		and	r3, r3, #4
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 334              		.loc 1 419 64
 335 008c 002B     		cmp	r3, #0
 336 008e 02D1     		bne	.L13
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 337              		.loc 1 419 64 is_stmt 0 discriminator 1
 338 0090 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 339 0092 032B     		cmp	r3, #3
 340 0094 E3D1     		bne	.L16
 341              	.L13:
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         }
 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 342              		.loc 1 435 8 is_stmt 1
 343 0096 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 344 0098 002B     		cmp	r3, #0
 345 009a 29D1     		bne	.L17
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset RTC CR register bits [2:0] */
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR = 0x00000000U;
 346              		.loc 1 438 11
 347 009c 7B68     		ldr	r3, [r7, #4]
 348 009e 1B68     		ldr	r3, [r3]
 349              		.loc 1 438 26
 350 00a0 0022     		movs	r2, #0
 351 00a2 9A60     		str	r2, [r3, #8]
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset other RTC registers */
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->WUTR     = RTC_WUTR_WUT;
 352              		.loc 1 441 11
 353 00a4 7B68     		ldr	r3, [r7, #4]
 354 00a6 1B68     		ldr	r3, [r3]
 355              		.loc 1 441 32
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 15


 356 00a8 4FF6FF72 		movw	r2, #65535
 357 00ac 5A61     		str	r2, [r3, #20]
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->PRER     = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 358              		.loc 1 442 11
 359 00ae 7B68     		ldr	r3, [r7, #4]
 360 00b0 1B68     		ldr	r3, [r3]
 361              		.loc 1 442 32
 362 00b2 1F4A     		ldr	r2, .L19
 363 00b4 1A61     		str	r2, [r3, #16]
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMAR   = 0x00000000U;
 364              		.loc 1 443 11
 365 00b6 7B68     		ldr	r3, [r7, #4]
 366 00b8 1B68     		ldr	r3, [r3]
 367              		.loc 1 443 32
 368 00ba 0022     		movs	r2, #0
 369 00bc DA61     		str	r2, [r3, #28]
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMBR   = 0x00000000U;
 370              		.loc 1 444 11
 371 00be 7B68     		ldr	r3, [r7, #4]
 372 00c0 1B68     		ldr	r3, [r3]
 373              		.loc 1 444 32
 374 00c2 0022     		movs	r2, #0
 375 00c4 1A62     		str	r2, [r3, #32]
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->SHIFTR   = 0x00000000U;
 376              		.loc 1 445 11
 377 00c6 7B68     		ldr	r3, [r7, #4]
 378 00c8 1B68     		ldr	r3, [r3]
 379              		.loc 1 445 32
 380 00ca 0022     		movs	r2, #0
 381 00cc DA62     		str	r2, [r3, #44]
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CALR     = 0x00000000U;
 382              		.loc 1 446 11
 383 00ce 7B68     		ldr	r3, [r7, #4]
 384 00d0 1B68     		ldr	r3, [r3]
 385              		.loc 1 446 32
 386 00d2 0022     		movs	r2, #0
 387 00d4 DA63     		str	r2, [r3, #60]
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMASSR = 0x00000000U;
 388              		.loc 1 447 11
 389 00d6 7B68     		ldr	r3, [r7, #4]
 390 00d8 1B68     		ldr	r3, [r3]
 391              		.loc 1 447 32
 392 00da 0022     		movs	r2, #0
 393 00dc 5A64     		str	r2, [r3, #68]
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMBSSR = 0x00000000U;
 394              		.loc 1 448 11
 395 00de 7B68     		ldr	r3, [r7, #4]
 396 00e0 1B68     		ldr	r3, [r3]
 397              		.loc 1 448 32
 398 00e2 0022     		movs	r2, #0
 399 00e4 9A64     		str	r2, [r3, #72]
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Exit initialization mode */
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = RTC_ExitInitMode(hrtc);
 400              		.loc 1 451 16
 401 00e6 7868     		ldr	r0, [r7, #4]
 402 00e8 FFF7FEFF 		bl	RTC_ExitInitMode
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 16


 403 00ec 0346     		mov	r3, r0
 404 00ee FB73     		strb	r3, [r7, #15]
 405              	.L17:
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(status == HAL_OK)
 406              		.loc 1 454 7
 407 00f0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 408 00f2 002B     		cmp	r3, #0
 409 00f4 16D1     		bne	.L12
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset TAMP registers */
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->CR1 = 0xFFFF0000U;
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->CR2 = 0x00000000U;
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset Tamper configuration register */
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->TAMPCR = 0x00000000U;
 410              		.loc 1 462 11
 411 00f6 7B68     		ldr	r3, [r7, #4]
 412 00f8 1B68     		ldr	r3, [r3]
 413              		.loc 1 462 30
 414 00fa 0022     		movs	r2, #0
 415 00fc 1A64     		str	r2, [r3, #64]
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset Option register */
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->OR = 0x00000000U;
 416              		.loc 1 465 11
 417 00fe 7B68     		ldr	r3, [r7, #4]
 418 0100 1B68     		ldr	r3, [r3]
 419              		.loc 1 465 26
 420 0102 0022     		movs	r2, #0
 421 0104 DA64     		str	r2, [r3, #76]
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 422              		.loc 1 469 7
 423 0106 7B68     		ldr	r3, [r7, #4]
 424 0108 1B68     		ldr	r3, [r3]
 425 010a FF22     		movs	r2, #255
 426 010c 5A62     		str	r2, [r3, #36]
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspDeInitCallback == NULL)
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* DeInit the low level hardware: CLOCK, NVIC.*/
 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspDeInitCallback(hrtc);
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* De-Initialize RTC MSP */
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_MspDeInit(hrtc);
 427              		.loc 1 481 7
 428 010e 7868     		ldr	r0, [r7, #4]
 429 0110 FFF7FEFF 		bl	HAL_RTC_MspDeInit
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 17


 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_RESET;
 430              		.loc 1 484 19
 431 0114 7B68     		ldr	r3, [r7, #4]
 432 0116 0022     		movs	r2, #0
 433 0118 83F82120 		strb	r2, [r3, #33]
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Release Lock */
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 434              		.loc 1 487 7
 435 011c 7B68     		ldr	r3, [r7, #4]
 436 011e 0022     		movs	r2, #0
 437 0120 83F82020 		strb	r2, [r3, #32]
 438              	.L12:
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* return status */
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 439              		.loc 1 492 10
 440 0124 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 441              		.loc 1 493 1
 442 0126 1846     		mov	r0, r3
 443 0128 1037     		adds	r7, r7, #16
 444              	.LCFI8:
 445              		.cfi_def_cfa_offset 8
 446 012a BD46     		mov	sp, r7
 447              	.LCFI9:
 448              		.cfi_def_cfa_register 13
 449              		@ sp needed
 450 012c 80BD     		pop	{r7, pc}
 451              	.L20:
 452 012e 00BF     		.align	2
 453              	.L19:
 454 0130 FF007F00 		.word	8323327
 455              		.cfi_endproc
 456              	.LFE145:
 458              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
 459              		.align	1
 460              		.weak	HAL_RTC_MspInit
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 465              	HAL_RTC_MspInit:
 466              	.LFB146:
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Register a User RTC Callback
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 18


 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID (*)
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID Internal Tamper 1 Callback ID (*)
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID Internal Tamper 2 Callback ID (*)
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID Internal Tamper 3 Callback ID (*)
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID Internal Tamper 4 Callback ID (*)
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID Internal Tamper 5 Callback ID (*)
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID Internal Tamper 6 Callback ID (*)
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID Internal Tamper 8 Callback ID (*)
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        (*) Not applicable to all devices.
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(pCallback == NULL)
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     return HAL_ERROR;
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process locked */
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = pCallback;
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = pCallback;
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = pCallback;
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = pCallback;
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = pCallback;
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_TAMPER2_SUPPORT)
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = pCallback;
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 19


 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_TAMPER2_SUPPORT */
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = pCallback;
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID :
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper1EventCallback =  pCallback;
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID :
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper2EventCallback =  pCallback;
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID :
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper3EventCallback =  pCallback;
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID :
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper4EventCallback =  pCallback;
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID :
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper5EventCallback =  pCallback;
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID :
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper6EventCallback =  pCallback;
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID :
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper8EventCallback =  pCallback;
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 20


 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Return error status */
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status =  HAL_ERROR;
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Release Lock */
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Unregister an RTC Callback
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         RTC callback is redirected to the weak predefined callback
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID (*)
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID Internal Tamper 1 Callback ID (*)
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID Internal Tamper 2 Callback ID (*)
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID Internal Tamper 3 Callback ID (*)
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID Internal Tamper 4 Callback ID (*)
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID Internal Tamper 5 Callback ID (*)
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID Internal Tamper 6 Callback ID (*)
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID Internal Tamper 8 Callback ID (*)
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        (*) Not applicable to all devices.
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process locked */
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 21


 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAE
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBE
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = HAL_RTCEx_TimeStampEventCallback;     /* Legacy weak TimeSta
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpT
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_TAMPER2_SUPPORT)
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = HAL_RTCEx_Tamper2EventCallback;         /* Legacy weak Tamper2
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_TAMPER2_SUPPORT */
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = HAL_RTCEx_Tamper3EventCallback;         /* Legacy weak Tamper3
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID :
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID :
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID :
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID :
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper4EventCallback =  HAL_RTCEx_InternalTamper4EventCallback;
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID :
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID :
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper6EventCallback =  HAL_RTCEx_InternalTamper6EventCallback;
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 22


 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID :
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Return error status */
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status =  HAL_ERROR;
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Release Lock */
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Initialize the RTC MSP.
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 23


 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 467              		.loc 1 789 1
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 8
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472 0000 80B4     		push	{r7}
 473              	.LCFI10:
 474              		.cfi_def_cfa_offset 4
 475              		.cfi_offset 7, -4
 476 0002 83B0     		sub	sp, sp, #12
 477              	.LCFI11:
 478              		.cfi_def_cfa_offset 16
 479 0004 00AF     		add	r7, sp, #0
 480              	.LCFI12:
 481              		.cfi_def_cfa_register 7
 482 0006 7860     		str	r0, [r7, #4]
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 483              		.loc 1 796 1
 484 0008 00BF     		nop
 485 000a 0C37     		adds	r7, r7, #12
 486              	.LCFI13:
 487              		.cfi_def_cfa_offset 4
 488 000c BD46     		mov	sp, r7
 489              	.LCFI14:
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
 492 000e 5DF8047B 		ldr	r7, [sp], #4
 493              	.LCFI15:
 494              		.cfi_restore 7
 495              		.cfi_def_cfa_offset 0
 496 0012 7047     		bx	lr
 497              		.cfi_endproc
 498              	.LFE146:
 500              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 501              		.align	1
 502              		.weak	HAL_RTC_MspDeInit
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 507              	HAL_RTC_MspDeInit:
 508              	.LFB147:
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  DeInitialize the RTC MSP.
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 509              		.loc 1 804 1
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 24


 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 8
 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514 0000 80B4     		push	{r7}
 515              	.LCFI16:
 516              		.cfi_def_cfa_offset 4
 517              		.cfi_offset 7, -4
 518 0002 83B0     		sub	sp, sp, #12
 519              	.LCFI17:
 520              		.cfi_def_cfa_offset 16
 521 0004 00AF     		add	r7, sp, #0
 522              	.LCFI18:
 523              		.cfi_def_cfa_register 7
 524 0006 7860     		str	r0, [r7, #4]
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 525              		.loc 1 811 1
 526 0008 00BF     		nop
 527 000a 0C37     		adds	r7, r7, #12
 528              	.LCFI19:
 529              		.cfi_def_cfa_offset 4
 530 000c BD46     		mov	sp, r7
 531              	.LCFI20:
 532              		.cfi_def_cfa_register 13
 533              		@ sp needed
 534 000e 5DF8047B 		ldr	r7, [sp], #4
 535              	.LCFI21:
 536              		.cfi_restore 7
 537              		.cfi_def_cfa_offset 0
 538 0012 7047     		bx	lr
 539              		.cfi_endproc
 540              	.LFE147:
 542              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 543              		.align	1
 544              		.global	HAL_RTC_SetTime
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 549              	HAL_RTC_SetTime:
 550              	.LFB148:
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group2
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 25


 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set RTC current time.
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 551              		.loc 1 842 1
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 24
 554              		@ frame_needed = 1, uses_anonymous_args = 0
 555 0000 90B5     		push	{r4, r7, lr}
 556              	.LCFI22:
 557              		.cfi_def_cfa_offset 12
 558              		.cfi_offset 4, -12
 559              		.cfi_offset 7, -8
 560              		.cfi_offset 14, -4
 561 0002 87B0     		sub	sp, sp, #28
 562              	.LCFI23:
 563              		.cfi_def_cfa_offset 40
 564 0004 00AF     		add	r7, sp, #0
 565              	.LCFI24:
 566              		.cfi_def_cfa_register 7
 567 0006 F860     		str	r0, [r7, #12]
 568 0008 B960     		str	r1, [r7, #8]
 569 000a 7A60     		str	r2, [r7, #4]
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef status;
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 570              		.loc 1 852 3
 571 000c FB68     		ldr	r3, [r7, #12]
 572 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 573 0012 012B     		cmp	r3, #1
 574 0014 01D1     		bne	.L24
 575              		.loc 1 852 3 is_stmt 0 discriminator 1
 576 0016 0223     		movs	r3, #2
 577              		.loc 1 852 3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 26


 578 0018 89E0     		b	.L25
 579              	.L24:
 580              		.loc 1 852 3 discriminator 2
 581 001a FB68     		ldr	r3, [r7, #12]
 582 001c 0122     		movs	r2, #1
 583 001e 83F82020 		strb	r2, [r3, #32]
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 584              		.loc 1 854 15 is_stmt 1
 585 0022 FB68     		ldr	r3, [r7, #12]
 586 0024 0222     		movs	r2, #2
 587 0026 83F82120 		strb	r2, [r3, #33]
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 588              		.loc 1 857 3
 589 002a FB68     		ldr	r3, [r7, #12]
 590 002c 1B68     		ldr	r3, [r3]
 591 002e CA22     		movs	r2, #202
 592 0030 5A62     		str	r2, [r3, #36]
 593 0032 FB68     		ldr	r3, [r7, #12]
 594 0034 1B68     		ldr	r3, [r3]
 595 0036 5322     		movs	r2, #83
 596 0038 5A62     		str	r2, [r3, #36]
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  /* Enter Initialization mode */
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 597              		.loc 1 859 12
 598 003a F868     		ldr	r0, [r7, #12]
 599 003c FFF7FEFF 		bl	RTC_EnterInitMode
 600 0040 0346     		mov	r3, r0
 601 0042 FB74     		strb	r3, [r7, #19]
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 602              		.loc 1 860 6
 603 0044 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 604 0046 002B     		cmp	r3, #0
 605 0048 61D1     		bne	.L26
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(Format == RTC_FORMAT_BIN)
 606              		.loc 1 862 7
 607 004a 7B68     		ldr	r3, [r7, #4]
 608 004c 002B     		cmp	r3, #0
 609 004e 26D1     		bne	.L27
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 610              		.loc 1 864 15
 611 0050 FB68     		ldr	r3, [r7, #12]
 612 0052 1B68     		ldr	r3, [r3]
 613              		.loc 1 864 25
 614 0054 9B68     		ldr	r3, [r3, #8]
 615              		.loc 1 864 30
 616 0056 03F04003 		and	r3, r3, #64
 617              		.loc 1 864 9
 618 005a 002B     		cmp	r3, #0
 619 005c 02D1     		bne	.L28
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(sTime->Hours));
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 27


 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       else
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         sTime->TimeFormat = 0x00U;
 620              		.loc 1 871 27
 621 005e BB68     		ldr	r3, [r7, #8]
 622 0060 0022     		movs	r2, #0
 623 0062 DA70     		strb	r2, [r3, #3]
 624              	.L28:
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(sTime->Hours));
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(sTime->Minutes));
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(sTime->Seconds));
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 625              		.loc 1 877 38
 626 0064 BB68     		ldr	r3, [r7, #8]
 627 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 628 0068 1846     		mov	r0, r3
 629 006a FFF7FEFF 		bl	RTC_ByteToBcd2
 630 006e 0346     		mov	r3, r0
 631              		.loc 1 877 69 discriminator 1
 632 0070 1C04     		lsls	r4, r3, #16
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 633              		.loc 1 878 38
 634 0072 BB68     		ldr	r3, [r7, #8]
 635 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 636 0076 1846     		mov	r0, r3
 637 0078 FFF7FEFF 		bl	RTC_ByteToBcd2
 638 007c 0346     		mov	r3, r0
 639              		.loc 1 878 69 discriminator 1
 640 007e 1B02     		lsls	r3, r3, #8
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 641              		.loc 1 877 88
 642 0080 1C43     		orrs	r4, r4, r3
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 643              		.loc 1 879 38
 644 0082 BB68     		ldr	r3, [r7, #8]
 645 0084 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 646 0086 1846     		mov	r0, r3
 647 0088 FFF7FEFF 		bl	RTC_ByteToBcd2
 648 008c 0346     		mov	r3, r0
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 649              		.loc 1 878 88
 650 008e 44EA0302 		orr	r2, r4, r3
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 651              		.loc 1 880 44
 652 0092 BB68     		ldr	r3, [r7, #8]
 653 0094 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 654              		.loc 1 880 58
 655 0096 9B05     		lsls	r3, r3, #22
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 656              		.loc 1 877 14
 657 0098 1343     		orrs	r3, r3, r2
 658 009a 7B61     		str	r3, [r7, #20]
 659 009c 18E0     		b	.L29
 660              	.L27:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 28


 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 661              		.loc 1 884 15
 662 009e FB68     		ldr	r3, [r7, #12]
 663 00a0 1B68     		ldr	r3, [r3]
 664              		.loc 1 884 25
 665 00a2 9B68     		ldr	r3, [r3, #8]
 666              		.loc 1 884 30
 667 00a4 03F04003 		and	r3, r3, #64
 668              		.loc 1 884 9
 669 00a8 002B     		cmp	r3, #0
 670 00aa 02D1     		bne	.L30
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       else
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         sTime->TimeFormat = 0x00U;
 671              		.loc 1 891 27
 672 00ac BB68     		ldr	r3, [r7, #8]
 673 00ae 0022     		movs	r2, #0
 674 00b0 DA70     		strb	r2, [r3, #3]
 675              	.L30:
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 676              		.loc 1 896 34
 677 00b2 BB68     		ldr	r3, [r7, #8]
 678 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 679              		.loc 1 896 45
 680 00b6 1A04     		lsls	r2, r3, #16
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 681              		.loc 1 897 34
 682 00b8 BB68     		ldr	r3, [r7, #8]
 683 00ba 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 684              		.loc 1 897 45
 685 00bc 1B02     		lsls	r3, r3, #8
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 686              		.loc 1 896 64
 687 00be 1343     		orrs	r3, r3, r2
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 688              		.loc 1 898 34
 689 00c0 BA68     		ldr	r2, [r7, #8]
 690 00c2 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 691              		.loc 1 897 64
 692 00c4 1A43     		orrs	r2, r2, r3
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 693              		.loc 1 899 34
 694 00c6 BB68     		ldr	r3, [r7, #8]
 695 00c8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 696              		.loc 1 899 48
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 29


 697 00ca 9B05     		lsls	r3, r3, #22
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 698              		.loc 1 896 14
 699 00cc 1343     		orrs	r3, r3, r2
 700 00ce 7B61     		str	r3, [r7, #20]
 701              	.L29:
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 702              		.loc 1 903 9
 703 00d0 FB68     		ldr	r3, [r7, #12]
 704 00d2 1A68     		ldr	r2, [r3]
 705              		.loc 1 903 26
 706 00d4 7969     		ldr	r1, [r7, #20]
 707 00d6 184B     		ldr	r3, .L32
 708 00d8 0B40     		ands	r3, r3, r1
 709              		.loc 1 903 24
 710 00da 1360     		str	r3, [r2]
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 711              		.loc 1 906 9
 712 00dc FB68     		ldr	r3, [r7, #12]
 713 00de 1B68     		ldr	r3, [r3]
 714              		.loc 1 906 19
 715 00e0 9A68     		ldr	r2, [r3, #8]
 716              		.loc 1 906 9
 717 00e2 FB68     		ldr	r3, [r7, #12]
 718 00e4 1B68     		ldr	r3, [r3]
 719              		.loc 1 906 24
 720 00e6 22F48022 		bic	r2, r2, #262144
 721 00ea 9A60     		str	r2, [r3, #8]
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 722              		.loc 1 909 9
 723 00ec FB68     		ldr	r3, [r7, #12]
 724 00ee 1B68     		ldr	r3, [r3]
 725              		.loc 1 909 19
 726 00f0 9968     		ldr	r1, [r3, #8]
 727              		.loc 1 909 43
 728 00f2 BB68     		ldr	r3, [r7, #8]
 729 00f4 DA68     		ldr	r2, [r3, #12]
 730              		.loc 1 909 67
 731 00f6 BB68     		ldr	r3, [r7, #8]
 732 00f8 1B69     		ldr	r3, [r3, #16]
 733              		.loc 1 909 60
 734 00fa 1A43     		orrs	r2, r2, r3
 735              		.loc 1 909 9
 736 00fc FB68     		ldr	r3, [r7, #12]
 737 00fe 1B68     		ldr	r3, [r3]
 738              		.loc 1 909 24
 739 0100 0A43     		orrs	r2, r2, r1
 740 0102 9A60     		str	r2, [r3, #8]
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Exit Initialization mode */
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 30


 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 741              		.loc 1 912 14
 742 0104 F868     		ldr	r0, [r7, #12]
 743 0106 FFF7FEFF 		bl	RTC_ExitInitMode
 744 010a 0346     		mov	r3, r0
 745 010c FB74     		strb	r3, [r7, #19]
 746              	.L26:
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 747              		.loc 1 916 3
 748 010e FB68     		ldr	r3, [r7, #12]
 749 0110 1B68     		ldr	r3, [r3]
 750 0112 FF22     		movs	r2, #255
 751 0114 5A62     		str	r2, [r3, #36]
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 752              		.loc 1 918 6
 753 0116 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 754 0118 002B     		cmp	r3, #0
 755 011a 03D1     		bne	.L31
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 756              		.loc 1 920 17
 757 011c FB68     		ldr	r3, [r7, #12]
 758 011e 0122     		movs	r2, #1
 759 0120 83F82120 		strb	r2, [r3, #33]
 760              	.L31:
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 761              		.loc 1 924 3
 762 0124 FB68     		ldr	r3, [r7, #12]
 763 0126 0022     		movs	r2, #0
 764 0128 83F82020 		strb	r2, [r3, #32]
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 765              		.loc 1 926 10
 766 012c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 767              	.L25:
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 768              		.loc 1 927 1
 769 012e 1846     		mov	r0, r3
 770 0130 1C37     		adds	r7, r7, #28
 771              	.LCFI25:
 772              		.cfi_def_cfa_offset 12
 773 0132 BD46     		mov	sp, r7
 774              	.LCFI26:
 775              		.cfi_def_cfa_register 13
 776              		@ sp needed
 777 0134 90BD     		pop	{r4, r7, pc}
 778              	.L33:
 779 0136 00BF     		.align	2
 780              	.L32:
 781 0138 7F7F7F00 		.word	8355711
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 31


 782              		.cfi_endproc
 783              	.LFE148:
 785              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 786              		.align	1
 787              		.global	HAL_RTC_GetTime
 788              		.syntax unified
 789              		.thumb
 790              		.thumb_func
 792              	HAL_RTC_GetTime:
 793              	.LFB149:
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get RTC current time.
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t F
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 794              		.loc 1 951 1
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 24
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798 0000 80B5     		push	{r7, lr}
 799              	.LCFI27:
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 7, -8
 802              		.cfi_offset 14, -4
 803 0002 86B0     		sub	sp, sp, #24
 804              	.LCFI28:
 805              		.cfi_def_cfa_offset 32
 806 0004 00AF     		add	r7, sp, #0
 807              	.LCFI29:
 808              		.cfi_def_cfa_register 7
 809 0006 F860     		str	r0, [r7, #12]
 810 0008 B960     		str	r1, [r7, #8]
 811 000a 7A60     		str	r2, [r7, #4]
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 32


 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get subseconds structure field from the corresponding register*/
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 812              		.loc 1 958 38
 813 000c FB68     		ldr	r3, [r7, #12]
 814 000e 1B68     		ldr	r3, [r3]
 815              		.loc 1 958 48
 816 0010 9A6A     		ldr	r2, [r3, #40]
 817              		.loc 1 958 21
 818 0012 BB68     		ldr	r3, [r7, #8]
 819 0014 5A60     		str	r2, [r3, #4]
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 820              		.loc 1 961 42
 821 0016 FB68     		ldr	r3, [r7, #12]
 822 0018 1B68     		ldr	r3, [r3]
 823              		.loc 1 961 52
 824 001a 1B69     		ldr	r3, [r3, #16]
 825              		.loc 1 961 27
 826 001c C3F30E02 		ubfx	r2, r3, #0, #15
 827              		.loc 1 961 25
 828 0020 BB68     		ldr	r3, [r7, #8]
 829 0022 9A60     		str	r2, [r3, #8]
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the TR register */
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 830              		.loc 1 964 27
 831 0024 FB68     		ldr	r3, [r7, #12]
 832 0026 1B68     		ldr	r3, [r3]
 833              		.loc 1 964 37
 834 0028 1A68     		ldr	r2, [r3]
 835              		.loc 1 964 10
 836 002a 224B     		ldr	r3, .L37
 837 002c 1340     		ands	r3, r3, r2
 838 002e 7B61     		str	r3, [r7, #20]
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 839              		.loc 1 967 70
 840 0030 7B69     		ldr	r3, [r7, #20]
 841 0032 1B0C     		lsrs	r3, r3, #16
 842              		.loc 1 967 23
 843 0034 DBB2     		uxtb	r3, r3
 844 0036 03F03F03 		and	r3, r3, #63
 845 003a DAB2     		uxtb	r2, r3
 846              		.loc 1 967 21
 847 003c BB68     		ldr	r3, [r7, #8]
 848 003e 1A70     		strb	r2, [r3]
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 849              		.loc 1 968 70
 850 0040 7B69     		ldr	r3, [r7, #20]
 851 0042 1B0A     		lsrs	r3, r3, #8
 852              		.loc 1 968 23
 853 0044 DBB2     		uxtb	r3, r3
 854 0046 03F07F03 		and	r3, r3, #127
 855 004a DAB2     		uxtb	r2, r3
 856              		.loc 1 968 21
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 33


 857 004c BB68     		ldr	r3, [r7, #8]
 858 004e 5A70     		strb	r2, [r3, #1]
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 859              		.loc 1 969 23
 860 0050 7B69     		ldr	r3, [r7, #20]
 861 0052 DBB2     		uxtb	r3, r3
 862 0054 03F07F03 		and	r3, r3, #127
 863 0058 DAB2     		uxtb	r2, r3
 864              		.loc 1 969 21
 865 005a BB68     		ldr	r3, [r7, #8]
 866 005c 9A70     		strb	r2, [r3, #2]
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 867              		.loc 1 970 70
 868 005e 7B69     		ldr	r3, [r7, #20]
 869 0060 9B0D     		lsrs	r3, r3, #22
 870              		.loc 1 970 23
 871 0062 DBB2     		uxtb	r3, r3
 872 0064 03F00103 		and	r3, r3, #1
 873 0068 DAB2     		uxtb	r2, r3
 874              		.loc 1 970 21
 875 006a BB68     		ldr	r3, [r7, #8]
 876 006c DA70     		strb	r2, [r3, #3]
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the input parameters format */
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 877              		.loc 1 973 5
 878 006e 7B68     		ldr	r3, [r7, #4]
 879 0070 002B     		cmp	r3, #0
 880 0072 1AD1     		bne	.L35
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 881              		.loc 1 976 31
 882 0074 BB68     		ldr	r3, [r7, #8]
 883 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 884 0078 1846     		mov	r0, r3
 885 007a FFF7FEFF 		bl	RTC_Bcd2ToByte
 886 007e 0346     		mov	r3, r0
 887 0080 1A46     		mov	r2, r3
 888              		.loc 1 976 20 discriminator 1
 889 0082 BB68     		ldr	r3, [r7, #8]
 890 0084 1A70     		strb	r2, [r3]
 977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 891              		.loc 1 977 31
 892 0086 BB68     		ldr	r3, [r7, #8]
 893 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 894 008a 1846     		mov	r0, r3
 895 008c FFF7FEFF 		bl	RTC_Bcd2ToByte
 896 0090 0346     		mov	r3, r0
 897 0092 1A46     		mov	r2, r3
 898              		.loc 1 977 20 discriminator 1
 899 0094 BB68     		ldr	r3, [r7, #8]
 900 0096 5A70     		strb	r2, [r3, #1]
 978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 901              		.loc 1 978 31
 902 0098 BB68     		ldr	r3, [r7, #8]
 903 009a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 34


 904 009c 1846     		mov	r0, r3
 905 009e FFF7FEFF 		bl	RTC_Bcd2ToByte
 906 00a2 0346     		mov	r3, r0
 907 00a4 1A46     		mov	r2, r3
 908              		.loc 1 978 20 discriminator 1
 909 00a6 BB68     		ldr	r3, [r7, #8]
 910 00a8 9A70     		strb	r2, [r3, #2]
 911              	.L35:
 979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 912              		.loc 1 981 10
 913 00aa 0023     		movs	r3, #0
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 914              		.loc 1 982 1
 915 00ac 1846     		mov	r0, r3
 916 00ae 1837     		adds	r7, r7, #24
 917              	.LCFI30:
 918              		.cfi_def_cfa_offset 8
 919 00b0 BD46     		mov	sp, r7
 920              	.LCFI31:
 921              		.cfi_def_cfa_register 13
 922              		@ sp needed
 923 00b2 80BD     		pop	{r7, pc}
 924              	.L38:
 925              		.align	2
 926              	.L37:
 927 00b4 7F7F7F00 		.word	8355711
 928              		.cfi_endproc
 929              	.LFE149:
 931              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 932              		.align	1
 933              		.global	HAL_RTC_SetDate
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 938              	HAL_RTC_SetDate:
 939              	.LFB150:
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set RTC current date.
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 940              		.loc 1 995 1
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 24
 943              		@ frame_needed = 1, uses_anonymous_args = 0
 944 0000 90B5     		push	{r4, r7, lr}
 945              	.LCFI32:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 35


 946              		.cfi_def_cfa_offset 12
 947              		.cfi_offset 4, -12
 948              		.cfi_offset 7, -8
 949              		.cfi_offset 14, -4
 950 0002 87B0     		sub	sp, sp, #28
 951              	.LCFI33:
 952              		.cfi_def_cfa_offset 40
 953 0004 00AF     		add	r7, sp, #0
 954              	.LCFI34:
 955              		.cfi_def_cfa_register 7
 956 0006 F860     		str	r0, [r7, #12]
 957 0008 B960     		str	r1, [r7, #8]
 958 000a 7A60     		str	r2, [r7, #4]
 996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status;
 998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 959              		.loc 1 1003 3
 960 000c FB68     		ldr	r3, [r7, #12]
 961 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 962 0012 012B     		cmp	r3, #1
 963 0014 01D1     		bne	.L40
 964              		.loc 1 1003 3 is_stmt 0 discriminator 1
 965 0016 0223     		movs	r3, #2
 966              		.loc 1 1003 3
 967 0018 73E0     		b	.L41
 968              	.L40:
 969              		.loc 1 1003 3 discriminator 2
 970 001a FB68     		ldr	r3, [r7, #12]
 971 001c 0122     		movs	r2, #1
 972 001e 83F82020 		strb	r2, [r3, #32]
1004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 973              		.loc 1 1005 15 is_stmt 1
 974 0022 FB68     		ldr	r3, [r7, #12]
 975 0024 0222     		movs	r2, #2
 976 0026 83F82120 		strb	r2, [r3, #33]
1006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 977              		.loc 1 1007 5
 978 002a 7B68     		ldr	r3, [r7, #4]
 979 002c 002B     		cmp	r3, #0
 980 002e 0ED1     		bne	.L42
 981              		.loc 1 1007 43 discriminator 1
 982 0030 BB68     		ldr	r3, [r7, #8]
 983 0032 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 984              		.loc 1 1007 51 discriminator 1
 985 0034 03F01003 		and	r3, r3, #16
 986              		.loc 1 1007 33 discriminator 1
 987 0038 002B     		cmp	r3, #0
 988 003a 08D0     		beq	.L42
1008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 36


 989              		.loc 1 1009 36
 990 003c BB68     		ldr	r3, [r7, #8]
 991 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 992              		.loc 1 1009 44
 993 0040 23F01003 		bic	r3, r3, #16
 994 0044 DBB2     		uxtb	r3, r3
 995              		.loc 1 1009 20
 996 0046 0A33     		adds	r3, r3, #10
 997 0048 DAB2     		uxtb	r2, r3
 998              		.loc 1 1009 18
 999 004a BB68     		ldr	r3, [r7, #8]
 1000 004c 5A70     		strb	r2, [r3, #1]
 1001              	.L42:
1010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1002              		.loc 1 1014 5
 1003 004e 7B68     		ldr	r3, [r7, #4]
 1004 0050 002B     		cmp	r3, #0
 1005 0052 1CD1     		bne	.L43
1015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 1006              		.loc 1 1020 30
 1007 0054 BB68     		ldr	r3, [r7, #8]
 1008 0056 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1009 0058 1846     		mov	r0, r3
 1010 005a FFF7FEFF 		bl	RTC_ByteToBcd2
 1011 005e 0346     		mov	r3, r0
 1012              		.loc 1 1020 59 discriminator 1
 1013 0060 1C04     		lsls	r4, r3, #16
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1014              		.loc 1 1021 30
 1015 0062 BB68     		ldr	r3, [r7, #8]
 1016 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1017 0066 1846     		mov	r0, r3
 1018 0068 FFF7FEFF 		bl	RTC_ByteToBcd2
 1019 006c 0346     		mov	r3, r0
 1020              		.loc 1 1021 59 discriminator 1
 1021 006e 1B02     		lsls	r3, r3, #8
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1022              		.loc 1 1020 77
 1023 0070 1C43     		orrs	r4, r4, r3
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 1024              		.loc 1 1022 30
 1025 0072 BB68     		ldr	r3, [r7, #8]
 1026 0074 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1027 0076 1846     		mov	r0, r3
 1028 0078 FFF7FEFF 		bl	RTC_ByteToBcd2
 1029 007c 0346     		mov	r3, r0
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1030              		.loc 1 1021 77
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 37


 1031 007e 44EA0302 		orr	r2, r4, r3
1023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 1032              		.loc 1 1023 35
 1033 0082 BB68     		ldr	r3, [r7, #8]
 1034 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1035              		.loc 1 1023 59
 1036 0086 5B03     		lsls	r3, r3, #13
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1037              		.loc 1 1020 16
 1038 0088 1343     		orrs	r3, r3, r2
 1039 008a 7B61     		str	r3, [r7, #20]
 1040 008c 0EE0     		b	.L44
 1041              	.L43:
1024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
1028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 1042              		.loc 1 1031 36
 1043 008e BB68     		ldr	r3, [r7, #8]
 1044 0090 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1045              		.loc 1 1031 47
 1046 0092 1A04     		lsls	r2, r3, #16
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1047              		.loc 1 1032 36
 1048 0094 BB68     		ldr	r3, [r7, #8]
 1049 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1050              		.loc 1 1032 47
 1051 0098 1B02     		lsls	r3, r3, #8
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1052              		.loc 1 1031 65
 1053 009a 1343     		orrs	r3, r3, r2
1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 1054              		.loc 1 1033 36
 1055 009c BA68     		ldr	r2, [r7, #8]
 1056 009e 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1057              		.loc 1 1032 65
 1058 00a0 1A43     		orrs	r2, r2, r3
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 1059              		.loc 1 1034 36
 1060 00a2 BB68     		ldr	r3, [r7, #8]
 1061 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1062              		.loc 1 1034 47
 1063 00a6 5B03     		lsls	r3, r3, #13
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1064              		.loc 1 1031 16
 1065 00a8 1343     		orrs	r3, r3, r2
 1066 00aa 7B61     		str	r3, [r7, #20]
 1067              	.L44:
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 38


 1068              		.loc 1 1038 3
 1069 00ac FB68     		ldr	r3, [r7, #12]
 1070 00ae 1B68     		ldr	r3, [r3]
 1071 00b0 CA22     		movs	r2, #202
 1072 00b2 5A62     		str	r2, [r3, #36]
 1073 00b4 FB68     		ldr	r3, [r7, #12]
 1074 00b6 1B68     		ldr	r3, [r3]
 1075 00b8 5322     		movs	r2, #83
 1076 00ba 5A62     		str	r2, [r3, #36]
1039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enter Initialization mode */
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 1077              		.loc 1 1042 12
 1078 00bc F868     		ldr	r0, [r7, #12]
 1079 00be FFF7FEFF 		bl	RTC_EnterInitMode
 1080 00c2 0346     		mov	r3, r0
 1081 00c4 FB74     		strb	r3, [r7, #19]
1043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 1082              		.loc 1 1043 6
 1083 00c6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1084 00c8 002B     		cmp	r3, #0
 1085 00ca 0AD1     		bne	.L45
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the RTC_DR register */
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 1086              		.loc 1 1046 9
 1087 00cc FB68     		ldr	r3, [r7, #12]
 1088 00ce 1A68     		ldr	r2, [r3]
 1089              		.loc 1 1046 26
 1090 00d0 7969     		ldr	r1, [r7, #20]
 1091 00d2 0E4B     		ldr	r3, .L47
 1092 00d4 0B40     		ands	r3, r3, r1
 1093              		.loc 1 1046 24
 1094 00d6 5360     		str	r3, [r2, #4]
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Exit Initialization mode */
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 1095              		.loc 1 1050 14
 1096 00d8 F868     		ldr	r0, [r7, #12]
 1097 00da FFF7FEFF 		bl	RTC_ExitInitMode
 1098 00de 0346     		mov	r3, r0
 1099 00e0 FB74     		strb	r3, [r7, #19]
 1100              	.L45:
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1101              		.loc 1 1054 3
 1102 00e2 FB68     		ldr	r3, [r7, #12]
 1103 00e4 1B68     		ldr	r3, [r3]
 1104 00e6 FF22     		movs	r2, #255
 1105 00e8 5A62     		str	r2, [r3, #36]
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 1106              		.loc 1 1056 6
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 39


 1107 00ea FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1108 00ec 002B     		cmp	r3, #0
 1109 00ee 03D1     		bne	.L46
1057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 1110              		.loc 1 1058 17
 1111 00f0 FB68     		ldr	r3, [r7, #12]
 1112 00f2 0122     		movs	r2, #1
 1113 00f4 83F82120 		strb	r2, [r3, #33]
 1114              	.L46:
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1115              		.loc 1 1062 3
 1116 00f8 FB68     		ldr	r3, [r7, #12]
 1117 00fa 0022     		movs	r2, #0
 1118 00fc 83F82020 		strb	r2, [r3, #32]
1063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 1119              		.loc 1 1064 10
 1120 0100 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1121              	.L41:
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1122              		.loc 1 1067 1
 1123 0102 1846     		mov	r0, r3
 1124 0104 1C37     		adds	r7, r7, #28
 1125              	.LCFI35:
 1126              		.cfi_def_cfa_offset 12
 1127 0106 BD46     		mov	sp, r7
 1128              	.LCFI36:
 1129              		.cfi_def_cfa_register 13
 1130              		@ sp needed
 1131 0108 90BD     		pop	{r4, r7, pc}
 1132              	.L48:
 1133 010a 00BF     		.align	2
 1134              	.L47:
 1135 010c 3FFFFF00 		.word	16777023
 1136              		.cfi_endproc
 1137              	.LFE150:
 1139              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1140              		.align	1
 1141              		.global	HAL_RTC_GetDate
 1142              		.syntax unified
 1143              		.thumb
 1144              		.thumb_func
 1146              	HAL_RTC_GetDate:
 1147              	.LFB151:
1068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get RTC current date.
1071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
1073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 40


1075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
1077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
1079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t F
1083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 1148              		.loc 1 1083 1
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 24
 1151              		@ frame_needed = 1, uses_anonymous_args = 0
 1152 0000 80B5     		push	{r7, lr}
 1153              	.LCFI37:
 1154              		.cfi_def_cfa_offset 8
 1155              		.cfi_offset 7, -8
 1156              		.cfi_offset 14, -4
 1157 0002 86B0     		sub	sp, sp, #24
 1158              	.LCFI38:
 1159              		.cfi_def_cfa_offset 32
 1160 0004 00AF     		add	r7, sp, #0
 1161              	.LCFI39:
 1162              		.cfi_def_cfa_register 7
 1163 0006 F860     		str	r0, [r7, #12]
 1164 0008 B960     		str	r1, [r7, #8]
 1165 000a 7A60     		str	r2, [r7, #4]
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the DR register */
1090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 1166              		.loc 1 1090 31
 1167 000c FB68     		ldr	r3, [r7, #12]
 1168 000e 1B68     		ldr	r3, [r3]
 1169              		.loc 1 1090 41
 1170 0010 5A68     		ldr	r2, [r3, #4]
 1171              		.loc 1 1090 14
 1172 0012 214B     		ldr	r3, .L52
 1173 0014 1340     		ands	r3, r3, r2
 1174 0016 7B61     		str	r3, [r7, #20]
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 1175              		.loc 1 1093 69
 1176 0018 7B69     		ldr	r3, [r7, #20]
 1177 001a 1B0C     		lsrs	r3, r3, #16
 1178              		.loc 1 1093 20
 1179 001c DAB2     		uxtb	r2, r3
 1180              		.loc 1 1093 18
 1181 001e BB68     		ldr	r3, [r7, #8]
 1182 0020 DA70     		strb	r2, [r3, #3]
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 1183              		.loc 1 1094 69
 1184 0022 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 41


 1185 0024 1B0A     		lsrs	r3, r3, #8
 1186              		.loc 1 1094 20
 1187 0026 DBB2     		uxtb	r3, r3
 1188 0028 03F01F03 		and	r3, r3, #31
 1189 002c DAB2     		uxtb	r2, r3
 1190              		.loc 1 1094 18
 1191 002e BB68     		ldr	r3, [r7, #8]
 1192 0030 5A70     		strb	r2, [r3, #1]
1095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 1193              		.loc 1 1095 20
 1194 0032 7B69     		ldr	r3, [r7, #20]
 1195 0034 DBB2     		uxtb	r3, r3
 1196 0036 03F03F03 		and	r3, r3, #63
 1197 003a DAB2     		uxtb	r2, r3
 1198              		.loc 1 1095 18
 1199 003c BB68     		ldr	r3, [r7, #8]
 1200 003e 9A70     		strb	r2, [r3, #2]
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 1201              		.loc 1 1096 69
 1202 0040 7B69     		ldr	r3, [r7, #20]
 1203 0042 5B0B     		lsrs	r3, r3, #13
 1204              		.loc 1 1096 20
 1205 0044 DBB2     		uxtb	r3, r3
 1206 0046 03F00703 		and	r3, r3, #7
 1207 004a DAB2     		uxtb	r2, r3
 1208              		.loc 1 1096 18
 1209 004c BB68     		ldr	r3, [r7, #8]
 1210 004e 1A70     		strb	r2, [r3]
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the input parameters format */
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1211              		.loc 1 1099 5
 1212 0050 7B68     		ldr	r3, [r7, #4]
 1213 0052 002B     		cmp	r3, #0
 1214 0054 1AD1     		bne	.L50
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1215              		.loc 1 1102 28
 1216 0056 BB68     		ldr	r3, [r7, #8]
 1217 0058 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1218 005a 1846     		mov	r0, r3
 1219 005c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1220 0060 0346     		mov	r3, r0
 1221 0062 1A46     		mov	r2, r3
 1222              		.loc 1 1102 17 discriminator 1
 1223 0064 BB68     		ldr	r3, [r7, #8]
 1224 0066 DA70     		strb	r2, [r3, #3]
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1225              		.loc 1 1103 29
 1226 0068 BB68     		ldr	r3, [r7, #8]
 1227 006a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1228 006c 1846     		mov	r0, r3
 1229 006e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1230 0072 0346     		mov	r3, r0
 1231 0074 1A46     		mov	r2, r3
 1232              		.loc 1 1103 18 discriminator 1
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 42


 1233 0076 BB68     		ldr	r3, [r7, #8]
 1234 0078 5A70     		strb	r2, [r3, #1]
1104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 1235              		.loc 1 1104 28
 1236 007a BB68     		ldr	r3, [r7, #8]
 1237 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1238 007e 1846     		mov	r0, r3
 1239 0080 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1240 0084 0346     		mov	r3, r0
 1241 0086 1A46     		mov	r2, r3
 1242              		.loc 1 1104 17 discriminator 1
 1243 0088 BB68     		ldr	r3, [r7, #8]
 1244 008a 9A70     		strb	r2, [r3, #2]
 1245              	.L50:
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 1246              		.loc 1 1106 10
 1247 008c 0023     		movs	r3, #0
1107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1248              		.loc 1 1107 1
 1249 008e 1846     		mov	r0, r3
 1250 0090 1837     		adds	r7, r7, #24
 1251              	.LCFI40:
 1252              		.cfi_def_cfa_offset 8
 1253 0092 BD46     		mov	sp, r7
 1254              	.LCFI41:
 1255              		.cfi_def_cfa_register 13
 1256              		@ sp needed
 1257 0094 80BD     		pop	{r7, pc}
 1258              	.L53:
 1259 0096 00BF     		.align	2
 1260              	.L52:
 1261 0098 3FFFFF00 		.word	16777023
 1262              		.cfi_endproc
 1263              	.LFE151:
 1265              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1266              		.align	1
 1267              		.global	HAL_RTC_SetAlarm
 1268              		.syntax unified
 1269              		.thumb
 1270              		.thumb_func
 1272              	HAL_RTC_SetAlarm:
 1273              	.LFB152:
1108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group3
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 43


1122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm.
1128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 1274              		.loc 1 1137 1
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 32
 1277              		@ frame_needed = 1, uses_anonymous_args = 0
 1278 0000 90B5     		push	{r4, r7, lr}
 1279              	.LCFI42:
 1280              		.cfi_def_cfa_offset 12
 1281              		.cfi_offset 4, -12
 1282              		.cfi_offset 7, -8
 1283              		.cfi_offset 14, -4
 1284 0002 89B0     		sub	sp, sp, #36
 1285              	.LCFI43:
 1286              		.cfi_def_cfa_offset 48
 1287 0004 00AF     		add	r7, sp, #0
 1288              	.LCFI44:
 1289              		.cfi_def_cfa_register 7
 1290 0006 F860     		str	r0, [r7, #12]
 1291 0008 B960     		str	r1, [r7, #8]
 1292 000a 7A60     		str	r2, [r7, #4]
1138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1293              		.loc 1 1151 3
 1294 000c FB68     		ldr	r3, [r7, #12]
 1295 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1296 0012 012B     		cmp	r3, #1
 1297 0014 01D1     		bne	.L55
 1298              		.loc 1 1151 3 is_stmt 0 discriminator 1
 1299 0016 0223     		movs	r3, #2
 1300              		.loc 1 1151 3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 44


 1301 0018 1BE1     		b	.L56
 1302              	.L55:
 1303              		.loc 1 1151 3 discriminator 2
 1304 001a FB68     		ldr	r3, [r7, #12]
 1305 001c 0122     		movs	r2, #1
 1306 001e 83F82020 		strb	r2, [r3, #32]
1152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1307              		.loc 1 1153 15 is_stmt 1
 1308 0022 FB68     		ldr	r3, [r7, #12]
 1309 0024 0222     		movs	r2, #2
 1310 0026 83F82120 		strb	r2, [r3, #33]
1154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1311              		.loc 1 1155 5
 1312 002a 7B68     		ldr	r3, [r7, #4]
 1313 002c 002B     		cmp	r3, #0
 1314 002e 37D1     		bne	.L57
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1315              		.loc 1 1157 13
 1316 0030 FB68     		ldr	r3, [r7, #12]
 1317 0032 1B68     		ldr	r3, [r3]
 1318              		.loc 1 1157 23
 1319 0034 9B68     		ldr	r3, [r3, #8]
 1320              		.loc 1 1157 28
 1321 0036 03F04003 		and	r3, r3, #64
 1322              		.loc 1 1157 7
 1323 003a 002B     		cmp	r3, #0
 1324 003c 02D1     		bne	.L58
1158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1325              		.loc 1 1164 36
 1326 003e BB68     		ldr	r3, [r7, #8]
 1327 0040 0022     		movs	r2, #0
 1328 0042 DA70     		strb	r2, [r3, #3]
 1329              	.L58:
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 45


 1330              		.loc 1 1179 26
 1331 0044 BB68     		ldr	r3, [r7, #8]
 1332 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1333 0048 1846     		mov	r0, r3
 1334 004a FFF7FEFF 		bl	RTC_ByteToBcd2
 1335 004e 0346     		mov	r3, r0
 1336              		.loc 1 1179 68 discriminator 1
 1337 0050 1C04     		lsls	r4, r3, #16
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1338              		.loc 1 1180 26
 1339 0052 BB68     		ldr	r3, [r7, #8]
 1340 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1341 0056 1846     		mov	r0, r3
 1342 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1343 005c 0346     		mov	r3, r0
 1344              		.loc 1 1180 68 discriminator 1
 1345 005e 1B02     		lsls	r3, r3, #8
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1346              		.loc 1 1179 91
 1347 0060 1C43     		orrs	r4, r4, r3
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1348              		.loc 1 1181 26
 1349 0062 BB68     		ldr	r3, [r7, #8]
 1350 0064 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1351 0066 1846     		mov	r0, r3
 1352 0068 FFF7FEFF 		bl	RTC_ByteToBcd2
 1353 006c 0346     		mov	r3, r0
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1354              		.loc 1 1180 91
 1355 006e 44EA0302 		orr	r2, r4, r3
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1356              		.loc 1 1182 43
 1357 0072 BB68     		ldr	r3, [r7, #8]
 1358 0074 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1359              		.loc 1 1182 68
 1360 0076 9B05     		lsls	r3, r3, #22
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1361              		.loc 1 1181 91
 1362 0078 42EA0304 		orr	r4, r2, r3
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1363              		.loc 1 1183 26
 1364 007c BB68     		ldr	r3, [r7, #8]
 1365 007e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1366 0082 1846     		mov	r0, r3
 1367 0084 FFF7FEFF 		bl	RTC_ByteToBcd2
 1368 0088 0346     		mov	r3, r0
 1369              		.loc 1 1183 68 discriminator 1
 1370 008a 1B06     		lsls	r3, r3, #24
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1371              		.loc 1 1182 91
 1372 008c 44EA0302 		orr	r2, r4, r3
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1373              		.loc 1 1184 32
 1374 0090 BB68     		ldr	r3, [r7, #8]
 1375 0092 DB69     		ldr	r3, [r3, #28]
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1376              		.loc 1 1183 91
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 46


 1377 0094 1A43     		orrs	r2, r2, r3
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1378              		.loc 1 1185 32
 1379 0096 BB68     		ldr	r3, [r7, #8]
 1380 0098 5B69     		ldr	r3, [r3, #20]
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1381              		.loc 1 1179 12
 1382 009a 1343     		orrs	r3, r3, r2
 1383 009c FB61     		str	r3, [r7, #28]
 1384 009e 23E0     		b	.L59
 1385              	.L57:
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1386              		.loc 1 1189 13
 1387 00a0 FB68     		ldr	r3, [r7, #12]
 1388 00a2 1B68     		ldr	r3, [r3]
 1389              		.loc 1 1189 23
 1390 00a4 9B68     		ldr	r3, [r3, #8]
 1391              		.loc 1 1189 28
 1392 00a6 03F04003 		and	r3, r3, #64
 1393              		.loc 1 1189 7
 1394 00aa 002B     		cmp	r3, #0
 1395 00ac 02D1     		bne	.L60
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1396              		.loc 1 1196 36
 1397 00ae BB68     		ldr	r3, [r7, #8]
 1398 00b0 0022     		movs	r2, #0
 1399 00b2 DA70     		strb	r2, [r3, #3]
 1400              	.L60:
1197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 1401              		.loc 1 1212 43
 1402 00b4 BB68     		ldr	r3, [r7, #8]
 1403 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1404              		.loc 1 1212 56
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 47


 1405 00b8 1A04     		lsls	r2, r3, #16
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1406              		.loc 1 1213 43
 1407 00ba BB68     		ldr	r3, [r7, #8]
 1408 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1409              		.loc 1 1213 56
 1410 00be 1B02     		lsls	r3, r3, #8
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1411              		.loc 1 1212 79
 1412 00c0 1343     		orrs	r3, r3, r2
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1413              		.loc 1 1214 43
 1414 00c2 BA68     		ldr	r2, [r7, #8]
 1415 00c4 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1416              		.loc 1 1213 79
 1417 00c6 1A43     		orrs	r2, r2, r3
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1418              		.loc 1 1215 43
 1419 00c8 BB68     		ldr	r3, [r7, #8]
 1420 00ca DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1421              		.loc 1 1215 56
 1422 00cc 9B05     		lsls	r3, r3, #22
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1423              		.loc 1 1214 79
 1424 00ce 1A43     		orrs	r2, r2, r3
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1425              		.loc 1 1216 32
 1426 00d0 BB68     		ldr	r3, [r7, #8]
 1427 00d2 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1428              		.loc 1 1216 56
 1429 00d6 1B06     		lsls	r3, r3, #24
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1430              		.loc 1 1215 79
 1431 00d8 1A43     		orrs	r2, r2, r3
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 1432              		.loc 1 1217 32
 1433 00da BB68     		ldr	r3, [r7, #8]
 1434 00dc DB69     		ldr	r3, [r3, #28]
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1435              		.loc 1 1216 79
 1436 00de 1A43     		orrs	r2, r2, r3
1218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1437              		.loc 1 1218 32
 1438 00e0 BB68     		ldr	r3, [r7, #8]
 1439 00e2 5B69     		ldr	r3, [r3, #20]
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1440              		.loc 1 1212 12
 1441 00e4 1343     		orrs	r3, r3, r2
 1442 00e6 FB61     		str	r3, [r7, #28]
 1443              	.L59:
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1444              		.loc 1 1222 60
 1445 00e8 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 48


 1446 00ea 5A68     		ldr	r2, [r3, #4]
 1447              		.loc 1 1222 92
 1448 00ec BB68     		ldr	r3, [r7, #8]
 1449 00ee 9B69     		ldr	r3, [r3, #24]
 1450              		.loc 1 1222 19
 1451 00f0 1343     		orrs	r3, r3, r2
 1452 00f2 BB61     		str	r3, [r7, #24]
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1453              		.loc 1 1225 3
 1454 00f4 FB68     		ldr	r3, [r7, #12]
 1455 00f6 1B68     		ldr	r3, [r3]
 1456 00f8 CA22     		movs	r2, #202
 1457 00fa 5A62     		str	r2, [r3, #36]
 1458 00fc FB68     		ldr	r3, [r7, #12]
 1459 00fe 1B68     		ldr	r3, [r3]
 1460 0100 5322     		movs	r2, #83
 1461 0102 5A62     		str	r2, [r3, #36]
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm register */
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1462              		.loc 1 1228 12
 1463 0104 BB68     		ldr	r3, [r7, #8]
 1464 0106 5B6A     		ldr	r3, [r3, #36]
 1465              		.loc 1 1228 5
 1466 0108 B3F5807F 		cmp	r3, #256
 1467 010c 4AD1     		bne	.L61
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1468              		.loc 1 1231 5
 1469 010e FB68     		ldr	r3, [r7, #12]
 1470 0110 1B68     		ldr	r3, [r3]
 1471 0112 9A68     		ldr	r2, [r3, #8]
 1472 0114 FB68     		ldr	r3, [r7, #12]
 1473 0116 1B68     		ldr	r3, [r3]
 1474 0118 22F48072 		bic	r2, r2, #256
 1475 011c 9A60     		str	r2, [r3, #8]
1232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm A */
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1476              		.loc 1 1233 5
 1477 011e FB68     		ldr	r3, [r7, #12]
 1478 0120 1B68     		ldr	r3, [r3]
 1479 0122 DB68     		ldr	r3, [r3, #12]
 1480 0124 DAB2     		uxtb	r2, r3
 1481 0126 FB68     		ldr	r3, [r7, #12]
 1482 0128 1B68     		ldr	r3, [r3]
 1483 012a 62F4C072 		orn	r2, r2, #384
 1484 012e DA60     		str	r2, [r3, #12]
1234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1485              		.loc 1 1235 5
 1486 0130 FB68     		ldr	r3, [r7, #12]
 1487 0132 1B68     		ldr	r3, [r3]
 1488 0134 9A68     		ldr	r2, [r3, #8]
 1489 0136 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 49


 1490 0138 1B68     		ldr	r3, [r3]
 1491 013a 22F48052 		bic	r2, r2, #4096
 1492 013e 9A60     		str	r2, [r3, #8]
1236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1493              		.loc 1 1237 17
 1494 0140 FFF7FEFF 		bl	HAL_GetTick
 1495 0144 7861     		str	r0, [r7, #20]
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
1239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 1496              		.loc 1 1242 11
 1497 0146 15E0     		b	.L62
 1498              	.L63:
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1499              		.loc 1 1245 11
 1500 0148 FFF7FEFF 		bl	HAL_GetTick
 1501 014c 0246     		mov	r2, r0
 1502              		.loc 1 1245 25 discriminator 1
 1503 014e 7B69     		ldr	r3, [r7, #20]
 1504 0150 D31A     		subs	r3, r2, r3
 1505              		.loc 1 1245 9 discriminator 1
 1506 0152 B3F57A7F 		cmp	r3, #1000
 1507 0156 0DD9     		bls	.L62
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1508              		.loc 1 1248 9
 1509 0158 FB68     		ldr	r3, [r7, #12]
 1510 015a 1B68     		ldr	r3, [r3]
 1511 015c FF22     		movs	r2, #255
 1512 015e 5A62     		str	r2, [r3, #36]
1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1513              		.loc 1 1250 21
 1514 0160 FB68     		ldr	r3, [r7, #12]
 1515 0162 0322     		movs	r2, #3
 1516 0164 83F82120 		strb	r2, [r3, #33]
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1517              		.loc 1 1253 9
 1518 0168 FB68     		ldr	r3, [r7, #12]
 1519 016a 0022     		movs	r2, #0
 1520 016c 83F82020 		strb	r2, [r3, #32]
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1521              		.loc 1 1255 16
 1522 0170 0323     		movs	r3, #3
 1523 0172 6EE0     		b	.L56
 1524              	.L62:
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 1525              		.loc 1 1242 12
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 50


 1526 0174 FB68     		ldr	r3, [r7, #12]
 1527 0176 1B68     		ldr	r3, [r3]
 1528 0178 DB68     		ldr	r3, [r3, #12]
 1529 017a 03F00103 		and	r3, r3, #1
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 1530              		.loc 1 1242 60
 1531 017e 002B     		cmp	r3, #0
 1532 0180 E2D0     		beq	.L63
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1533              		.loc 1 1259 9
 1534 0182 FB68     		ldr	r3, [r7, #12]
 1535 0184 1B68     		ldr	r3, [r3]
 1536              		.loc 1 1259 28
 1537 0186 FA69     		ldr	r2, [r7, #28]
 1538 0188 DA61     		str	r2, [r3, #28]
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1539              		.loc 1 1261 9
 1540 018a FB68     		ldr	r3, [r7, #12]
 1541 018c 1B68     		ldr	r3, [r3]
 1542              		.loc 1 1261 30
 1543 018e BA69     		ldr	r2, [r7, #24]
 1544 0190 5A64     		str	r2, [r3, #68]
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1545              		.loc 1 1263 5
 1546 0192 FB68     		ldr	r3, [r7, #12]
 1547 0194 1B68     		ldr	r3, [r3]
 1548 0196 9A68     		ldr	r2, [r3, #8]
 1549 0198 FB68     		ldr	r3, [r7, #12]
 1550 019a 1B68     		ldr	r3, [r3]
 1551 019c 42F48072 		orr	r2, r2, #256
 1552 01a0 9A60     		str	r2, [r3, #8]
 1553 01a2 49E0     		b	.L64
 1554              	.L61:
1264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1555              		.loc 1 1268 5
 1556 01a4 FB68     		ldr	r3, [r7, #12]
 1557 01a6 1B68     		ldr	r3, [r3]
 1558 01a8 9A68     		ldr	r2, [r3, #8]
 1559 01aa FB68     		ldr	r3, [r7, #12]
 1560 01ac 1B68     		ldr	r3, [r3]
 1561 01ae 22F40072 		bic	r2, r2, #512
 1562 01b2 9A60     		str	r2, [r3, #8]
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm B */
1270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1563              		.loc 1 1270 5
 1564 01b4 FB68     		ldr	r3, [r7, #12]
 1565 01b6 1B68     		ldr	r3, [r3]
 1566 01b8 DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 51


 1567 01ba DAB2     		uxtb	r2, r3
 1568 01bc FB68     		ldr	r3, [r7, #12]
 1569 01be 1B68     		ldr	r3, [r3]
 1570 01c0 62F42072 		orn	r2, r2, #640
 1571 01c4 DA60     		str	r2, [r3, #12]
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1572              		.loc 1 1272 5
 1573 01c6 FB68     		ldr	r3, [r7, #12]
 1574 01c8 1B68     		ldr	r3, [r3]
 1575 01ca 9A68     		ldr	r2, [r3, #8]
 1576 01cc FB68     		ldr	r3, [r7, #12]
 1577 01ce 1B68     		ldr	r3, [r3]
 1578 01d0 22F40052 		bic	r2, r2, #8192
 1579 01d4 9A60     		str	r2, [r3, #8]
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1580              		.loc 1 1274 17
 1581 01d6 FFF7FEFF 		bl	HAL_GetTick
 1582 01da 7861     		str	r0, [r7, #20]
1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
1276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 1583              		.loc 1 1279 11
 1584 01dc 15E0     		b	.L65
 1585              	.L66:
1280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1586              		.loc 1 1282 11
 1587 01de FFF7FEFF 		bl	HAL_GetTick
 1588 01e2 0246     		mov	r2, r0
 1589              		.loc 1 1282 25 discriminator 1
 1590 01e4 7B69     		ldr	r3, [r7, #20]
 1591 01e6 D31A     		subs	r3, r2, r3
 1592              		.loc 1 1282 9 discriminator 1
 1593 01e8 B3F57A7F 		cmp	r3, #1000
 1594 01ec 0DD9     		bls	.L65
1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1595              		.loc 1 1285 9
 1596 01ee FB68     		ldr	r3, [r7, #12]
 1597 01f0 1B68     		ldr	r3, [r3]
 1598 01f2 FF22     		movs	r2, #255
 1599 01f4 5A62     		str	r2, [r3, #36]
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1600              		.loc 1 1287 21
 1601 01f6 FB68     		ldr	r3, [r7, #12]
 1602 01f8 0322     		movs	r2, #3
 1603 01fa 83F82120 		strb	r2, [r3, #33]
1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 52


 1604              		.loc 1 1290 9
 1605 01fe FB68     		ldr	r3, [r7, #12]
 1606 0200 0022     		movs	r2, #0
 1607 0202 83F82020 		strb	r2, [r3, #32]
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1608              		.loc 1 1292 16
 1609 0206 0323     		movs	r3, #3
 1610 0208 23E0     		b	.L56
 1611              	.L65:
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 1612              		.loc 1 1279 12
 1613 020a FB68     		ldr	r3, [r7, #12]
 1614 020c 1B68     		ldr	r3, [r3]
 1615 020e DB68     		ldr	r3, [r3, #12]
 1616 0210 03F00203 		and	r3, r3, #2
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 1617              		.loc 1 1279 60
 1618 0214 002B     		cmp	r3, #0
 1619 0216 E2D0     		beq	.L66
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1620              		.loc 1 1296 9
 1621 0218 FB68     		ldr	r3, [r7, #12]
 1622 021a 1B68     		ldr	r3, [r3]
 1623              		.loc 1 1296 28
 1624 021c FA69     		ldr	r2, [r7, #28]
 1625 021e 1A62     		str	r2, [r3, #32]
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 1626              		.loc 1 1298 9
 1627 0220 FB68     		ldr	r3, [r7, #12]
 1628 0222 1B68     		ldr	r3, [r3]
 1629              		.loc 1 1298 30
 1630 0224 BA69     		ldr	r2, [r7, #24]
 1631 0226 9A64     		str	r2, [r3, #72]
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 1632              		.loc 1 1300 5
 1633 0228 FB68     		ldr	r3, [r7, #12]
 1634 022a 1B68     		ldr	r3, [r3]
 1635 022c 9A68     		ldr	r2, [r3, #8]
 1636 022e FB68     		ldr	r3, [r7, #12]
 1637 0230 1B68     		ldr	r3, [r3]
 1638 0232 42F40072 		orr	r2, r2, #512
 1639 0236 9A60     		str	r2, [r3, #8]
 1640              	.L64:
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1641              		.loc 1 1304 3
 1642 0238 FB68     		ldr	r3, [r7, #12]
 1643 023a 1B68     		ldr	r3, [r3]
 1644 023c FF22     		movs	r2, #255
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 53


 1645 023e 5A62     		str	r2, [r3, #36]
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 1646              		.loc 1 1307 15
 1647 0240 FB68     		ldr	r3, [r7, #12]
 1648 0242 0122     		movs	r2, #1
 1649 0244 83F82120 		strb	r2, [r3, #33]
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1650              		.loc 1 1310 3
 1651 0248 FB68     		ldr	r3, [r7, #12]
 1652 024a 0022     		movs	r2, #0
 1653 024c 83F82020 		strb	r2, [r3, #32]
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 1654              		.loc 1 1312 10
 1655 0250 0023     		movs	r3, #0
 1656              	.L56:
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1657              		.loc 1 1313 1
 1658 0252 1846     		mov	r0, r3
 1659 0254 2437     		adds	r7, r7, #36
 1660              	.LCFI45:
 1661              		.cfi_def_cfa_offset 12
 1662 0256 BD46     		mov	sp, r7
 1663              	.LCFI46:
 1664              		.cfi_def_cfa_register 13
 1665              		@ sp needed
 1666 0258 90BD     		pop	{r4, r7, pc}
 1667              		.cfi_endproc
 1668              	.LFE152:
 1670              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1671              		.align	1
 1672              		.global	HAL_RTC_SetAlarm_IT
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1677              	HAL_RTC_SetAlarm_IT:
 1678              	.LFB153:
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm with Interrupt.
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 54


 1679              		.loc 1 1329 1
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 32
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683 0000 90B5     		push	{r4, r7, lr}
 1684              	.LCFI47:
 1685              		.cfi_def_cfa_offset 12
 1686              		.cfi_offset 4, -12
 1687              		.cfi_offset 7, -8
 1688              		.cfi_offset 14, -4
 1689 0002 89B0     		sub	sp, sp, #36
 1690              	.LCFI48:
 1691              		.cfi_def_cfa_offset 48
 1692 0004 00AF     		add	r7, sp, #0
 1693              	.LCFI49:
 1694              		.cfi_def_cfa_register 7
 1695 0006 F860     		str	r0, [r7, #12]
 1696 0008 B960     		str	r1, [r7, #8]
 1697 000a 7A60     		str	r2, [r7, #4]
1330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1698              		.loc 1 1343 3
 1699 000c FB68     		ldr	r3, [r7, #12]
 1700 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1701 0012 012B     		cmp	r3, #1
 1702 0014 01D1     		bne	.L68
 1703              		.loc 1 1343 3 is_stmt 0 discriminator 1
 1704 0016 0223     		movs	r3, #2
 1705              		.loc 1 1343 3
 1706 0018 29E1     		b	.L69
 1707              	.L68:
 1708              		.loc 1 1343 3 discriminator 2
 1709 001a FB68     		ldr	r3, [r7, #12]
 1710 001c 0122     		movs	r2, #1
 1711 001e 83F82020 		strb	r2, [r3, #32]
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1712              		.loc 1 1345 15 is_stmt 1
 1713 0022 FB68     		ldr	r3, [r7, #12]
 1714 0024 0222     		movs	r2, #2
 1715 0026 83F82120 		strb	r2, [r3, #33]
1346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1716              		.loc 1 1347 5
 1717 002a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 55


 1718 002c 002B     		cmp	r3, #0
 1719 002e 37D1     		bne	.L70
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1720              		.loc 1 1349 13
 1721 0030 FB68     		ldr	r3, [r7, #12]
 1722 0032 1B68     		ldr	r3, [r3]
 1723              		.loc 1 1349 23
 1724 0034 9B68     		ldr	r3, [r3, #8]
 1725              		.loc 1 1349 28
 1726 0036 03F04003 		and	r3, r3, #64
 1727              		.loc 1 1349 7
 1728 003a 002B     		cmp	r3, #0
 1729 003c 02D1     		bne	.L71
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1730              		.loc 1 1356 36
 1731 003e BB68     		ldr	r3, [r7, #8]
 1732 0040 0022     		movs	r2, #0
 1733 0042 DA70     		strb	r2, [r3, #3]
 1734              	.L71:
1357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 1735              		.loc 1 1371 26
 1736 0044 BB68     		ldr	r3, [r7, #8]
 1737 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1738 0048 1846     		mov	r0, r3
 1739 004a FFF7FEFF 		bl	RTC_ByteToBcd2
 1740 004e 0346     		mov	r3, r0
 1741              		.loc 1 1371 68 discriminator 1
 1742 0050 1C04     		lsls	r4, r3, #16
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1743              		.loc 1 1372 26
 1744 0052 BB68     		ldr	r3, [r7, #8]
 1745 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1746 0056 1846     		mov	r0, r3
 1747 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1748 005c 0346     		mov	r3, r0
 1749              		.loc 1 1372 68 discriminator 1
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 56


 1750 005e 1B02     		lsls	r3, r3, #8
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1751              		.loc 1 1371 91
 1752 0060 1C43     		orrs	r4, r4, r3
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1753              		.loc 1 1373 26
 1754 0062 BB68     		ldr	r3, [r7, #8]
 1755 0064 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1756 0066 1846     		mov	r0, r3
 1757 0068 FFF7FEFF 		bl	RTC_ByteToBcd2
 1758 006c 0346     		mov	r3, r0
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1759              		.loc 1 1372 91
 1760 006e 44EA0302 		orr	r2, r4, r3
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1761              		.loc 1 1374 43
 1762 0072 BB68     		ldr	r3, [r7, #8]
 1763 0074 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1764              		.loc 1 1374 68
 1765 0076 9B05     		lsls	r3, r3, #22
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1766              		.loc 1 1373 91
 1767 0078 42EA0304 		orr	r4, r2, r3
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1768              		.loc 1 1375 26
 1769 007c BB68     		ldr	r3, [r7, #8]
 1770 007e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1771 0082 1846     		mov	r0, r3
 1772 0084 FFF7FEFF 		bl	RTC_ByteToBcd2
 1773 0088 0346     		mov	r3, r0
 1774              		.loc 1 1375 68 discriminator 1
 1775 008a 1B06     		lsls	r3, r3, #24
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1776              		.loc 1 1374 91
 1777 008c 44EA0302 		orr	r2, r4, r3
1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1778              		.loc 1 1376 32
 1779 0090 BB68     		ldr	r3, [r7, #8]
 1780 0092 DB69     		ldr	r3, [r3, #28]
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1781              		.loc 1 1375 91
 1782 0094 1A43     		orrs	r2, r2, r3
1377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1783              		.loc 1 1377 32
 1784 0096 BB68     		ldr	r3, [r7, #8]
 1785 0098 5B69     		ldr	r3, [r3, #20]
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1786              		.loc 1 1371 12
 1787 009a 1343     		orrs	r3, r3, r2
 1788 009c FB61     		str	r3, [r7, #28]
 1789 009e 23E0     		b	.L72
 1790              	.L70:
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1791              		.loc 1 1381 13
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 57


 1792 00a0 FB68     		ldr	r3, [r7, #12]
 1793 00a2 1B68     		ldr	r3, [r3]
 1794              		.loc 1 1381 23
 1795 00a4 9B68     		ldr	r3, [r3, #8]
 1796              		.loc 1 1381 28
 1797 00a6 03F04003 		and	r3, r3, #64
 1798              		.loc 1 1381 7
 1799 00aa 002B     		cmp	r3, #0
 1800 00ac 02D1     		bne	.L73
1382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1801              		.loc 1 1388 36
 1802 00ae BB68     		ldr	r3, [r7, #8]
 1803 00b0 0022     		movs	r2, #0
 1804 00b2 DA70     		strb	r2, [r3, #3]
 1805              	.L73:
1389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 1806              		.loc 1 1404 43
 1807 00b4 BB68     		ldr	r3, [r7, #8]
 1808 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1809              		.loc 1 1404 56
 1810 00b8 1A04     		lsls	r2, r3, #16
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1811              		.loc 1 1405 43
 1812 00ba BB68     		ldr	r3, [r7, #8]
 1813 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1814              		.loc 1 1405 56
 1815 00be 1B02     		lsls	r3, r3, #8
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1816              		.loc 1 1404 79
 1817 00c0 1343     		orrs	r3, r3, r2
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1818              		.loc 1 1406 43
 1819 00c2 BA68     		ldr	r2, [r7, #8]
 1820 00c4 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1821              		.loc 1 1405 79
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 58


 1822 00c6 1A43     		orrs	r2, r2, r3
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1823              		.loc 1 1407 43
 1824 00c8 BB68     		ldr	r3, [r7, #8]
 1825 00ca DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1826              		.loc 1 1407 56
 1827 00cc 9B05     		lsls	r3, r3, #22
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1828              		.loc 1 1406 79
 1829 00ce 1A43     		orrs	r2, r2, r3
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1830              		.loc 1 1408 32
 1831 00d0 BB68     		ldr	r3, [r7, #8]
 1832 00d2 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1833              		.loc 1 1408 56
 1834 00d6 1B06     		lsls	r3, r3, #24
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1835              		.loc 1 1407 79
 1836 00d8 1A43     		orrs	r2, r2, r3
1409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 1837              		.loc 1 1409 32
 1838 00da BB68     		ldr	r3, [r7, #8]
 1839 00dc DB69     		ldr	r3, [r3, #28]
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1840              		.loc 1 1408 79
 1841 00de 1A43     		orrs	r2, r2, r3
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1842              		.loc 1 1410 32
 1843 00e0 BB68     		ldr	r3, [r7, #8]
 1844 00e2 5B69     		ldr	r3, [r3, #20]
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1845              		.loc 1 1404 12
 1846 00e4 1343     		orrs	r3, r3, r2
 1847 00e6 FB61     		str	r3, [r7, #28]
 1848              	.L72:
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1849              		.loc 1 1413 60
 1850 00e8 BB68     		ldr	r3, [r7, #8]
 1851 00ea 5A68     		ldr	r2, [r3, #4]
 1852              		.loc 1 1413 92
 1853 00ec BB68     		ldr	r3, [r7, #8]
 1854 00ee 9B69     		ldr	r3, [r3, #24]
 1855              		.loc 1 1413 19
 1856 00f0 1343     		orrs	r3, r3, r2
 1857 00f2 BB61     		str	r3, [r7, #24]
1414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1858              		.loc 1 1416 3
 1859 00f4 FB68     		ldr	r3, [r7, #12]
 1860 00f6 1B68     		ldr	r3, [r3]
 1861 00f8 CA22     		movs	r2, #202
 1862 00fa 5A62     		str	r2, [r3, #36]
 1863 00fc FB68     		ldr	r3, [r7, #12]
 1864 00fe 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 59


 1865 0100 5322     		movs	r2, #83
 1866 0102 5A62     		str	r2, [r3, #36]
1417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm register */
1419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1867              		.loc 1 1419 12
 1868 0104 BB68     		ldr	r3, [r7, #8]
 1869 0106 5B6A     		ldr	r3, [r3, #36]
 1870              		.loc 1 1419 5
 1871 0108 B3F5807F 		cmp	r3, #256
 1872 010c 4AD1     		bne	.L74
1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1873              		.loc 1 1422 5
 1874 010e FB68     		ldr	r3, [r7, #12]
 1875 0110 1B68     		ldr	r3, [r3]
 1876 0112 9A68     		ldr	r2, [r3, #8]
 1877 0114 FB68     		ldr	r3, [r7, #12]
 1878 0116 1B68     		ldr	r3, [r3]
 1879 0118 22F48072 		bic	r2, r2, #256
 1880 011c 9A60     		str	r2, [r3, #8]
1423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm A */
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1881              		.loc 1 1425 5
 1882 011e FB68     		ldr	r3, [r7, #12]
 1883 0120 1B68     		ldr	r3, [r3]
 1884 0122 DB68     		ldr	r3, [r3, #12]
 1885 0124 DAB2     		uxtb	r2, r3
 1886 0126 FB68     		ldr	r3, [r7, #12]
 1887 0128 1B68     		ldr	r3, [r3]
 1888 012a 62F4C072 		orn	r2, r2, #384
 1889 012e DA60     		str	r2, [r3, #12]
1426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1890              		.loc 1 1427 17
 1891 0130 FFF7FEFF 		bl	HAL_GetTick
 1892 0134 7861     		str	r0, [r7, #20]
1428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
1431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 1893              		.loc 1 1432 11
 1894 0136 15E0     		b	.L75
 1895              	.L76:
1433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1896              		.loc 1 1435 11
 1897 0138 FFF7FEFF 		bl	HAL_GetTick
 1898 013c 0246     		mov	r2, r0
 1899              		.loc 1 1435 25 discriminator 1
 1900 013e 7B69     		ldr	r3, [r7, #20]
 1901 0140 D31A     		subs	r3, r2, r3
 1902              		.loc 1 1435 9 discriminator 1
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 60


 1903 0142 B3F57A7F 		cmp	r3, #1000
 1904 0146 0DD9     		bls	.L75
1436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1905              		.loc 1 1438 9
 1906 0148 FB68     		ldr	r3, [r7, #12]
 1907 014a 1B68     		ldr	r3, [r3]
 1908 014c FF22     		movs	r2, #255
 1909 014e 5A62     		str	r2, [r3, #36]
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1910              		.loc 1 1440 21
 1911 0150 FB68     		ldr	r3, [r7, #12]
 1912 0152 0322     		movs	r2, #3
 1913 0154 83F82120 		strb	r2, [r3, #33]
1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1914              		.loc 1 1443 9
 1915 0158 FB68     		ldr	r3, [r7, #12]
 1916 015a 0022     		movs	r2, #0
 1917 015c 83F82020 		strb	r2, [r3, #32]
1444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1918              		.loc 1 1445 16
 1919 0160 0323     		movs	r3, #3
 1920 0162 84E0     		b	.L69
 1921              	.L75:
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 1922              		.loc 1 1432 12
 1923 0164 FB68     		ldr	r3, [r7, #12]
 1924 0166 1B68     		ldr	r3, [r3]
 1925 0168 DB68     		ldr	r3, [r3, #12]
 1926 016a 03F00103 		and	r3, r3, #1
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 1927              		.loc 1 1432 60
 1928 016e 002B     		cmp	r3, #0
 1929 0170 E2D0     		beq	.L76
1446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1930              		.loc 1 1449 9
 1931 0172 FB68     		ldr	r3, [r7, #12]
 1932 0174 1B68     		ldr	r3, [r3]
 1933              		.loc 1 1449 28
 1934 0176 FA69     		ldr	r2, [r7, #28]
 1935 0178 DA61     		str	r2, [r3, #28]
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1936              		.loc 1 1451 9
 1937 017a FB68     		ldr	r3, [r7, #12]
 1938 017c 1B68     		ldr	r3, [r3]
 1939              		.loc 1 1451 30
 1940 017e BA69     		ldr	r2, [r7, #24]
 1941 0180 5A64     		str	r2, [r3, #68]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 61


1452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1942              		.loc 1 1453 5
 1943 0182 FB68     		ldr	r3, [r7, #12]
 1944 0184 1B68     		ldr	r3, [r3]
 1945 0186 9A68     		ldr	r2, [r3, #8]
 1946 0188 FB68     		ldr	r3, [r7, #12]
 1947 018a 1B68     		ldr	r3, [r3]
 1948 018c 42F48072 		orr	r2, r2, #256
 1949 0190 9A60     		str	r2, [r3, #8]
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 1950              		.loc 1 1455 5
 1951 0192 FB68     		ldr	r3, [r7, #12]
 1952 0194 1B68     		ldr	r3, [r3]
 1953 0196 9A68     		ldr	r2, [r3, #8]
 1954 0198 FB68     		ldr	r3, [r7, #12]
 1955 019a 1B68     		ldr	r3, [r3]
 1956 019c 42F48052 		orr	r2, r2, #4096
 1957 01a0 9A60     		str	r2, [r3, #8]
 1958 01a2 49E0     		b	.L77
 1959              	.L74:
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1960              		.loc 1 1460 5
 1961 01a4 FB68     		ldr	r3, [r7, #12]
 1962 01a6 1B68     		ldr	r3, [r3]
 1963 01a8 9A68     		ldr	r2, [r3, #8]
 1964 01aa FB68     		ldr	r3, [r7, #12]
 1965 01ac 1B68     		ldr	r3, [r3]
 1966 01ae 22F40072 		bic	r2, r2, #512
 1967 01b2 9A60     		str	r2, [r3, #8]
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm B */
1463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1968              		.loc 1 1463 5
 1969 01b4 FB68     		ldr	r3, [r7, #12]
 1970 01b6 1B68     		ldr	r3, [r3]
 1971 01b8 DB68     		ldr	r3, [r3, #12]
 1972 01ba DAB2     		uxtb	r2, r3
 1973 01bc FB68     		ldr	r3, [r7, #12]
 1974 01be 1B68     		ldr	r3, [r3]
 1975 01c0 62F42072 		orn	r2, r2, #640
 1976 01c4 DA60     		str	r2, [r3, #12]
1464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1977              		.loc 1 1465 17
 1978 01c6 FFF7FEFF 		bl	HAL_GetTick
 1979 01ca 7861     		str	r0, [r7, #20]
1466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
1467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
1469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 62


 1980              		.loc 1 1470 11
 1981 01cc 15E0     		b	.L78
 1982              	.L79:
1471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1983              		.loc 1 1473 11
 1984 01ce FFF7FEFF 		bl	HAL_GetTick
 1985 01d2 0246     		mov	r2, r0
 1986              		.loc 1 1473 25 discriminator 1
 1987 01d4 7B69     		ldr	r3, [r7, #20]
 1988 01d6 D31A     		subs	r3, r2, r3
 1989              		.loc 1 1473 9 discriminator 1
 1990 01d8 B3F57A7F 		cmp	r3, #1000
 1991 01dc 0DD9     		bls	.L78
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1992              		.loc 1 1476 9
 1993 01de FB68     		ldr	r3, [r7, #12]
 1994 01e0 1B68     		ldr	r3, [r3]
 1995 01e2 FF22     		movs	r2, #255
 1996 01e4 5A62     		str	r2, [r3, #36]
1477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1997              		.loc 1 1478 21
 1998 01e6 FB68     		ldr	r3, [r7, #12]
 1999 01e8 0322     		movs	r2, #3
 2000 01ea 83F82120 		strb	r2, [r3, #33]
1479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2001              		.loc 1 1481 9
 2002 01ee FB68     		ldr	r3, [r7, #12]
 2003 01f0 0022     		movs	r2, #0
 2004 01f2 83F82020 		strb	r2, [r3, #32]
1482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2005              		.loc 1 1483 16
 2006 01f6 0323     		movs	r3, #3
 2007 01f8 39E0     		b	.L69
 2008              	.L78:
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2009              		.loc 1 1470 12
 2010 01fa FB68     		ldr	r3, [r7, #12]
 2011 01fc 1B68     		ldr	r3, [r3]
 2012 01fe DB68     		ldr	r3, [r3, #12]
 2013 0200 03F00203 		and	r3, r3, #2
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2014              		.loc 1 1470 60
 2015 0204 002B     		cmp	r3, #0
 2016 0206 E2D0     		beq	.L79
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 2017              		.loc 1 1487 9
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 63


 2018 0208 FB68     		ldr	r3, [r7, #12]
 2019 020a 1B68     		ldr	r3, [r3]
 2020              		.loc 1 1487 28
 2021 020c FA69     		ldr	r2, [r7, #28]
 2022 020e 1A62     		str	r2, [r3, #32]
1488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 2023              		.loc 1 1489 9
 2024 0210 FB68     		ldr	r3, [r7, #12]
 2025 0212 1B68     		ldr	r3, [r3]
 2026              		.loc 1 1489 30
 2027 0214 BA69     		ldr	r2, [r7, #24]
 2028 0216 9A64     		str	r2, [r3, #72]
1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 2029              		.loc 1 1491 5
 2030 0218 FB68     		ldr	r3, [r7, #12]
 2031 021a 1B68     		ldr	r3, [r3]
 2032 021c 9A68     		ldr	r2, [r3, #8]
 2033 021e FB68     		ldr	r3, [r7, #12]
 2034 0220 1B68     		ldr	r3, [r3]
 2035 0222 42F40072 		orr	r2, r2, #512
 2036 0226 9A60     		str	r2, [r3, #8]
1492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 2037              		.loc 1 1493 5
 2038 0228 FB68     		ldr	r3, [r7, #12]
 2039 022a 1B68     		ldr	r3, [r3]
 2040 022c 9A68     		ldr	r2, [r3, #8]
 2041 022e FB68     		ldr	r3, [r7, #12]
 2042 0230 1B68     		ldr	r3, [r3]
 2043 0232 42F40052 		orr	r2, r2, #8192
 2044 0236 9A60     		str	r2, [r3, #8]
 2045              	.L77:
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(DUAL_CORE)
1498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (HAL_GetCurrentCPUID() == CM7_CPUID)
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
1505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* SINGLE_CORE */
1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 2046              		.loc 1 1507 3
 2047 0238 0F4B     		ldr	r3, .L80
 2048 023a 1B68     		ldr	r3, [r3]
 2049 023c 0E4A     		ldr	r2, .L80
 2050 023e 43F40033 		orr	r3, r3, #131072
 2051 0242 1360     		str	r3, [r2]
1508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif
1509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 64


 2052              		.loc 1 1510 3
 2053 0244 4FF0B043 		mov	r3, #1476395008
 2054 0248 1B68     		ldr	r3, [r3]
 2055 024a 4FF0B042 		mov	r2, #1476395008
 2056 024e 43F40033 		orr	r3, r3, #131072
 2057 0252 1360     		str	r3, [r2]
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2058              		.loc 1 1513 3
 2059 0254 FB68     		ldr	r3, [r7, #12]
 2060 0256 1B68     		ldr	r3, [r3]
 2061 0258 FF22     		movs	r2, #255
 2062 025a 5A62     		str	r2, [r3, #36]
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2063              		.loc 1 1515 15
 2064 025c FB68     		ldr	r3, [r7, #12]
 2065 025e 0122     		movs	r2, #1
 2066 0260 83F82120 		strb	r2, [r3, #33]
1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 2067              		.loc 1 1518 3
 2068 0264 FB68     		ldr	r3, [r7, #12]
 2069 0266 0022     		movs	r2, #0
 2070 0268 83F82020 		strb	r2, [r3, #32]
1519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2071              		.loc 1 1520 10
 2072 026c 0023     		movs	r3, #0
 2073              	.L69:
1521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2074              		.loc 1 1521 1
 2075 026e 1846     		mov	r0, r3
 2076 0270 2437     		adds	r7, r7, #36
 2077              	.LCFI50:
 2078              		.cfi_def_cfa_offset 12
 2079 0272 BD46     		mov	sp, r7
 2080              	.LCFI51:
 2081              		.cfi_def_cfa_register 13
 2082              		@ sp needed
 2083 0274 90BD     		pop	{r4, r7, pc}
 2084              	.L81:
 2085 0276 00BF     		.align	2
 2086              	.L80:
 2087 0278 80000058 		.word	1476395136
 2088              		.cfi_endproc
 2089              	.LFE153:
 2091              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
 2092              		.align	1
 2093              		.global	HAL_RTC_DeactivateAlarm
 2094              		.syntax unified
 2095              		.thumb
 2096              		.thumb_func
 2098              	HAL_RTC_DeactivateAlarm:
 2099              	.LFB154:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 65


1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm.
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2100              		.loc 1 1533 1
 2101              		.cfi_startproc
 2102              		@ args = 0, pretend = 0, frame = 16
 2103              		@ frame_needed = 1, uses_anonymous_args = 0
 2104 0000 80B5     		push	{r7, lr}
 2105              	.LCFI52:
 2106              		.cfi_def_cfa_offset 8
 2107              		.cfi_offset 7, -8
 2108              		.cfi_offset 14, -4
 2109 0002 84B0     		sub	sp, sp, #16
 2110              	.LCFI53:
 2111              		.cfi_def_cfa_offset 24
 2112 0004 00AF     		add	r7, sp, #0
 2113              	.LCFI54:
 2114              		.cfi_def_cfa_register 7
 2115 0006 7860     		str	r0, [r7, #4]
 2116 0008 3960     		str	r1, [r7]
1534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 2117              		.loc 1 1540 3
 2118 000a 7B68     		ldr	r3, [r7, #4]
 2119 000c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2120 0010 012B     		cmp	r3, #1
 2121 0012 01D1     		bne	.L83
 2122              		.loc 1 1540 3 is_stmt 0 discriminator 1
 2123 0014 0223     		movs	r3, #2
 2124              		.loc 1 1540 3
 2125 0016 83E0     		b	.L84
 2126              	.L83:
 2127              		.loc 1 1540 3 discriminator 2
 2128 0018 7B68     		ldr	r3, [r7, #4]
 2129 001a 0122     		movs	r2, #1
 2130 001c 83F82020 		strb	r2, [r3, #32]
1541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2131              		.loc 1 1542 15 is_stmt 1
 2132 0020 7B68     		ldr	r3, [r7, #4]
 2133 0022 0222     		movs	r2, #2
 2134 0024 83F82120 		strb	r2, [r3, #33]
1543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 66


1544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2135              		.loc 1 1545 3
 2136 0028 7B68     		ldr	r3, [r7, #4]
 2137 002a 1B68     		ldr	r3, [r3]
 2138 002c CA22     		movs	r2, #202
 2139 002e 5A62     		str	r2, [r3, #36]
 2140 0030 7B68     		ldr	r3, [r7, #4]
 2141 0032 1B68     		ldr	r3, [r3]
 2142 0034 5322     		movs	r2, #83
 2143 0036 5A62     		str	r2, [r3, #36]
1546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2144              		.loc 1 1547 5
 2145 0038 3B68     		ldr	r3, [r7]
 2146 003a B3F5807F 		cmp	r3, #256
 2147 003e 31D1     		bne	.L85
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmA */
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2148              		.loc 1 1550 5
 2149 0040 7B68     		ldr	r3, [r7, #4]
 2150 0042 1B68     		ldr	r3, [r3]
 2151 0044 9A68     		ldr	r2, [r3, #8]
 2152 0046 7B68     		ldr	r3, [r7, #4]
 2153 0048 1B68     		ldr	r3, [r3]
 2154 004a 22F48072 		bic	r2, r2, #256
 2155 004e 9A60     		str	r2, [r3, #8]
1551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 2156              		.loc 1 1553 5
 2157 0050 7B68     		ldr	r3, [r7, #4]
 2158 0052 1B68     		ldr	r3, [r3]
 2159 0054 9A68     		ldr	r2, [r3, #8]
 2160 0056 7B68     		ldr	r3, [r7, #4]
 2161 0058 1B68     		ldr	r3, [r3]
 2162 005a 22F48052 		bic	r2, r2, #4096
 2163 005e 9A60     		str	r2, [r3, #8]
1554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2164              		.loc 1 1555 17
 2165 0060 FFF7FEFF 		bl	HAL_GetTick
 2166 0064 F860     		str	r0, [r7, #12]
1556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
1560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 2167              		.loc 1 1561 11
 2168 0066 15E0     		b	.L86
 2169              	.L87:
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 2170              		.loc 1 1564 11
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 67


 2171 0068 FFF7FEFF 		bl	HAL_GetTick
 2172 006c 0246     		mov	r2, r0
 2173              		.loc 1 1564 26 discriminator 1
 2174 006e FB68     		ldr	r3, [r7, #12]
 2175 0070 D31A     		subs	r3, r2, r3
 2176              		.loc 1 1564 9 discriminator 1
 2177 0072 B3F57A7F 		cmp	r3, #1000
 2178 0076 0DD9     		bls	.L86
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2179              		.loc 1 1567 9
 2180 0078 7B68     		ldr	r3, [r7, #4]
 2181 007a 1B68     		ldr	r3, [r3]
 2182 007c FF22     		movs	r2, #255
 2183 007e 5A62     		str	r2, [r3, #36]
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2184              		.loc 1 1569 21
 2185 0080 7B68     		ldr	r3, [r7, #4]
 2186 0082 0322     		movs	r2, #3
 2187 0084 83F82120 		strb	r2, [r3, #33]
1570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2188              		.loc 1 1572 9
 2189 0088 7B68     		ldr	r3, [r7, #4]
 2190 008a 0022     		movs	r2, #0
 2191 008c 83F82020 		strb	r2, [r3, #32]
1573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2192              		.loc 1 1574 16
 2193 0090 0323     		movs	r3, #3
 2194 0092 45E0     		b	.L84
 2195              	.L86:
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2196              		.loc 1 1561 12
 2197 0094 7B68     		ldr	r3, [r7, #4]
 2198 0096 1B68     		ldr	r3, [r3]
 2199 0098 DB68     		ldr	r3, [r3, #12]
 2200 009a 03F00103 		and	r3, r3, #1
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2201              		.loc 1 1561 60
 2202 009e 002B     		cmp	r3, #0
 2203 00a0 E2D0     		beq	.L87
 2204 00a2 30E0     		b	.L88
 2205              	.L85:
1575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmB */
1581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2206              		.loc 1 1581 5
 2207 00a4 7B68     		ldr	r3, [r7, #4]
 2208 00a6 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 68


 2209 00a8 9A68     		ldr	r2, [r3, #8]
 2210 00aa 7B68     		ldr	r3, [r7, #4]
 2211 00ac 1B68     		ldr	r3, [r3]
 2212 00ae 22F40072 		bic	r2, r2, #512
 2213 00b2 9A60     		str	r2, [r3, #8]
1582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 2214              		.loc 1 1584 5
 2215 00b4 7B68     		ldr	r3, [r7, #4]
 2216 00b6 1B68     		ldr	r3, [r3]
 2217 00b8 9A68     		ldr	r2, [r3, #8]
 2218 00ba 7B68     		ldr	r3, [r7, #4]
 2219 00bc 1B68     		ldr	r3, [r3]
 2220 00be 22F40052 		bic	r2, r2, #8192
 2221 00c2 9A60     		str	r2, [r3, #8]
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2222              		.loc 1 1586 17
 2223 00c4 FFF7FEFF 		bl	HAL_GetTick
 2224 00c8 F860     		str	r0, [r7, #12]
1587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
1589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
1591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 2225              		.loc 1 1592 11
 2226 00ca 15E0     		b	.L89
 2227              	.L90:
1593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 2228              		.loc 1 1595 11
 2229 00cc FFF7FEFF 		bl	HAL_GetTick
 2230 00d0 0246     		mov	r2, r0
 2231              		.loc 1 1595 25 discriminator 1
 2232 00d2 FB68     		ldr	r3, [r7, #12]
 2233 00d4 D31A     		subs	r3, r2, r3
 2234              		.loc 1 1595 9 discriminator 1
 2235 00d6 B3F57A7F 		cmp	r3, #1000
 2236 00da 0DD9     		bls	.L89
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2237              		.loc 1 1598 9
 2238 00dc 7B68     		ldr	r3, [r7, #4]
 2239 00de 1B68     		ldr	r3, [r3]
 2240 00e0 FF22     		movs	r2, #255
 2241 00e2 5A62     		str	r2, [r3, #36]
1599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2242              		.loc 1 1600 21
 2243 00e4 7B68     		ldr	r3, [r7, #4]
 2244 00e6 0322     		movs	r2, #3
 2245 00e8 83F82120 		strb	r2, [r3, #33]
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 69


1602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2246              		.loc 1 1603 9
 2247 00ec 7B68     		ldr	r3, [r7, #4]
 2248 00ee 0022     		movs	r2, #0
 2249 00f0 83F82020 		strb	r2, [r3, #32]
1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2250              		.loc 1 1605 16
 2251 00f4 0323     		movs	r3, #3
 2252 00f6 13E0     		b	.L84
 2253              	.L89:
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2254              		.loc 1 1592 12
 2255 00f8 7B68     		ldr	r3, [r7, #4]
 2256 00fa 1B68     		ldr	r3, [r3]
 2257 00fc DB68     		ldr	r3, [r3, #12]
 2258 00fe 03F00203 		and	r3, r3, #2
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2259              		.loc 1 1592 60
 2260 0102 002B     		cmp	r3, #0
 2261 0104 E2D0     		beq	.L90
 2262              	.L88:
1606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2263              		.loc 1 1610 3
 2264 0106 7B68     		ldr	r3, [r7, #4]
 2265 0108 1B68     		ldr	r3, [r3]
 2266 010a FF22     		movs	r2, #255
 2267 010c 5A62     		str	r2, [r3, #36]
1611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2268              		.loc 1 1612 15
 2269 010e 7B68     		ldr	r3, [r7, #4]
 2270 0110 0122     		movs	r2, #1
 2271 0112 83F82120 		strb	r2, [r3, #33]
1613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 2272              		.loc 1 1615 3
 2273 0116 7B68     		ldr	r3, [r7, #4]
 2274 0118 0022     		movs	r2, #0
 2275 011a 83F82020 		strb	r2, [r3, #32]
1616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2276              		.loc 1 1617 10
 2277 011e 0023     		movs	r3, #0
 2278              	.L84:
1618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2279              		.loc 1 1618 1
 2280 0120 1846     		mov	r0, r3
 2281 0122 1037     		adds	r7, r7, #16
 2282              	.LCFI55:
 2283              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 70


 2284 0124 BD46     		mov	sp, r7
 2285              	.LCFI56:
 2286              		.cfi_def_cfa_register 13
 2287              		@ sp needed
 2288 0126 80BD     		pop	{r7, pc}
 2289              		.cfi_endproc
 2290              	.LFE154:
 2292              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2293              		.align	1
 2294              		.global	HAL_RTC_GetAlarm
 2295              		.syntax unified
 2296              		.thumb
 2297              		.thumb_func
 2299              	HAL_RTC_GetAlarm:
 2300              	.LFB155:
1619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB
1628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(const RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2301              		.loc 1 1635 1
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 24
 2304              		@ frame_needed = 1, uses_anonymous_args = 0
 2305 0000 80B5     		push	{r7, lr}
 2306              	.LCFI57:
 2307              		.cfi_def_cfa_offset 8
 2308              		.cfi_offset 7, -8
 2309              		.cfi_offset 14, -4
 2310 0002 86B0     		sub	sp, sp, #24
 2311              	.LCFI58:
 2312              		.cfi_def_cfa_offset 32
 2313 0004 00AF     		add	r7, sp, #0
 2314              	.LCFI59:
 2315              		.cfi_def_cfa_register 7
 2316 0006 F860     		str	r0, [r7, #12]
 2317 0008 B960     		str	r1, [r7, #8]
 2318 000a 7A60     		str	r2, [r7, #4]
 2319 000c 3B60     		str	r3, [r7]
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 71


1642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2320              		.loc 1 1643 5
 2321 000e 7B68     		ldr	r3, [r7, #4]
 2322 0010 B3F5807F 		cmp	r3, #256
 2323 0014 43D1     		bne	.L92
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmA */
1646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2324              		.loc 1 1646 19
 2325 0016 BB68     		ldr	r3, [r7, #8]
 2326 0018 4FF48072 		mov	r2, #256
 2327 001c 5A62     		str	r2, [r3, #36]
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2328              		.loc 1 1648 29
 2329 001e FB68     		ldr	r3, [r7, #12]
 2330 0020 1B68     		ldr	r3, [r3]
 2331              		.loc 1 1648 12
 2332 0022 DB69     		ldr	r3, [r3, #28]
 2333 0024 7B61     		str	r3, [r7, #20]
1649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 2334              		.loc 1 1649 39
 2335 0026 FB68     		ldr	r3, [r7, #12]
 2336 0028 1B68     		ldr	r3, [r3]
 2337              		.loc 1 1649 49
 2338 002a 5B6C     		ldr	r3, [r3, #68]
 2339              		.loc 1 1649 21
 2340 002c C3F30E03 		ubfx	r3, r3, #0, #15
 2341 0030 3B61     		str	r3, [r7, #16]
1650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
1652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours      = (uint8_t)((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_AL
 2342              		.loc 1 1652 91
 2343 0032 7B69     		ldr	r3, [r7, #20]
 2344 0034 1B0C     		lsrs	r3, r3, #16
 2345              		.loc 1 1652 36
 2346 0036 DBB2     		uxtb	r3, r3
 2347 0038 03F03F03 		and	r3, r3, #63
 2348 003c DAB2     		uxtb	r2, r3
 2349              		.loc 1 1652 34
 2350 003e BB68     		ldr	r3, [r7, #8]
 2351 0040 1A70     		strb	r2, [r3]
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_AL
 2352              		.loc 1 1653 91
 2353 0042 7B69     		ldr	r3, [r7, #20]
 2354 0044 1B0A     		lsrs	r3, r3, #8
 2355              		.loc 1 1653 36
 2356 0046 DBB2     		uxtb	r3, r3
 2357 0048 03F07F03 		and	r3, r3, #127
 2358 004c DAB2     		uxtb	r2, r3
 2359              		.loc 1 1653 34
 2360 004e BB68     		ldr	r3, [r7, #8]
 2361 0050 5A70     		strb	r2, [r3, #1]
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t)((tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU))  >> RTC_AL
 2362              		.loc 1 1654 36
 2363 0052 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 72


 2364 0054 DBB2     		uxtb	r3, r3
 2365 0056 03F07F03 		and	r3, r3, #127
 2366 005a DAB2     		uxtb	r2, r3
 2367              		.loc 1 1654 34
 2368 005c BB68     		ldr	r3, [r7, #8]
 2369 005e 9A70     		strb	r2, [r3, #2]
1655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg &  RTC_ALRMAR_PM)                    >> RTC_AL
 2370              		.loc 1 1655 91
 2371 0060 7B69     		ldr	r3, [r7, #20]
 2372 0062 9B0D     		lsrs	r3, r3, #22
 2373              		.loc 1 1655 36
 2374 0064 DBB2     		uxtb	r3, r3
 2375 0066 03F00103 		and	r3, r3, #1
 2376 006a DAB2     		uxtb	r2, r3
 2377              		.loc 1 1655 34
 2378 006c BB68     		ldr	r3, [r7, #8]
 2379 006e DA70     		strb	r2, [r3, #3]
1656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2380              		.loc 1 1656 34
 2381 0070 BB68     		ldr	r3, [r7, #8]
 2382 0072 3A69     		ldr	r2, [r7, #16]
 2383 0074 5A60     		str	r2, [r3, #4]
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t)((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_AL
 2384              		.loc 1 1657 91
 2385 0076 7B69     		ldr	r3, [r7, #20]
 2386 0078 1B0E     		lsrs	r3, r3, #24
 2387              		.loc 1 1657 36
 2388 007a DBB2     		uxtb	r3, r3
 2389 007c 03F03F03 		and	r3, r3, #63
 2390 0080 DAB2     		uxtb	r2, r3
 2391              		.loc 1 1657 34
 2392 0082 BB68     		ldr	r3, [r7, #8]
 2393 0084 83F82020 		strb	r2, [r3, #32]
1658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t)(tmpreg &  RTC_ALRMAR_WDSEL);
 2394              		.loc 1 1658 36
 2395 0088 7B69     		ldr	r3, [r7, #20]
 2396 008a 03F08042 		and	r2, r3, #1073741824
 2397              		.loc 1 1658 34
 2398 008e BB68     		ldr	r3, [r7, #8]
 2399 0090 DA61     		str	r2, [r3, #28]
1659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t)(tmpreg &  RTC_ALARMMASK_ALL);
 2400              		.loc 1 1659 36
 2401 0092 7B69     		ldr	r3, [r7, #20]
 2402 0094 03F08032 		and	r2, r3, #-2139062144
 2403              		.loc 1 1659 34
 2404 0098 BB68     		ldr	r3, [r7, #8]
 2405 009a 5A61     		str	r2, [r3, #20]
 2406 009c 42E0     		b	.L93
 2407              	.L92:
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2408              		.loc 1 1663 19
 2409 009e BB68     		ldr	r3, [r7, #8]
 2410 00a0 4FF40072 		mov	r2, #512
 2411 00a4 5A62     		str	r2, [r3, #36]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 73


1664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2412              		.loc 1 1665 29
 2413 00a6 FB68     		ldr	r3, [r7, #12]
 2414 00a8 1B68     		ldr	r3, [r3]
 2415              		.loc 1 1665 12
 2416 00aa 1B6A     		ldr	r3, [r3, #32]
 2417 00ac 7B61     		str	r3, [r7, #20]
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2418              		.loc 1 1666 39
 2419 00ae FB68     		ldr	r3, [r7, #12]
 2420 00b0 1B68     		ldr	r3, [r3]
 2421              		.loc 1 1666 49
 2422 00b2 9B6C     		ldr	r3, [r3, #72]
 2423              		.loc 1 1666 21
 2424 00b4 C3F30E03 		ubfx	r3, r3, #0, #15
 2425 00b8 3B61     		str	r3, [r7, #16]
1667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
1669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours      = (uint8_t)((tmpreg & (RTC_ALRMBR_HT  | RTC_ALRMBR_HU))  >> RTC_AL
 2426              		.loc 1 1669 91
 2427 00ba 7B69     		ldr	r3, [r7, #20]
 2428 00bc 1B0C     		lsrs	r3, r3, #16
 2429              		.loc 1 1669 36
 2430 00be DBB2     		uxtb	r3, r3
 2431 00c0 03F03F03 		and	r3, r3, #63
 2432 00c4 DAB2     		uxtb	r2, r3
 2433              		.loc 1 1669 34
 2434 00c6 BB68     		ldr	r3, [r7, #8]
 2435 00c8 1A70     		strb	r2, [r3]
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_AL
 2436              		.loc 1 1670 91
 2437 00ca 7B69     		ldr	r3, [r7, #20]
 2438 00cc 1B0A     		lsrs	r3, r3, #8
 2439              		.loc 1 1670 36
 2440 00ce DBB2     		uxtb	r3, r3
 2441 00d0 03F07F03 		and	r3, r3, #127
 2442 00d4 DAB2     		uxtb	r2, r3
 2443              		.loc 1 1670 34
 2444 00d6 BB68     		ldr	r3, [r7, #8]
 2445 00d8 5A70     		strb	r2, [r3, #1]
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t)((tmpreg & (RTC_ALRMBR_ST  | RTC_ALRMBR_SU))  >> RTC_AL
 2446              		.loc 1 1671 36
 2447 00da 7B69     		ldr	r3, [r7, #20]
 2448 00dc DBB2     		uxtb	r3, r3
 2449 00de 03F07F03 		and	r3, r3, #127
 2450 00e2 DAB2     		uxtb	r2, r3
 2451              		.loc 1 1671 34
 2452 00e4 BB68     		ldr	r3, [r7, #8]
 2453 00e6 9A70     		strb	r2, [r3, #2]
1672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg &  RTC_ALRMBR_PM)                    >> RTC_AL
 2454              		.loc 1 1672 91
 2455 00e8 7B69     		ldr	r3, [r7, #20]
 2456 00ea 9B0D     		lsrs	r3, r3, #22
 2457              		.loc 1 1672 36
 2458 00ec DBB2     		uxtb	r3, r3
 2459 00ee 03F00103 		and	r3, r3, #1
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 74


 2460 00f2 DAB2     		uxtb	r2, r3
 2461              		.loc 1 1672 34
 2462 00f4 BB68     		ldr	r3, [r7, #8]
 2463 00f6 DA70     		strb	r2, [r3, #3]
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2464              		.loc 1 1673 34
 2465 00f8 BB68     		ldr	r3, [r7, #8]
 2466 00fa 3A69     		ldr	r2, [r7, #16]
 2467 00fc 5A60     		str	r2, [r3, #4]
1674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU))   >> RTC_AL
 2468              		.loc 1 1674 91
 2469 00fe 7B69     		ldr	r3, [r7, #20]
 2470 0100 1B0E     		lsrs	r3, r3, #24
 2471              		.loc 1 1674 36
 2472 0102 DBB2     		uxtb	r3, r3
 2473 0104 03F03F03 		and	r3, r3, #63
 2474 0108 DAB2     		uxtb	r2, r3
 2475              		.loc 1 1674 34
 2476 010a BB68     		ldr	r3, [r7, #8]
 2477 010c 83F82020 		strb	r2, [r3, #32]
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t)(tmpreg &  RTC_ALRMBR_WDSEL);
 2478              		.loc 1 1675 36
 2479 0110 7B69     		ldr	r3, [r7, #20]
 2480 0112 03F08042 		and	r2, r3, #1073741824
 2481              		.loc 1 1675 34
 2482 0116 BB68     		ldr	r3, [r7, #8]
 2483 0118 DA61     		str	r2, [r3, #28]
1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t)(tmpreg &  RTC_ALARMMASK_ALL);
 2484              		.loc 1 1676 36
 2485 011a 7B69     		ldr	r3, [r7, #20]
 2486 011c 03F08032 		and	r2, r3, #-2139062144
 2487              		.loc 1 1676 34
 2488 0120 BB68     		ldr	r3, [r7, #8]
 2489 0122 5A61     		str	r2, [r3, #20]
 2490              	.L93:
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 2491              		.loc 1 1679 5
 2492 0124 3B68     		ldr	r3, [r7]
 2493 0126 002B     		cmp	r3, #0
 2494 0128 25D1     		bne	.L94
1680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2495              		.loc 1 1681 31
 2496 012a BB68     		ldr	r3, [r7, #8]
 2497 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2498 012e 1846     		mov	r0, r3
 2499 0130 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2500 0134 0346     		mov	r3, r0
 2501 0136 1A46     		mov	r2, r3
 2502              		.loc 1 1681 29 discriminator 1
 2503 0138 BB68     		ldr	r3, [r7, #8]
 2504 013a 1A70     		strb	r2, [r3]
1682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2505              		.loc 1 1682 33
 2506 013c BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 75


 2507 013e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2508 0140 1846     		mov	r0, r3
 2509 0142 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2510 0146 0346     		mov	r3, r0
 2511 0148 1A46     		mov	r2, r3
 2512              		.loc 1 1682 31 discriminator 1
 2513 014a BB68     		ldr	r3, [r7, #8]
 2514 014c 5A70     		strb	r2, [r3, #1]
1683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2515              		.loc 1 1683 33
 2516 014e BB68     		ldr	r3, [r7, #8]
 2517 0150 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2518 0152 1846     		mov	r0, r3
 2519 0154 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2520 0158 0346     		mov	r3, r0
 2521 015a 1A46     		mov	r2, r3
 2522              		.loc 1 1683 31 discriminator 1
 2523 015c BB68     		ldr	r3, [r7, #8]
 2524 015e 9A70     		strb	r2, [r3, #2]
1684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2525              		.loc 1 1684 32
 2526 0160 BB68     		ldr	r3, [r7, #8]
 2527 0162 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2528 0166 1846     		mov	r0, r3
 2529 0168 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2530 016c 0346     		mov	r3, r0
 2531 016e 1A46     		mov	r2, r3
 2532              		.loc 1 1684 30 discriminator 1
 2533 0170 BB68     		ldr	r3, [r7, #8]
 2534 0172 83F82020 		strb	r2, [r3, #32]
 2535              	.L94:
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2536              		.loc 1 1687 10
 2537 0176 0023     		movs	r3, #0
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2538              		.loc 1 1688 1
 2539 0178 1846     		mov	r0, r3
 2540 017a 1837     		adds	r7, r7, #24
 2541              	.LCFI60:
 2542              		.cfi_def_cfa_offset 8
 2543 017c BD46     		mov	sp, r7
 2544              	.LCFI61:
 2545              		.cfi_def_cfa_register 13
 2546              		@ sp needed
 2547 017e 80BD     		pop	{r7, pc}
 2548              		.cfi_endproc
 2549              	.LFE155:
 2551              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 2552              		.align	1
 2553              		.global	HAL_RTC_AlarmIRQHandler
 2554              		.syntax unified
 2555              		.thumb
 2556              		.thumb_func
 2558              	HAL_RTC_AlarmIRQHandler:
 2559              	.LFB156:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 76


1689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Handle Alarm interrupt request.
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
1694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
1696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2560              		.loc 1 1696 1
 2561              		.cfi_startproc
 2562              		@ args = 0, pretend = 0, frame = 8
 2563              		@ frame_needed = 1, uses_anonymous_args = 0
 2564 0000 80B5     		push	{r7, lr}
 2565              	.LCFI62:
 2566              		.cfi_def_cfa_offset 8
 2567              		.cfi_offset 7, -8
 2568              		.cfi_offset 14, -4
 2569 0002 82B0     		sub	sp, sp, #8
 2570              	.LCFI63:
 2571              		.cfi_def_cfa_offset 16
 2572 0004 00AF     		add	r7, sp, #0
 2573              	.LCFI64:
 2574              		.cfi_def_cfa_register 7
 2575 0006 7860     		str	r0, [r7, #4]
1697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(DUAL_CORE)
1699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_GetCurrentCPUID() == CM7_CPUID)
1700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
1706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* SINGLE_CORE */
1708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 2576              		.loc 1 1708 3
 2577 0008 1F4B     		ldr	r3, .L99
 2578 000a 4FF40032 		mov	r2, #131072
 2579 000e 9A60     		str	r2, [r3, #8]
1709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* DUAL_CORE */
1710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get interrupt status */
1713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmp = hrtc->Instance->MISR;
1714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((tmp & RTC_FLAG_ALRAF) != 0u)
1716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the AlarmA interrupt pending bit */
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Call Alarm A Callback */
1721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->AlarmAEventCallback(hrtc);
1723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     HAL_RTC_AlarmAEventCallback(hrtc);
1725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 77


1726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((tmp & RTC_MISR_ALRBMF) != 0u)
1729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the AlarmB interrupt pending bit */
1731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->SCR = RTC_SCR_CALRBF;
1732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Call Alarm B Callback */
1734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->AlarmBEventCallback(hrtc);
1736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     HAL_RTCEx_AlarmBEventCallback(hrtc);
1738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
1742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 2580              		.loc 1 1742 6
 2581 0010 7B68     		ldr	r3, [r7, #4]
 2582 0012 1B68     		ldr	r3, [r3]
 2583 0014 9B68     		ldr	r3, [r3, #8]
 2584 0016 03F48053 		and	r3, r3, #4096
 2585              		.loc 1 1742 5
 2586 001a 002B     		cmp	r3, #0
 2587 001c 12D0     		beq	.L97
1743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Get the pending status of the AlarmA Interrupt */
1745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 2588              		.loc 1 1745 8
 2589 001e 7B68     		ldr	r3, [r7, #4]
 2590 0020 1B68     		ldr	r3, [r3]
 2591 0022 DB68     		ldr	r3, [r3, #12]
 2592 0024 03F48073 		and	r3, r3, #256
 2593              		.loc 1 1745 7
 2594 0028 002B     		cmp	r3, #0
 2595 002a 0BD0     		beq	.L97
1746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear the AlarmA interrupt pending bit */
1748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2596              		.loc 1 1748 7
 2597 002c 7B68     		ldr	r3, [r7, #4]
 2598 002e 1B68     		ldr	r3, [r3]
 2599 0030 DB68     		ldr	r3, [r3, #12]
 2600 0032 DAB2     		uxtb	r2, r3
 2601 0034 7B68     		ldr	r3, [r7, #4]
 2602 0036 1B68     		ldr	r3, [r3]
 2603 0038 62F4C072 		orn	r2, r2, #384
 2604 003c DA60     		str	r2, [r3, #12]
1749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2605              		.loc 1 1753 7
 2606 003e 7868     		ldr	r0, [r7, #4]
 2607 0040 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 2608              	.L97:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 78


1754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the AlarmB interrupt source enable status */
1759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 2609              		.loc 1 1759 6
 2610 0044 7B68     		ldr	r3, [r7, #4]
 2611 0046 1B68     		ldr	r3, [r3]
 2612 0048 9B68     		ldr	r3, [r3, #8]
 2613 004a 03F40053 		and	r3, r3, #8192
 2614              		.loc 1 1759 5
 2615 004e 002B     		cmp	r3, #0
 2616 0050 12D0     		beq	.L98
1760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Get the pending status of the AlarmB Interrupt */
1762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 2617              		.loc 1 1762 8
 2618 0052 7B68     		ldr	r3, [r7, #4]
 2619 0054 1B68     		ldr	r3, [r3]
 2620 0056 DB68     		ldr	r3, [r3, #12]
 2621 0058 03F40073 		and	r3, r3, #512
 2622              		.loc 1 1762 7
 2623 005c 002B     		cmp	r3, #0
 2624 005e 0BD0     		beq	.L98
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear the AlarmB interrupt pending bit */
1765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 2625              		.loc 1 1765 7
 2626 0060 7B68     		ldr	r3, [r7, #4]
 2627 0062 1B68     		ldr	r3, [r3]
 2628 0064 DB68     		ldr	r3, [r3, #12]
 2629 0066 DAB2     		uxtb	r2, r3
 2630 0068 7B68     		ldr	r3, [r7, #4]
 2631 006a 1B68     		ldr	r3, [r3]
 2632 006c 62F42072 		orn	r2, r2, #640
 2633 0070 DA60     		str	r2, [r3, #12]
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* AlarmB callback */
1768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback(hrtc);
1770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2634              		.loc 1 1771 7
 2635 0072 7868     		ldr	r0, [r7, #4]
 2636 0074 FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 2637              	.L98:
1772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2638              		.loc 1 1778 15
 2639 0078 7B68     		ldr	r3, [r7, #4]
 2640 007a 0122     		movs	r2, #1
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 79


 2641 007c 83F82120 		strb	r2, [r3, #33]
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2642              		.loc 1 1779 1
 2643 0080 00BF     		nop
 2644 0082 0837     		adds	r7, r7, #8
 2645              	.LCFI65:
 2646              		.cfi_def_cfa_offset 8
 2647 0084 BD46     		mov	sp, r7
 2648              	.LCFI66:
 2649              		.cfi_def_cfa_register 13
 2650              		@ sp needed
 2651 0086 80BD     		pop	{r7, pc}
 2652              	.L100:
 2653              		.align	2
 2654              	.L99:
 2655 0088 80000058 		.word	1476395136
 2656              		.cfi_endproc
 2657              	.LFE156:
 2659              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 2660              		.align	1
 2661              		.weak	HAL_RTC_AlarmAEventCallback
 2662              		.syntax unified
 2663              		.thumb
 2664              		.thumb_func
 2666              	HAL_RTC_AlarmAEventCallback:
 2667              	.LFB157:
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
1785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2668              		.loc 1 1787 1
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 8
 2671              		@ frame_needed = 1, uses_anonymous_args = 0
 2672              		@ link register save eliminated.
 2673 0000 80B4     		push	{r7}
 2674              	.LCFI67:
 2675              		.cfi_def_cfa_offset 4
 2676              		.cfi_offset 7, -4
 2677 0002 83B0     		sub	sp, sp, #12
 2678              	.LCFI68:
 2679              		.cfi_def_cfa_offset 16
 2680 0004 00AF     		add	r7, sp, #0
 2681              	.LCFI69:
 2682              		.cfi_def_cfa_register 7
 2683 0006 7860     		str	r0, [r7, #4]
1788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
1790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
1794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 80


 2684              		.loc 1 1794 1
 2685 0008 00BF     		nop
 2686 000a 0C37     		adds	r7, r7, #12
 2687              	.LCFI70:
 2688              		.cfi_def_cfa_offset 4
 2689 000c BD46     		mov	sp, r7
 2690              	.LCFI71:
 2691              		.cfi_def_cfa_register 13
 2692              		@ sp needed
 2693 000e 5DF8047B 		ldr	r7, [sp], #4
 2694              	.LCFI72:
 2695              		.cfi_restore 7
 2696              		.cfi_def_cfa_offset 0
 2697 0012 7047     		bx	lr
 2698              		.cfi_endproc
 2699              	.LFE157:
 2701              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 2702              		.align	1
 2703              		.global	HAL_RTC_PollForAlarmAEvent
 2704              		.syntax unified
 2705              		.thumb
 2706              		.thumb_func
 2708              	HAL_RTC_PollForAlarmAEvent:
 2709              	.LFB158:
1795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Handle AlarmA Polling request.
1798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2710              		.loc 1 1803 1
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 16
 2713              		@ frame_needed = 1, uses_anonymous_args = 0
 2714 0000 80B5     		push	{r7, lr}
 2715              	.LCFI73:
 2716              		.cfi_def_cfa_offset 8
 2717              		.cfi_offset 7, -8
 2718              		.cfi_offset 14, -4
 2719 0002 84B0     		sub	sp, sp, #16
 2720              	.LCFI74:
 2721              		.cfi_def_cfa_offset 24
 2722 0004 00AF     		add	r7, sp, #0
 2723              	.LCFI75:
 2724              		.cfi_def_cfa_register 7
 2725 0006 7860     		str	r0, [r7, #4]
 2726 0008 3960     		str	r1, [r7]
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
 2727              		.loc 1 1805 24
 2728 000a FFF7FEFF 		bl	HAL_GetTick
 2729 000e F860     		str	r0, [r7, #12]
1806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == 0U)
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 81


 2730              		.loc 1 1807 9
 2731 0010 14E0     		b	.L104
 2732              	.L107:
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 2733              		.loc 1 1809 7
 2734 0012 3B68     		ldr	r3, [r7]
 2735 0014 B3F1FF3F 		cmp	r3, #-1
 2736 0018 10D0     		beq	.L104
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 2737              		.loc 1 1811 12
 2738 001a FFF7FEFF 		bl	HAL_GetTick
 2739 001e 0246     		mov	r2, r0
 2740              		.loc 1 1811 26 discriminator 1
 2741 0020 FB68     		ldr	r3, [r7, #12]
 2742 0022 D31A     		subs	r3, r2, r3
 2743              		.loc 1 1811 9 discriminator 1
 2744 0024 3A68     		ldr	r2, [r7]
 2745 0026 9A42     		cmp	r2, r3
 2746 0028 02D3     		bcc	.L105
 2747              		.loc 1 1811 50 discriminator 1
 2748 002a 3B68     		ldr	r3, [r7]
 2749 002c 002B     		cmp	r3, #0
 2750 002e 05D1     		bne	.L104
 2751              	.L105:
1812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2752              		.loc 1 1813 21
 2753 0030 7B68     		ldr	r3, [r7, #4]
 2754 0032 0322     		movs	r2, #3
 2755 0034 83F82120 		strb	r2, [r3, #33]
1814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2756              		.loc 1 1814 16
 2757 0038 0323     		movs	r3, #3
 2758 003a 14E0     		b	.L106
 2759              	.L104:
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2760              		.loc 1 1807 10
 2761 003c 7B68     		ldr	r3, [r7, #4]
 2762 003e 1B68     		ldr	r3, [r3]
 2763 0040 DB68     		ldr	r3, [r3, #12]
 2764 0042 03F48073 		and	r3, r3, #256
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2765              		.loc 1 1807 57
 2766 0046 002B     		cmp	r3, #0
 2767 0048 E3D0     		beq	.L107
1815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2768              		.loc 1 1820 3
 2769 004a 7B68     		ldr	r3, [r7, #4]
 2770 004c 1B68     		ldr	r3, [r3]
 2771 004e DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 82


 2772 0050 DAB2     		uxtb	r2, r3
 2773 0052 7B68     		ldr	r3, [r7, #4]
 2774 0054 1B68     		ldr	r3, [r3]
 2775 0056 62F4C072 		orn	r2, r2, #384
 2776 005a DA60     		str	r2, [r3, #12]
1821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2777              		.loc 1 1823 15
 2778 005c 7B68     		ldr	r3, [r7, #4]
 2779 005e 0122     		movs	r2, #1
 2780 0060 83F82120 		strb	r2, [r3, #33]
1824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2781              		.loc 1 1825 10
 2782 0064 0023     		movs	r3, #0
 2783              	.L106:
1826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2784              		.loc 1 1826 1
 2785 0066 1846     		mov	r0, r3
 2786 0068 1037     		adds	r7, r7, #16
 2787              	.LCFI76:
 2788              		.cfi_def_cfa_offset 8
 2789 006a BD46     		mov	sp, r7
 2790              	.LCFI77:
 2791              		.cfi_def_cfa_register 13
 2792              		@ sp needed
 2793 006c 80BD     		pop	{r7, pc}
 2794              		.cfi_endproc
 2795              	.LFE158:
 2797              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 2798              		.align	1
 2799              		.global	HAL_RTC_WaitForSynchro
 2800              		.syntax unified
 2801              		.thumb
 2802              		.thumb_func
 2804              	HAL_RTC_WaitForSynchro:
 2805              	.LFB159:
1827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group4
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions
1834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     [..]
1840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     This subsection provides functions allowing to
1841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 83


1846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Wait until the RTC Time and Date registers (RTC_TR and RTC_DR) are
1849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the
1851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar
1853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes
1854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         the software must first clear the RSF flag.
1855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading
1856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been
1857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.
1858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
1862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2806              		.loc 1 1862 1
 2807              		.cfi_startproc
 2808              		@ args = 0, pretend = 0, frame = 16
 2809              		@ frame_needed = 1, uses_anonymous_args = 0
 2810 0000 80B5     		push	{r7, lr}
 2811              	.LCFI78:
 2812              		.cfi_def_cfa_offset 8
 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 2815 0002 84B0     		sub	sp, sp, #16
 2816              	.LCFI79:
 2817              		.cfi_def_cfa_offset 24
 2818 0004 00AF     		add	r7, sp, #0
 2819              	.LCFI80:
 2820              		.cfi_def_cfa_register 7
 2821 0006 7860     		str	r0, [r7, #4]
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
1866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
1868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 2822              		.loc 1 1869 7
 2823 0008 7B68     		ldr	r3, [r7, #4]
 2824 000a 1B68     		ldr	r3, [r3]
 2825              		.loc 1 1869 23
 2826 000c 0D4A     		ldr	r2, .L112
 2827 000e DA60     		str	r2, [r3, #12]
1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tickstart = HAL_GetTick();
 2828              		.loc 1 1872 15
 2829 0010 FFF7FEFF 		bl	HAL_GetTick
 2830 0014 F860     		str	r0, [r7, #12]
1873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
1877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 84


1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 2831              		.loc 1 1878 11
 2832 0016 09E0     		b	.L109
 2833              	.L111:
1879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 2834              		.loc 1 1881 11
 2835 0018 FFF7FEFF 		bl	HAL_GetTick
 2836 001c 0246     		mov	r2, r0
 2837              		.loc 1 1881 25 discriminator 1
 2838 001e FB68     		ldr	r3, [r7, #12]
 2839 0020 D31A     		subs	r3, r2, r3
 2840              		.loc 1 1881 9 discriminator 1
 2841 0022 B3F57A7F 		cmp	r3, #1000
 2842 0026 01D9     		bls	.L109
1882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2843              		.loc 1 1883 16
 2844 0028 0323     		movs	r3, #3
 2845 002a 07E0     		b	.L110
 2846              	.L109:
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2847              		.loc 1 1878 17
 2848 002c 7B68     		ldr	r3, [r7, #4]
 2849 002e 1B68     		ldr	r3, [r3]
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2850              		.loc 1 1878 27
 2851 0030 DB68     		ldr	r3, [r3, #12]
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2852              		.loc 1 1878 33
 2853 0032 03F02003 		and	r3, r3, #32
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2854              		.loc 1 1878 48
 2855 0036 002B     		cmp	r3, #0
 2856 0038 EED0     		beq	.L111
1884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2857              		.loc 1 1887 10
 2858 003a 0023     		movs	r3, #0
 2859              	.L110:
1888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2860              		.loc 1 1888 1
 2861 003c 1846     		mov	r0, r3
 2862 003e 1037     		adds	r7, r7, #16
 2863              	.LCFI81:
 2864              		.cfi_def_cfa_offset 8
 2865 0040 BD46     		mov	sp, r7
 2866              	.LCFI82:
 2867              		.cfi_def_cfa_register 13
 2868              		@ sp needed
 2869 0042 80BD     		pop	{r7, pc}
 2870              	.L113:
 2871              		.align	2
 2872              	.L112:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 85


 2873 0044 5FFF0300 		.word	261983
 2874              		.cfi_endproc
 2875              	.LFE159:
 2877              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 2878              		.align	1
 2879              		.global	HAL_RTC_GetState
 2880              		.syntax unified
 2881              		.thumb
 2882              		.thumb_func
 2884              	HAL_RTC_GetState:
 2885              	.LFB160:
1889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group5
1895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   Peripheral State functions
1896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     [..]
1902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     This subsection provides functions allowing to
1903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       (+) Get RTC state
1904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Return the RTC handle state.
1910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL state
1912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(const RTC_HandleTypeDef *hrtc)
1914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2886              		.loc 1 1914 1
 2887              		.cfi_startproc
 2888              		@ args = 0, pretend = 0, frame = 8
 2889              		@ frame_needed = 1, uses_anonymous_args = 0
 2890              		@ link register save eliminated.
 2891 0000 80B4     		push	{r7}
 2892              	.LCFI83:
 2893              		.cfi_def_cfa_offset 4
 2894              		.cfi_offset 7, -4
 2895 0002 83B0     		sub	sp, sp, #12
 2896              	.LCFI84:
 2897              		.cfi_def_cfa_offset 16
 2898 0004 00AF     		add	r7, sp, #0
 2899              	.LCFI85:
 2900              		.cfi_def_cfa_register 7
 2901 0006 7860     		str	r0, [r7, #4]
1915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Return RTC handle state */
1916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return hrtc->State;
 2902              		.loc 1 1916 14
 2903 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 86


 2904 000a 93F82130 		ldrb	r3, [r3, #33]
 2905 000e DBB2     		uxtb	r3, r3
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2906              		.loc 1 1917 1
 2907 0010 1846     		mov	r0, r3
 2908 0012 0C37     		adds	r7, r7, #12
 2909              	.LCFI86:
 2910              		.cfi_def_cfa_offset 4
 2911 0014 BD46     		mov	sp, r7
 2912              	.LCFI87:
 2913              		.cfi_def_cfa_register 13
 2914              		@ sp needed
 2915 0016 5DF8047B 		ldr	r7, [sp], #4
 2916              	.LCFI88:
 2917              		.cfi_restore 7
 2918              		.cfi_def_cfa_offset 0
 2919 001a 7047     		bx	lr
 2920              		.cfi_endproc
 2921              	.LFE160:
 2923              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 2924              		.align	1
 2925              		.global	RTC_EnterInitMode
 2926              		.syntax unified
 2927              		.thumb
 2928              		.thumb_func
 2930              	RTC_EnterInitMode:
 2931              	.LFB161:
1918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Private_Functions
1928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Enter the RTC Initialization mode.
1932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
1938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2932              		.loc 1 1938 1
 2933              		.cfi_startproc
 2934              		@ args = 0, pretend = 0, frame = 16
 2935              		@ frame_needed = 1, uses_anonymous_args = 0
 2936 0000 80B5     		push	{r7, lr}
 2937              	.LCFI89:
 2938              		.cfi_def_cfa_offset 8
 2939              		.cfi_offset 7, -8
 2940              		.cfi_offset 14, -4
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 87


 2941 0002 84B0     		sub	sp, sp, #16
 2942              	.LCFI90:
 2943              		.cfi_def_cfa_offset 24
 2944 0004 00AF     		add	r7, sp, #0
 2945              	.LCFI91:
 2946              		.cfi_def_cfa_register 7
 2947 0006 7860     		str	r0, [r7, #4]
1939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 2948              		.loc 1 1940 21
 2949 0008 0023     		movs	r3, #0
 2950 000a FB73     		strb	r3, [r7, #15]
1941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
1944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the Initialization mode */
1946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
1947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if timeout is reached exit */
1951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
1952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 2951              		.loc 1 1953 12
 2952 000c 7B68     		ldr	r3, [r7, #4]
 2953 000e 1B68     		ldr	r3, [r3]
 2954              		.loc 1 1953 22
 2955 0010 DB68     		ldr	r3, [r3, #12]
 2956              		.loc 1 1953 28
 2957 0012 03F04003 		and	r3, r3, #64
 2958              		.loc 1 1953 6
 2959 0016 002B     		cmp	r3, #0
 2960 0018 20D1     		bne	.L117
1954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the Initialization mode */
1956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 2961              		.loc 1 1956 9
 2962 001a 7B68     		ldr	r3, [r7, #4]
 2963 001c 1B68     		ldr	r3, [r3]
 2964              		.loc 1 1956 25
 2965 001e 4FF0FF32 		mov	r2, #-1
 2966 0022 DA60     		str	r2, [r3, #12]
1957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2967              		.loc 1 1958 17
 2968 0024 FFF7FEFF 		bl	HAL_GetTick
 2969 0028 B860     		str	r0, [r7, #8]
1959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if timeout is reached exit */
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 2970              		.loc 1 1961 11
 2971 002a 0DE0     		b	.L119
 2972              	.L120:
1962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 88


1964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 2973              		.loc 1 1964 11
 2974 002c FFF7FEFF 		bl	HAL_GetTick
 2975 0030 0246     		mov	r2, r0
 2976              		.loc 1 1964 26 discriminator 1
 2977 0032 BB68     		ldr	r3, [r7, #8]
 2978 0034 D31A     		subs	r3, r2, r3
 2979              		.loc 1 1964 9 discriminator 1
 2980 0036 B3F57A7F 		cmp	r3, #1000
 2981 003a 05D9     		bls	.L119
1965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status = HAL_TIMEOUT;
 2982              		.loc 1 1966 16
 2983 003c 0323     		movs	r3, #3
 2984 003e FB73     		strb	r3, [r7, #15]
1967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2985              		.loc 1 1967 21
 2986 0040 7B68     		ldr	r3, [r7, #4]
 2987 0042 0322     		movs	r2, #3
 2988 0044 83F82120 		strb	r2, [r3, #33]
 2989              	.L119:
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2990              		.loc 1 1961 18
 2991 0048 7B68     		ldr	r3, [r7, #4]
 2992 004a 1B68     		ldr	r3, [r3]
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2993              		.loc 1 1961 28
 2994 004c DB68     		ldr	r3, [r3, #12]
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2995              		.loc 1 1961 34
 2996 004e 03F04003 		and	r3, r3, #64
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 2997              		.loc 1 1961 58
 2998 0052 002B     		cmp	r3, #0
 2999 0054 02D1     		bne	.L117
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
 3000              		.loc 1 1961 58 is_stmt 0 discriminator 1
 3001 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3002 0058 032B     		cmp	r3, #3
 3003 005a E7D1     		bne	.L120
 3004              	.L117:
1968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 3005              		.loc 1 1972 10 is_stmt 1
 3006 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 3007              		.loc 1 1973 1
 3008 005e 1846     		mov	r0, r3
 3009 0060 1037     		adds	r7, r7, #16
 3010              	.LCFI92:
 3011              		.cfi_def_cfa_offset 8
 3012 0062 BD46     		mov	sp, r7
 3013              	.LCFI93:
 3014              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 89


 3015              		@ sp needed
 3016 0064 80BD     		pop	{r7, pc}
 3017              		.cfi_endproc
 3018              	.LFE161:
 3020              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 3021              		.align	1
 3022              		.global	RTC_ExitInitMode
 3023              		.syntax unified
 3024              		.thumb
 3025              		.thumb_func
 3027              	RTC_ExitInitMode:
 3028              	.LFB162:
1974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Exit the RTC Initialization mode.
1977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
1981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 3029              		.loc 1 1981 1
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 16
 3032              		@ frame_needed = 1, uses_anonymous_args = 0
 3033 0000 80B5     		push	{r7, lr}
 3034              	.LCFI94:
 3035              		.cfi_def_cfa_offset 8
 3036              		.cfi_offset 7, -8
 3037              		.cfi_offset 14, -4
 3038 0002 84B0     		sub	sp, sp, #16
 3039              	.LCFI95:
 3040              		.cfi_def_cfa_offset 24
 3041 0004 00AF     		add	r7, sp, #0
 3042              	.LCFI96:
 3043              		.cfi_def_cfa_register 7
 3044 0006 7860     		str	r0, [r7, #4]
1982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 3045              		.loc 1 1982 21
 3046 0008 0023     		movs	r3, #0
 3047 000a FB73     		strb	r3, [r7, #15]
1983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Exit Initialization mode */
1987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP)
1988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
1989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 3048              		.loc 1 1990 3
 3049 000c 1A4B     		ldr	r3, .L127
 3050 000e DB68     		ldr	r3, [r3, #12]
 3051 0010 194A     		ldr	r2, .L127
 3052 0012 23F08003 		bic	r3, r3, #128
 3053 0016 D360     		str	r3, [r2, #12]
1991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP */
1992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* If CR_BYPSHAD bit = 0, wait for synchro */
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 90


1994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 3054              		.loc 1 1994 7
 3055 0018 174B     		ldr	r3, .L127
 3056 001a 9B68     		ldr	r3, [r3, #8]
 3057 001c 03F02003 		and	r3, r3, #32
 3058              		.loc 1 1994 6
 3059 0020 002B     		cmp	r3, #0
 3060 0022 0CD1     		bne	.L123
1995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 3061              		.loc 1 1996 9
 3062 0024 7868     		ldr	r0, [r7, #4]
 3063 0026 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 3064 002a 0346     		mov	r3, r0
 3065              		.loc 1 1996 8 discriminator 1
 3066 002c 002B     		cmp	r3, #0
 3067 002e 1ED0     		beq	.L124
1997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 3068              		.loc 1 1998 19
 3069 0030 7B68     		ldr	r3, [r7, #4]
 3070 0032 0322     		movs	r2, #3
 3071 0034 83F82120 		strb	r2, [r3, #33]
1999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = HAL_TIMEOUT;
 3072              		.loc 1 1999 14
 3073 0038 0323     		movs	r3, #3
 3074 003a FB73     		strb	r3, [r7, #15]
 3075 003c 17E0     		b	.L124
 3076              	.L123:
2000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
2001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
2003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
2004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear BYPSHAD bit */
2005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 3077              		.loc 1 2005 5
 3078 003e 0E4B     		ldr	r3, .L127
 3079 0040 9B68     		ldr	r3, [r3, #8]
 3080 0042 0D4A     		ldr	r2, .L127
 3081 0044 23F02003 		bic	r3, r3, #32
 3082 0048 9360     		str	r3, [r2, #8]
2006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 3083              		.loc 1 2006 9
 3084 004a 7868     		ldr	r0, [r7, #4]
 3085 004c FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 3086 0050 0346     		mov	r3, r0
 3087              		.loc 1 2006 8 discriminator 1
 3088 0052 002B     		cmp	r3, #0
 3089 0054 05D0     		beq	.L125
2007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
2008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 3090              		.loc 1 2008 19
 3091 0056 7B68     		ldr	r3, [r7, #4]
 3092 0058 0322     		movs	r2, #3
 3093 005a 83F82120 		strb	r2, [r3, #33]
2009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = HAL_TIMEOUT;
 3094              		.loc 1 2009 14
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 91


 3095 005e 0323     		movs	r3, #3
 3096 0060 FB73     		strb	r3, [r7, #15]
 3097              	.L125:
2010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
2011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Restore BYPSHAD bit */
2012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 3098              		.loc 1 2012 5
 3099 0062 054B     		ldr	r3, .L127
 3100 0064 9B68     		ldr	r3, [r3, #8]
 3101 0066 044A     		ldr	r2, .L127
 3102 0068 43F02003 		orr	r3, r3, #32
 3103 006c 9360     		str	r3, [r2, #8]
 3104              	.L124:
2013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 3105              		.loc 1 2015 10
 3106 006e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 3107              		.loc 1 2016 1
 3108 0070 1846     		mov	r0, r3
 3109 0072 1037     		adds	r7, r7, #16
 3110              	.LCFI97:
 3111              		.cfi_def_cfa_offset 8
 3112 0074 BD46     		mov	sp, r7
 3113              	.LCFI98:
 3114              		.cfi_def_cfa_register 13
 3115              		@ sp needed
 3116 0076 80BD     		pop	{r7, pc}
 3117              	.L128:
 3118              		.align	2
 3119              	.L127:
 3120 0078 00400058 		.word	1476411392
 3121              		.cfi_endproc
 3122              	.LFE162:
 3124              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 3125              		.align	1
 3126              		.global	RTC_ByteToBcd2
 3127              		.syntax unified
 3128              		.thumb
 3129              		.thumb_func
 3131              	RTC_ByteToBcd2:
 3132              	.LFB163:
2017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
2019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Convert a 2 digit decimal to BCD format.
2020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Value Byte to be converted
2021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval Converted byte
2022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
2023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
2024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 3133              		.loc 1 2024 1
 3134              		.cfi_startproc
 3135              		@ args = 0, pretend = 0, frame = 16
 3136              		@ frame_needed = 1, uses_anonymous_args = 0
 3137              		@ link register save eliminated.
 3138 0000 80B4     		push	{r7}
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 92


 3139              	.LCFI99:
 3140              		.cfi_def_cfa_offset 4
 3141              		.cfi_offset 7, -4
 3142 0002 85B0     		sub	sp, sp, #20
 3143              	.LCFI100:
 3144              		.cfi_def_cfa_offset 24
 3145 0004 00AF     		add	r7, sp, #0
 3146              	.LCFI101:
 3147              		.cfi_def_cfa_register 7
 3148 0006 0346     		mov	r3, r0
 3149 0008 FB71     		strb	r3, [r7, #7]
2025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 3150              		.loc 1 2025 12
 3151 000a 0023     		movs	r3, #0
 3152 000c FB60     		str	r3, [r7, #12]
2026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint8_t  bcdlow  = Value;
 3153              		.loc 1 2026 12
 3154 000e FB79     		ldrb	r3, [r7, #7]
 3155 0010 FB72     		strb	r3, [r7, #11]
2027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while (bcdlow >= 10U)
 3156              		.loc 1 2028 9
 3157 0012 05E0     		b	.L130
 3158              	.L131:
2029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
2030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     bcdhigh++;
 3159              		.loc 1 2030 12
 3160 0014 FB68     		ldr	r3, [r7, #12]
 3161 0016 0133     		adds	r3, r3, #1
 3162 0018 FB60     		str	r3, [r7, #12]
2031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     bcdlow -= 10U;
 3163              		.loc 1 2031 12
 3164 001a FB7A     		ldrb	r3, [r7, #11]
 3165 001c 0A3B     		subs	r3, r3, #10
 3166 001e FB72     		strb	r3, [r7, #11]
 3167              	.L130:
2028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 3168              		.loc 1 2028 17
 3169 0020 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3170 0022 092B     		cmp	r3, #9
 3171 0024 F6D8     		bhi	.L131
2032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 3172              		.loc 1 2034 11
 3173 0026 FB68     		ldr	r3, [r7, #12]
 3174 0028 DBB2     		uxtb	r3, r3
 3175 002a 1B01     		lsls	r3, r3, #4
 3176 002c DAB2     		uxtb	r2, r3
 3177              		.loc 1 2034 36
 3178 002e FB7A     		ldrb	r3, [r7, #11]
 3179 0030 1343     		orrs	r3, r3, r2
 3180 0032 DBB2     		uxtb	r3, r3
2035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 3181              		.loc 1 2035 1
 3182 0034 1846     		mov	r0, r3
 3183 0036 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 93


 3184              	.LCFI102:
 3185              		.cfi_def_cfa_offset 4
 3186 0038 BD46     		mov	sp, r7
 3187              	.LCFI103:
 3188              		.cfi_def_cfa_register 13
 3189              		@ sp needed
 3190 003a 5DF8047B 		ldr	r7, [sp], #4
 3191              	.LCFI104:
 3192              		.cfi_restore 7
 3193              		.cfi_def_cfa_offset 0
 3194 003e 7047     		bx	lr
 3195              		.cfi_endproc
 3196              	.LFE163:
 3198              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 3199              		.align	1
 3200              		.global	RTC_Bcd2ToByte
 3201              		.syntax unified
 3202              		.thumb
 3203              		.thumb_func
 3205              	RTC_Bcd2ToByte:
 3206              	.LFB164:
2036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
2038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Value BCD value to be converted
2040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval Converted word
2041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
2042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
2043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 3207              		.loc 1 2043 1
 3208              		.cfi_startproc
 3209              		@ args = 0, pretend = 0, frame = 16
 3210              		@ frame_needed = 1, uses_anonymous_args = 0
 3211              		@ link register save eliminated.
 3212 0000 80B4     		push	{r7}
 3213              	.LCFI105:
 3214              		.cfi_def_cfa_offset 4
 3215              		.cfi_offset 7, -4
 3216 0002 85B0     		sub	sp, sp, #20
 3217              	.LCFI106:
 3218              		.cfi_def_cfa_offset 24
 3219 0004 00AF     		add	r7, sp, #0
 3220              	.LCFI107:
 3221              		.cfi_def_cfa_register 7
 3222 0006 0346     		mov	r3, r0
 3223 0008 FB71     		strb	r3, [r7, #7]
2044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint8_t tmp;
2045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tmp = ((Value & 0xF0U) >> 4U) * 10U;
 3224              		.loc 1 2045 26
 3225 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3226 000c 1B09     		lsrs	r3, r3, #4
 3227 000e DBB2     		uxtb	r3, r3
 3228              		.loc 1 2045 7
 3229 0010 1A46     		mov	r2, r3
 3230 0012 9200     		lsls	r2, r2, #2
 3231 0014 1344     		add	r3, r3, r2
 3232 0016 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 94


 3233 0018 FB73     		strb	r3, [r7, #15]
2046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return (tmp + (Value & 0x0FU));
 3234              		.loc 1 2046 24
 3235 001a FB79     		ldrb	r3, [r7, #7]
 3236 001c 03F00F03 		and	r3, r3, #15
 3237 0020 DAB2     		uxtb	r2, r3
 3238              		.loc 1 2046 15
 3239 0022 FB7B     		ldrb	r3, [r7, #15]
 3240 0024 1344     		add	r3, r3, r2
 3241 0026 DBB2     		uxtb	r3, r3
2047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 3242              		.loc 1 2047 1
 3243 0028 1846     		mov	r0, r3
 3244 002a 1437     		adds	r7, r7, #20
 3245              	.LCFI108:
 3246              		.cfi_def_cfa_offset 4
 3247 002c BD46     		mov	sp, r7
 3248              	.LCFI109:
 3249              		.cfi_def_cfa_register 13
 3250              		@ sp needed
 3251 002e 5DF8047B 		ldr	r7, [sp], #4
 3252              	.LCFI110:
 3253              		.cfi_restore 7
 3254              		.cfi_def_cfa_offset 0
 3255 0032 7047     		bx	lr
 3256              		.cfi_endproc
 3257              	.LFE164:
 3259              		.text
 3260              	.Letext0:
 3261              		.file 2 "C:/gcc_vsc/arm_gcc/14.2 rel1/arm-none-eabi/include/machine/_default_types.h"
 3262              		.file 3 "C:/gcc_vsc/arm_gcc/14.2 rel1/arm-none-eabi/include/sys/_stdint.h"
 3263              		.file 4 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 3264              		.file 5 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 3265              		.file 6 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
 3266              		.file 7 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
 3267              		.file 8 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 95


DEFINED SYMBOLS
                            *ABS*:00000000 stm32h7xx_hal_rtc.c
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:20     .text.HAL_RTC_Init:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:26     .text.HAL_RTC_Init:00000000 HAL_RTC_Init
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:465    .text.HAL_RTC_MspInit:00000000 HAL_RTC_MspInit
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2930   .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:3027   .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:223    .text.HAL_RTC_Init:00000100 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:228    .text.HAL_RTC_DeInit:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:234    .text.HAL_RTC_DeInit:00000000 HAL_RTC_DeInit
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:507    .text.HAL_RTC_MspDeInit:00000000 HAL_RTC_MspDeInit
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:454    .text.HAL_RTC_DeInit:00000130 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:459    .text.HAL_RTC_MspInit:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:501    .text.HAL_RTC_MspDeInit:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:543    .text.HAL_RTC_SetTime:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:549    .text.HAL_RTC_SetTime:00000000 HAL_RTC_SetTime
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:3131   .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:781    .text.HAL_RTC_SetTime:00000138 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:786    .text.HAL_RTC_GetTime:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:792    .text.HAL_RTC_GetTime:00000000 HAL_RTC_GetTime
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:3205   .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:927    .text.HAL_RTC_GetTime:000000b4 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:932    .text.HAL_RTC_SetDate:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:938    .text.HAL_RTC_SetDate:00000000 HAL_RTC_SetDate
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:1135   .text.HAL_RTC_SetDate:0000010c $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:1140   .text.HAL_RTC_GetDate:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:1146   .text.HAL_RTC_GetDate:00000000 HAL_RTC_GetDate
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:1261   .text.HAL_RTC_GetDate:00000098 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:1266   .text.HAL_RTC_SetAlarm:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:1272   .text.HAL_RTC_SetAlarm:00000000 HAL_RTC_SetAlarm
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:1671   .text.HAL_RTC_SetAlarm_IT:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:1677   .text.HAL_RTC_SetAlarm_IT:00000000 HAL_RTC_SetAlarm_IT
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2087   .text.HAL_RTC_SetAlarm_IT:00000278 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2092   .text.HAL_RTC_DeactivateAlarm:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2098   .text.HAL_RTC_DeactivateAlarm:00000000 HAL_RTC_DeactivateAlarm
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2293   .text.HAL_RTC_GetAlarm:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2299   .text.HAL_RTC_GetAlarm:00000000 HAL_RTC_GetAlarm
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2552   .text.HAL_RTC_AlarmIRQHandler:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2558   .text.HAL_RTC_AlarmIRQHandler:00000000 HAL_RTC_AlarmIRQHandler
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2666   .text.HAL_RTC_AlarmAEventCallback:00000000 HAL_RTC_AlarmAEventCallback
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2655   .text.HAL_RTC_AlarmIRQHandler:00000088 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2660   .text.HAL_RTC_AlarmAEventCallback:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2702   .text.HAL_RTC_PollForAlarmAEvent:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2708   .text.HAL_RTC_PollForAlarmAEvent:00000000 HAL_RTC_PollForAlarmAEvent
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2798   .text.HAL_RTC_WaitForSynchro:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2804   .text.HAL_RTC_WaitForSynchro:00000000 HAL_RTC_WaitForSynchro
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2873   .text.HAL_RTC_WaitForSynchro:00000044 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2878   .text.HAL_RTC_GetState:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2884   .text.HAL_RTC_GetState:00000000 HAL_RTC_GetState
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:2924   .text.RTC_EnterInitMode:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:3021   .text.RTC_ExitInitMode:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:3120   .text.RTC_ExitInitMode:00000078 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:3125   .text.RTC_ByteToBcd2:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s:3199   .text.RTC_Bcd2ToByte:00000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccAst7yX.s 			page 96


HAL_RTCEx_AlarmBEventCallback
