
template_stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08009f50  08009f50  0000af50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a5b0  0800a5b0  0000b5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a5b8  0800a5b8  0000b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a5bc  0800a5bc  0000b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a0  24000000  0800a5c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005598  240000a0  0800a660  0000c0a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005638  0800a660  0000c638  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f967  00000000  00000000  0000c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049fa  00000000  00000000  0002ba35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a18  00000000  00000000  00030430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013f4  00000000  00000000  00031e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c597  00000000  00000000  0003323c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021501  00000000  00000000  0006f7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172496  00000000  00000000  00090cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020316a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000765c  00000000  00000000  002031b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  0020a80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009f38 	.word	0x08009f38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08009f38 	.word	0x08009f38

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <led_driver_init>:
//---includes---
#include "bsp_led_driver.h"

//---defines---
led_status_t led_driver_init(bsp_led_driver_t * const self)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  led_status_t v_return = LED_OK;
 8000398:	2300      	movs	r3, #0
 800039a:	73fb      	strb	r3, [r7, #15]
  //check parameter:
  if(NULL == self)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d107      	bne.n	80003b2 <led_driver_init+0x22>
  {
    v_return = LED_ERROR_PARAMETER;
 80003a2:	2304      	movs	r3, #4
 80003a4:	73fb      	strb	r3, [r7, #15]
#ifdef DEBUG
    DEBUG_LOG("error: LED_ERROR_PARAMETER\r\n");
 80003a6:	490a      	ldr	r1, [pc, #40]	@ (80003d0 <led_driver_init+0x40>)
 80003a8:	2000      	movs	r0, #0
 80003aa:	f008 fb47 	bl	8008a3c <SEGGER_RTT_printf>
#endif
    return v_return;
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	e00a      	b.n	80003c8 <led_driver_init+0x38>
  }
  
  //start init:
#ifdef DEBUG
  DEBUG_LOG("led_init start. \r\n");
 80003b2:	4908      	ldr	r1, [pc, #32]	@ (80003d4 <led_driver_init+0x44>)
 80003b4:	2000      	movs	r0, #0
 80003b6:	f008 fb41 	bl	8008a3c <SEGGER_RTT_printf>
#endif
  v_return = self -> p_led_operation_inst -> pf_led_on();
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	691b      	ldr	r3, [r3, #16]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4798      	blx	r3
 80003c2:	4603      	mov	r3, r0
 80003c4:	73fb      	strb	r3, [r7, #15]
  
  return v_return;
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	08009f50 	.word	0x08009f50
 80003d4:	08009f70 	.word	0x08009f70

080003d8 <led_driver_ctrl>:
led_status_t led_driver_ctrl(
		bsp_led_driver_t * self,
		uint32_t cycle_time_ms,
		uint32_t blink_times,
		proportion__t proportion_off_on
){
 80003d8:	b480      	push	{r7}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
 80003e4:	803b      	strh	r3, [r7, #0]
  led_status_t v_return = LED_OK;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
  return v_return;
 80003ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	371c      	adds	r7, #28
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <led_driver_inst>:
      , os_delay_t * const driver_os_delay
#else
	  , no_os_delay_t * const driver_none_os_delay
#endif
)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	603b      	str	r3, [r7, #0]
  led_status_t v_return = LED_OK;
 8000406:	2300      	movs	r3, #0
 8000408:	75fb      	strb	r3, [r7, #23]
  //check parameter:
  if(NULL == self || NULL == led_operations || NULL == time_base)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d005      	beq.n	800041c <led_driver_inst+0x24>
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d002      	beq.n	800041c <led_driver_inst+0x24>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d107      	bne.n	800042c <led_driver_inst+0x34>
  {
    v_return = LED_ERROR_PARAMETER;
 800041c:	2304      	movs	r3, #4
 800041e:	75fb      	strb	r3, [r7, #23]
#ifdef DEBUG
    DEBUG_LOG("error: LED_ERROR_PARAMETER\r\n");
 8000420:	492d      	ldr	r1, [pc, #180]	@ (80004d8 <led_driver_inst+0xe0>)
 8000422:	2000      	movs	r0, #0
 8000424:	f008 fb0a 	bl	8008a3c <SEGGER_RTT_printf>
#endif
    return v_return;
 8000428:	7dfb      	ldrb	r3, [r7, #23]
 800042a:	e051      	b.n	80004d0 <led_driver_inst+0xd8>
  }

#ifdef OS_SUPORTING
  if(NULL == driver_os_delay)
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d107      	bne.n	8000442 <led_driver_inst+0x4a>
  {
    v_return = LED_ERROR_PARAMETER;
 8000432:	2304      	movs	r3, #4
 8000434:	75fb      	strb	r3, [r7, #23]
#ifdef DEBUG
    DEBUG_LOG("error: LED_ERROR_PARAMETER\r\n");
 8000436:	4928      	ldr	r1, [pc, #160]	@ (80004d8 <led_driver_inst+0xe0>)
 8000438:	2000      	movs	r0, #0
 800043a:	f008 faff 	bl	8008a3c <SEGGER_RTT_printf>
#endif
    return v_return;
 800043e:	7dfb      	ldrb	r3, [r7, #23]
 8000440:	e046      	b.n	80004d0 <led_driver_inst+0xd8>
  }
#endif

  //check if inited:
  if(LED_INITED == self -> if_led_inited)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d007      	beq.n	800045a <led_driver_inst+0x62>
  {
    v_return = LED_ERROR_SOURCE;
 800044a:	2303      	movs	r3, #3
 800044c:	75fb      	strb	r3, [r7, #23]
#ifdef DEBUG
    DEBUG_LOG("error: LED_ERROR_SOURCE\r\n");
 800044e:	4923      	ldr	r1, [pc, #140]	@ (80004dc <led_driver_inst+0xe4>)
 8000450:	2000      	movs	r0, #0
 8000452:	f008 faf3 	bl	8008a3c <SEGGER_RTT_printf>
#endif
    return v_return;
 8000456:	7dfb      	ldrb	r3, [r7, #23]
 8000458:	e03a      	b.n	80004d0 <led_driver_inst+0xd8>
  }

  //start inst:
#ifdef DEBUG
  DEBUG_LOG("led_inst start. \r\n");
 800045a:	4921      	ldr	r1, [pc, #132]	@ (80004e0 <led_driver_inst+0xe8>)
 800045c:	2000      	movs	r0, #0
 800045e:	f008 faed 	bl	8008a3c <SEGGER_RTT_printf>
#endif

  //add interface:
  self -> p_led_operation_inst = led_operations;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	611a      	str	r2, [r3, #16]
#ifdef OS_SUPORTING
  self -> p_os_time_delay = driver_os_delay;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	619a      	str	r2, [r3, #24]
#else
  self -> p_no_os_time_delay = driver_none_os_delay;
#endif
  self -> p_time_base_ms = time_base;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	615a      	str	r2, [r3, #20]
  
  //init target:
  self -> blink_times = 0;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  self -> cycle_time_ms = 0;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  self -> proportion_on_off.led_off_proportion = 0;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2200      	movs	r2, #0
 8000484:	731a      	strb	r2, [r3, #12]
  self -> proportion_on_off.led_on_proportion = 1;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	2201      	movs	r2, #1
 800048a:	735a      	strb	r2, [r3, #13]
  self -> p_led_ctrler = led_driver_ctrl;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	4a15      	ldr	r2, [pc, #84]	@ (80004e4 <led_driver_inst+0xec>)
 8000490:	61da      	str	r2, [r3, #28]
  
  v_return = led_driver_init(self);
 8000492:	68f8      	ldr	r0, [r7, #12]
 8000494:	f7ff ff7c 	bl	8000390 <led_driver_init>
 8000498:	4603      	mov	r3, r0
 800049a:	75fb      	strb	r3, [r7, #23]
  
  if(LED_OK != v_return)
 800049c:	7dfb      	ldrb	r3, [r7, #23]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d00e      	beq.n	80004c0 <led_driver_inst+0xc8>
  {
#ifdef DEBUG
    DEBUG_LOG("led_init failed. \r\n");
 80004a2:	4911      	ldr	r1, [pc, #68]	@ (80004e8 <led_driver_inst+0xf0>)
 80004a4:	2000      	movs	r0, #0
 80004a6:	f008 fac9 	bl	8008a3c <SEGGER_RTT_printf>
    self -> p_led_operation_inst = NULL;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
    self -> p_os_time_delay = NULL;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
    self -> p_time_base_ms = NULL;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
#endif
    return v_return;
 80004bc:	7dfb      	ldrb	r3, [r7, #23]
 80004be:	e007      	b.n	80004d0 <led_driver_inst+0xd8>
  }
  self -> if_led_inited = LED_INITED;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
  DEBUG_LOG("led_inst succeed. \r\n");
 80004c6:	4909      	ldr	r1, [pc, #36]	@ (80004ec <led_driver_inst+0xf4>)
 80004c8:	2000      	movs	r0, #0
 80004ca:	f008 fab7 	bl	8008a3c <SEGGER_RTT_printf>
#endif
  
  return v_return;
 80004ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	08009f50 	.word	0x08009f50
 80004dc:	08009f84 	.word	0x08009f84
 80004e0:	08009fa0 	.word	0x08009fa0
 80004e4:	080003d9 	.word	0x080003d9
 80004e8:	08009fb4 	.word	0x08009fb4
 80004ec:	08009fc8 	.word	0x08009fc8

080004f0 <led_led_on>:
#include "main.h"
#include "FreeRTOS.h"
#include "task.h"

led_status_t led_led_on(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(led_on_board_GPIO_Port, led_on_board_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2108      	movs	r1, #8
 80004f8:	4804      	ldr	r0, [pc, #16]	@ (800050c <led_led_on+0x1c>)
 80004fa:	f000 ffeb 	bl	80014d4 <HAL_GPIO_WritePin>
#ifdef DEBUG
  DEBUG_LOG("led is on. \r\n");
 80004fe:	4904      	ldr	r1, [pc, #16]	@ (8000510 <led_led_on+0x20>)
 8000500:	2000      	movs	r0, #0
 8000502:	f008 fa9b 	bl	8008a3c <SEGGER_RTT_printf>
#endif
  return LED_OK;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	bd80      	pop	{r7, pc}
 800050c:	58021000 	.word	0x58021000
 8000510:	08009fe0 	.word	0x08009fe0

08000514 <led_led_off>:

led_status_t led_led_off(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(led_on_board_GPIO_Port, led_on_board_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2108      	movs	r1, #8
 800051c:	4804      	ldr	r0, [pc, #16]	@ (8000530 <led_led_off+0x1c>)
 800051e:	f000 ffd9 	bl	80014d4 <HAL_GPIO_WritePin>
#ifdef DEBUG
  DEBUG_LOG("led is off. \r\n");
 8000522:	4904      	ldr	r1, [pc, #16]	@ (8000534 <led_led_off+0x20>)
 8000524:	2000      	movs	r0, #0
 8000526:	f008 fa89 	bl	8008a3c <SEGGER_RTT_printf>
#endif
  return LED_OK;
 800052a:	2300      	movs	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	bd80      	pop	{r7, pc}
 8000530:	58021000 	.word	0x58021000
 8000534:	08009ff0 	.word	0x08009ff0

08000538 <led_get_tick>:

uint32_t led_get_tick(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  TickType_t v_return = xTaskGetTickCount();
 800053e:	f006 f97b 	bl	8006838 <xTaskGetTickCount>
 8000542:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
  DEBUG_LOG("get tick succeed. \r\n");
 8000544:	4904      	ldr	r1, [pc, #16]	@ (8000558 <led_get_tick+0x20>)
 8000546:	2000      	movs	r0, #0
 8000548:	f008 fa78 	bl	8008a3c <SEGGER_RTT_printf>
#endif
  return (uint32_t)v_return;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	0800a000 	.word	0x0800a000

0800055c <led_delay_ms>:

led_status_t led_delay_ms(uint32_t const ms)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(ms));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800056a:	fb02 f303 	mul.w	r3, r2, r3
 800056e:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <led_delay_ms+0x34>)
 8000570:	fba2 2303 	umull	r2, r3, r2, r3
 8000574:	099b      	lsrs	r3, r3, #6
 8000576:	4618      	mov	r0, r3
 8000578:	f006 f80c 	bl	8006594 <vTaskDelay>
#ifdef DEBUG
  DEBUG_LOG("delay %lums over. \r\n", ms);
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4905      	ldr	r1, [pc, #20]	@ (8000594 <led_delay_ms+0x38>)
 8000580:	2000      	movs	r0, #0
 8000582:	f008 fa5b 	bl	8008a3c <SEGGER_RTT_printf>
#endif
  return LED_OK;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	10624dd3 	.word	0x10624dd3
 8000594:	0800a018 	.word	0x0800a018

08000598 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue_default */
  queue_defaultHandle = osMessageQueueNew (1, sizeof(uint32_t), &queue_default_attributes);
 800059c:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <MX_FREERTOS_Init+0x28>)
 800059e:	2104      	movs	r1, #4
 80005a0:	2001      	movs	r0, #1
 80005a2:	f004 ffa7 	bl	80054f4 <osMessageQueueNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a06      	ldr	r2, [pc, #24]	@ (80005c4 <MX_FREERTOS_Init+0x2c>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_default */
  task_defaultHandle = osThreadNew(task_default_start, NULL, &task_default_attributes);
 80005ac:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <MX_FREERTOS_Init+0x30>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4806      	ldr	r0, [pc, #24]	@ (80005cc <MX_FREERTOS_Init+0x34>)
 80005b2:	f004 ff0d 	bl	80053d0 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <MX_FREERTOS_Init+0x38>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	0800a450 	.word	0x0800a450
 80005c4:	240000c0 	.word	0x240000c0
 80005c8:	0800a42c 	.word	0x0800a42c
 80005cc:	080005d5 	.word	0x080005d5
 80005d0:	240000bc 	.word	0x240000bc

080005d4 <task_default_start>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_default_start */
void task_default_start(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08e      	sub	sp, #56	@ 0x38
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_default_start */
  bsp_led_driver_t led_1;
  led_1.if_led_inited = LED_NOT_INITED;
 80005dc:	2300      	movs	r3, #0
 80005de:	763b      	strb	r3, [r7, #24]
  led_operations_t led_operations =
 80005e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <task_default_start+0x3c>)
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ea:	e883 0003 	stmia.w	r3, {r0, r1}
  {
      .pf_led_on = led_led_on,
      .pf_led_off = led_led_off
  };
  time_base_ms_t led_time_base = 
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <task_default_start+0x40>)
 80005f0:	60fb      	str	r3, [r7, #12]
  {
      .pf_get_time_ms = led_get_tick
  };
  os_delay_t led_delay = 
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <task_default_start+0x44>)
 80005f4:	60bb      	str	r3, [r7, #8]
  {
      .pf_os_delay_ms = led_delay_ms
  };
  led_driver_inst(&led_1, &led_operations, &led_time_base, &led_delay);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	f107 020c 	add.w	r2, r7, #12
 80005fe:	f107 0110 	add.w	r1, r7, #16
 8000602:	f107 0018 	add.w	r0, r7, #24
 8000606:	f7ff fef7 	bl	80003f8 <led_driver_inst>
  /* Infinite loop */
  for(;;)
 800060a:	bf00      	nop
 800060c:	e7fd      	b.n	800060a <task_default_start+0x36>
 800060e:	bf00      	nop
 8000610:	0800a050 	.word	0x0800a050
 8000614:	08000539 	.word	0x08000539
 8000618:	0800055d 	.word	0x0800055d

0800061c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000642:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000650:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000674:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000692:	4a11      	ldr	r2, [pc, #68]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_GPIO_Init+0xbc>)
 800069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_on_board_GPIO_Port, led_on_board_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2108      	movs	r1, #8
 80006ae:	480b      	ldr	r0, [pc, #44]	@ (80006dc <MX_GPIO_Init+0xc0>)
 80006b0:	f000 ff10 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_on_board_Pin */
  GPIO_InitStruct.Pin = led_on_board_Pin;
 80006b4:	2308      	movs	r3, #8
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_on_board_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_GPIO_Init+0xc0>)
 80006cc:	f000 fd52 	bl	8001174 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	@ 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	58024400 	.word	0x58024400
 80006dc:	58021000 	.word	0x58021000

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e4:	f000 f88e 	bl	8000804 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 fb84 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f80e 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff ff94 	bl	800061c <MX_GPIO_Init>
  MX_RTC_Init();
 80006f4:	f000 f8ca 	bl	800088c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  app_elog_init();
 80006f8:	f004 fd7a 	bl	80051f0 <app_elog_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006fc:	f004 fe1e 	bl	800533c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000700:	f7ff ff4a 	bl	8000598 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000704:	f004 fe3e 	bl	8005384 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <main+0x28>

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b09c      	sub	sp, #112	@ 0x70
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000716:	224c      	movs	r2, #76	@ 0x4c
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f008 fb70 	bl	8008e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2220      	movs	r2, #32
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f008 fb6a 	bl	8008e00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 feeb 	bl	8001508 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <SystemClock_Config+0xf0>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a30      	ldr	r2, [pc, #192]	@ (80007fc <SystemClock_Config+0xf0>)
 800073c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <SystemClock_Config+0xf0>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <SystemClock_Config+0xf4>)
 800074e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000750:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemClock_Config+0xf4>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <SystemClock_Config+0xf4>)
 800075a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000764:	bf00      	nop
 8000766:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <SystemClock_Config+0xf0>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000772:	d1f8      	bne.n	8000766 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000774:	2309      	movs	r3, #9
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800077e:	2301      	movs	r3, #1
 8000780:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800078a:	2305      	movs	r3, #5
 800078c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800078e:	23c0      	movs	r3, #192	@ 0xc0
 8000790:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800079e:	2308      	movs	r3, #8
 80007a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fee4 	bl	800157c <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007ba:	f000 f861 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	233f      	movs	r3, #63	@ 0x3f
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ca:	2308      	movs	r3, #8
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ce:	2340      	movs	r3, #64	@ 0x40
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d2:	2340      	movs	r3, #64	@ 0x40
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007dc:	2340      	movs	r3, #64	@ 0x40
 80007de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2104      	movs	r1, #4
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fb23 	bl	8001e30 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80007f0:	f000 f846 	bl	8000880 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3770      	adds	r7, #112	@ 0x70
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	58024800 	.word	0x58024800
 8000800:	58000400 	.word	0x58000400

08000804 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000816:	f000 fc35 	bl	8001084 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800081a:	2301      	movs	r3, #1
 800081c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800081e:	2300      	movs	r3, #0
 8000820:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000826:	231f      	movs	r3, #31
 8000828:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800082a:	2387      	movs	r3, #135	@ 0x87
 800082c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800082e:	2300      	movs	r3, #0
 8000830:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000832:	2300      	movs	r3, #0
 8000834:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000836:	2301      	movs	r3, #1
 8000838:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800083a:	2301      	movs	r3, #1
 800083c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000846:	463b      	mov	r3, r7
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fc53 	bl	80010f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800084e:	2004      	movs	r0, #4
 8000850:	f000 fc30 	bl	80010b4 <HAL_MPU_Enable>

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a04      	ldr	r2, [pc, #16]	@ (800087c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d101      	bne.n	8000872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086e:	f000 fafd 	bl	8000e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40001000 	.word	0x40001000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000890:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <MX_RTC_Init+0x48>)
 8000892:	4a11      	ldr	r2, [pc, #68]	@ (80008d8 <MX_RTC_Init+0x4c>)
 8000894:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_RTC_Init+0x48>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <MX_RTC_Init+0x48>)
 800089e:	227f      	movs	r2, #127	@ 0x7f
 80008a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_RTC_Init+0x48>)
 80008a4:	22ff      	movs	r2, #255	@ 0xff
 80008a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <MX_RTC_Init+0x48>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_RTC_Init+0x48>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <MX_RTC_Init+0x48>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_RTC_Init+0x48>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_RTC_Init+0x48>)
 80008c2:	f003 f9db 	bl	8003c7c <HAL_RTC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80008cc:	f7ff ffd8 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	240000c4 	.word	0x240000c4
 80008d8:	58004000 	.word	0x58004000

080008dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0b2      	sub	sp, #200	@ 0xc8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	22c0      	movs	r2, #192	@ 0xc0
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f008 fa87 	bl	8008e00 <memset>
  if(rtcHandle->Instance==RTC)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <HAL_RTC_MspInit+0x5c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d119      	bne.n	8000930 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800090c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fe43 	bl	80025a0 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000920:	f7ff ffae 	bl	8000880 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_RTC_MspInit+0x60>)
 8000926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_RTC_MspInit+0x60>)
 800092a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800092e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000930:	bf00      	nop
 8000932:	37c8      	adds	r7, #200	@ 0xc8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58004000 	.word	0x58004000
 800093c:	58024400 	.word	0x58024400

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_MspInit+0x38>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_MspInit+0x38>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_MspInit+0x38>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	210f      	movs	r1, #15
 8000968:	f06f 0001 	mvn.w	r0, #1
 800096c:	f000 fb62 	bl	8001034 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58024400 	.word	0x58024400

0800097c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b090      	sub	sp, #64	@ 0x40
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b0f      	cmp	r3, #15
 8000988:	d827      	bhi.n	80009da <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800098a:	2200      	movs	r2, #0
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	2036      	movs	r0, #54	@ 0x36
 8000990:	f000 fb50 	bl	8001034 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000994:	2036      	movs	r0, #54	@ 0x36
 8000996:	f000 fb67 	bl	8001068 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800099a:	4a29      	ldr	r2, [pc, #164]	@ (8000a40 <HAL_InitTick+0xc4>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a0:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <HAL_InitTick+0xc8>)
 80009a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009a6:	4a27      	ldr	r2, [pc, #156]	@ (8000a44 <HAL_InitTick+0xc8>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80009b0:	4b24      	ldr	r3, [pc, #144]	@ (8000a44 <HAL_InitTick+0xc8>)
 80009b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009be:	f107 0210 	add.w	r2, r7, #16
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fda7 	bl	800251c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d106      	bne.n	80009e6 <HAL_InitTick+0x6a>
 80009d8:	e001      	b.n	80009de <HAL_InitTick+0x62>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e02b      	b.n	8000a36 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009de:	f001 fd87 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 80009e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80009e4:	e004      	b.n	80009f0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e6:	f001 fd83 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 80009ea:	4603      	mov	r3, r0
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009f2:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <HAL_InitTick+0xcc>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	0c9b      	lsrs	r3, r3, #18
 80009fa:	3b01      	subs	r3, #1
 80009fc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009fe:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <HAL_InitTick+0xd0>)
 8000a00:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <HAL_InitTick+0xd4>)
 8000a02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_InitTick+0xd0>)
 8000a06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a4c <HAL_InitTick+0xd0>)
 8000a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_InitTick+0xd0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <HAL_InitTick+0xd0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a1e:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <HAL_InitTick+0xd0>)
 8000a20:	f003 fb08 	bl	8004034 <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d104      	bne.n	8000a34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a2a:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <HAL_InitTick+0xd0>)
 8000a2c:	f003 fb64 	bl	80040f8 <HAL_TIM_Base_Start_IT>
 8000a30:	4603      	mov	r3, r0
 8000a32:	e000      	b.n	8000a36 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3740      	adds	r7, #64	@ 0x40
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000008 	.word	0x24000008
 8000a44:	58024400 	.word	0x58024400
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	240000e8 	.word	0x240000e8
 8000a50:	40001000 	.word	0x40001000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <NMI_Handler+0x4>

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <TIM6_DAC_IRQHandler+0x10>)
 8000a92:	f003 fba9 	bl	80041e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	240000e8 	.word	0x240000e8

08000aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return 1;
 8000aa4:	2301      	movs	r3, #1
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_kill>:

int _kill(int pid, int sig)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aba:	f008 fa75 	bl	8008fa8 <__errno>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2216      	movs	r2, #22
 8000ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_exit>:

void _exit (int status)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ffe7 	bl	8000ab0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ae2:	bf00      	nop
 8000ae4:	e7fd      	b.n	8000ae2 <_exit+0x12>

08000ae6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	e00a      	b.n	8000b0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af8:	f3af 8000 	nop.w
 8000afc:	4601      	mov	r1, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	60ba      	str	r2, [r7, #8]
 8000b04:	b2ca      	uxtb	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbf0      	blt.n	8000af8 <_read+0x12>
  }

  return len;
 8000b16:	687b      	ldr	r3, [r7, #4]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e009      	b.n	8000b46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	60ba      	str	r2, [r7, #8]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbf1      	blt.n	8000b32 <_write+0x12>
  }
  return len;
 8000b4e:	687b      	ldr	r3, [r7, #4]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_close>:

int _close(int file)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b80:	605a      	str	r2, [r3, #4]
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_isatty>:

int _isatty(int file)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b98:	2301      	movs	r3, #1
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f008 f9da 	bl	8008fa8 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	24080000 	.word	0x24080000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	24000134 	.word	0x24000134
 8000c28:	24005638 	.word	0x24005638

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c30:	4b43      	ldr	r3, [pc, #268]	@ (8000d40 <SystemInit+0x114>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c36:	4a42      	ldr	r2, [pc, #264]	@ (8000d40 <SystemInit+0x114>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c40:	4b40      	ldr	r3, [pc, #256]	@ (8000d44 <SystemInit+0x118>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	2b06      	cmp	r3, #6
 8000c4a:	d807      	bhi.n	8000c5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d44 <SystemInit+0x118>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f023 030f 	bic.w	r3, r3, #15
 8000c54:	4a3b      	ldr	r2, [pc, #236]	@ (8000d44 <SystemInit+0x118>)
 8000c56:	f043 0307 	orr.w	r3, r3, #7
 8000c5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <SystemInit+0x11c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a39      	ldr	r2, [pc, #228]	@ (8000d48 <SystemInit+0x11c>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c68:	4b37      	ldr	r3, [pc, #220]	@ (8000d48 <SystemInit+0x11c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c6e:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <SystemInit+0x11c>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4935      	ldr	r1, [pc, #212]	@ (8000d48 <SystemInit+0x11c>)
 8000c74:	4b35      	ldr	r3, [pc, #212]	@ (8000d4c <SystemInit+0x120>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c7a:	4b32      	ldr	r3, [pc, #200]	@ (8000d44 <SystemInit+0x118>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d007      	beq.n	8000c96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c86:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <SystemInit+0x118>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f023 030f 	bic.w	r3, r3, #15
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d44 <SystemInit+0x118>)
 8000c90:	f043 0307 	orr.w	r3, r3, #7
 8000c94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c96:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <SystemInit+0x11c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <SystemInit+0x11c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <SystemInit+0x11c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	@ (8000d48 <SystemInit+0x11c>)
 8000caa:	4a29      	ldr	r2, [pc, #164]	@ (8000d50 <SystemInit+0x124>)
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <SystemInit+0x11c>)
 8000cb0:	4a28      	ldr	r2, [pc, #160]	@ (8000d54 <SystemInit+0x128>)
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <SystemInit+0x11c>)
 8000cb6:	4a28      	ldr	r2, [pc, #160]	@ (8000d58 <SystemInit+0x12c>)
 8000cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <SystemInit+0x11c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cc0:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <SystemInit+0x11c>)
 8000cc2:	4a25      	ldr	r2, [pc, #148]	@ (8000d58 <SystemInit+0x12c>)
 8000cc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <SystemInit+0x11c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <SystemInit+0x11c>)
 8000cce:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <SystemInit+0x12c>)
 8000cd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <SystemInit+0x11c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <SystemInit+0x11c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d48 <SystemInit+0x11c>)
 8000cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ce2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <SystemInit+0x11c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <SystemInit+0x130>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <SystemInit+0x134>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cf6:	d202      	bcs.n	8000cfe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <SystemInit+0x138>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000cfe:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <SystemInit+0x11c>)
 8000d00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d113      	bne.n	8000d34 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <SystemInit+0x11c>)
 8000d0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d12:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <SystemInit+0x11c>)
 8000d14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <SystemInit+0x13c>)
 8000d1e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d22:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <SystemInit+0x11c>)
 8000d26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d2a:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <SystemInit+0x11c>)
 8000d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	52002000 	.word	0x52002000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d50:	02020200 	.word	0x02020200
 8000d54:	01ff0000 	.word	0x01ff0000
 8000d58:	01010280 	.word	0x01010280
 8000d5c:	5c001000 	.word	0x5c001000
 8000d60:	ffff0000 	.word	0xffff0000
 8000d64:	51008108 	.word	0x51008108
 8000d68:	52004000 	.word	0x52004000

08000d6c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <ExitRun0Mode+0x2c>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <ExitRun0Mode+0x2c>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d7c:	bf00      	nop
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <ExitRun0Mode+0x2c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f9      	beq.n	8000d7e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	58024800 	.word	0x58024800

08000d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d9c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000dd8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000da0:	f7ff ffe4 	bl	8000d6c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da4:	f7ff ff42 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f008 f8f1 	bl	8008fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fc85 	bl	80006e0 <main>
  bx  lr
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ddc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000de0:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8000de4:	0800a5c0 	.word	0x0800a5c0
  ldr r2, =_sbss
 8000de8:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8000dec:	24005638 	.word	0x24005638

08000df0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC3_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 f90f 	bl	800101e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e00:	f001 f9cc 	bl	800219c <HAL_RCC_GetSysClockFreq>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_Init+0x68>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	4913      	ldr	r1, [pc, #76]	@ (8000e60 <HAL_Init+0x6c>)
 8000e12:	5ccb      	ldrb	r3, [r1, r3]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_Init+0x68>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_Init+0x6c>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <HAL_Init+0x70>)
 8000e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e38:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <HAL_Init+0x74>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f7ff fd9c 	bl	800097c <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e002      	b.n	8000e54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4e:	f7ff fd77 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	0800a468 	.word	0x0800a468
 8000e64:	24000004 	.word	0x24000004
 8000e68:	24000000 	.word	0x24000000

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2400000c 	.word	0x2400000c
 8000e90:	24000138 	.word	0x24000138

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	24000138 	.word	0x24000138

08000eac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <HAL_GetREVID+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	0c1b      	lsrs	r3, r3, #16
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	5c001000 	.word	0x5c001000

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00
 8000f08:	05fa0000 	.word	0x05fa0000

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	@ (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff4c 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001042:	f7ff ff63 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001046:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff ffb3 	bl	8000fb8 <NVIC_EncodePriority>
 8001052:	4602      	mov	r2, r0
 8001054:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff82 	bl	8000f64 <__NVIC_SetPriority>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff56 	bl	8000f28 <__NVIC_EnableIRQ>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001088:	f3bf 8f5f 	dmb	sy
}
 800108c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_MPU_Disable+0x28>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <HAL_MPU_Disable+0x28>)
 8001094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001098:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_MPU_Disable+0x2c>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	e000ed90 	.word	0xe000ed90

080010b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010bc:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_MPU_Enable+0x38>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_MPU_Enable+0x3c>)
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ca:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_MPU_Enable+0x3c>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010d2:	f3bf 8f4f 	dsb	sy
}
 80010d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010d8:	f3bf 8f6f 	isb	sy
}
 80010dc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed90 	.word	0xe000ed90
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	785a      	ldrb	r2, [r3, #1]
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <HAL_MPU_ConfigRegion+0x7c>)
 8001102:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <HAL_MPU_ConfigRegion+0x7c>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <HAL_MPU_ConfigRegion+0x7c>)
 800110a:	f023 0301 	bic.w	r3, r3, #1
 800110e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001110:	4a17      	ldr	r2, [pc, #92]	@ (8001170 <HAL_MPU_ConfigRegion+0x7c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7b1b      	ldrb	r3, [r3, #12]
 800111c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7adb      	ldrb	r3, [r3, #11]
 8001122:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001124:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7a9b      	ldrb	r3, [r3, #10]
 800112a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800112c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7b5b      	ldrb	r3, [r3, #13]
 8001132:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001134:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7b9b      	ldrb	r3, [r3, #14]
 800113a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800113c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7bdb      	ldrb	r3, [r3, #15]
 8001142:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001144:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7a5b      	ldrb	r3, [r3, #9]
 800114a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800114c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7a1b      	ldrb	r3, [r3, #8]
 8001152:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001154:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800115e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001160:	6113      	str	r3, [r2, #16]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed90 	.word	0xe000ed90

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001182:	4b89      	ldr	r3, [pc, #548]	@ (80013a8 <HAL_GPIO_Init+0x234>)
 8001184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001186:	e194      	b.n	80014b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2101      	movs	r1, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8186 	beq.w	80014ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d005      	beq.n	80011b8 <HAL_GPIO_Init+0x44>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d130      	bne.n	800121a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ee:	2201      	movs	r2, #1
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f003 0201 	and.w	r2, r3, #1
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b03      	cmp	r3, #3
 8001224:	d017      	beq.n	8001256 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d123      	bne.n	80012aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	69b9      	ldr	r1, [r7, #24]
 80012a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0203 	and.w	r2, r3, #3
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80e0 	beq.w	80014ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ec:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <HAL_GPIO_Init+0x238>)
 80012ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012f2:	4a2e      	ldr	r2, [pc, #184]	@ (80013ac <HAL_GPIO_Init+0x238>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012fc:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <HAL_GPIO_Init+0x238>)
 80012fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <HAL_GPIO_Init+0x23c>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a20      	ldr	r2, [pc, #128]	@ (80013b4 <HAL_GPIO_Init+0x240>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d052      	beq.n	80013dc <HAL_GPIO_Init+0x268>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1f      	ldr	r2, [pc, #124]	@ (80013b8 <HAL_GPIO_Init+0x244>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d031      	beq.n	80013a2 <HAL_GPIO_Init+0x22e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1e      	ldr	r2, [pc, #120]	@ (80013bc <HAL_GPIO_Init+0x248>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x22a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <HAL_GPIO_Init+0x24c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x226>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a1c      	ldr	r2, [pc, #112]	@ (80013c4 <HAL_GPIO_Init+0x250>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x222>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <HAL_GPIO_Init+0x254>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x21e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a1a      	ldr	r2, [pc, #104]	@ (80013cc <HAL_GPIO_Init+0x258>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x21a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_GPIO_Init+0x25c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x216>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a18      	ldr	r2, [pc, #96]	@ (80013d4 <HAL_GPIO_Init+0x260>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x212>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <HAL_GPIO_Init+0x264>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x20e>
 800137e:	2309      	movs	r3, #9
 8001380:	e02d      	b.n	80013de <HAL_GPIO_Init+0x26a>
 8001382:	230a      	movs	r3, #10
 8001384:	e02b      	b.n	80013de <HAL_GPIO_Init+0x26a>
 8001386:	2308      	movs	r3, #8
 8001388:	e029      	b.n	80013de <HAL_GPIO_Init+0x26a>
 800138a:	2307      	movs	r3, #7
 800138c:	e027      	b.n	80013de <HAL_GPIO_Init+0x26a>
 800138e:	2306      	movs	r3, #6
 8001390:	e025      	b.n	80013de <HAL_GPIO_Init+0x26a>
 8001392:	2305      	movs	r3, #5
 8001394:	e023      	b.n	80013de <HAL_GPIO_Init+0x26a>
 8001396:	2304      	movs	r3, #4
 8001398:	e021      	b.n	80013de <HAL_GPIO_Init+0x26a>
 800139a:	2303      	movs	r3, #3
 800139c:	e01f      	b.n	80013de <HAL_GPIO_Init+0x26a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e01d      	b.n	80013de <HAL_GPIO_Init+0x26a>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e01b      	b.n	80013de <HAL_GPIO_Init+0x26a>
 80013a6:	bf00      	nop
 80013a8:	58000080 	.word	0x58000080
 80013ac:	58024400 	.word	0x58024400
 80013b0:	58000400 	.word	0x58000400
 80013b4:	58020000 	.word	0x58020000
 80013b8:	58020400 	.word	0x58020400
 80013bc:	58020800 	.word	0x58020800
 80013c0:	58020c00 	.word	0x58020c00
 80013c4:	58021000 	.word	0x58021000
 80013c8:	58021400 	.word	0x58021400
 80013cc:	58021800 	.word	0x58021800
 80013d0:	58021c00 	.word	0x58021c00
 80013d4:	58022000 	.word	0x58022000
 80013d8:	58022400 	.word	0x58022400
 80013dc:	2300      	movs	r3, #0
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	f002 0203 	and.w	r2, r2, #3
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	4093      	lsls	r3, r2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ee:	4938      	ldr	r1, [pc, #224]	@ (80014d0 <HAL_GPIO_Init+0x35c>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001450:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	3301      	adds	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f ae63 	bne.w	8001188 <HAL_GPIO_Init+0x14>
  }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	3724      	adds	r7, #36	@ 0x24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	58000400 	.word	0x58000400

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_PWREx_ConfigSupply+0x70>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b04      	cmp	r3, #4
 800151a:	d00a      	beq.n	8001532 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_PWREx_ConfigSupply+0x70>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d001      	beq.n	800152e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e01f      	b.n	800156e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e01d      	b.n	800156e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_PWREx_ConfigSupply+0x70>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f023 0207 	bic.w	r2, r3, #7
 800153a:	490f      	ldr	r1, [pc, #60]	@ (8001578 <HAL_PWREx_ConfigSupply+0x70>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4313      	orrs	r3, r2
 8001540:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001542:	f7ff fca7 	bl	8000e94 <HAL_GetTick>
 8001546:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001548:	e009      	b.n	800155e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800154a:	f7ff fca3 	bl	8000e94 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001558:	d901      	bls.n	800155e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e007      	b.n	800156e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_PWREx_ConfigSupply+0x70>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800156a:	d1ee      	bne.n	800154a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	58024800 	.word	0x58024800

0800157c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	@ 0x30
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f000 bc48 	b.w	8001e20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8088 	beq.w	80016ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159e:	4b99      	ldr	r3, [pc, #612]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015a8:	4b96      	ldr	r3, [pc, #600]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80015aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	d007      	beq.n	80015c4 <HAL_RCC_OscConfig+0x48>
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b6:	2b18      	cmp	r3, #24
 80015b8:	d111      	bne.n	80015de <HAL_RCC_OscConfig+0x62>
 80015ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d10c      	bne.n	80015de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d06d      	beq.n	80016ac <HAL_RCC_OscConfig+0x130>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d169      	bne.n	80016ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	f000 bc21 	b.w	8001e20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x7a>
 80015e8:	4b86      	ldr	r3, [pc, #536]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a85      	ldr	r2, [pc, #532]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e02e      	b.n	8001654 <HAL_RCC_OscConfig+0xd8>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x9c>
 80015fe:	4b81      	ldr	r3, [pc, #516]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a80      	ldr	r2, [pc, #512]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b7e      	ldr	r3, [pc, #504]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a7d      	ldr	r2, [pc, #500]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001610:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e01d      	b.n	8001654 <HAL_RCC_OscConfig+0xd8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0xc0>
 8001622:	4b78      	ldr	r3, [pc, #480]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a77      	ldr	r2, [pc, #476]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b75      	ldr	r3, [pc, #468]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a74      	ldr	r2, [pc, #464]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0xd8>
 800163c:	4b71      	ldr	r3, [pc, #452]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a70      	ldr	r2, [pc, #448]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b6e      	ldr	r3, [pc, #440]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a6d      	ldr	r2, [pc, #436]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 800164e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc1a 	bl	8000e94 <HAL_GetTick>
 8001660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fc16 	bl	8000e94 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	@ 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e3d4      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001676:	4b63      	ldr	r3, [pc, #396]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0xe8>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fc06 	bl	8000e94 <HAL_GetTick>
 8001688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fc02 	bl	8000e94 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	@ 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e3c0      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800169e:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x110>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80ca 	beq.w	8001850 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016bc:	4b51      	ldr	r3, [pc, #324]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80016c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <HAL_RCC_OscConfig+0x166>
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	2b18      	cmp	r3, #24
 80016d6:	d156      	bne.n	8001786 <HAL_RCC_OscConfig+0x20a>
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d151      	bne.n	8001786 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e2:	4b48      	ldr	r3, [pc, #288]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x17e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e392      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016fa:	4b42      	ldr	r3, [pc, #264]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 0219 	bic.w	r2, r3, #25
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	493f      	ldr	r1, [pc, #252]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fbc2 	bl	8000e94 <HAL_GetTick>
 8001710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fbbe 	bl	8000e94 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e37c      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001726:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	f7ff fbbb 	bl	8000eac <HAL_GetREVID>
 8001736:	4603      	mov	r3, r0
 8001738:	f241 0203 	movw	r2, #4099	@ 0x1003
 800173c:	4293      	cmp	r3, r2
 800173e:	d817      	bhi.n	8001770 <HAL_RCC_OscConfig+0x1f4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	2b40      	cmp	r3, #64	@ 0x40
 8001746:	d108      	bne.n	800175a <HAL_RCC_OscConfig+0x1de>
 8001748:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001750:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001756:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001758:	e07a      	b.n	8001850 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	4926      	ldr	r1, [pc, #152]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800176e:	e06f      	b.n	8001850 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	4921      	ldr	r1, [pc, #132]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001784:	e064      	b.n	8001850 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d047      	beq.n	800181e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800178e:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0219 	bic.w	r2, r3, #25
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	491a      	ldr	r1, [pc, #104]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb78 	bl	8000e94 <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fb74 	bl	8000e94 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e332      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	f7ff fb71 	bl	8000eac <HAL_GetREVID>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d819      	bhi.n	8001808 <HAL_RCC_OscConfig+0x28c>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2b40      	cmp	r3, #64	@ 0x40
 80017da:	d108      	bne.n	80017ee <HAL_RCC_OscConfig+0x272>
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80017e4:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80017e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ea:	6053      	str	r3, [r2, #4]
 80017ec:	e030      	b.n	8001850 <HAL_RCC_OscConfig+0x2d4>
 80017ee:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	031b      	lsls	r3, r3, #12
 80017fc:	4901      	ldr	r1, [pc, #4]	@ (8001804 <HAL_RCC_OscConfig+0x288>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
 8001802:	e025      	b.n	8001850 <HAL_RCC_OscConfig+0x2d4>
 8001804:	58024400 	.word	0x58024400
 8001808:	4b9a      	ldr	r3, [pc, #616]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	4997      	ldr	r1, [pc, #604]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e018      	b.n	8001850 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181e:	4b95      	ldr	r3, [pc, #596]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a94      	ldr	r2, [pc, #592]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff fb33 	bl	8000e94 <HAL_GetTick>
 800182e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fb2f 	bl	8000e94 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e2ed      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001844:	4b8b      	ldr	r3, [pc, #556]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a9 	beq.w	80019b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185e:	4b85      	ldr	r3, [pc, #532]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001866:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001868:	4b82      	ldr	r3, [pc, #520]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b08      	cmp	r3, #8
 8001872:	d007      	beq.n	8001884 <HAL_RCC_OscConfig+0x308>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b18      	cmp	r3, #24
 8001878:	d13a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x374>
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d135      	bne.n	80018f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001884:	4b7b      	ldr	r3, [pc, #492]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x320>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b80      	cmp	r3, #128	@ 0x80
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e2c1      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800189c:	f7ff fb06 	bl	8000eac <HAL_GetREVID>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d817      	bhi.n	80018da <HAL_RCC_OscConfig+0x35e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x348>
 80018b2:	4b70      	ldr	r3, [pc, #448]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80018ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80018bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018c2:	e075      	b.n	80019b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	069b      	lsls	r3, r3, #26
 80018d2:	4968      	ldr	r1, [pc, #416]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018d8:	e06a      	b.n	80019b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018da:	4b66      	ldr	r3, [pc, #408]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	061b      	lsls	r3, r3, #24
 80018e8:	4962      	ldr	r1, [pc, #392]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018ee:	e05f      	b.n	80019b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d042      	beq.n	800197e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80018fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fac6 	bl	8000e94 <HAL_GetTick>
 8001908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800190c:	f7ff fac2 	bl	8000e94 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e280      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800191e:	4b55      	ldr	r3, [pc, #340]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800192a:	f7ff fabf 	bl	8000eac <HAL_GetREVID>
 800192e:	4603      	mov	r3, r0
 8001930:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001934:	4293      	cmp	r3, r2
 8001936:	d817      	bhi.n	8001968 <HAL_RCC_OscConfig+0x3ec>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	2b20      	cmp	r3, #32
 800193e:	d108      	bne.n	8001952 <HAL_RCC_OscConfig+0x3d6>
 8001940:	4b4c      	ldr	r3, [pc, #304]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001948:	4a4a      	ldr	r2, [pc, #296]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800194a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800194e:	6053      	str	r3, [r2, #4]
 8001950:	e02e      	b.n	80019b0 <HAL_RCC_OscConfig+0x434>
 8001952:	4b48      	ldr	r3, [pc, #288]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	069b      	lsls	r3, r3, #26
 8001960:	4944      	ldr	r1, [pc, #272]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
 8001966:	e023      	b.n	80019b0 <HAL_RCC_OscConfig+0x434>
 8001968:	4b42      	ldr	r3, [pc, #264]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	493f      	ldr	r1, [pc, #252]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
 800197c:	e018      	b.n	80019b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800197e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a3c      	ldr	r2, [pc, #240]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fa83 	bl	8000e94 <HAL_GetTick>
 800198e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001992:	f7ff fa7f 	bl	8000e94 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e23d      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019a4:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d036      	beq.n	8001a2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d019      	beq.n	80019f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80019c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fa60 	bl	8000e94 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fa5c 	bl	8000e94 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e21a      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ea:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80019ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x45c>
 80019f6:	e018      	b.n	8001a2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80019fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff fa46 	bl	8000e94 <HAL_GetTick>
 8001a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fa42 	bl	8000e94 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e200      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d039      	beq.n	8001aaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0c      	ldr	r2, [pc, #48]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa23 	bl	8000e94 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a52:	f7ff fa1f 	bl	8000e94 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1dd      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x4d6>
 8001a70:	e01b      	b.n	8001aaa <HAL_RCC_OscConfig+0x52e>
 8001a72:	bf00      	nop
 8001a74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a78:	4b9b      	ldr	r3, [pc, #620]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a9a      	ldr	r2, [pc, #616]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fa06 	bl	8000e94 <HAL_GetTick>
 8001a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a8c:	f7ff fa02 	bl	8000e94 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1c0      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a9e:	4b92      	ldr	r3, [pc, #584]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8081 	beq.w	8001bba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cec <HAL_RCC_OscConfig+0x770>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a8b      	ldr	r2, [pc, #556]	@ (8001cec <HAL_RCC_OscConfig+0x770>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f9e6 	bl	8000e94 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7ff f9e2 	bl	8000e94 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1a0      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ade:	4b83      	ldr	r3, [pc, #524]	@ (8001cec <HAL_RCC_OscConfig+0x770>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x584>
 8001af2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001afe:	e02d      	b.n	8001b5c <HAL_RCC_OscConfig+0x5e0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5a6>
 8001b08:	4b77      	ldr	r3, [pc, #476]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0c:	4a76      	ldr	r2, [pc, #472]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b14:	4b74      	ldr	r3, [pc, #464]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b18:	4a73      	ldr	r2, [pc, #460]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b1a:	f023 0304 	bic.w	r3, r3, #4
 8001b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x5e0>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x5c8>
 8001b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b36:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x5e0>
 8001b44:	4b68      	ldr	r3, [pc, #416]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b48:	4a67      	ldr	r2, [pc, #412]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b50:	4b65      	ldr	r3, [pc, #404]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b54:	4a64      	ldr	r2, [pc, #400]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f996 	bl	8000e94 <HAL_GetTick>
 8001b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f992 	bl	8000e94 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e14e      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b82:	4b59      	ldr	r3, [pc, #356]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ee      	beq.n	8001b6c <HAL_RCC_OscConfig+0x5f0>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff f980 	bl	8000e94 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f97c 	bl	8000e94 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e138      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bae:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 812d 	beq.w	8001e1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bc4:	4b48      	ldr	r3, [pc, #288]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bcc:	2b18      	cmp	r3, #24
 8001bce:	f000 80bd 	beq.w	8001d4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	f040 809e 	bne.w	8001d18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bdc:	4b42      	ldr	r3, [pc, #264]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a41      	ldr	r2, [pc, #260]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f954 	bl	8000e94 <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f950 	bl	8000e94 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e10e      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c02:	4b39      	ldr	r3, [pc, #228]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c12:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <HAL_RCC_OscConfig+0x774>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	430a      	orrs	r2, r1
 8001c22:	4931      	ldr	r1, [pc, #196]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	628b      	str	r3, [r1, #40]	@ 0x28
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c36:	3b01      	subs	r3, #1
 8001c38:	025b      	lsls	r3, r3, #9
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c42:	3b01      	subs	r3, #1
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c50:	3b01      	subs	r3, #1
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001c58:	4923      	ldr	r1, [pc, #140]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c6e:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c76:	00d2      	lsls	r2, r2, #3
 8001c78:	491b      	ldr	r1, [pc, #108]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c82:	f023 020c 	bic.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4917      	ldr	r1, [pc, #92]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	f023 0202 	bic.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	4912      	ldr	r1, [pc, #72]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd2:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_RCC_OscConfig+0x76c>)
 8001cd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff f8d9 	bl	8000e94 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ce4:	e011      	b.n	8001d0a <HAL_RCC_OscConfig+0x78e>
 8001ce6:	bf00      	nop
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	58024800 	.word	0x58024800
 8001cf0:	fffffc0c 	.word	0xfffffc0c
 8001cf4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff f8cc 	bl	8000e94 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e08a      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d0a:	4b47      	ldr	r3, [pc, #284]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x77c>
 8001d16:	e082      	b.n	8001e1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d18:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a42      	ldr	r2, [pc, #264]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f8b6 	bl	8000e94 <HAL_GetTick>
 8001d28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff f8b2 	bl	8000e94 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e070      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x7b0>
 8001d4a:	e068      	b.n	8001e1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d4c:	4b36      	ldr	r3, [pc, #216]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d52:	4b35      	ldr	r3, [pc, #212]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d031      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0203 	and.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d12a      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d122      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d11a      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	0a5b      	lsrs	r3, r3, #9
 8001d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d111      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	0c1b      	lsrs	r3, r3, #16
 8001da4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0e1b      	lsrs	r3, r3, #24
 8001db6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e02b      	b.n	8001e20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dcc:	08db      	lsrs	r3, r3, #3
 8001dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d01f      	beq.n	8001e1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de2:	4a11      	ldr	r2, [pc, #68]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dea:	f7ff f853 	bl	8000e94 <HAL_GetTick>
 8001dee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001df0:	bf00      	nop
 8001df2:	f7ff f84f 	bl	8000e94 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d0f9      	beq.n	8001df2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_RCC_OscConfig+0x8b0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e0a:	00d2      	lsls	r2, r2, #3
 8001e0c:	4906      	ldr	r1, [pc, #24]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <HAL_RCC_OscConfig+0x8ac>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3730      	adds	r7, #48	@ 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	ffff0007 	.word	0xffff0007

08001e30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e19c      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b8a      	ldr	r3, [pc, #552]	@ (8002070 <HAL_RCC_ClockConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b87      	ldr	r3, [pc, #540]	@ (8002070 <HAL_RCC_ClockConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 020f 	bic.w	r2, r3, #15
 8001e5a:	4985      	ldr	r1, [pc, #532]	@ (8002070 <HAL_RCC_ClockConfig+0x240>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b83      	ldr	r3, [pc, #524]	@ (8002070 <HAL_RCC_ClockConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e184      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	4b7b      	ldr	r3, [pc, #492]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d908      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e90:	4b78      	ldr	r3, [pc, #480]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4975      	ldr	r1, [pc, #468]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b70      	ldr	r3, [pc, #448]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d908      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	496a      	ldr	r1, [pc, #424]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	4b64      	ldr	r3, [pc, #400]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d908      	bls.n	8001efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eec:	4b61      	ldr	r3, [pc, #388]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	495e      	ldr	r1, [pc, #376]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	4b59      	ldr	r3, [pc, #356]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d908      	bls.n	8001f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f1a:	4b56      	ldr	r3, [pc, #344]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4953      	ldr	r1, [pc, #332]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d908      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b4a      	ldr	r3, [pc, #296]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f023 020f 	bic.w	r2, r3, #15
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4947      	ldr	r1, [pc, #284]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d055      	beq.n	8002012 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f66:	4b43      	ldr	r3, [pc, #268]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4940      	ldr	r1, [pc, #256]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f80:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d121      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0f6      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f98:	4b36      	ldr	r3, [pc, #216]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d115      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0ea      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fb0:	4b30      	ldr	r3, [pc, #192]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0de      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0d6      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd0:	4b28      	ldr	r3, [pc, #160]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4925      	ldr	r1, [pc, #148]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe2:	f7fe ff57 	bl	8000e94 <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7fe ff53 	bl	8000e94 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0be      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002000:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	429a      	cmp	r2, r3
 8002010:	d1eb      	bne.n	8001fea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	429a      	cmp	r2, r3
 800202c:	d208      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202e:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f023 020f 	bic.w	r2, r3, #15
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	490e      	ldr	r1, [pc, #56]	@ (8002074 <HAL_RCC_ClockConfig+0x244>)
 800203c:	4313      	orrs	r3, r2
 800203e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_RCC_ClockConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d214      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <HAL_RCC_ClockConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 020f 	bic.w	r2, r3, #15
 8002056:	4906      	ldr	r1, [pc, #24]	@ (8002070 <HAL_RCC_ClockConfig+0x240>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <HAL_RCC_ClockConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e086      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
 8002070:	52002000 	.word	0x52002000
 8002074:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	4b3f      	ldr	r3, [pc, #252]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002090:	429a      	cmp	r2, r3
 8002092:	d208      	bcs.n	80020a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002094:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	4939      	ldr	r1, [pc, #228]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020be:	429a      	cmp	r2, r3
 80020c0:	d208      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020c2:	4b31      	ldr	r3, [pc, #196]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	492e      	ldr	r1, [pc, #184]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d208      	bcs.n	8002102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020f0:	4b25      	ldr	r3, [pc, #148]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4922      	ldr	r1, [pc, #136]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800211a:	429a      	cmp	r2, r3
 800211c:	d208      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800211e:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4917      	ldr	r1, [pc, #92]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 800212c:	4313      	orrs	r3, r2
 800212e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002130:	f000 f834 	bl	800219c <HAL_RCC_GetSysClockFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	4912      	ldr	r1, [pc, #72]	@ (800218c <HAL_RCC_ClockConfig+0x35c>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <HAL_RCC_ClockConfig+0x35c>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <HAL_RCC_ClockConfig+0x360>)
 8002166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002168:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <HAL_RCC_ClockConfig+0x364>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800216e:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <HAL_RCC_ClockConfig+0x368>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fc02 	bl	800097c <HAL_InitTick>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	58024400 	.word	0x58024400
 800218c:	0800a468 	.word	0x0800a468
 8002190:	24000004 	.word	0x24000004
 8002194:	24000000 	.word	0x24000000
 8002198:	24000008 	.word	0x24000008

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a2:	4bb3      	ldr	r3, [pc, #716]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021aa:	2b18      	cmp	r3, #24
 80021ac:	f200 8155 	bhi.w	800245a <HAL_RCC_GetSysClockFreq+0x2be>
 80021b0:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	0800221d 	.word	0x0800221d
 80021bc:	0800245b 	.word	0x0800245b
 80021c0:	0800245b 	.word	0x0800245b
 80021c4:	0800245b 	.word	0x0800245b
 80021c8:	0800245b 	.word	0x0800245b
 80021cc:	0800245b 	.word	0x0800245b
 80021d0:	0800245b 	.word	0x0800245b
 80021d4:	0800245b 	.word	0x0800245b
 80021d8:	08002243 	.word	0x08002243
 80021dc:	0800245b 	.word	0x0800245b
 80021e0:	0800245b 	.word	0x0800245b
 80021e4:	0800245b 	.word	0x0800245b
 80021e8:	0800245b 	.word	0x0800245b
 80021ec:	0800245b 	.word	0x0800245b
 80021f0:	0800245b 	.word	0x0800245b
 80021f4:	0800245b 	.word	0x0800245b
 80021f8:	08002249 	.word	0x08002249
 80021fc:	0800245b 	.word	0x0800245b
 8002200:	0800245b 	.word	0x0800245b
 8002204:	0800245b 	.word	0x0800245b
 8002208:	0800245b 	.word	0x0800245b
 800220c:	0800245b 	.word	0x0800245b
 8002210:	0800245b 	.word	0x0800245b
 8002214:	0800245b 	.word	0x0800245b
 8002218:	0800224f 	.word	0x0800224f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800221c:	4b94      	ldr	r3, [pc, #592]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d009      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002228:	4b91      	ldr	r3, [pc, #580]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	4a90      	ldr	r2, [pc, #576]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800223a:	e111      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800223c:	4b8d      	ldr	r3, [pc, #564]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800223e:	61bb      	str	r3, [r7, #24]
      break;
 8002240:	e10e      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002242:	4b8d      	ldr	r3, [pc, #564]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002244:	61bb      	str	r3, [r7, #24]
      break;
 8002246:	e10b      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002248:	4b8c      	ldr	r3, [pc, #560]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800224a:	61bb      	str	r3, [r7, #24]
      break;
 800224c:	e108      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800224e:	4b88      	ldr	r3, [pc, #544]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002258:	4b85      	ldr	r3, [pc, #532]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002264:	4b82      	ldr	r3, [pc, #520]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800226e:	4b80      	ldr	r3, [pc, #512]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80e1 	beq.w	8002454 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b02      	cmp	r3, #2
 8002296:	f000 8083 	beq.w	80023a0 <HAL_RCC_GetSysClockFreq+0x204>
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b02      	cmp	r3, #2
 800229e:	f200 80a1 	bhi.w	80023e4 <HAL_RCC_GetSysClockFreq+0x248>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x114>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d056      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x1c0>
 80022ae:	e099      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d02d      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	08db      	lsrs	r3, r3, #3
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	4a6b      	ldr	r2, [pc, #428]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022e6:	4b62      	ldr	r3, [pc, #392]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800230a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800230e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002316:	e087      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002322:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002484 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800232a:	4b51      	ldr	r3, [pc, #324]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800233a:	ed97 6a02 	vldr	s12, [r7, #8]
 800233e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800234a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800234e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800235a:	e065      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002366:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002488 <HAL_RCC_GetSysClockFreq+0x2ec>
 800236a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800236e:	4b40      	ldr	r3, [pc, #256]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800237e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002382:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800238a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800238e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800239e:	e043      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800248c <HAL_RCC_GetSysClockFreq+0x2f0>
 80023ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023e2:	e021      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002488 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002406:	ed97 6a02 	vldr	s12, [r7, #8]
 800240a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800240e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800241a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	0a5b      	lsrs	r3, r3, #9
 800242e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002432:	3301      	adds	r3, #1
 8002434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002440:	edd7 6a07 	vldr	s13, [r7, #28]
 8002444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002452:	e005      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
      break;
 8002458:	e002      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800245a:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800245c:	61bb      	str	r3, [r7, #24]
      break;
 800245e:	bf00      	nop
  }

  return sysclockfreq;
 8002460:	69bb      	ldr	r3, [r7, #24]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	58024400 	.word	0x58024400
 8002474:	03d09000 	.word	0x03d09000
 8002478:	003d0900 	.word	0x003d0900
 800247c:	017d7840 	.word	0x017d7840
 8002480:	46000000 	.word	0x46000000
 8002484:	4c742400 	.word	0x4c742400
 8002488:	4a742400 	.word	0x4a742400
 800248c:	4bbebc20 	.word	0x4bbebc20

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002496:	f7ff fe81 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800249a:	4602      	mov	r2, r0
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	490f      	ldr	r1, [pc, #60]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80024a8:	5ccb      	ldrb	r3, [r1, r3]
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024b4:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a07      	ldr	r2, [pc, #28]	@ (80024e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80024cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024ce:	4a07      	ldr	r2, [pc, #28]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58024400 	.word	0x58024400
 80024e4:	0800a468 	.word	0x0800a468
 80024e8:	24000004 	.word	0x24000004
 80024ec:	24000000 	.word	0x24000000

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80024f4:	f7ff ffcc 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4904      	ldr	r1, [pc, #16]	@ (8002518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	58024400 	.word	0x58024400
 8002518:	0800a468 	.word	0x0800a468

0800251c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	223f      	movs	r2, #63	@ 0x3f
 800252a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_RCC_GetClockConfig+0x7c>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f003 0207 	and.w	r2, r3, #7
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <HAL_RCC_GetClockConfig+0x7c>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002544:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <HAL_RCC_GetClockConfig+0x7c>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_RCC_GetClockConfig+0x7c>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800255c:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_RCC_GetClockConfig+0x7c>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <HAL_RCC_GetClockConfig+0x7c>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002574:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <HAL_RCC_GetClockConfig+0x7c>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_RCC_GetClockConfig+0x80>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 020f 	and.w	r2, r3, #15
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	58024400 	.word	0x58024400
 800259c:	52002000 	.word	0x52002000

080025a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b0ca      	sub	sp, #296	@ 0x128
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025c4:	2500      	movs	r5, #0
 80025c6:	ea54 0305 	orrs.w	r3, r4, r5
 80025ca:	d049      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80025cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025d6:	d02f      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80025d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025dc:	d828      	bhi.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025e2:	d01a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025e8:	d822      	bhi.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025f2:	d007      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025f4:	e01c      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f6:	4bb8      	ldr	r3, [pc, #736]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	4ab7      	ldr	r2, [pc, #732]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002602:	e01a      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002608:	3308      	adds	r3, #8
 800260a:	2102      	movs	r1, #2
 800260c:	4618      	mov	r0, r3
 800260e:	f001 f9d1 	bl	80039b4 <RCCEx_PLL2_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002618:	e00f      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800261a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800261e:	3328      	adds	r3, #40	@ 0x28
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fa78 	bl	8003b18 <RCCEx_PLL3_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800262e:	e004      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002636:	e000      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800263a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10a      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002642:	4ba5      	ldr	r3, [pc, #660]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002646:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800264a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800264e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002650:	4aa1      	ldr	r2, [pc, #644]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002652:	430b      	orrs	r3, r1
 8002654:	6513      	str	r3, [r2, #80]	@ 0x50
 8002656:	e003      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800265c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800266c:	f04f 0900 	mov.w	r9, #0
 8002670:	ea58 0309 	orrs.w	r3, r8, r9
 8002674:	d047      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	2b04      	cmp	r3, #4
 800267e:	d82a      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002680:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	0800269d 	.word	0x0800269d
 800268c:	080026ab 	.word	0x080026ab
 8002690:	080026c1 	.word	0x080026c1
 8002694:	080026df 	.word	0x080026df
 8002698:	080026df 	.word	0x080026df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800269c:	4b8e      	ldr	r3, [pc, #568]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	4a8d      	ldr	r2, [pc, #564]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026a8:	e01a      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ae:	3308      	adds	r3, #8
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f97e 	bl	80039b4 <RCCEx_PLL2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026be:	e00f      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026c4:	3328      	adds	r3, #40	@ 0x28
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fa25 	bl	8003b18 <RCCEx_PLL3_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026d4:	e004      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026dc:	e000      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80026de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e8:	4b7b      	ldr	r3, [pc, #492]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ec:	f023 0107 	bic.w	r1, r3, #7
 80026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	4a78      	ldr	r2, [pc, #480]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002712:	f04f 0b00 	mov.w	fp, #0
 8002716:	ea5a 030b 	orrs.w	r3, sl, fp
 800271a:	d04c      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800271c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002726:	d030      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800272c:	d829      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800272e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002730:	d02d      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002732:	2bc0      	cmp	r3, #192	@ 0xc0
 8002734:	d825      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002736:	2b80      	cmp	r3, #128	@ 0x80
 8002738:	d018      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800273a:	2b80      	cmp	r3, #128	@ 0x80
 800273c:	d821      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002742:	2b40      	cmp	r3, #64	@ 0x40
 8002744:	d007      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002746:	e01c      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002748:	4b63      	ldr	r3, [pc, #396]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	4a62      	ldr	r2, [pc, #392]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002754:	e01c      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275a:	3308      	adds	r3, #8
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f001 f928 	bl	80039b4 <RCCEx_PLL2_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800276a:	e011      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002770:	3328      	adds	r3, #40	@ 0x28
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f001 f9cf 	bl	8003b18 <RCCEx_PLL3_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002788:	e002      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002798:	4b4f      	ldr	r3, [pc, #316]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800279a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80027a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	4a4c      	ldr	r2, [pc, #304]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80027ac:	e003      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80027c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80027d0:	460b      	mov	r3, r1
 80027d2:	4313      	orrs	r3, r2
 80027d4:	d053      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80027d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027e2:	d035      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80027e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027e8:	d82e      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027ee:	d031      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80027f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027f4:	d828      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fa:	d01a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002800:	d822      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800280a:	d007      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800280c:	e01c      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800280e:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	4a31      	ldr	r2, [pc, #196]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800281a:	e01c      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800281c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002820:	3308      	adds	r3, #8
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f001 f8c5 	bl	80039b4 <RCCEx_PLL2_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002830:	e011      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002836:	3328      	adds	r3, #40	@ 0x28
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f001 f96c 	bl	8003b18 <RCCEx_PLL3_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002846:	e006      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800284e:	e002      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800285e:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800286e:	4a1a      	ldr	r2, [pc, #104]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002870:	430b      	orrs	r3, r1
 8002872:	6593      	str	r3, [r2, #88]	@ 0x58
 8002874:	e003      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800287a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800287e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800288a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002894:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002898:	460b      	mov	r3, r1
 800289a:	4313      	orrs	r3, r2
 800289c:	d056      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028aa:	d038      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80028ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028b0:	d831      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028b6:	d034      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80028b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028bc:	d82b      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028c2:	d01d      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028c8:	d825      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80028ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80028d4:	e01f      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028d6:	bf00      	nop
 80028d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028dc:	4ba2      	ldr	r3, [pc, #648]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	4aa1      	ldr	r2, [pc, #644]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028e8:	e01c      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ee:	3308      	adds	r3, #8
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 f85e 	bl	80039b4 <RCCEx_PLL2_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80028fe:	e011      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002904:	3328      	adds	r3, #40	@ 0x28
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f001 f905 	bl	8003b18 <RCCEx_PLL3_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002914:	e006      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800291c:	e002      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800291e:	bf00      	nop
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800292c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800293c:	4a8a      	ldr	r2, [pc, #552]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800293e:	430b      	orrs	r3, r1
 8002940:	6593      	str	r3, [r2, #88]	@ 0x58
 8002942:	e003      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800294c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002962:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002966:	460b      	mov	r3, r1
 8002968:	4313      	orrs	r3, r2
 800296a:	d03a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800296c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	2b30      	cmp	r3, #48	@ 0x30
 8002974:	d01f      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002976:	2b30      	cmp	r3, #48	@ 0x30
 8002978:	d819      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800297a:	2b20      	cmp	r3, #32
 800297c:	d00c      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800297e:	2b20      	cmp	r3, #32
 8002980:	d815      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d019      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002986:	2b10      	cmp	r3, #16
 8002988:	d111      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298a:	4b77      	ldr	r3, [pc, #476]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298e:	4a76      	ldr	r2, [pc, #472]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002996:	e011      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299c:	3308      	adds	r3, #8
 800299e:	2102      	movs	r1, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 f807 	bl	80039b4 <RCCEx_PLL2_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029b4:	e002      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029c4:	4b68      	ldr	r3, [pc, #416]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80029cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d2:	4a65      	ldr	r2, [pc, #404]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d8:	e003      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80029ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80029f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4313      	orrs	r3, r2
 8002a00:	d051      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a0c:	d035      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a12:	d82e      	bhi.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a18:	d031      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a1e:	d828      	bhi.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a24:	d01a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2a:	d822      	bhi.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a34:	d007      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a36:	e01c      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a38:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a44:	e01c      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 ffb0 	bl	80039b4 <RCCEx_PLL2_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a5a:	e011      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a60:	3328      	adds	r3, #40	@ 0x28
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f857 	bl	8003b18 <RCCEx_PLL3_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a88:	4b37      	ldr	r3, [pc, #220]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a96:	4a34      	ldr	r2, [pc, #208]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a9c:	e003      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002abc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	d056      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad0:	d033      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ad2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad6:	d82c      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002adc:	d02f      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002ade:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ae2:	d826      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ae8:	d02b      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002aee:	d820      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002af4:	d012      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002afa:	d81a      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d022      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d115      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 ff50 	bl	80039b4 <RCCEx_PLL2_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b1a:	e015      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b20:	3328      	adds	r3, #40	@ 0x28
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fff7 	bl	8003b18 <RCCEx_PLL3_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b30:	e00a      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b38:	e006      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b3a:	bf00      	nop
 8002b3c:	e004      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b3e:	bf00      	nop
 8002b40:	e002      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b5e:	4a02      	ldr	r2, [pc, #8]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b64:	e006      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b66:	bf00      	nop
 8002b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4313      	orrs	r3, r2
 8002b92:	d055      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba0:	d033      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba6:	d82c      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bac:	d02f      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb2:	d826      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bb8:	d02b      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bbe:	d820      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bc4:	d012      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bca:	d81a      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d022      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bd4:	d115      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bda:	3308      	adds	r3, #8
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fee8 	bl	80039b4 <RCCEx_PLL2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bea:	e015      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf0:	3328      	adds	r3, #40	@ 0x28
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 ff8f 	bl	8003b18 <RCCEx_PLL3_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c00:	e00a      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c08:	e006      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c0a:	bf00      	nop
 8002c0c:	e004      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c0e:	bf00      	nop
 8002c10:	e002      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c12:	bf00      	nop
 8002c14:	e000      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c20:	4ba3      	ldr	r3, [pc, #652]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c30:	4a9f      	ldr	r2, [pc, #636]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c32:	430b      	orrs	r3, r1
 8002c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c36:	e003      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	d037      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c6a:	d00e      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c70:	d816      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	4a8b      	ldr	r2, [pc, #556]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c88:	e00f      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8e:	3308      	adds	r3, #8
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fe8e 	bl	80039b4 <RCCEx_PLL2_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c9e:	e004      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ca6:	e000      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a7b      	ldr	r2, [pc, #492]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cc6:	e003      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002ce6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4313      	orrs	r3, r2
 8002cee:	d039      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d81c      	bhi.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d3d 	.word	0x08002d3d
 8002d04:	08002d11 	.word	0x08002d11
 8002d08:	08002d1f 	.word	0x08002d1f
 8002d0c:	08002d3d 	.word	0x08002d3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d10:	4b67      	ldr	r3, [pc, #412]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	4a66      	ldr	r2, [pc, #408]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d1c:	e00f      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d22:	3308      	adds	r3, #8
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fe44 	bl	80039b4 <RCCEx_PLL2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d32:	e004      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d3a:	e000      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d46:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4a:	f023 0103 	bic.w	r1, r3, #3
 8002d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d54:	4a56      	ldr	r2, [pc, #344]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d56:	430b      	orrs	r3, r1
 8002d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d5a:	e003      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f000 809f 	beq.w	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d86:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d92:	f7fe f87f 	bl	8000e94 <HAL_GetTick>
 8002d96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9c:	f7fe f87a 	bl	8000e94 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	@ 0x64
 8002daa:	d903      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db4:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ed      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d179      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002dc8:	4b39      	ldr	r3, [pc, #228]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002dd4:	4053      	eors	r3, r2
 8002dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d015      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dde:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dee:	4a30      	ldr	r2, [pc, #192]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002df6:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e02:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e16:	d118      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe f83c 	bl	8000e94 <HAL_GetTick>
 8002e1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e20:	e00d      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe f837 	bl	8000e94 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d903      	bls.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002e3c:	e005      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0eb      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d129      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e62:	d10e      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e64:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e74:	091a      	lsrs	r2, r3, #4
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6113      	str	r3, [r2, #16]
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002e82:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e8c:	6113      	str	r3, [r2, #16]
 8002e8e:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea4:	e00e      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002eae:	e009      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58024800 	.word	0x58024800
 8002eb8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f002 0301 	and.w	r3, r2, #1
 8002ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f000 8089 	beq.w	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eec:	2b28      	cmp	r3, #40	@ 0x28
 8002eee:	d86b      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002fd1 	.word	0x08002fd1
 8002efc:	08002fc9 	.word	0x08002fc9
 8002f00:	08002fc9 	.word	0x08002fc9
 8002f04:	08002fc9 	.word	0x08002fc9
 8002f08:	08002fc9 	.word	0x08002fc9
 8002f0c:	08002fc9 	.word	0x08002fc9
 8002f10:	08002fc9 	.word	0x08002fc9
 8002f14:	08002fc9 	.word	0x08002fc9
 8002f18:	08002f9d 	.word	0x08002f9d
 8002f1c:	08002fc9 	.word	0x08002fc9
 8002f20:	08002fc9 	.word	0x08002fc9
 8002f24:	08002fc9 	.word	0x08002fc9
 8002f28:	08002fc9 	.word	0x08002fc9
 8002f2c:	08002fc9 	.word	0x08002fc9
 8002f30:	08002fc9 	.word	0x08002fc9
 8002f34:	08002fc9 	.word	0x08002fc9
 8002f38:	08002fb3 	.word	0x08002fb3
 8002f3c:	08002fc9 	.word	0x08002fc9
 8002f40:	08002fc9 	.word	0x08002fc9
 8002f44:	08002fc9 	.word	0x08002fc9
 8002f48:	08002fc9 	.word	0x08002fc9
 8002f4c:	08002fc9 	.word	0x08002fc9
 8002f50:	08002fc9 	.word	0x08002fc9
 8002f54:	08002fc9 	.word	0x08002fc9
 8002f58:	08002fd1 	.word	0x08002fd1
 8002f5c:	08002fc9 	.word	0x08002fc9
 8002f60:	08002fc9 	.word	0x08002fc9
 8002f64:	08002fc9 	.word	0x08002fc9
 8002f68:	08002fc9 	.word	0x08002fc9
 8002f6c:	08002fc9 	.word	0x08002fc9
 8002f70:	08002fc9 	.word	0x08002fc9
 8002f74:	08002fc9 	.word	0x08002fc9
 8002f78:	08002fd1 	.word	0x08002fd1
 8002f7c:	08002fc9 	.word	0x08002fc9
 8002f80:	08002fc9 	.word	0x08002fc9
 8002f84:	08002fc9 	.word	0x08002fc9
 8002f88:	08002fc9 	.word	0x08002fc9
 8002f8c:	08002fc9 	.word	0x08002fc9
 8002f90:	08002fc9 	.word	0x08002fc9
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	08002fd1 	.word	0x08002fd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fd05 	bl	80039b4 <RCCEx_PLL2_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fb0:	e00f      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb6:	3328      	adds	r3, #40	@ 0x28
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fdac 	bl	8003b18 <RCCEx_PLL3_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fce:	e000      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fda:	4bbf      	ldr	r3, [pc, #764]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe8:	4abb      	ldr	r2, [pc, #748]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fea:	430b      	orrs	r3, r1
 8002fec:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fee:	e003      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f002 0302 	and.w	r3, r2, #2
 8003004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800300e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003012:	460b      	mov	r3, r1
 8003014:	4313      	orrs	r3, r2
 8003016:	d041      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800301e:	2b05      	cmp	r3, #5
 8003020:	d824      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003022:	a201      	add	r2, pc, #4	@ (adr r2, 8003028 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	08003075 	.word	0x08003075
 800302c:	08003041 	.word	0x08003041
 8003030:	08003057 	.word	0x08003057
 8003034:	08003075 	.word	0x08003075
 8003038:	08003075 	.word	0x08003075
 800303c:	08003075 	.word	0x08003075
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003044:	3308      	adds	r3, #8
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fcb3 	bl	80039b4 <RCCEx_PLL2_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003054:	e00f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	3328      	adds	r3, #40	@ 0x28
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd5a 	bl	8003b18 <RCCEx_PLL3_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800306a:	e004      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800307e:	4b96      	ldr	r3, [pc, #600]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	f023 0107 	bic.w	r1, r3, #7
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800308c:	4a92      	ldr	r2, [pc, #584]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800308e:	430b      	orrs	r3, r1
 8003090:	6553      	str	r3, [r2, #84]	@ 0x54
 8003092:	e003      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f002 0304 	and.w	r3, r2, #4
 80030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4313      	orrs	r3, r2
 80030ba:	d044      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d825      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80030c8:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	0800311d 	.word	0x0800311d
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	080030ff 	.word	0x080030ff
 80030dc:	0800311d 	.word	0x0800311d
 80030e0:	0800311d 	.word	0x0800311d
 80030e4:	0800311d 	.word	0x0800311d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ec:	3308      	adds	r3, #8
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fc5f 	bl	80039b4 <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030fc:	e00f      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003102:	3328      	adds	r3, #40	@ 0x28
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fd06 	bl	8003b18 <RCCEx_PLL3_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003112:	e004      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800311c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003126:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	f023 0107 	bic.w	r1, r3, #7
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003136:	4a68      	ldr	r2, [pc, #416]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003138:	430b      	orrs	r3, r1
 800313a:	6593      	str	r3, [r2, #88]	@ 0x58
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f002 0320 	and.w	r3, r2, #32
 8003152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800315c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003160:	460b      	mov	r3, r1
 8003162:	4313      	orrs	r3, r2
 8003164:	d055      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003172:	d033      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003178:	d82c      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317e:	d02f      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003184:	d826      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003186:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800318a:	d02b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800318c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003190:	d820      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003196:	d012      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800319c:	d81a      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d022      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80031a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a6:	d115      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ac:	3308      	adds	r3, #8
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fbff 	bl	80039b4 <RCCEx_PLL2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031bc:	e015      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c2:	3328      	adds	r3, #40	@ 0x28
 80031c4:	2102      	movs	r1, #2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fca6 	bl	8003b18 <RCCEx_PLL3_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031d2:	e00a      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031da:	e006      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031dc:	bf00      	nop
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f2:	4b39      	ldr	r3, [pc, #228]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	4a35      	ldr	r2, [pc, #212]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003204:	430b      	orrs	r3, r1
 8003206:	6553      	str	r3, [r2, #84]	@ 0x54
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800320e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800322c:	460b      	mov	r3, r1
 800322e:	4313      	orrs	r3, r2
 8003230:	d058      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800323a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800323e:	d033      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003240:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003244:	d82c      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324a:	d02f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003250:	d826      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003252:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003256:	d02b      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800325c:	d820      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800325e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003262:	d012      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003268:	d81a      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d022      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003272:	d115      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003278:	3308      	adds	r3, #8
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fb99 	bl	80039b4 <RCCEx_PLL2_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003288:	e015      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800328a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328e:	3328      	adds	r3, #40	@ 0x28
 8003290:	2102      	movs	r1, #2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fc40 	bl	8003b18 <RCCEx_PLL3_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800329e:	e00a      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032a6:	e006      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032a8:	bf00      	nop
 80032aa:	e004      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032ac:	bf00      	nop
 80032ae:	e002      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10e      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032ce:	4a02      	ldr	r2, [pc, #8]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d4:	e006      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80032d6:	bf00      	nop
 80032d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80032f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80032fe:	460b      	mov	r3, r1
 8003300:	4313      	orrs	r3, r2
 8003302:	d055      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800330c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003310:	d033      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003312:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003316:	d82c      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331c:	d02f      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800331e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003322:	d826      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003324:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003328:	d02b      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800332a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800332e:	d820      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003334:	d012      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800333a:	d81a      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d022      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003344:	d115      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	3308      	adds	r3, #8
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fb30 	bl	80039b4 <RCCEx_PLL2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800335a:	e015      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003360:	3328      	adds	r3, #40	@ 0x28
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fbd7 	bl	8003b18 <RCCEx_PLL3_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003370:	e00a      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800337a:	bf00      	nop
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003390:	4ba1      	ldr	r3, [pc, #644]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033a0:	4a9d      	ldr	r2, [pc, #628]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f002 0308 	and.w	r3, r2, #8
 80033bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d01e      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	3328      	adds	r3, #40	@ 0x28
 80033e4:	2102      	movs	r1, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fb96 	bl	8003b18 <RCCEx_PLL3_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033f8:	4b87      	ldr	r3, [pc, #540]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003408:	4a83      	ldr	r2, [pc, #524]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f002 0310 	and.w	r3, r2, #16
 800341a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003424:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003428:	460b      	mov	r3, r1
 800342a:	4313      	orrs	r3, r2
 800342c:	d01e      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343a:	d10c      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	3328      	adds	r3, #40	@ 0x28
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fb67 	bl	8003b18 <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003456:	4b70      	ldr	r3, [pc, #448]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003462:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003466:	4a6c      	ldr	r2, [pc, #432]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003468:	430b      	orrs	r3, r1
 800346a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d03e      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003498:	d022      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800349a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800349e:	d81b      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80034aa:	e015      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	3308      	adds	r3, #8
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa7d 	bl	80039b4 <RCCEx_PLL2_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c6:	3328      	adds	r3, #40	@ 0x28
 80034c8:	2102      	movs	r1, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fb24 	bl	8003b18 <RCCEx_PLL3_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034fa:	4a47      	ldr	r2, [pc, #284]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003516:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003518:	2300      	movs	r3, #0
 800351a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800351c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d03b      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003532:	d01f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003534:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003538:	d818      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800353e:	d003      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003544:	d007      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003546:	e011      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b33      	ldr	r3, [pc, #204]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	4a32      	ldr	r2, [pc, #200]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003554:	e00f      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	3328      	adds	r3, #40	@ 0x28
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fada 	bl	8003b18 <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357e:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	4a22      	ldr	r2, [pc, #136]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003590:	430b      	orrs	r3, r1
 8003592:	6553      	str	r3, [r2, #84]	@ 0x54
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80035aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ac:	2300      	movs	r3, #0
 80035ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80035b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d034      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d007      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80035ca:	e011      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035cc:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	4a11      	ldr	r2, [pc, #68]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035d8:	e00e      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	3308      	adds	r3, #8
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f9e6 	bl	80039b4 <RCCEx_PLL2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035ee:	e003      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003604:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360e:	4a02      	ldr	r2, [pc, #8]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003610:	430b      	orrs	r3, r1
 8003612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003616:	bf00      	nop
 8003618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003632:	2300      	movs	r3, #0
 8003634:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003636:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800363a:	460b      	mov	r3, r1
 800363c:	4313      	orrs	r3, r2
 800363e:	d00c      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	3328      	adds	r3, #40	@ 0x28
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fa65 	bl	8003b18 <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003666:	663b      	str	r3, [r7, #96]	@ 0x60
 8003668:	2300      	movs	r3, #0
 800366a:	667b      	str	r3, [r7, #100]	@ 0x64
 800366c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d038      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800367e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003682:	d018      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003688:	d811      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800368a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800368e:	d014      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003694:	d80b      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d011      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800369a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800369e:	d106      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4bc3      	ldr	r3, [pc, #780]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4ac2      	ldr	r2, [pc, #776]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b4:	e004      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c8:	4bb9      	ldr	r3, [pc, #740]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d8:	4ab5      	ldr	r2, [pc, #724]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036da:	430b      	orrs	r3, r1
 80036dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036f6:	2300      	movs	r3, #0
 80036f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036fe:	460b      	mov	r3, r1
 8003700:	4313      	orrs	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003704:	4baa      	ldr	r3, [pc, #680]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003712:	4aa7      	ldr	r2, [pc, #668]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003724:	653b      	str	r3, [r7, #80]	@ 0x50
 8003726:	2300      	movs	r3, #0
 8003728:	657b      	str	r3, [r7, #84]	@ 0x54
 800372a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800372e:	460b      	mov	r3, r1
 8003730:	4313      	orrs	r3, r2
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003734:	4b9e      	ldr	r3, [pc, #632]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003740:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003744:	4a9a      	ldr	r2, [pc, #616]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003746:	430b      	orrs	r3, r1
 8003748:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003758:	2300      	movs	r3, #0
 800375a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800375c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003760:	460b      	mov	r3, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003766:	4b92      	ldr	r3, [pc, #584]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003774:	4a8e      	ldr	r2, [pc, #568]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003776:	430b      	orrs	r3, r1
 8003778:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003786:	643b      	str	r3, [r7, #64]	@ 0x40
 8003788:	2300      	movs	r3, #0
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
 800378c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003790:	460b      	mov	r3, r1
 8003792:	4313      	orrs	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003796:	4b86      	ldr	r3, [pc, #536]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	4a85      	ldr	r2, [pc, #532]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800379c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037a0:	6113      	str	r3, [r2, #16]
 80037a2:	4b83      	ldr	r3, [pc, #524]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037a4:	6919      	ldr	r1, [r3, #16]
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037ae:	4a80      	ldr	r2, [pc, #512]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037c2:	2300      	movs	r3, #0
 80037c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80037ca:	460b      	mov	r3, r1
 80037cc:	4313      	orrs	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037d0:	4b77      	ldr	r3, [pc, #476]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037de:	4a74      	ldr	r2, [pc, #464]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037e0:	430b      	orrs	r3, r1
 80037e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037f2:	2300      	movs	r3, #0
 80037f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037fa:	460b      	mov	r3, r1
 80037fc:	4313      	orrs	r3, r2
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003800:	4b6b      	ldr	r3, [pc, #428]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003804:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003810:	4a67      	ldr	r2, [pc, #412]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003812:	430b      	orrs	r3, r1
 8003814:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	2100      	movs	r1, #0
 8003820:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003828:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d011      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	3308      	adds	r3, #8
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f8ba 	bl	80039b4 <RCCEx_PLL2_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	2100      	movs	r1, #0
 8003860:	6239      	str	r1, [r7, #32]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
 8003868:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d011      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	3308      	adds	r3, #8
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f89a 	bl	80039b4 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	2100      	movs	r1, #0
 80038a0:	61b9      	str	r1, [r7, #24]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038ac:	460b      	mov	r3, r1
 80038ae:	4313      	orrs	r3, r2
 80038b0:	d011      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b6:	3308      	adds	r3, #8
 80038b8:	2102      	movs	r1, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f87a 	bl	80039b4 <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	2100      	movs	r1, #0
 80038e0:	6139      	str	r1, [r7, #16]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d011      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	3328      	adds	r3, #40	@ 0x28
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f90c 	bl	8003b18 <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	2100      	movs	r1, #0
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800392c:	460b      	mov	r3, r1
 800392e:	4313      	orrs	r3, r2
 8003930:	d011      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	3328      	adds	r3, #40	@ 0x28
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f8ec 	bl	8003b18 <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	2100      	movs	r1, #0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	e9d7 1200 	ldrd	r1, r2, [r7]
 800396c:	460b      	mov	r3, r1
 800396e:	4313      	orrs	r3, r2
 8003970:	d011      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	3328      	adds	r3, #40	@ 0x28
 8003978:	2102      	movs	r1, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f8cc 	bl	8003b18 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003996:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80039aa:	46bd      	mov	sp, r7
 80039ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b0:	58024400 	.word	0x58024400

080039b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039c2:	4b53      	ldr	r3, [pc, #332]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d101      	bne.n	80039d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e099      	b.n	8003b06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80039d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 80039d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039de:	f7fd fa59 	bl	8000e94 <HAL_GetTick>
 80039e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039e4:	e008      	b.n	80039f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80039e6:	f7fd fa55 	bl	8000e94 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e086      	b.n	8003b06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039f8:	4b45      	ldr	r3, [pc, #276]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a04:	4b42      	ldr	r3, [pc, #264]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	031b      	lsls	r3, r3, #12
 8003a12:	493f      	ldr	r1, [pc, #252]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	025b      	lsls	r3, r3, #9
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a48:	4931      	ldr	r1, [pc, #196]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a4e:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	492d      	ldr	r1, [pc, #180]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a60:	4b2b      	ldr	r3, [pc, #172]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	f023 0220 	bic.w	r2, r3, #32
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	4928      	ldr	r1, [pc, #160]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a72:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	4a26      	ldr	r2, [pc, #152]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a78:	f023 0310 	bic.w	r3, r3, #16
 8003a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a82:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <RCCEx_PLL2_Config+0x160>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	69d2      	ldr	r2, [r2, #28]
 8003a8a:	00d2      	lsls	r2, r2, #3
 8003a8c:	4920      	ldr	r1, [pc, #128]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a92:	4b1f      	ldr	r3, [pc, #124]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	4a1e      	ldr	r2, [pc, #120]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003a98:	f043 0310 	orr.w	r3, r3, #16
 8003a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	4a19      	ldr	r2, [pc, #100]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003aaa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003aae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ab0:	e00f      	b.n	8003ad2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	4a14      	ldr	r2, [pc, #80]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ac4:	e005      	b.n	8003ad2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ac6:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aca:	4a11      	ldr	r2, [pc, #68]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003acc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003ad8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ade:	f7fd f9d9 	bl	8000e94 <HAL_GetTick>
 8003ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ae4:	e008      	b.n	8003af8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ae6:	f7fd f9d5 	bl	8000e94 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e006      	b.n	8003b06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <RCCEx_PLL2_Config+0x15c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	58024400 	.word	0x58024400
 8003b14:	ffff0007 	.word	0xffff0007

08003b18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b26:	4b53      	ldr	r3, [pc, #332]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d101      	bne.n	8003b36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e099      	b.n	8003c6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b36:	4b4f      	ldr	r3, [pc, #316]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b42:	f7fd f9a7 	bl	8000e94 <HAL_GetTick>
 8003b46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003b4a:	f7fd f9a3 	bl	8000e94 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e086      	b.n	8003c6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b5c:	4b45      	ldr	r3, [pc, #276]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b68:	4b42      	ldr	r3, [pc, #264]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	051b      	lsls	r3, r3, #20
 8003b76:	493f      	ldr	r1, [pc, #252]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	025b      	lsls	r3, r3, #9
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	041b      	lsls	r3, r3, #16
 8003b9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003bac:	4931      	ldr	r1, [pc, #196]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003bb2:	4b30      	ldr	r3, [pc, #192]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	492d      	ldr	r1, [pc, #180]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	4928      	ldr	r1, [pc, #160]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003bd6:	4b27      	ldr	r3, [pc, #156]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	4a26      	ldr	r2, [pc, #152]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003be2:	4b24      	ldr	r3, [pc, #144]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003be6:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <RCCEx_PLL3_Config+0x160>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	69d2      	ldr	r2, [r2, #28]
 8003bee:	00d2      	lsls	r2, r2, #3
 8003bf0:	4920      	ldr	r1, [pc, #128]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c08:	4b1a      	ldr	r3, [pc, #104]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	4a19      	ldr	r2, [pc, #100]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003c14:	e00f      	b.n	8003c36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d106      	bne.n	8003c2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c1c:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	4a14      	ldr	r2, [pc, #80]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003c28:	e005      	b.n	8003c36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c2a:	4b12      	ldr	r3, [pc, #72]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	4a11      	ldr	r2, [pc, #68]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c36:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c42:	f7fd f927 	bl	8000e94 <HAL_GetTick>
 8003c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c48:	e008      	b.n	8003c5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c4a:	f7fd f923 	bl	8000e94 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e006      	b.n	8003c6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c5c:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <RCCEx_PLL3_Config+0x15c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	58024400 	.word	0x58024400
 8003c78:	ffff0007 	.word	0xffff0007

08003c7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d071      	beq.n	8003d72 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fc fe1a 	bl	80008dc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d050      	beq.n	8003d60 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	22ca      	movs	r2, #202	@ 0xca
 8003cc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2253      	movs	r2, #83	@ 0x53
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f924 	bl	8003f1c <RTC_EnterInitMode>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d124      	bne.n	8003d28 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6899      	ldr	r1, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b24      	ldr	r3, [pc, #144]	@ (8003d7c <HAL_RTC_Init+0x100>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6899      	ldr	r1, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	0419      	lsls	r1, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f930 	bl	8003f84 <RTC_ExitInitMode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d113      	bne.n	8003d56 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0203 	bic.w	r2, r2, #3
 8003d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	22ff      	movs	r2, #255	@ 0xff
 8003d5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d5e:	e001      	b.n	8003d64 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	ff8fffbf 	.word	0xff8fffbf

08003d80 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <HAL_RTC_GetTime+0xb4>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	0d9b      	lsrs	r3, r3, #22
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11a      	bne.n	8003e2a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f901 	bl	8004000 <RTC_Bcd2ToByte>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f8f8 	bl	8004000 <RTC_Bcd2ToByte>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	789b      	ldrb	r3, [r3, #2]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f8ef 	bl	8004000 <RTC_Bcd2ToByte>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	007f7f7f 	.word	0x007f7f7f

08003e38 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4b21      	ldr	r3, [pc, #132]	@ (8003ed0 <HAL_RTC_GetDate+0x98>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	0b5b      	lsrs	r3, r3, #13
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11a      	bne.n	8003ec4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	78db      	ldrb	r3, [r3, #3]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f8b4 	bl	8004000 <RTC_Bcd2ToByte>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f8ab 	bl	8004000 <RTC_Bcd2ToByte>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	789b      	ldrb	r3, [r3, #2]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f8a2 	bl	8004000 <RTC_Bcd2ToByte>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	00ffff3f 	.word	0x00ffff3f

08003ed4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8003f18 <HAL_RTC_WaitForSynchro+0x44>)
 8003ee2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8003ee4:	f7fc ffd6 	bl	8000e94 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003eea:	e009      	b.n	8003f00 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003eec:	f7fc ffd2 	bl	8000e94 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003efa:	d901      	bls.n	8003f00 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e007      	b.n	8003f10 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ee      	beq.n	8003eec <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	0003ff5f 	.word	0x0003ff5f

08003f1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d120      	bne.n	8003f78 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f40:	f7fc ffa8 	bl	8000e94 <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f46:	e00d      	b.n	8003f64 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f48:	f7fc ffa4 	bl	8000e94 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f56:	d905      	bls.n	8003f64 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2203      	movs	r2, #3
 8003f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <RTC_EnterInitMode+0x5c>
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d1e7      	bne.n	8003f48 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003f90:	4b1a      	ldr	r3, [pc, #104]	@ (8003ffc <RTC_ExitInitMode+0x78>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <RTC_ExitInitMode+0x78>)
 8003f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f9a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003f9c:	4b17      	ldr	r3, [pc, #92]	@ (8003ffc <RTC_ExitInitMode+0x78>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10c      	bne.n	8003fc2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ff93 	bl	8003ed4 <HAL_RTC_WaitForSynchro>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01e      	beq.n	8003ff2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	73fb      	strb	r3, [r7, #15]
 8003fc0:	e017      	b.n	8003ff2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <RTC_ExitInitMode+0x78>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003ffc <RTC_ExitInitMode+0x78>)
 8003fc8:	f023 0320 	bic.w	r3, r3, #32
 8003fcc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ff80 	bl	8003ed4 <HAL_RTC_WaitForSynchro>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003fe6:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <RTC_ExitInitMode+0x78>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <RTC_ExitInitMode+0x78>)
 8003fec:	f043 0320 	orr.w	r3, r3, #32
 8003ff0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	58004000 	.word	0x58004000

08004000 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	0092      	lsls	r2, r2, #2
 8004014:	4413      	add	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	b2da      	uxtb	r2, r3
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	4413      	add	r3, r2
 8004026:	b2db      	uxtb	r3, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e049      	b.n	80040da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f841 	bl	80040e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f000 f9e8 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e054      	b.n	80041ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a26      	ldr	r2, [pc, #152]	@ (80041c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413a:	d01d      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a22      	ldr	r2, [pc, #136]	@ (80041cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a21      	ldr	r2, [pc, #132]	@ (80041d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1f      	ldr	r2, [pc, #124]	@ (80041d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1c      	ldr	r2, [pc, #112]	@ (80041dc <HAL_TIM_Base_Start_IT+0xe4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d115      	bne.n	80041a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_TIM_Base_Start_IT+0xec>)
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d015      	beq.n	80041b6 <HAL_TIM_Base_Start_IT+0xbe>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004190:	d011      	beq.n	80041b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	e008      	b.n	80041b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e000      	b.n	80041b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40000c00 	.word	0x40000c00
 80041d8:	40010400 	.word	0x40010400
 80041dc:	40001800 	.word	0x40001800
 80041e0:	40014000 	.word	0x40014000
 80041e4:	00010007 	.word	0x00010007

080041e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d020      	beq.n	800424c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01b      	beq.n	800424c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0202 	mvn.w	r2, #2
 800421c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8e9 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f8db 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8ec 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d020      	beq.n	8004298 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01b      	beq.n	8004298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0204 	mvn.w	r2, #4
 8004268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f8c3 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f8b5 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f8c6 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d020      	beq.n	80042e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01b      	beq.n	80042e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0208 	mvn.w	r2, #8
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2204      	movs	r2, #4
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f89d 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f88f 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f8a0 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d020      	beq.n	8004330 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01b      	beq.n	8004330 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0210 	mvn.w	r2, #16
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2208      	movs	r2, #8
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f877 	bl	800440a <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f869 	bl	80043f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f87a 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0201 	mvn.w	r2, #1
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fc fa84 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800437a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f90d 	bl	800459c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00c      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f905 	bl	80045b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00c      	beq.n	80043ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f834 	bl	8004432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00c      	beq.n	80043ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f06f 0220 	mvn.w	r2, #32
 80043e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8cd 	bl	8004588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a43      	ldr	r2, [pc, #268]	@ (8004568 <TIM_Base_SetConfig+0x120>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004466:	d00f      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a40      	ldr	r2, [pc, #256]	@ (800456c <TIM_Base_SetConfig+0x124>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00b      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3f      	ldr	r2, [pc, #252]	@ (8004570 <TIM_Base_SetConfig+0x128>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3e      	ldr	r2, [pc, #248]	@ (8004574 <TIM_Base_SetConfig+0x12c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3d      	ldr	r2, [pc, #244]	@ (8004578 <TIM_Base_SetConfig+0x130>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a32      	ldr	r2, [pc, #200]	@ (8004568 <TIM_Base_SetConfig+0x120>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01f      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a8:	d01b      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2f      	ldr	r2, [pc, #188]	@ (800456c <TIM_Base_SetConfig+0x124>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d017      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004570 <TIM_Base_SetConfig+0x128>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004574 <TIM_Base_SetConfig+0x12c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00f      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004578 <TIM_Base_SetConfig+0x130>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2b      	ldr	r2, [pc, #172]	@ (800457c <TIM_Base_SetConfig+0x134>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004580 <TIM_Base_SetConfig+0x138>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_Base_SetConfig+0x9a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a29      	ldr	r2, [pc, #164]	@ (8004584 <TIM_Base_SetConfig+0x13c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a14      	ldr	r2, [pc, #80]	@ (8004568 <TIM_Base_SetConfig+0x120>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00f      	beq.n	800453a <TIM_Base_SetConfig+0xf2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <TIM_Base_SetConfig+0x130>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00b      	beq.n	800453a <TIM_Base_SetConfig+0xf2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a15      	ldr	r2, [pc, #84]	@ (800457c <TIM_Base_SetConfig+0x134>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d007      	beq.n	800453a <TIM_Base_SetConfig+0xf2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <TIM_Base_SetConfig+0x138>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d003      	beq.n	800453a <TIM_Base_SetConfig+0xf2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <TIM_Base_SetConfig+0x13c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d103      	bne.n	8004542 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f043 0204 	orr.w	r2, r3, #4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40010400 	.word	0x40010400
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800

08004588 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <elog_port_init>:
/**
 * EasyLogger port initialize
 *
 * @return result
 */
ElogErrCode elog_port_init(void) {
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
    ElogErrCode result = ELOG_NO_ERR;
 80045ca:	2300      	movs	r3, #0
 80045cc:	71fb      	strb	r3, [r7, #7]

    /* add your code here */
    
    return result;
 80045ce:	79fb      	ldrb	r3, [r7, #7]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <elog_port_output>:
 * output log port interface
 *
 * @param log output of log
 * @param size log size
 */
void elog_port_output(const char *log, size_t size) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
    
    /* add your code here */
    SEGGER_RTT_Write(0, log, size);
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	2000      	movs	r0, #0
 80045ec:	f003 fe5e 	bl	80082ac <SEGGER_RTT_Write>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <elog_port_output_lock>:

/**
 * output lock
 */
void elog_port_output_lock(void) {
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045fc:	b672      	cpsid	i
}
 80045fe:	bf00      	nop
    
    /* add your code here */
    __disable_irq();
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <elog_port_output_unlock>:

/**
 * output unlock
 */
void elog_port_output_unlock(void) {
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800460e:	b662      	cpsie	i
}
 8004610:	bf00      	nop
    
    /* add your code here */
    __enable_irq();
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <elog_port_get_time>:
/**
 * get current time interface
 *
 * @return current time
 */
const char *elog_port_get_time(void) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af02      	add	r7, sp, #8
  RTC_DateTypeDef date_struct;
  RTC_TimeTypeDef time_struct;
  /* add your code here */
  HAL_RTC_GetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8004622:	463b      	mov	r3, r7
 8004624:	2200      	movs	r2, #0
 8004626:	4619      	mov	r1, r3
 8004628:	480c      	ldr	r0, [pc, #48]	@ (800465c <elog_port_get_time+0x40>)
 800462a:	f7ff fba9 	bl	8003d80 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	2200      	movs	r2, #0
 8004634:	4619      	mov	r1, r3
 8004636:	4809      	ldr	r0, [pc, #36]	@ (800465c <elog_port_get_time+0x40>)
 8004638:	f7ff fbfe 	bl	8003e38 <HAL_RTC_GetDate>
  
  sprintf (time_str, "%02d:%02d:%02d", time_struct.Hours, time_struct.Minutes, time_struct.Seconds);
 800463c:	783b      	ldrb	r3, [r7, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	787b      	ldrb	r3, [r7, #1]
 8004642:	4619      	mov	r1, r3
 8004644:	78bb      	ldrb	r3, [r7, #2]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	460b      	mov	r3, r1
 800464a:	4905      	ldr	r1, [pc, #20]	@ (8004660 <elog_port_get_time+0x44>)
 800464c:	4805      	ldr	r0, [pc, #20]	@ (8004664 <elog_port_get_time+0x48>)
 800464e:	f004 fb35 	bl	8008cbc <siprintf>
  
  return time_str;
 8004652:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <elog_port_get_time+0x48>)
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	240000c4 	.word	0x240000c4
 8004660:	0800a058 	.word	0x0800a058
 8004664:	2400013c 	.word	0x2400013c

08004668 <elog_port_get_p_info>:
/**
 * get current process name interface
 *
 * @return current process name
 */
const char *elog_port_get_p_info(void) {
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
    
    /* add your code here */
    return "";
 800466c:	4b02      	ldr	r3, [pc, #8]	@ (8004678 <elog_port_get_p_info+0x10>)
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	0800a068 	.word	0x0800a068

0800467c <elog_port_get_t_info>:
/**
 * get current thread name interface
 *
 * @return current thread name
 */
const char *elog_port_get_t_info(void) {
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
    
    /* add your code here */
    return "";
 8004680:	4b02      	ldr	r3, [pc, #8]	@ (800468c <elog_port_get_t_info+0x10>)
}
 8004682:	4618      	mov	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	0800a068 	.word	0x0800a068

08004690 <elog_init>:
/**
 * EasyLogger initialize.
 *
 * @return result
 */
ElogErrCode elog_init(void) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
    extern ElogErrCode elog_port_init(void);
    extern ElogErrCode elog_async_init(void);

    ElogErrCode result = ELOG_NO_ERR;
 8004696:	2300      	movs	r3, #0
 8004698:	71fb      	strb	r3, [r7, #7]

    if (elog.init_ok == true) {
 800469a:	4b16      	ldr	r3, [pc, #88]	@ (80046f4 <elog_init+0x64>)
 800469c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <elog_init+0x18>
        return result;
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	e020      	b.n	80046ea <elog_init+0x5a>
    }

    /* port initialize */
    result = elog_port_init();
 80046a8:	f7ff ff8c 	bl	80045c4 <elog_port_init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	71fb      	strb	r3, [r7, #7]
    if (result != ELOG_NO_ERR) {
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <elog_init+0x2a>
        return result;
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	e017      	b.n	80046ea <elog_init+0x5a>
        return result;
    }
#endif

    /* enable the output lock */
    elog_output_lock_enabled(true);
 80046ba:	2001      	movs	r0, #1
 80046bc:	f000 fd64 	bl	8005188 <elog_output_lock_enabled>
    /* output locked status initialize */
    elog.output_is_locked_before_enable = false;
 80046c0:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <elog_init+0x64>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 20f3 	strb.w	r2, [r3, #243]	@ 0xf3
    elog.output_is_locked_before_disable = false;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <elog_init+0x64>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4

#ifdef ELOG_COLOR_ENABLE
    /* enable text color by default */
    elog_set_text_color_enabled(true);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f000 f87f 	bl	80047d4 <elog_set_text_color_enabled>
#endif

    /* set level is ELOG_LVL_VERBOSE */
    elog_set_filter_lvl(ELOG_LVL_VERBOSE);
 80046d6:	2005      	movs	r0, #5
 80046d8:	f000 f900 	bl	80048dc <elog_set_filter_lvl>

    /* set tag_level to default val */
    elog_set_filter_tag_lvl_default();
 80046dc:	f000 f966 	bl	80049ac <elog_set_filter_tag_lvl_default>

    elog.init_ok = true;
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <elog_init+0x64>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0

    return result;
 80046e8:	79fb      	ldrb	r3, [r7, #7]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	24000150 	.word	0x24000150

080046f8 <elog_start>:


/**
 * EasyLogger start after initialize.
 */
void elog_start(void) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af04      	add	r7, sp, #16
    if (!elog.init_ok) {
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <elog_start+0x3c>)
 8004700:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8004704:	f083 0301 	eor.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <elog_start+0x36>
        return ;
    }
    
    /* enable output */
    elog_set_output_enabled(true);
 800470e:	2001      	movs	r0, #1
 8004710:	f000 f81c 	bl	800474c <elog_set_output_enabled>
#elif defined(ELOG_BUF_OUTPUT_ENABLE)
    elog_buf_enabled(true);
#endif

    /* show version */
    log_i("EasyLogger V%s is initialize success.", ELOG_SW_VERSION);
 8004714:	4b08      	ldr	r3, [pc, #32]	@ (8004738 <elog_start+0x40>)
 8004716:	9302      	str	r3, [sp, #8]
 8004718:	4b08      	ldr	r3, [pc, #32]	@ (800473c <elog_start+0x44>)
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	23f8      	movs	r3, #248	@ 0xf8
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <elog_start+0x48>)
 8004722:	4a08      	ldr	r2, [pc, #32]	@ (8004744 <elog_start+0x4c>)
 8004724:	4908      	ldr	r1, [pc, #32]	@ (8004748 <elog_start+0x50>)
 8004726:	2003      	movs	r0, #3
 8004728:	f000 f9ec 	bl	8004b04 <elog_output>
 800472c:	e000      	b.n	8004730 <elog_start+0x38>
        return ;
 800472e:	bf00      	nop
}
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	24000150 	.word	0x24000150
 8004738:	0800a0f0 	.word	0x0800a0f0
 800473c:	0800a0f8 	.word	0x0800a0f8
 8004740:	0800a478 	.word	0x0800a478
 8004744:	0800a0b4 	.word	0x0800a0b4
 8004748:	0800a0e8 	.word	0x0800a0e8

0800474c <elog_set_output_enabled>:
/**
 * set output enable or disable
 *
 * @param enabled TRUE: enable FALSE: disable
 */
void elog_set_output_enabled(bool enabled) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af06      	add	r7, sp, #24
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
    ELOG_ASSERT((enabled == false) || (enabled == true));
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d024      	beq.n	80047a6 <elog_set_output_enabled+0x5a>
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01e      	beq.n	80047a6 <elog_set_output_enabled+0x5a>
 8004768:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <elog_set_output_enabled+0x6c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d113      	bne.n	8004798 <elog_set_output_enabled+0x4c>
 8004770:	f240 1317 	movw	r3, #279	@ 0x117
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <elog_set_output_enabled+0x70>)
 8004778:	9303      	str	r3, [sp, #12]
 800477a:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <elog_set_output_enabled+0x74>)
 800477c:	9302      	str	r3, [sp, #8]
 800477e:	4b11      	ldr	r3, [pc, #68]	@ (80047c4 <elog_set_output_enabled+0x78>)
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	f240 1317 	movw	r3, #279	@ 0x117
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <elog_set_output_enabled+0x70>)
 800478a:	4a0f      	ldr	r2, [pc, #60]	@ (80047c8 <elog_set_output_enabled+0x7c>)
 800478c:	490f      	ldr	r1, [pc, #60]	@ (80047cc <elog_set_output_enabled+0x80>)
 800478e:	2000      	movs	r0, #0
 8004790:	f000 f9b8 	bl	8004b04 <elog_output>
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <elog_set_output_enabled+0x48>
 8004798:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <elog_set_output_enabled+0x6c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f240 1217 	movw	r2, #279	@ 0x117
 80047a0:	4906      	ldr	r1, [pc, #24]	@ (80047bc <elog_set_output_enabled+0x70>)
 80047a2:	4807      	ldr	r0, [pc, #28]	@ (80047c0 <elog_set_output_enabled+0x74>)
 80047a4:	4798      	blx	r3

    elog.output_enabled = enabled;
 80047a6:	4a0a      	ldr	r2, [pc, #40]	@ (80047d0 <elog_set_output_enabled+0x84>)
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	f882 30f1 	strb.w	r3, [r2, #241]	@ 0xf1
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	24000648 	.word	0x24000648
 80047bc:	0800a484 	.word	0x0800a484
 80047c0:	0800a148 	.word	0x0800a148
 80047c4:	0800a170 	.word	0x0800a170
 80047c8:	0800a0b4 	.word	0x0800a0b4
 80047cc:	0800a0e8 	.word	0x0800a0e8
 80047d0:	24000150 	.word	0x24000150

080047d4 <elog_set_text_color_enabled>:
/**
 * set log text color enable or disable
 * 
 * @param enabled TRUE: enable FALSE:disable
 */
void elog_set_text_color_enabled(bool enabled) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af06      	add	r7, sp, #24
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
    ELOG_ASSERT((enabled == false) || (enabled == true));
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d024      	beq.n	800482e <elog_set_text_color_enabled+0x5a>
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	f083 0301 	eor.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01e      	beq.n	800482e <elog_set_text_color_enabled+0x5a>
 80047f0:	4b13      	ldr	r3, [pc, #76]	@ (8004840 <elog_set_text_color_enabled+0x6c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d113      	bne.n	8004820 <elog_set_text_color_enabled+0x4c>
 80047f8:	f240 1323 	movw	r3, #291	@ 0x123
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	4b11      	ldr	r3, [pc, #68]	@ (8004844 <elog_set_text_color_enabled+0x70>)
 8004800:	9303      	str	r3, [sp, #12]
 8004802:	4b11      	ldr	r3, [pc, #68]	@ (8004848 <elog_set_text_color_enabled+0x74>)
 8004804:	9302      	str	r3, [sp, #8]
 8004806:	4b11      	ldr	r3, [pc, #68]	@ (800484c <elog_set_text_color_enabled+0x78>)
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	f240 1323 	movw	r3, #291	@ 0x123
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <elog_set_text_color_enabled+0x70>)
 8004812:	4a0f      	ldr	r2, [pc, #60]	@ (8004850 <elog_set_text_color_enabled+0x7c>)
 8004814:	490f      	ldr	r1, [pc, #60]	@ (8004854 <elog_set_text_color_enabled+0x80>)
 8004816:	2000      	movs	r0, #0
 8004818:	f000 f974 	bl	8004b04 <elog_output>
 800481c:	bf00      	nop
 800481e:	e7fd      	b.n	800481c <elog_set_text_color_enabled+0x48>
 8004820:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <elog_set_text_color_enabled+0x6c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f240 1223 	movw	r2, #291	@ 0x123
 8004828:	4906      	ldr	r1, [pc, #24]	@ (8004844 <elog_set_text_color_enabled+0x70>)
 800482a:	4807      	ldr	r0, [pc, #28]	@ (8004848 <elog_set_text_color_enabled+0x74>)
 800482c:	4798      	blx	r3

    elog.text_color_enabled = enabled;
 800482e:	4a0a      	ldr	r2, [pc, #40]	@ (8004858 <elog_set_text_color_enabled+0x84>)
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	f882 30f5 	strb.w	r3, [r2, #245]	@ 0xf5
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	24000648 	.word	0x24000648
 8004844:	0800a49c 	.word	0x0800a49c
 8004848:	0800a148 	.word	0x0800a148
 800484c:	0800a170 	.word	0x0800a170
 8004850:	0800a0b4 	.word	0x0800a0b4
 8004854:	0800a0e8 	.word	0x0800a0e8
 8004858:	24000150 	.word	0x24000150

0800485c <elog_set_fmt>:
 * set log output format. only enable or disable
 *
 * @param level level
 * @param set format set
 */
void elog_set_fmt(uint8_t level, size_t set) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af06      	add	r7, sp, #24
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	71fb      	strb	r3, [r7, #7]
    ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	2b05      	cmp	r3, #5
 800486c:	d91e      	bls.n	80048ac <elog_set_fmt+0x50>
 800486e:	4b14      	ldr	r3, [pc, #80]	@ (80048c0 <elog_set_fmt+0x64>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d113      	bne.n	800489e <elog_set_fmt+0x42>
 8004876:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	4b11      	ldr	r3, [pc, #68]	@ (80048c4 <elog_set_fmt+0x68>)
 800487e:	9303      	str	r3, [sp, #12]
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <elog_set_fmt+0x6c>)
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	4b11      	ldr	r3, [pc, #68]	@ (80048cc <elog_set_fmt+0x70>)
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <elog_set_fmt+0x68>)
 8004890:	4a0f      	ldr	r2, [pc, #60]	@ (80048d0 <elog_set_fmt+0x74>)
 8004892:	4910      	ldr	r1, [pc, #64]	@ (80048d4 <elog_set_fmt+0x78>)
 8004894:	2000      	movs	r0, #0
 8004896:	f000 f935 	bl	8004b04 <elog_output>
 800489a:	bf00      	nop
 800489c:	e7fd      	b.n	800489a <elog_set_fmt+0x3e>
 800489e:	4b08      	ldr	r3, [pc, #32]	@ (80048c0 <elog_set_fmt+0x64>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f44f 72a1 	mov.w	r2, #322	@ 0x142
 80048a6:	4907      	ldr	r1, [pc, #28]	@ (80048c4 <elog_set_fmt+0x68>)
 80048a8:	4807      	ldr	r0, [pc, #28]	@ (80048c8 <elog_set_fmt+0x6c>)
 80048aa:	4798      	blx	r3

    elog.enabled_fmt_set[level] = set;
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	490a      	ldr	r1, [pc, #40]	@ (80048d8 <elog_set_fmt+0x7c>)
 80048b0:	3336      	adds	r3, #54	@ 0x36
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	24000648 	.word	0x24000648
 80048c4:	0800a4b8 	.word	0x0800a4b8
 80048c8:	0800a194 	.word	0x0800a194
 80048cc:	0800a170 	.word	0x0800a170
 80048d0:	0800a0b4 	.word	0x0800a0b4
 80048d4:	0800a0e8 	.word	0x0800a0e8
 80048d8:	24000150 	.word	0x24000150

080048dc <elog_set_filter_lvl>:
/**
 * set log filter's level
 *
 * @param level level
 */
void elog_set_filter_lvl(uint8_t level) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af06      	add	r7, sp, #24
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
    ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	d91e      	bls.n	800492a <elog_set_filter_lvl+0x4e>
 80048ec:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <elog_set_filter_lvl+0x5c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d113      	bne.n	800491c <elog_set_filter_lvl+0x40>
 80048f4:	f44f 73ae 	mov.w	r3, #348	@ 0x15c
 80048f8:	9304      	str	r3, [sp, #16]
 80048fa:	4b10      	ldr	r3, [pc, #64]	@ (800493c <elog_set_filter_lvl+0x60>)
 80048fc:	9303      	str	r3, [sp, #12]
 80048fe:	4b10      	ldr	r3, [pc, #64]	@ (8004940 <elog_set_filter_lvl+0x64>)
 8004900:	9302      	str	r3, [sp, #8]
 8004902:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <elog_set_filter_lvl+0x68>)
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	f44f 73ae 	mov.w	r3, #348	@ 0x15c
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <elog_set_filter_lvl+0x60>)
 800490e:	4a0e      	ldr	r2, [pc, #56]	@ (8004948 <elog_set_filter_lvl+0x6c>)
 8004910:	490e      	ldr	r1, [pc, #56]	@ (800494c <elog_set_filter_lvl+0x70>)
 8004912:	2000      	movs	r0, #0
 8004914:	f000 f8f6 	bl	8004b04 <elog_output>
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <elog_set_filter_lvl+0x3c>
 800491c:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <elog_set_filter_lvl+0x5c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f44f 72ae 	mov.w	r2, #348	@ 0x15c
 8004924:	4905      	ldr	r1, [pc, #20]	@ (800493c <elog_set_filter_lvl+0x60>)
 8004926:	4806      	ldr	r0, [pc, #24]	@ (8004940 <elog_set_filter_lvl+0x64>)
 8004928:	4798      	blx	r3

    elog.filter.level = level;
 800492a:	4a09      	ldr	r2, [pc, #36]	@ (8004950 <elog_set_filter_lvl+0x74>)
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	7013      	strb	r3, [r2, #0]
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	24000648 	.word	0x24000648
 800493c:	0800a4c8 	.word	0x0800a4c8
 8004940:	0800a194 	.word	0x0800a194
 8004944:	0800a170 	.word	0x0800a170
 8004948:	0800a0b4 	.word	0x0800a0b4
 800494c:	0800a0e8 	.word	0x0800a0e8
 8004950:	24000150 	.word	0x24000150

08004954 <elog_output_lock>:
}

/**
 * lock output 
 */
void elog_output_lock(void) {
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
    if (elog.output_lock_enabled) {
 8004958:	4b08      	ldr	r3, [pc, #32]	@ (800497c <elog_output_lock+0x28>)
 800495a:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d006      	beq.n	8004970 <elog_output_lock+0x1c>
        elog_port_output_lock();
 8004962:	f7ff fe49 	bl	80045f8 <elog_port_output_lock>
        elog.output_is_locked_before_disable = true;
 8004966:	4b05      	ldr	r3, [pc, #20]	@ (800497c <elog_output_lock+0x28>)
 8004968:	2201      	movs	r2, #1
 800496a:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
    } else {
        elog.output_is_locked_before_enable = true;
    }
}
 800496e:	e003      	b.n	8004978 <elog_output_lock+0x24>
        elog.output_is_locked_before_enable = true;
 8004970:	4b02      	ldr	r3, [pc, #8]	@ (800497c <elog_output_lock+0x28>)
 8004972:	2201      	movs	r2, #1
 8004974:	f883 20f3 	strb.w	r2, [r3, #243]	@ 0xf3
}
 8004978:	bf00      	nop
 800497a:	bd80      	pop	{r7, pc}
 800497c:	24000150 	.word	0x24000150

08004980 <elog_output_unlock>:

/**
 * unlock output
 */
void elog_output_unlock(void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
    if (elog.output_lock_enabled) {
 8004984:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <elog_output_unlock+0x28>)
 8004986:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <elog_output_unlock+0x1c>
        elog_port_output_unlock();
 800498e:	f7ff fe3c 	bl	800460a <elog_port_output_unlock>
        elog.output_is_locked_before_disable = false;
 8004992:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <elog_output_unlock+0x28>)
 8004994:	2200      	movs	r2, #0
 8004996:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
    } else {
        elog.output_is_locked_before_enable = false;
    }
}
 800499a:	e003      	b.n	80049a4 <elog_output_unlock+0x24>
        elog.output_is_locked_before_enable = false;
 800499c:	4b02      	ldr	r3, [pc, #8]	@ (80049a8 <elog_output_unlock+0x28>)
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 20f3 	strb.w	r2, [r3, #243]	@ 0xf3
}
 80049a4:	bf00      	nop
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	24000150 	.word	0x24000150

080049ac <elog_set_filter_tag_lvl_default>:

/**
 * set log filter's tag level val to default
 */
static void elog_set_filter_tag_lvl_default(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	71fb      	strb	r3, [r7, #7]

    for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
 80049b6:	2300      	movs	r3, #0
 80049b8:	71fb      	strb	r3, [r7, #7]
 80049ba:	e021      	b.n	8004a00 <elog_set_filter_tag_lvl_default+0x54>
        memset(elog.filter.tag_lvl[i].tag, '\0', ELOG_FILTER_TAG_MAX_LEN + 1);
 80049bc:	79fa      	ldrb	r2, [r7, #7]
 80049be:	4613      	mov	r3, r2
 80049c0:	015b      	lsls	r3, r3, #5
 80049c2:	4413      	add	r3, r2
 80049c4:	3330      	adds	r3, #48	@ 0x30
 80049c6:	4a12      	ldr	r2, [pc, #72]	@ (8004a10 <elog_set_filter_tag_lvl_default+0x64>)
 80049c8:	4413      	add	r3, r2
 80049ca:	3302      	adds	r3, #2
 80049cc:	221f      	movs	r2, #31
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f004 fa15 	bl	8008e00 <memset>
        elog.filter.tag_lvl[i].level = ELOG_FILTER_LVL_SILENT;
 80049d6:	79fa      	ldrb	r2, [r7, #7]
 80049d8:	490d      	ldr	r1, [pc, #52]	@ (8004a10 <elog_set_filter_tag_lvl_default+0x64>)
 80049da:	4613      	mov	r3, r2
 80049dc:	015b      	lsls	r3, r3, #5
 80049de:	4413      	add	r3, r2
 80049e0:	440b      	add	r3, r1
 80049e2:	3331      	adds	r3, #49	@ 0x31
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
        elog.filter.tag_lvl[i].tag_use_flag = false;
 80049e8:	79fa      	ldrb	r2, [r7, #7]
 80049ea:	4909      	ldr	r1, [pc, #36]	@ (8004a10 <elog_set_filter_tag_lvl_default+0x64>)
 80049ec:	4613      	mov	r3, r2
 80049ee:	015b      	lsls	r3, r3, #5
 80049f0:	4413      	add	r3, r2
 80049f2:	440b      	add	r3, r1
 80049f4:	3351      	adds	r3, #81	@ 0x51
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
    for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	3301      	adds	r3, #1
 80049fe:	71fb      	strb	r3, [r7, #7]
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d9da      	bls.n	80049bc <elog_set_filter_tag_lvl_default+0x10>
    }
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	24000150 	.word	0x24000150

08004a14 <elog_get_filter_tag_lvl>:
 *
 * @return It will return the lowest level when tag was not found.
 *         Other level will return when tag was found.
 */
uint8_t elog_get_filter_tag_lvl(const char *tag)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08a      	sub	sp, #40	@ 0x28
 8004a18:	af06      	add	r7, sp, #24
 8004a1a:	6078      	str	r0, [r7, #4]
    ELOG_ASSERT(tag != ((void *)0));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d11e      	bne.n	8004a60 <elog_get_filter_tag_lvl+0x4c>
 8004a22:	4b31      	ldr	r3, [pc, #196]	@ (8004ae8 <elog_get_filter_tag_lvl+0xd4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d113      	bne.n	8004a52 <elog_get_filter_tag_lvl+0x3e>
 8004a2a:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	4b2e      	ldr	r3, [pc, #184]	@ (8004aec <elog_get_filter_tag_lvl+0xd8>)
 8004a32:	9303      	str	r3, [sp, #12]
 8004a34:	4b2e      	ldr	r3, [pc, #184]	@ (8004af0 <elog_get_filter_tag_lvl+0xdc>)
 8004a36:	9302      	str	r3, [sp, #8]
 8004a38:	4b2e      	ldr	r3, [pc, #184]	@ (8004af4 <elog_get_filter_tag_lvl+0xe0>)
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	4b2a      	ldr	r3, [pc, #168]	@ (8004aec <elog_get_filter_tag_lvl+0xd8>)
 8004a44:	4a2c      	ldr	r2, [pc, #176]	@ (8004af8 <elog_get_filter_tag_lvl+0xe4>)
 8004a46:	492d      	ldr	r1, [pc, #180]	@ (8004afc <elog_get_filter_tag_lvl+0xe8>)
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f000 f85b 	bl	8004b04 <elog_output>
 8004a4e:	bf00      	nop
 8004a50:	e7fd      	b.n	8004a4e <elog_get_filter_tag_lvl+0x3a>
 8004a52:	4b25      	ldr	r3, [pc, #148]	@ (8004ae8 <elog_get_filter_tag_lvl+0xd4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8004a5a:	4924      	ldr	r1, [pc, #144]	@ (8004aec <elog_get_filter_tag_lvl+0xd8>)
 8004a5c:	4824      	ldr	r0, [pc, #144]	@ (8004af0 <elog_get_filter_tag_lvl+0xdc>)
 8004a5e:	4798      	blx	r3
    uint8_t i = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	73fb      	strb	r3, [r7, #15]
    uint8_t level = ELOG_FILTER_LVL_ALL;
 8004a64:	2305      	movs	r3, #5
 8004a66:	73bb      	strb	r3, [r7, #14]

    if (!elog.init_ok) {
 8004a68:	4b25      	ldr	r3, [pc, #148]	@ (8004b00 <elog_get_filter_tag_lvl+0xec>)
 8004a6a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8004a6e:	f083 0301 	eor.w	r3, r3, #1
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <elog_get_filter_tag_lvl+0x68>
        return level;
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	e031      	b.n	8004ae0 <elog_get_filter_tag_lvl+0xcc>
    }

    elog_output_lock();
 8004a7c:	f7ff ff6a 	bl	8004954 <elog_output_lock>
    /* find the tag in arr */
    for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e026      	b.n	8004ad4 <elog_get_filter_tag_lvl+0xc0>
        if (elog.filter.tag_lvl[i].tag_use_flag == true &&
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	491d      	ldr	r1, [pc, #116]	@ (8004b00 <elog_get_filter_tag_lvl+0xec>)
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	015b      	lsls	r3, r3, #5
 8004a8e:	4413      	add	r3, r2
 8004a90:	440b      	add	r3, r1
 8004a92:	3351      	adds	r3, #81	@ 0x51
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d019      	beq.n	8004ace <elog_get_filter_tag_lvl+0xba>
            !strncmp(tag, elog.filter.tag_lvl[i].tag,ELOG_FILTER_TAG_MAX_LEN)){
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	015b      	lsls	r3, r3, #5
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3330      	adds	r3, #48	@ 0x30
 8004aa4:	4a16      	ldr	r2, [pc, #88]	@ (8004b00 <elog_get_filter_tag_lvl+0xec>)
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	221e      	movs	r2, #30
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f004 f9ae 	bl	8008e10 <strncmp>
 8004ab4:	4603      	mov	r3, r0
        if (elog.filter.tag_lvl[i].tag_use_flag == true &&
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <elog_get_filter_tag_lvl+0xba>
            level = elog.filter.tag_lvl[i].level;
 8004aba:	7bfa      	ldrb	r2, [r7, #15]
 8004abc:	4910      	ldr	r1, [pc, #64]	@ (8004b00 <elog_get_filter_tag_lvl+0xec>)
 8004abe:	4613      	mov	r3, r2
 8004ac0:	015b      	lsls	r3, r3, #5
 8004ac2:	4413      	add	r3, r2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3331      	adds	r3, #49	@ 0x31
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	73bb      	strb	r3, [r7, #14]
            break;
 8004acc:	e005      	b.n	8004ada <elog_get_filter_tag_lvl+0xc6>
    for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d9d5      	bls.n	8004a86 <elog_get_filter_tag_lvl+0x72>
        }
    }
    elog_output_unlock();
 8004ada:	f7ff ff51 	bl	8004980 <elog_output_unlock>

    return level;
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	24000648 	.word	0x24000648
 8004aec:	0800a4dc 	.word	0x0800a4dc
 8004af0:	0800a1b0 	.word	0x0800a1b0
 8004af4:	0800a170 	.word	0x0800a170
 8004af8:	0800a0b4 	.word	0x0800a0b4
 8004afc:	0800a0e8 	.word	0x0800a0e8
 8004b00:	24000150 	.word	0x24000150

08004b04 <elog_output>:
 * @param format output format
 * @param ... args
 *
 */
void elog_output(uint8_t level, const char *tag, const char *file, const char *func,
        const long line, const char *format, ...) {
 8004b04:	b590      	push	{r4, r7, lr}
 8004b06:	b097      	sub	sp, #92	@ 0x5c
 8004b08:	af06      	add	r7, sp, #24
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4603      	mov	r3, r0
 8004b12:	73fb      	strb	r3, [r7, #15]
    extern const char *elog_port_get_time(void);
    extern const char *elog_port_get_p_info(void);
    extern const char *elog_port_get_t_info(void);

    size_t tag_len = strlen(tag), log_len = 0, newline_len = strlen(ELOG_NEWLINE_SIGN);
 8004b14:	68b8      	ldr	r0, [r7, #8]
 8004b16:	f7fb fc33 	bl	8000380 <strlen>
 8004b1a:	63b8      	str	r0, [r7, #56]	@ 0x38
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b20:	2301      	movs	r3, #1
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
    char line_num[ELOG_LINE_NUM_MAX_LEN + 1] = { 0 };
 8004b24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	809a      	strh	r2, [r3, #4]
    char tag_sapce[ELOG_FILTER_TAG_MAX_LEN / 2 + 1] = { 0 };
 8004b2e:	f107 0318 	add.w	r3, r7, #24
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	609a      	str	r2, [r3, #8]
 8004b3a:	60da      	str	r2, [r3, #12]
    va_list args;
    int fmt_result;

    ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d92b      	bls.n	8004b9a <elog_output+0x96>
 8004b42:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <elog_output+0x70>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d120      	bne.n	8004b8c <elog_output+0x88>
 8004b4a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <elog_output+0x74>)
 8004b52:	9303      	str	r3, [sp, #12]
 8004b54:	4b09      	ldr	r3, [pc, #36]	@ (8004b7c <elog_output+0x78>)
 8004b56:	9302      	str	r3, [sp, #8]
 8004b58:	4b09      	ldr	r3, [pc, #36]	@ (8004b80 <elog_output+0x7c>)
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <elog_output+0x74>)
 8004b64:	4a07      	ldr	r2, [pc, #28]	@ (8004b84 <elog_output+0x80>)
 8004b66:	4908      	ldr	r1, [pc, #32]	@ (8004b88 <elog_output+0x84>)
 8004b68:	2000      	movs	r0, #0
 8004b6a:	f7ff ffcb 	bl	8004b04 <elog_output>
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <elog_output+0x6a>
 8004b72:	bf00      	nop
 8004b74:	24000648 	.word	0x24000648
 8004b78:	0800a4f4 	.word	0x0800a4f4
 8004b7c:	0800a194 	.word	0x0800a194
 8004b80:	0800a170 	.word	0x0800a170
 8004b84:	0800a0b4 	.word	0x0800a0b4
 8004b88:	0800a0e8 	.word	0x0800a0e8
 8004b8c:	4bb2      	ldr	r3, [pc, #712]	@ (8004e58 <elog_output+0x354>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8004b94:	49b1      	ldr	r1, [pc, #708]	@ (8004e5c <elog_output+0x358>)
 8004b96:	48b2      	ldr	r0, [pc, #712]	@ (8004e60 <elog_output+0x35c>)
 8004b98:	4798      	blx	r3

    /* check output enabled */
    if (!elog.output_enabled) {
 8004b9a:	4bb2      	ldr	r3, [pc, #712]	@ (8004e64 <elog_output+0x360>)
 8004b9c:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
 8004ba0:	f083 0301 	eor.w	r3, r3, #1
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 8255 	bne.w	8005056 <elog_output+0x552>
        return;
    }
    /* level filter */
    if (level > elog.filter.level || level > elog_get_filter_tag_lvl(tag)) {
 8004bac:	4bad      	ldr	r3, [pc, #692]	@ (8004e64 <elog_output+0x360>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	f200 8251 	bhi.w	800505a <elog_output+0x556>
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	f7ff ff2b 	bl	8004a14 <elog_get_filter_tag_lvl>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	f200 8248 	bhi.w	800505a <elog_output+0x556>
        return;
    } else if (!strstr(tag, elog.filter.tag)) { /* tag filter */
 8004bca:	49a7      	ldr	r1, [pc, #668]	@ (8004e68 <elog_output+0x364>)
 8004bcc:	68b8      	ldr	r0, [r7, #8]
 8004bce:	f004 f931 	bl	8008e34 <strstr>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8242 	beq.w	800505e <elog_output+0x55a>
        return;
    }
    /* args point to the first variable parameter */
    va_start(args, format);
 8004bda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004bde:	617b      	str	r3, [r7, #20]
    /* lock output */
    elog_output_lock();
 8004be0:	f7ff feb8 	bl	8004954 <elog_output_lock>

#ifdef ELOG_COLOR_ENABLE
    /* add CSI start sign and color info */
    if (elog.text_color_enabled) {
 8004be4:	4b9f      	ldr	r3, [pc, #636]	@ (8004e64 <elog_output+0x360>)
 8004be6:	f893 30f5 	ldrb.w	r3, [r3, #245]	@ 0xf5
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01a      	beq.n	8004c24 <elog_output+0x120>
        log_len += elog_strcpy(log_len, log_buf + log_len, CSI_START);
 8004bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf0:	4a9e      	ldr	r2, [pc, #632]	@ (8004e6c <elog_output+0x368>)
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4a9e      	ldr	r2, [pc, #632]	@ (8004e70 <elog_output+0x36c>)
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004bfa:	f000 fb1d 	bl	8005238 <elog_strcpy>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c02:	4413      	add	r3, r2
 8004c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        log_len += elog_strcpy(log_len, log_buf + log_len, color_output_info[level]);
 8004c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c08:	4a98      	ldr	r2, [pc, #608]	@ (8004e6c <elog_output+0x368>)
 8004c0a:	1899      	adds	r1, r3, r2
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	4a99      	ldr	r2, [pc, #612]	@ (8004e74 <elog_output+0x370>)
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	461a      	mov	r2, r3
 8004c16:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004c18:	f000 fb0e 	bl	8005238 <elog_strcpy>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c20:	4413      	add	r3, r2
 8004c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
#endif

    /* package level info */
    if (get_fmt_enabled(level, ELOG_FMT_LVL)) {
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2101      	movs	r1, #1
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fa2f 	bl	800508c <get_fmt_enabled>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00e      	beq.n	8004c52 <elog_output+0x14e>
        log_len += elog_strcpy(log_len, log_buf + log_len, level_output_info[level]);
 8004c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c36:	4a8d      	ldr	r2, [pc, #564]	@ (8004e6c <elog_output+0x368>)
 8004c38:	1899      	adds	r1, r3, r2
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	4a8e      	ldr	r2, [pc, #568]	@ (8004e78 <elog_output+0x374>)
 8004c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004c46:	f000 faf7 	bl	8005238 <elog_strcpy>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4e:	4413      	add	r3, r2
 8004c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    /* package tag info */
    if (get_fmt_enabled(level, ELOG_FMT_TAG)) {
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2102      	movs	r1, #2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fa18 	bl	800508c <get_fmt_enabled>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d030      	beq.n	8004cc4 <elog_output+0x1c0>
        log_len += elog_strcpy(log_len, log_buf + log_len, tag);
 8004c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c64:	4a81      	ldr	r2, [pc, #516]	@ (8004e6c <elog_output+0x368>)
 8004c66:	4413      	add	r3, r2
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004c6e:	f000 fae3 	bl	8005238 <elog_strcpy>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c76:	4413      	add	r3, r2
 8004c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* if the tag length is less than 50% ELOG_FILTER_TAG_MAX_LEN, then fill space */
        if (tag_len <= ELOG_FILTER_TAG_MAX_LEN / 2) {
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d815      	bhi.n	8004cac <elog_output+0x1a8>
            memset(tag_sapce, ' ', ELOG_FILTER_TAG_MAX_LEN / 2 - tag_len);
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	f1c3 020f 	rsb	r2, r3, #15
 8004c86:	f107 0318 	add.w	r3, r7, #24
 8004c8a:	2120      	movs	r1, #32
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f004 f8b7 	bl	8008e00 <memset>
            log_len += elog_strcpy(log_len, log_buf + log_len, tag_sapce);
 8004c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c94:	4a75      	ldr	r2, [pc, #468]	@ (8004e6c <elog_output+0x368>)
 8004c96:	4413      	add	r3, r2
 8004c98:	f107 0218 	add.w	r2, r7, #24
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ca0:	f000 faca 	bl	8005238 <elog_strcpy>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca8:	4413      	add	r3, r2
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 8004cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cae:	4a6f      	ldr	r2, [pc, #444]	@ (8004e6c <elog_output+0x368>)
 8004cb0:	4413      	add	r3, r2
 8004cb2:	4a72      	ldr	r2, [pc, #456]	@ (8004e7c <elog_output+0x378>)
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004cb8:	f000 fabe 	bl	8005238 <elog_strcpy>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc0:	4413      	add	r3, r2
 8004cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    /* package time, process and thread info */
    if (get_fmt_enabled(level, ELOG_FMT_TIME | ELOG_FMT_P_INFO | ELOG_FMT_T_INFO)) {
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	211c      	movs	r1, #28
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 f9df 	bl	800508c <get_fmt_enabled>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8085 	beq.w	8004de0 <elog_output+0x2dc>
        log_len += elog_strcpy(log_len, log_buf + log_len, "[");
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd8:	4a64      	ldr	r2, [pc, #400]	@ (8004e6c <elog_output+0x368>)
 8004cda:	4413      	add	r3, r2
 8004cdc:	4a68      	ldr	r2, [pc, #416]	@ (8004e80 <elog_output+0x37c>)
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ce2:	f000 faa9 	bl	8005238 <elog_strcpy>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cea:	4413      	add	r3, r2
 8004cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* package time info */
        if (get_fmt_enabled(level, ELOG_FMT_TIME)) {
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f9ca 	bl	800508c <get_fmt_enabled>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d022      	beq.n	8004d44 <elog_output+0x240>
            log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_time());
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d00:	4a5a      	ldr	r2, [pc, #360]	@ (8004e6c <elog_output+0x368>)
 8004d02:	189c      	adds	r4, r3, r2
 8004d04:	f7ff fc8a 	bl	800461c <elog_port_get_time>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004d10:	f000 fa92 	bl	8005238 <elog_strcpy>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d18:	4413      	add	r3, r2
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (get_fmt_enabled(level, ELOG_FMT_P_INFO | ELOG_FMT_T_INFO)) {
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	2118      	movs	r1, #24
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f9b3 	bl	800508c <get_fmt_enabled>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <elog_output+0x240>
                log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 8004d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2e:	4a4f      	ldr	r2, [pc, #316]	@ (8004e6c <elog_output+0x368>)
 8004d30:	4413      	add	r3, r2
 8004d32:	4a52      	ldr	r2, [pc, #328]	@ (8004e7c <elog_output+0x378>)
 8004d34:	4619      	mov	r1, r3
 8004d36:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004d38:	f000 fa7e 	bl	8005238 <elog_strcpy>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d40:	4413      	add	r3, r2
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
        /* package process info */
        if (get_fmt_enabled(level, ELOG_FMT_P_INFO)) {
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2108      	movs	r1, #8
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f99f 	bl	800508c <get_fmt_enabled>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d022      	beq.n	8004d9a <elog_output+0x296>
            log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_p_info());
 8004d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d56:	4a45      	ldr	r2, [pc, #276]	@ (8004e6c <elog_output+0x368>)
 8004d58:	189c      	adds	r4, r3, r2
 8004d5a:	f7ff fc85 	bl	8004668 <elog_port_get_p_info>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	4621      	mov	r1, r4
 8004d64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004d66:	f000 fa67 	bl	8005238 <elog_strcpy>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6e:	4413      	add	r3, r2
 8004d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (get_fmt_enabled(level, ELOG_FMT_T_INFO)) {
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2110      	movs	r1, #16
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f988 	bl	800508c <get_fmt_enabled>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <elog_output+0x296>
                log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	4a39      	ldr	r2, [pc, #228]	@ (8004e6c <elog_output+0x368>)
 8004d86:	4413      	add	r3, r2
 8004d88:	4a3c      	ldr	r2, [pc, #240]	@ (8004e7c <elog_output+0x378>)
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004d8e:	f000 fa53 	bl	8005238 <elog_strcpy>
 8004d92:	4602      	mov	r2, r0
 8004d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d96:	4413      	add	r3, r2
 8004d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
        /* package thread info */
        if (get_fmt_enabled(level, ELOG_FMT_T_INFO)) {
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f974 	bl	800508c <get_fmt_enabled>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00e      	beq.n	8004dc8 <elog_output+0x2c4>
            log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_t_info());
 8004daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dac:	4a2f      	ldr	r2, [pc, #188]	@ (8004e6c <elog_output+0x368>)
 8004dae:	189c      	adds	r4, r3, r2
 8004db0:	f7ff fc64 	bl	800467c <elog_port_get_t_info>
 8004db4:	4603      	mov	r3, r0
 8004db6:	461a      	mov	r2, r3
 8004db8:	4621      	mov	r1, r4
 8004dba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004dbc:	f000 fa3c 	bl	8005238 <elog_strcpy>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc4:	4413      	add	r3, r2
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        log_len += elog_strcpy(log_len, log_buf + log_len, "] ");
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dca:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <elog_output+0x368>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	4a2d      	ldr	r2, [pc, #180]	@ (8004e84 <elog_output+0x380>)
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004dd4:	f000 fa30 	bl	8005238 <elog_strcpy>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ddc:	4413      	add	r3, r2
 8004dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    /* package file directory and name, function name and line number info */
    if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_DIR, file) ||
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	2120      	movs	r1, #32
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f9b2 	bl	8005150 <get_fmt_used_and_enabled_ptr>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d112      	bne.n	8004e18 <elog_output+0x314>
            get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func) ||
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	2140      	movs	r1, #64	@ 0x40
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f9a9 	bl	8005150 <get_fmt_used_and_enabled_ptr>
 8004dfe:	4603      	mov	r3, r0
    if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_DIR, file) ||
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <elog_output+0x314>
            get_fmt_used_and_enabled_u32(level, ELOG_FMT_LINE, line)) {
 8004e04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2180      	movs	r1, #128	@ 0x80
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f984 	bl	8005118 <get_fmt_used_and_enabled_u32>
 8004e10:	4603      	mov	r3, r0
            get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func) ||
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80ba 	beq.w	8004f8c <elog_output+0x488>
        log_len += elog_strcpy(log_len, log_buf + log_len, "(");
 8004e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1a:	4a14      	ldr	r2, [pc, #80]	@ (8004e6c <elog_output+0x368>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e88 <elog_output+0x384>)
 8004e20:	4619      	mov	r1, r3
 8004e22:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004e24:	f000 fa08 	bl	8005238 <elog_strcpy>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2c:	4413      	add	r3, r2
 8004e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* package file info */
        if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_DIR, file)) {
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	2120      	movs	r1, #32
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f98a 	bl	8005150 <get_fmt_used_and_enabled_ptr>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d051      	beq.n	8004ee6 <elog_output+0x3e2>
            log_len += elog_strcpy(log_len, log_buf + log_len, file);
 8004e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e44:	4a09      	ldr	r2, [pc, #36]	@ (8004e6c <elog_output+0x368>)
 8004e46:	4413      	add	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004e4e:	f000 f9f3 	bl	8005238 <elog_strcpy>
 8004e52:	4602      	mov	r2, r0
 8004e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e56:	e019      	b.n	8004e8c <elog_output+0x388>
 8004e58:	24000648 	.word	0x24000648
 8004e5c:	0800a4f4 	.word	0x0800a4f4
 8004e60:	0800a194 	.word	0x0800a194
 8004e64:	24000150 	.word	0x24000150
 8004e68:	24000151 	.word	0x24000151
 8004e6c:	24000248 	.word	0x24000248
 8004e70:	0800a1c4 	.word	0x0800a1c4
 8004e74:	24000028 	.word	0x24000028
 8004e78:	24000010 	.word	0x24000010
 8004e7c:	0800a1c8 	.word	0x0800a1c8
 8004e80:	0800a1cc 	.word	0x0800a1cc
 8004e84:	0800a1d0 	.word	0x0800a1d0
 8004e88:	0800a1d4 	.word	0x0800a1d4
 8004e8c:	4413      	add	r3, r2
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func)) {
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	2140      	movs	r1, #64	@ 0x40
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f95a 	bl	8005150 <get_fmt_used_and_enabled_ptr>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <elog_output+0x3b8>
                log_len += elog_strcpy(log_len, log_buf + log_len, ":");
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea4:	4a70      	ldr	r2, [pc, #448]	@ (8005068 <elog_output+0x564>)
 8004ea6:	4413      	add	r3, r2
 8004ea8:	4a70      	ldr	r2, [pc, #448]	@ (800506c <elog_output+0x568>)
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004eae:	f000 f9c3 	bl	8005238 <elog_strcpy>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb6:	4413      	add	r3, r2
 8004eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eba:	e014      	b.n	8004ee6 <elog_output+0x3e2>
            } else if (get_fmt_used_and_enabled_u32(level, ELOG_FMT_LINE, line)) {
 8004ebc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2180      	movs	r1, #128	@ 0x80
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f928 	bl	8005118 <get_fmt_used_and_enabled_u32>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <elog_output+0x3e2>
                log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 8004ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed0:	4a65      	ldr	r2, [pc, #404]	@ (8005068 <elog_output+0x564>)
 8004ed2:	4413      	add	r3, r2
 8004ed4:	4a66      	ldr	r2, [pc, #408]	@ (8005070 <elog_output+0x56c>)
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004eda:	f000 f9ad 	bl	8005238 <elog_strcpy>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee2:	4413      	add	r3, r2
 8004ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
        /* package line info */
        if (get_fmt_used_and_enabled_u32(level, ELOG_FMT_LINE, line)) {
 8004ee6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2180      	movs	r1, #128	@ 0x80
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f913 	bl	8005118 <get_fmt_used_and_enabled_u32>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d028      	beq.n	8004f4a <elog_output+0x446>
            snprintf(line_num, ELOG_LINE_NUM_MAX_LEN, "%ld", line);
 8004ef8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004efe:	4a5d      	ldr	r2, [pc, #372]	@ (8005074 <elog_output+0x570>)
 8004f00:	2105      	movs	r1, #5
 8004f02:	f003 fea5 	bl	8008c50 <sniprintf>
            log_len += elog_strcpy(log_len, log_buf + log_len, line_num);
 8004f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f08:	4a57      	ldr	r2, [pc, #348]	@ (8005068 <elog_output+0x564>)
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004f10:	4619      	mov	r1, r3
 8004f12:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004f14:	f000 f990 	bl	8005238 <elog_strcpy>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1c:	4413      	add	r3, r2
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func)) {
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	2140      	movs	r1, #64	@ 0x40
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f912 	bl	8005150 <get_fmt_used_and_enabled_ptr>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <elog_output+0x446>
                log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 8004f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f34:	4a4c      	ldr	r2, [pc, #304]	@ (8005068 <elog_output+0x564>)
 8004f36:	4413      	add	r3, r2
 8004f38:	4a4d      	ldr	r2, [pc, #308]	@ (8005070 <elog_output+0x56c>)
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004f3e:	f000 f97b 	bl	8005238 <elog_strcpy>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f46:	4413      	add	r3, r2
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
        /* package func info */
        if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func)) {
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	2140      	movs	r1, #64	@ 0x40
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f8fd 	bl	8005150 <get_fmt_used_and_enabled_ptr>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <elog_output+0x470>
            log_len += elog_strcpy(log_len, log_buf + log_len, func);
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5e:	4a42      	ldr	r2, [pc, #264]	@ (8005068 <elog_output+0x564>)
 8004f60:	4413      	add	r3, r2
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	4619      	mov	r1, r3
 8004f66:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004f68:	f000 f966 	bl	8005238 <elog_strcpy>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f70:	4413      	add	r3, r2
 8004f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
            
        }
        log_len += elog_strcpy(log_len, log_buf + log_len, ")");
 8004f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f76:	4a3c      	ldr	r2, [pc, #240]	@ (8005068 <elog_output+0x564>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8005078 <elog_output+0x574>)
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004f80:	f000 f95a 	bl	8005238 <elog_strcpy>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	4413      	add	r3, r2
 8004f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    /* package other log data to buffer. '\0' must be added in the end by vsnprintf. */
    fmt_result = vsnprintf(log_buf + log_len, ELOG_LINE_BUF_SIZE - log_len, format, args);
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8e:	4a36      	ldr	r2, [pc, #216]	@ (8005068 <elog_output+0x564>)
 8004f90:	1898      	adds	r0, r3, r2
 8004f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f94:	f5c3 6180 	rsb	r1, r3, #1024	@ 0x400
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f9c:	f003 ff22 	bl	8008de4 <vsniprintf>
 8004fa0:	6338      	str	r0, [r7, #48]	@ 0x30

    va_end(args);
    /* calculate log length */
    if ((log_len + fmt_result <= ELOG_LINE_BUF_SIZE) && (fmt_result > -1)) {
 8004fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fac:	d807      	bhi.n	8004fbe <elog_output+0x4ba>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	db04      	blt.n	8004fbe <elog_output+0x4ba>
        log_len += fmt_result;
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fb8:	4413      	add	r3, r2
 8004fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fbc:	e002      	b.n	8004fc4 <elog_output+0x4c0>
    } else {
        /* using max length */
        log_len = ELOG_LINE_BUF_SIZE;
 8004fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    /* overflow check and reserve some space for CSI end sign and newline sign */
#ifdef ELOG_COLOR_ENABLE
    if (log_len + (sizeof(CSI_END) - 1) + newline_len > ELOG_LINE_BUF_SIZE) {
 8004fc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc8:	4413      	add	r3, r2
 8004fca:	3304      	adds	r3, #4
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd0:	d909      	bls.n	8004fe6 <elog_output+0x4e2>
        /* using max length */
        log_len = ELOG_LINE_BUF_SIZE;
 8004fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* reserve some space for CSI end sign */
        log_len -= (sizeof(CSI_END) - 1);
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fda:	3b04      	subs	r3, #4
 8004fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (log_len + newline_len > ELOG_LINE_BUF_SIZE) {
        /* using max length */
        log_len = ELOG_LINE_BUF_SIZE;
#endif /* ELOG_COLOR_ENABLE */
        /* reserve some space for newline sign */
        log_len -= newline_len;
 8004fde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    /* keyword filter */
    if (elog.filter.keyword[0] != '\0') {
 8004fe6:	4b25      	ldr	r3, [pc, #148]	@ (800507c <elog_output+0x578>)
 8004fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00e      	beq.n	800500e <elog_output+0x50a>
        /* add string end sign */
        log_buf[log_len] = '\0';
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8005068 <elog_output+0x564>)
 8004ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff4:	4413      	add	r3, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
        /* find the keyword */
        if (!strstr(log_buf, elog.filter.keyword)) {
 8004ffa:	4921      	ldr	r1, [pc, #132]	@ (8005080 <elog_output+0x57c>)
 8004ffc:	481a      	ldr	r0, [pc, #104]	@ (8005068 <elog_output+0x564>)
 8004ffe:	f003 ff19 	bl	8008e34 <strstr>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <elog_output+0x50a>
            /* unlock output */
            elog_output_unlock();
 8005008:	f7ff fcba 	bl	8004980 <elog_output_unlock>
            return;
 800500c:	e028      	b.n	8005060 <elog_output+0x55c>
        }
    }

#ifdef ELOG_COLOR_ENABLE
    /* add CSI end sign */
    if (elog.text_color_enabled) {
 800500e:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <elog_output+0x578>)
 8005010:	f893 30f5 	ldrb.w	r3, [r3, #245]	@ 0xf5
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <elog_output+0x52c>
        log_len += elog_strcpy(log_len, log_buf + log_len, CSI_END);
 8005018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501a:	4a13      	ldr	r2, [pc, #76]	@ (8005068 <elog_output+0x564>)
 800501c:	4413      	add	r3, r2
 800501e:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <elog_output+0x580>)
 8005020:	4619      	mov	r1, r3
 8005022:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005024:	f000 f908 	bl	8005238 <elog_strcpy>
 8005028:	4602      	mov	r2, r0
 800502a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502c:	4413      	add	r3, r2
 800502e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
#endif

    /* package newline sign */
    log_len += elog_strcpy(log_len, log_buf + log_len, ELOG_NEWLINE_SIGN);
 8005030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005032:	4a0d      	ldr	r2, [pc, #52]	@ (8005068 <elog_output+0x564>)
 8005034:	4413      	add	r3, r2
 8005036:	4a14      	ldr	r2, [pc, #80]	@ (8005088 <elog_output+0x584>)
 8005038:	4619      	mov	r1, r3
 800503a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800503c:	f000 f8fc 	bl	8005238 <elog_strcpy>
 8005040:	4602      	mov	r2, r0
 8005042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005044:	4413      	add	r3, r2
 8005046:	63fb      	str	r3, [r7, #60]	@ 0x3c
    elog_async_output(level, log_buf, log_len);
#elif defined(ELOG_BUF_OUTPUT_ENABLE)
    extern void elog_buf_output(const char *log, size_t size);
    elog_buf_output(log_buf, log_len);
#else
    elog_port_output(log_buf, log_len);
 8005048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800504a:	4807      	ldr	r0, [pc, #28]	@ (8005068 <elog_output+0x564>)
 800504c:	f7ff fac6 	bl	80045dc <elog_port_output>
#endif
    /* unlock output */
    elog_output_unlock();
 8005050:	f7ff fc96 	bl	8004980 <elog_output_unlock>
 8005054:	e004      	b.n	8005060 <elog_output+0x55c>
        return;
 8005056:	bf00      	nop
 8005058:	e002      	b.n	8005060 <elog_output+0x55c>
        return;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <elog_output+0x55c>
        return;
 800505e:	bf00      	nop
}
 8005060:	3744      	adds	r7, #68	@ 0x44
 8005062:	46bd      	mov	sp, r7
 8005064:	bd90      	pop	{r4, r7, pc}
 8005066:	bf00      	nop
 8005068:	24000248 	.word	0x24000248
 800506c:	0800a1d8 	.word	0x0800a1d8
 8005070:	0800a1c8 	.word	0x0800a1c8
 8005074:	0800a1dc 	.word	0x0800a1dc
 8005078:	0800a1e0 	.word	0x0800a1e0
 800507c:	24000150 	.word	0x24000150
 8005080:	24000170 	.word	0x24000170
 8005084:	0800a1e4 	.word	0x0800a1e4
 8005088:	0800a1ec 	.word	0x0800a1ec

0800508c <get_fmt_enabled>:
 * @param level level
 * @param set format set
 *
 * @return enable or disable
 */
static bool get_fmt_enabled(uint8_t level, size_t set) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af06      	add	r7, sp, #24
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
    ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d91e      	bls.n	80050dc <get_fmt_enabled+0x50>
 800509e:	4b17      	ldr	r3, [pc, #92]	@ (80050fc <get_fmt_enabled+0x70>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <get_fmt_enabled+0x42>
 80050a6:	f240 23e1 	movw	r3, #737	@ 0x2e1
 80050aa:	9304      	str	r3, [sp, #16]
 80050ac:	4b14      	ldr	r3, [pc, #80]	@ (8005100 <get_fmt_enabled+0x74>)
 80050ae:	9303      	str	r3, [sp, #12]
 80050b0:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <get_fmt_enabled+0x78>)
 80050b2:	9302      	str	r3, [sp, #8]
 80050b4:	4b14      	ldr	r3, [pc, #80]	@ (8005108 <get_fmt_enabled+0x7c>)
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	f240 23e1 	movw	r3, #737	@ 0x2e1
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <get_fmt_enabled+0x74>)
 80050c0:	4a12      	ldr	r2, [pc, #72]	@ (800510c <get_fmt_enabled+0x80>)
 80050c2:	4913      	ldr	r1, [pc, #76]	@ (8005110 <get_fmt_enabled+0x84>)
 80050c4:	2000      	movs	r0, #0
 80050c6:	f7ff fd1d 	bl	8004b04 <elog_output>
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <get_fmt_enabled+0x3e>
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <get_fmt_enabled+0x70>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80050d6:	490a      	ldr	r1, [pc, #40]	@ (8005100 <get_fmt_enabled+0x74>)
 80050d8:	480a      	ldr	r0, [pc, #40]	@ (8005104 <get_fmt_enabled+0x78>)
 80050da:	4798      	blx	r3

    if (elog.enabled_fmt_set[level] & set) {
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	4a0d      	ldr	r2, [pc, #52]	@ (8005114 <get_fmt_enabled+0x88>)
 80050e0:	3336      	adds	r3, #54	@ 0x36
 80050e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <get_fmt_enabled+0x66>
        return true;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <get_fmt_enabled+0x68>
    } else {
        return false;
 80050f2:	2300      	movs	r3, #0
    }
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	24000648 	.word	0x24000648
 8005100:	0800a500 	.word	0x0800a500
 8005104:	0800a194 	.word	0x0800a194
 8005108:	0800a170 	.word	0x0800a170
 800510c:	0800a0b4 	.word	0x0800a0b4
 8005110:	0800a0e8 	.word	0x0800a0e8
 8005114:	24000150 	.word	0x24000150

08005118 <get_fmt_used_and_enabled_u32>:

static bool get_fmt_used_and_enabled_u32(uint8_t level, size_t set, uint32_t arg) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	73fb      	strb	r3, [r7, #15]
    return arg && get_fmt_enabled(level, set);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <get_fmt_used_and_enabled_u32+0x28>
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff ffab 	bl	800508c <get_fmt_enabled>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <get_fmt_used_and_enabled_u32+0x28>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <get_fmt_used_and_enabled_u32+0x2a>
 8005140:	2300      	movs	r3, #0
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	b2db      	uxtb	r3, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <get_fmt_used_and_enabled_ptr>:
static bool get_fmt_used_and_enabled_ptr(uint8_t level, size_t set, const char* arg) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	73fb      	strb	r3, [r7, #15]
    return arg && get_fmt_enabled(level, set);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <get_fmt_used_and_enabled_ptr+0x28>
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff ff8f 	bl	800508c <get_fmt_enabled>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <get_fmt_used_and_enabled_ptr+0x28>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <get_fmt_used_and_enabled_ptr+0x2a>
 8005178:	2300      	movs	r3, #0
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	b2db      	uxtb	r3, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <elog_output_lock_enabled>:
 * enable or disable logger output lock
 * @note disable this lock is not recommended except you want output system exception log
 *
 * @param enabled true: enable  false: disable
 */
void elog_output_lock_enabled(bool enabled) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
    elog.output_lock_enabled = enabled;
 8005192:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <elog_output_lock_enabled+0x64>)
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	f882 30f2 	strb.w	r3, [r2, #242]	@ 0xf2
    /* it will re-lock or re-unlock before output lock enable */
    if (elog.output_lock_enabled) {
 800519a:	4b14      	ldr	r3, [pc, #80]	@ (80051ec <elog_output_lock_enabled+0x64>)
 800519c:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01e      	beq.n	80051e2 <elog_output_lock_enabled+0x5a>
        if (!elog.output_is_locked_before_disable && elog.output_is_locked_before_enable) {
 80051a4:	4b11      	ldr	r3, [pc, #68]	@ (80051ec <elog_output_lock_enabled+0x64>)
 80051a6:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 80051aa:	f083 0301 	eor.w	r3, r3, #1
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <elog_output_lock_enabled+0x3c>
 80051b4:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <elog_output_lock_enabled+0x64>)
 80051b6:	f893 30f3 	ldrb.w	r3, [r3, #243]	@ 0xf3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <elog_output_lock_enabled+0x3c>
            /* the output lock is unlocked before disable, and the lock will unlocking after enable */
            elog_port_output_lock();
 80051be:	f7ff fa1b 	bl	80045f8 <elog_port_output_lock>
        } else if (elog.output_is_locked_before_disable && !elog.output_is_locked_before_enable) {
            /* the output lock is locked before disable, and the lock will locking after enable */
            elog_port_output_unlock();
        }
    }
}
 80051c2:	e00e      	b.n	80051e2 <elog_output_lock_enabled+0x5a>
        } else if (elog.output_is_locked_before_disable && !elog.output_is_locked_before_enable) {
 80051c4:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <elog_output_lock_enabled+0x64>)
 80051c6:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <elog_output_lock_enabled+0x5a>
 80051ce:	4b07      	ldr	r3, [pc, #28]	@ (80051ec <elog_output_lock_enabled+0x64>)
 80051d0:	f893 30f3 	ldrb.w	r3, [r3, #243]	@ 0xf3
 80051d4:	f083 0301 	eor.w	r3, r3, #1
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <elog_output_lock_enabled+0x5a>
            elog_port_output_unlock();
 80051de:	f7ff fa14 	bl	800460a <elog_port_output_unlock>
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	24000150 	.word	0x24000150

080051f0 <app_elog_init>:
    /* unlock output */
    elog_output_unlock();
}

void app_elog_init()
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  elog_init();
 80051f4:	f7ff fa4c 	bl	8004690 <elog_init>
  elog_set_text_color_enabled(true);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f7ff faeb 	bl	80047d4 <elog_set_text_color_enabled>

  elog_set_fmt(ELOG_LVL_ASSERT, ELOG_FMT_ALL);
 80051fe:	21ff      	movs	r1, #255	@ 0xff
 8005200:	2000      	movs	r0, #0
 8005202:	f7ff fb2b 	bl	800485c <elog_set_fmt>
  elog_set_fmt(ELOG_LVL_ERROR, ELOG_FMT_LVL | ELOG_FMT_TAG);
 8005206:	2103      	movs	r1, #3
 8005208:	2001      	movs	r0, #1
 800520a:	f7ff fb27 	bl	800485c <elog_set_fmt>
  elog_set_fmt(ELOG_LVL_WARN, ELOG_FMT_LVL | ELOG_FMT_TAG);
 800520e:	2103      	movs	r1, #3
 8005210:	2002      	movs	r0, #2
 8005212:	f7ff fb23 	bl	800485c <elog_set_fmt>
  elog_set_fmt(ELOG_LVL_INFO, ELOG_FMT_LVL | ELOG_FMT_TAG);
 8005216:	2103      	movs	r1, #3
 8005218:	2003      	movs	r0, #3
 800521a:	f7ff fb1f 	bl	800485c <elog_set_fmt>
  elog_set_fmt(ELOG_LVL_DEBUG, ELOG_FMT_ALL & ~(ELOG_FMT_TIME | ELOG_FMT_P_INFO | ELOG_FMT_T_INFO));
 800521e:	21e3      	movs	r1, #227	@ 0xe3
 8005220:	2004      	movs	r0, #4
 8005222:	f7ff fb1b 	bl	800485c <elog_set_fmt>
  elog_set_fmt(ELOG_LVL_VERBOSE, ELOG_FMT_ALL);
 8005226:	21ff      	movs	r1, #255	@ 0xff
 8005228:	2005      	movs	r0, #5
 800522a:	f7ff fb17 	bl	800485c <elog_set_fmt>

  elog_start();
 800522e:	f7ff fa63 	bl	80046f8 <elog_start>
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <elog_strcpy>:
 * @param dst destination
 * @param src source
 *
 * @return copied length
 */
size_t elog_strcpy(size_t cur_len, char *dst, const char *src) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
    const char *src_old = src;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	617b      	str	r3, [r7, #20]

    assert(dst);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d105      	bne.n	800525a <elog_strcpy+0x22>
 800524e:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <elog_strcpy+0x6c>)
 8005250:	4a15      	ldr	r2, [pc, #84]	@ (80052a8 <elog_strcpy+0x70>)
 8005252:	212c      	movs	r1, #44	@ 0x2c
 8005254:	4815      	ldr	r0, [pc, #84]	@ (80052ac <elog_strcpy+0x74>)
 8005256:	f003 fc09 	bl	8008a6c <__assert_func>
    assert(src);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d113      	bne.n	8005288 <elog_strcpy+0x50>
 8005260:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <elog_strcpy+0x78>)
 8005262:	4a11      	ldr	r2, [pc, #68]	@ (80052a8 <elog_strcpy+0x70>)
 8005264:	212d      	movs	r1, #45	@ 0x2d
 8005266:	4811      	ldr	r0, [pc, #68]	@ (80052ac <elog_strcpy+0x74>)
 8005268:	f003 fc00 	bl	8008a6c <__assert_func>

    while (*src != 0) {
        /* make sure destination has enough space */
        if (cur_len++ < ELOG_LINE_BUF_SIZE) {
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	60fa      	str	r2, [r7, #12]
 8005272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005276:	d20c      	bcs.n	8005292 <elog_strcpy+0x5a>
            *dst++ = *src++;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	1c53      	adds	r3, r2, #1
 800527c:	607b      	str	r3, [r7, #4]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	1c59      	adds	r1, r3, #1
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	701a      	strb	r2, [r3, #0]
    while (*src != 0) {
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ed      	bne.n	800526c <elog_strcpy+0x34>
 8005290:	e000      	b.n	8005294 <elog_strcpy+0x5c>
        } else {
            break;
 8005292:	bf00      	nop
        }
    }
    return src - src_old;
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	1ad3      	subs	r3, r2, r3
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	0800a3b0 	.word	0x0800a3b0
 80052a8:	0800a510 	.word	0x0800a510
 80052ac:	0800a3b4 	.word	0x0800a3b4
 80052b0:	0800a3ec 	.word	0x0800a3ec

080052b4 <__NVIC_SetPriority>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	db0a      	blt.n	80052de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	490c      	ldr	r1, [pc, #48]	@ (8005300 <__NVIC_SetPriority+0x4c>)
 80052ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052d2:	0112      	lsls	r2, r2, #4
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	440b      	add	r3, r1
 80052d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052dc:	e00a      	b.n	80052f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4908      	ldr	r1, [pc, #32]	@ (8005304 <__NVIC_SetPriority+0x50>)
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	3b04      	subs	r3, #4
 80052ec:	0112      	lsls	r2, r2, #4
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	440b      	add	r3, r1
 80052f2:	761a      	strb	r2, [r3, #24]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	e000e100 	.word	0xe000e100
 8005304:	e000ed00 	.word	0xe000ed00

08005308 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800530c:	4b05      	ldr	r3, [pc, #20]	@ (8005324 <SysTick_Handler+0x1c>)
 800530e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005310:	f001 fdda 	bl	8006ec8 <xTaskGetSchedulerState>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d001      	beq.n	800531e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800531a:	f002 fbd5 	bl	8007ac8 <xPortSysTickHandler>
  }
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	e000e010 	.word	0xe000e010

08005328 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800532c:	2100      	movs	r1, #0
 800532e:	f06f 0004 	mvn.w	r0, #4
 8005332:	f7ff ffbf 	bl	80052b4 <__NVIC_SetPriority>
#endif
}
 8005336:	bf00      	nop
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005342:	f3ef 8305 	mrs	r3, IPSR
 8005346:	603b      	str	r3, [r7, #0]
  return(result);
 8005348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800534e:	f06f 0305 	mvn.w	r3, #5
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e00c      	b.n	8005370 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005356:	4b0a      	ldr	r3, [pc, #40]	@ (8005380 <osKernelInitialize+0x44>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800535e:	4b08      	ldr	r3, [pc, #32]	@ (8005380 <osKernelInitialize+0x44>)
 8005360:	2201      	movs	r2, #1
 8005362:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005364:	2300      	movs	r3, #0
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	e002      	b.n	8005370 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005370:	687b      	ldr	r3, [r7, #4]
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	2400064c 	.word	0x2400064c

08005384 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800538a:	f3ef 8305 	mrs	r3, IPSR
 800538e:	603b      	str	r3, [r7, #0]
  return(result);
 8005390:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005396:	f06f 0305 	mvn.w	r3, #5
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	e010      	b.n	80053c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800539e:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <osKernelStart+0x48>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d109      	bne.n	80053ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053a6:	f7ff ffbf 	bl	8005328 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053aa:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <osKernelStart+0x48>)
 80053ac:	2202      	movs	r2, #2
 80053ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053b0:	f001 f926 	bl	8006600 <vTaskStartScheduler>
      stat = osOK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	e002      	b.n	80053c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295
 80053be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053c0:	687b      	ldr	r3, [r7, #4]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	2400064c 	.word	0x2400064c

080053d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	@ 0x38
 80053d4:	af04      	add	r7, sp, #16
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e0:	f3ef 8305 	mrs	r3, IPSR
 80053e4:	617b      	str	r3, [r7, #20]
  return(result);
 80053e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d17e      	bne.n	80054ea <osThreadNew+0x11a>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d07b      	beq.n	80054ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053f2:	2380      	movs	r3, #128	@ 0x80
 80053f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053f6:	2318      	movs	r3, #24
 80053f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005402:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d045      	beq.n	8005496 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <osThreadNew+0x48>
        name = attr->name;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <osThreadNew+0x6e>
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b38      	cmp	r3, #56	@ 0x38
 8005430:	d805      	bhi.n	800543e <osThreadNew+0x6e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <osThreadNew+0x72>
        return (NULL);
 800543e:	2300      	movs	r3, #0
 8005440:	e054      	b.n	80054ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	089b      	lsrs	r3, r3, #2
 8005450:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00e      	beq.n	8005478 <osThreadNew+0xa8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005460:	d90a      	bls.n	8005478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005466:	2b00      	cmp	r3, #0
 8005468:	d006      	beq.n	8005478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <osThreadNew+0xa8>
        mem = 1;
 8005472:	2301      	movs	r3, #1
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e010      	b.n	800549a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10c      	bne.n	800549a <osThreadNew+0xca>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d108      	bne.n	800549a <osThreadNew+0xca>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <osThreadNew+0xca>
          mem = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e001      	b.n	800549a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d110      	bne.n	80054c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054a8:	9202      	str	r2, [sp, #8]
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6a3a      	ldr	r2, [r7, #32]
 80054b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 feae 	bl	8006218 <xTaskCreateStatic>
 80054bc:	4603      	mov	r3, r0
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	e013      	b.n	80054ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d110      	bne.n	80054ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fefc 	bl	80062d8 <xTaskCreate>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d001      	beq.n	80054ea <osThreadNew+0x11a>
            hTask = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054ea:	693b      	ldr	r3, [r7, #16]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3728      	adds	r7, #40	@ 0x28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	@ 0x28
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005504:	f3ef 8305 	mrs	r3, IPSR
 8005508:	613b      	str	r3, [r7, #16]
  return(result);
 800550a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800550c:	2b00      	cmp	r3, #0
 800550e:	d15f      	bne.n	80055d0 <osMessageQueueNew+0xdc>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d05c      	beq.n	80055d0 <osMessageQueueNew+0xdc>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d059      	beq.n	80055d0 <osMessageQueueNew+0xdc>
    mem = -1;
 800551c:	f04f 33ff 	mov.w	r3, #4294967295
 8005520:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d029      	beq.n	800557c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d012      	beq.n	8005556 <osMessageQueueNew+0x62>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b4f      	cmp	r3, #79	@ 0x4f
 8005536:	d90e      	bls.n	8005556 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <osMessageQueueNew+0x62>
        mem = 1;
 8005550:	2301      	movs	r3, #1
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	e014      	b.n	8005580 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d110      	bne.n	8005580 <osMessageQueueNew+0x8c>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10c      	bne.n	8005580 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800556a:	2b00      	cmp	r3, #0
 800556c:	d108      	bne.n	8005580 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d104      	bne.n	8005580 <osMessageQueueNew+0x8c>
          mem = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e001      	b.n	8005580 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d10b      	bne.n	800559e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2100      	movs	r1, #0
 8005590:	9100      	str	r1, [sp, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f973 	bl	8005880 <xQueueGenericCreateStatic>
 800559a:	61f8      	str	r0, [r7, #28]
 800559c:	e008      	b.n	80055b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80055a4:	2200      	movs	r2, #0
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f9e6 	bl	800597a <xQueueGenericCreate>
 80055ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e001      	b.n	80055c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80055c8:	6979      	ldr	r1, [r7, #20]
 80055ca:	69f8      	ldr	r0, [r7, #28]
 80055cc:	f000 fdc6 	bl	800615c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80055d0:	69fb      	ldr	r3, [r7, #28]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a07      	ldr	r2, [pc, #28]	@ (8005608 <vApplicationGetIdleTaskMemory+0x2c>)
 80055ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a06      	ldr	r2, [pc, #24]	@ (800560c <vApplicationGetIdleTaskMemory+0x30>)
 80055f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2280      	movs	r2, #128	@ 0x80
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	24000650 	.word	0x24000650
 800560c:	240006f8 	.word	0x240006f8

08005610 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a07      	ldr	r2, [pc, #28]	@ (800563c <vApplicationGetTimerTaskMemory+0x2c>)
 8005620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4a06      	ldr	r2, [pc, #24]	@ (8005640 <vApplicationGetTimerTaskMemory+0x30>)
 8005626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800562e:	601a      	str	r2, [r3, #0]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	240008f8 	.word	0x240008f8
 8005640:	240009a0 	.word	0x240009a0

08005644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f103 0208 	add.w	r2, r3, #8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f04f 32ff 	mov.w	r2, #4294967295
 800565c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f103 0208 	add.w	r2, r3, #8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f103 0208 	add.w	r2, r3, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	601a      	str	r2, [r3, #0]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d103      	bne.n	8005706 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e00c      	b.n	8005720 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3308      	adds	r3, #8
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e002      	b.n	8005714 <vListInsert+0x2e>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	d2f6      	bcs.n	800570e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	601a      	str	r2, [r3, #0]
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6892      	ldr	r2, [r2, #8]
 800576e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6852      	ldr	r2, [r2, #4]
 8005778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d103      	bne.n	800578c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1e5a      	subs	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057d8:	f002 f8e6 	bl	80079a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e4:	68f9      	ldr	r1, [r7, #12]
 80057e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057e8:	fb01 f303 	mul.w	r3, r1, r3
 80057ec:	441a      	add	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005808:	3b01      	subs	r3, #1
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800580e:	fb01 f303 	mul.w	r3, r1, r3
 8005812:	441a      	add	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	22ff      	movs	r2, #255	@ 0xff
 800581c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	22ff      	movs	r2, #255	@ 0xff
 8005824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d114      	bne.n	8005858 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01a      	beq.n	800586c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3310      	adds	r3, #16
 800583a:	4618      	mov	r0, r3
 800583c:	f001 f97e 	bl	8006b3c <xTaskRemoveFromEventList>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d012      	beq.n	800586c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <xQueueGenericReset+0xd0>)
 8005848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	e009      	b.n	800586c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3310      	adds	r3, #16
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff fef1 	bl	8005644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3324      	adds	r3, #36	@ 0x24
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff feec 	bl	8005644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800586c:	f002 f8ce 	bl	8007a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005870:	2301      	movs	r3, #1
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08e      	sub	sp, #56	@ 0x38
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	e7fd      	b.n	80058c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <xQueueGenericCreateStatic+0x56>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <xQueueGenericCreateStatic+0x5a>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericCreateStatic+0x5c>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10b      	bne.n	80058f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	623b      	str	r3, [r7, #32]
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <xQueueGenericCreateStatic+0x84>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <xQueueGenericCreateStatic+0x88>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <xQueueGenericCreateStatic+0x8a>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10b      	bne.n	8005926 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	61fb      	str	r3, [r7, #28]
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	e7fd      	b.n	8005922 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005926:	2350      	movs	r3, #80	@ 0x50
 8005928:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b50      	cmp	r3, #80	@ 0x50
 800592e:	d00b      	beq.n	8005948 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	61bb      	str	r3, [r7, #24]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005948:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800594e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800595c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f840 	bl	80059f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005972:	4618      	mov	r0, r3
 8005974:	3730      	adds	r7, #48	@ 0x30
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800597a:	b580      	push	{r7, lr}
 800597c:	b08a      	sub	sp, #40	@ 0x28
 800597e:	af02      	add	r7, sp, #8
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	4613      	mov	r3, r2
 8005986:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	613b      	str	r3, [r7, #16]
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	e7fd      	b.n	80059a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	3350      	adds	r3, #80	@ 0x50
 80059b4:	4618      	mov	r0, r3
 80059b6:	f002 f919 	bl	8007bec <pvPortMalloc>
 80059ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d011      	beq.n	80059e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3350      	adds	r3, #80	@ 0x50
 80059ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059d4:	79fa      	ldrb	r2, [r7, #7]
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f805 	bl	80059f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059e6:	69bb      	ldr	r3, [r7, #24]
	}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e002      	b.n	8005a12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a1e:	2101      	movs	r1, #1
 8005a20:	69b8      	ldr	r0, [r7, #24]
 8005a22:	f7ff fec3 	bl	80057ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	78fa      	ldrb	r2, [r7, #3]
 8005a2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08e      	sub	sp, #56	@ 0x38
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a46:	2300      	movs	r3, #0
 8005a48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10b      	bne.n	8005a6c <xQueueGenericSend+0x34>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <xQueueGenericSend+0x42>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <xQueueGenericSend+0x46>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <xQueueGenericSend+0x48>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <xQueueGenericSend+0x64>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d103      	bne.n	8005aaa <xQueueGenericSend+0x72>
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <xQueueGenericSend+0x76>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueGenericSend+0x78>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <xQueueGenericSend+0x94>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	623b      	str	r3, [r7, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005acc:	f001 f9fc 	bl	8006ec8 <xTaskGetSchedulerState>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d102      	bne.n	8005adc <xQueueGenericSend+0xa4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <xQueueGenericSend+0xa8>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <xQueueGenericSend+0xaa>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <xQueueGenericSend+0xc6>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61fb      	str	r3, [r7, #28]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005afe:	f001 ff53 	bl	80079a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <xQueueGenericSend+0xdc>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d129      	bne.n	8005b68 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b1a:	f000 fa0f 	bl	8005f3c <prvCopyDataToQueue>
 8005b1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	3324      	adds	r3, #36	@ 0x24
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 f805 	bl	8006b3c <xTaskRemoveFromEventList>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d013      	beq.n	8005b60 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b38:	4b3f      	ldr	r3, [pc, #252]	@ (8005c38 <xQueueGenericSend+0x200>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	e00a      	b.n	8005b60 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b50:	4b39      	ldr	r3, [pc, #228]	@ (8005c38 <xQueueGenericSend+0x200>)
 8005b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b60:	f001 ff54 	bl	8007a0c <vPortExitCritical>
				return pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e063      	b.n	8005c30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b6e:	f001 ff4d 	bl	8007a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e05c      	b.n	8005c30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 f83f 	bl	8006c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b86:	2301      	movs	r3, #1
 8005b88:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b8a:	f001 ff3f 	bl	8007a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b8e:	f000 fda7 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b92:	f001 ff09 	bl	80079a8 <vPortEnterCritical>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d103      	bne.n	8005bac <xQueueGenericSend+0x174>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bb2:	b25b      	sxtb	r3, r3
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d103      	bne.n	8005bc2 <xQueueGenericSend+0x18a>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bc2:	f001 ff23 	bl	8007a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bc6:	1d3a      	adds	r2, r7, #4
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f82e 	bl	8006c30 <xTaskCheckForTimeOut>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d124      	bne.n	8005c24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bdc:	f000 faa6 	bl	800612c <prvIsQueueFull>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d018      	beq.n	8005c18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	3310      	adds	r3, #16
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ff52 	bl	8006a98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bf6:	f000 fa31 	bl	800605c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bfa:	f000 fd7f 	bl	80066fc <xTaskResumeAll>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f af7c 	bne.w	8005afe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005c06:	4b0c      	ldr	r3, [pc, #48]	@ (8005c38 <xQueueGenericSend+0x200>)
 8005c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	e772      	b.n	8005afe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c1a:	f000 fa1f 	bl	800605c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c1e:	f000 fd6d 	bl	80066fc <xTaskResumeAll>
 8005c22:	e76c      	b.n	8005afe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c26:	f000 fa19 	bl	800605c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c2a:	f000 fd67 	bl	80066fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3738      	adds	r7, #56	@ 0x38
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b090      	sub	sp, #64	@ 0x40
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <xQueueGenericSendFromISR+0x3e>
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <xQueueGenericSendFromISR+0x42>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <xQueueGenericSendFromISR+0x44>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10b      	bne.n	8005c9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	e7fd      	b.n	8005c98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d103      	bne.n	8005caa <xQueueGenericSendFromISR+0x6e>
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <xQueueGenericSendFromISR+0x72>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <xQueueGenericSendFromISR+0x74>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	623b      	str	r3, [r7, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ccc:	f001 ff4c 	bl	8007b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cd0:	f3ef 8211 	mrs	r2, BASEPRI
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	61fa      	str	r2, [r7, #28]
 8005ce6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d302      	bcc.n	8005cfe <xQueueGenericSendFromISR+0xc2>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d12f      	bne.n	8005d5e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d14:	f000 f912 	bl	8005f3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d18:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d112      	bne.n	8005d48 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d016      	beq.n	8005d58 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	3324      	adds	r3, #36	@ 0x24
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 ff04 	bl	8006b3c <xTaskRemoveFromEventList>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00e      	beq.n	8005d58 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e007      	b.n	8005d58 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	b25a      	sxtb	r2, r3
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005d5c:	e001      	b.n	8005d62 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d64:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3740      	adds	r7, #64	@ 0x40
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	@ 0x30
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <xQueueReceive+0x32>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	623b      	str	r3, [r7, #32]
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	e7fd      	b.n	8005da6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <xQueueReceive+0x40>
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <xQueueReceive+0x44>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <xQueueReceive+0x46>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10b      	bne.n	8005dda <xQueueReceive+0x62>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	61fb      	str	r3, [r7, #28]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dda:	f001 f875 	bl	8006ec8 <xTaskGetSchedulerState>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <xQueueReceive+0x72>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <xQueueReceive+0x76>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <xQueueReceive+0x78>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <xQueueReceive+0x94>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	61bb      	str	r3, [r7, #24]
}
 8005e06:	bf00      	nop
 8005e08:	bf00      	nop
 8005e0a:	e7fd      	b.n	8005e08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e0c:	f001 fdcc 	bl	80079a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01f      	beq.n	8005e5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e20:	f000 f8f6 	bl	8006010 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	1e5a      	subs	r2, r3, #1
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00f      	beq.n	8005e54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e36:	3310      	adds	r3, #16
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fe7f 	bl	8006b3c <xTaskRemoveFromEventList>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e44:	4b3c      	ldr	r3, [pc, #240]	@ (8005f38 <xQueueReceive+0x1c0>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e54:	f001 fdda 	bl	8007a0c <vPortExitCritical>
				return pdPASS;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e069      	b.n	8005f30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e62:	f001 fdd3 	bl	8007a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e062      	b.n	8005f30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d106      	bne.n	8005e7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e70:	f107 0310 	add.w	r3, r7, #16
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fec5 	bl	8006c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e7e:	f001 fdc5 	bl	8007a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e82:	f000 fc2d 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e86:	f001 fd8f 	bl	80079a8 <vPortEnterCritical>
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e90:	b25b      	sxtb	r3, r3
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e96:	d103      	bne.n	8005ea0 <xQueueReceive+0x128>
 8005e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ea6:	b25b      	sxtb	r3, r3
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d103      	bne.n	8005eb6 <xQueueReceive+0x13e>
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eb6:	f001 fda9 	bl	8007a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eba:	1d3a      	adds	r2, r7, #4
 8005ebc:	f107 0310 	add.w	r3, r7, #16
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 feb4 	bl	8006c30 <xTaskCheckForTimeOut>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d123      	bne.n	8005f16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ed0:	f000 f916 	bl	8006100 <prvIsQueueEmpty>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d017      	beq.n	8005f0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	3324      	adds	r3, #36	@ 0x24
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fdd8 	bl	8006a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ee8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eea:	f000 f8b7 	bl	800605c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005eee:	f000 fc05 	bl	80066fc <xTaskResumeAll>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d189      	bne.n	8005e0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <xQueueReceive+0x1c0>)
 8005efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	e780      	b.n	8005e0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f0c:	f000 f8a6 	bl	800605c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f10:	f000 fbf4 	bl	80066fc <xTaskResumeAll>
 8005f14:	e77a      	b.n	8005e0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f18:	f000 f8a0 	bl	800605c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f1c:	f000 fbee 	bl	80066fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f22:	f000 f8ed 	bl	8006100 <prvIsQueueEmpty>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f43f af6f 	beq.w	8005e0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3730      	adds	r7, #48	@ 0x30
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10d      	bne.n	8005f76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d14d      	bne.n	8005ffe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 ffcc 	bl	8006f04 <xTaskPriorityDisinherit>
 8005f6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	e043      	b.n	8005ffe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d119      	bne.n	8005fb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6858      	ldr	r0, [r3, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	461a      	mov	r2, r3
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	f003 f83b 	bl	8009002 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d32b      	bcc.n	8005ffe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	e026      	b.n	8005ffe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68d8      	ldr	r0, [r3, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	f003 f821 	bl	8009002 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	425b      	negs	r3, r3
 8005fca:	441a      	add	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d207      	bcs.n	8005fec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe4:	425b      	negs	r3, r3
 8005fe6:	441a      	add	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d105      	bne.n	8005ffe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006006:	697b      	ldr	r3, [r7, #20]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d018      	beq.n	8006054 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	441a      	add	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	d303      	bcc.n	8006044 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68d9      	ldr	r1, [r3, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604c:	461a      	mov	r2, r3
 800604e:	6838      	ldr	r0, [r7, #0]
 8006050:	f002 ffd7 	bl	8009002 <memcpy>
	}
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006064:	f001 fca0 	bl	80079a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800606e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006070:	e011      	b.n	8006096 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	d012      	beq.n	80060a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3324      	adds	r3, #36	@ 0x24
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fd5c 	bl	8006b3c <xTaskRemoveFromEventList>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800608a:	f000 fe35 	bl	8006cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	3b01      	subs	r3, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800609a:	2b00      	cmp	r3, #0
 800609c:	dce9      	bgt.n	8006072 <prvUnlockQueue+0x16>
 800609e:	e000      	b.n	80060a2 <prvUnlockQueue+0x46>
					break;
 80060a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	22ff      	movs	r2, #255	@ 0xff
 80060a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80060aa:	f001 fcaf 	bl	8007a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060ae:	f001 fc7b 	bl	80079a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ba:	e011      	b.n	80060e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d012      	beq.n	80060ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3310      	adds	r3, #16
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fd37 	bl	8006b3c <xTaskRemoveFromEventList>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060d4:	f000 fe10 	bl	8006cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	3b01      	subs	r3, #1
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dce9      	bgt.n	80060bc <prvUnlockQueue+0x60>
 80060e8:	e000      	b.n	80060ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	22ff      	movs	r2, #255	@ 0xff
 80060f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80060f4:	f001 fc8a 	bl	8007a0c <vPortExitCritical>
}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006108:	f001 fc4e 	bl	80079a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e001      	b.n	800611e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800611e:	f001 fc75 	bl	8007a0c <vPortExitCritical>

	return xReturn;
 8006122:	68fb      	ldr	r3, [r7, #12]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006134:	f001 fc38 	bl	80079a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	429a      	cmp	r2, r3
 8006142:	d102      	bne.n	800614a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e001      	b.n	800614e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800614e:	f001 fc5d 	bl	8007a0c <vPortExitCritical>

	return xReturn;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e014      	b.n	8006196 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800616c:	4a0f      	ldr	r2, [pc, #60]	@ (80061ac <vQueueAddToRegistry+0x50>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006178:	490c      	ldr	r1, [pc, #48]	@ (80061ac <vQueueAddToRegistry+0x50>)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006182:	4a0a      	ldr	r2, [pc, #40]	@ (80061ac <vQueueAddToRegistry+0x50>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	4413      	add	r3, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800618e:	e006      	b.n	800619e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b07      	cmp	r3, #7
 800619a:	d9e7      	bls.n	800616c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	24000da0 	.word	0x24000da0

080061b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061c0:	f001 fbf2 	bl	80079a8 <vPortEnterCritical>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061ca:	b25b      	sxtb	r3, r3
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d103      	bne.n	80061da <vQueueWaitForMessageRestricted+0x2a>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061e0:	b25b      	sxtb	r3, r3
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d103      	bne.n	80061f0 <vQueueWaitForMessageRestricted+0x40>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061f0:	f001 fc0c 	bl	8007a0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	3324      	adds	r3, #36	@ 0x24
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fc6d 	bl	8006ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800620a:	6978      	ldr	r0, [r7, #20]
 800620c:	f7ff ff26 	bl	800605c <prvUnlockQueue>
	}
 8006210:	bf00      	nop
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08e      	sub	sp, #56	@ 0x38
 800621c:	af04      	add	r7, sp, #16
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <xTaskCreateStatic+0x2c>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	623b      	str	r3, [r7, #32]
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <xTaskCreateStatic+0x4a>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	61fb      	str	r3, [r7, #28]
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	e7fd      	b.n	800625e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006262:	23a8      	movs	r3, #168	@ 0xa8
 8006264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2ba8      	cmp	r3, #168	@ 0xa8
 800626a:	d00b      	beq.n	8006284 <xTaskCreateStatic+0x6c>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61bb      	str	r3, [r7, #24]
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006284:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01e      	beq.n	80062ca <xTaskCreateStatic+0xb2>
 800628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01b      	beq.n	80062ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800629a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062a4:	2300      	movs	r3, #0
 80062a6:	9303      	str	r3, [sp, #12]
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	9302      	str	r3, [sp, #8]
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f851 	bl	8006364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062c4:	f000 f8f6 	bl	80064b4 <prvAddNewTaskToReadyList>
 80062c8:	e001      	b.n	80062ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062ce:	697b      	ldr	r3, [r7, #20]
	}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3728      	adds	r7, #40	@ 0x28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	@ 0x30
 80062dc:	af04      	add	r7, sp, #16
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fc7d 	bl	8007bec <pvPortMalloc>
 80062f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00e      	beq.n	8006318 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062fa:	20a8      	movs	r0, #168	@ 0xa8
 80062fc:	f001 fc76 	bl	8007bec <pvPortMalloc>
 8006300:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	631a      	str	r2, [r3, #48]	@ 0x30
 800630e:	e005      	b.n	800631c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006310:	6978      	ldr	r0, [r7, #20]
 8006312:	f001 fd39 	bl	8007d88 <vPortFree>
 8006316:	e001      	b.n	800631c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d017      	beq.n	8006352 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	2300      	movs	r3, #0
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	9302      	str	r3, [sp, #8]
 8006334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f80f 	bl	8006364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006346:	69f8      	ldr	r0, [r7, #28]
 8006348:	f000 f8b4 	bl	80064b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800634c:	2301      	movs	r3, #1
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	e002      	b.n	8006358 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006358:	69bb      	ldr	r3, [r7, #24]
	}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	461a      	mov	r2, r3
 800637c:	21a5      	movs	r1, #165	@ 0xa5
 800637e:	f002 fd3f 	bl	8008e00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800638c:	440b      	add	r3, r1
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f023 0307 	bic.w	r3, r3, #7
 800639a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	617b      	str	r3, [r7, #20]
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	e7fd      	b.n	80063ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01f      	beq.n	8006404 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e012      	b.n	80063f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	7819      	ldrb	r1, [r3, #0]
 80063d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	3334      	adds	r3, #52	@ 0x34
 80063da:	460a      	mov	r2, r1
 80063dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d006      	beq.n	80063f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b0f      	cmp	r3, #15
 80063f4:	d9e9      	bls.n	80063ca <prvInitialiseNewTask+0x66>
 80063f6:	e000      	b.n	80063fa <prvInitialiseNewTask+0x96>
			{
				break;
 80063f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006402:	e003      	b.n	800640c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	2b37      	cmp	r3, #55	@ 0x37
 8006410:	d901      	bls.n	8006416 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006412:	2337      	movs	r3, #55	@ 0x37
 8006414:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800641a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006420:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	2200      	movs	r2, #0
 8006426:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	3304      	adds	r3, #4
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff f929 	bl	8005684 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	3318      	adds	r3, #24
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff f924 	bl	8005684 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006440:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006450:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	2200      	movs	r2, #0
 8006456:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	2200      	movs	r2, #0
 800645e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	3354      	adds	r3, #84	@ 0x54
 8006466:	224c      	movs	r2, #76	@ 0x4c
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f002 fcc8 	bl	8008e00 <memset>
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	4a0d      	ldr	r2, [pc, #52]	@ (80064a8 <prvInitialiseNewTask+0x144>)
 8006474:	659a      	str	r2, [r3, #88]	@ 0x58
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	4a0c      	ldr	r2, [pc, #48]	@ (80064ac <prvInitialiseNewTask+0x148>)
 800647a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	4a0c      	ldr	r2, [pc, #48]	@ (80064b0 <prvInitialiseNewTask+0x14c>)
 8006480:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	68f9      	ldr	r1, [r7, #12]
 8006486:	69b8      	ldr	r0, [r7, #24]
 8006488:	f001 f95a 	bl	8007740 <pxPortInitialiseStack>
 800648c:	4602      	mov	r2, r0
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800649e:	bf00      	nop
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	240054ec 	.word	0x240054ec
 80064ac:	24005554 	.word	0x24005554
 80064b0:	240055bc 	.word	0x240055bc

080064b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064bc:	f001 fa74 	bl	80079a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006578 <prvAddNewTaskToReadyList+0xc4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006578 <prvAddNewTaskToReadyList+0xc4>)
 80064c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064ca:	4b2c      	ldr	r3, [pc, #176]	@ (800657c <prvAddNewTaskToReadyList+0xc8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064d2:	4a2a      	ldr	r2, [pc, #168]	@ (800657c <prvAddNewTaskToReadyList+0xc8>)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064d8:	4b27      	ldr	r3, [pc, #156]	@ (8006578 <prvAddNewTaskToReadyList+0xc4>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d110      	bne.n	8006502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064e0:	f000 fc2e 	bl	8006d40 <prvInitialiseTaskLists>
 80064e4:	e00d      	b.n	8006502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064e6:	4b26      	ldr	r3, [pc, #152]	@ (8006580 <prvAddNewTaskToReadyList+0xcc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064ee:	4b23      	ldr	r3, [pc, #140]	@ (800657c <prvAddNewTaskToReadyList+0xc8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d802      	bhi.n	8006502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064fc:	4a1f      	ldr	r2, [pc, #124]	@ (800657c <prvAddNewTaskToReadyList+0xc8>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006502:	4b20      	ldr	r3, [pc, #128]	@ (8006584 <prvAddNewTaskToReadyList+0xd0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3301      	adds	r3, #1
 8006508:	4a1e      	ldr	r2, [pc, #120]	@ (8006584 <prvAddNewTaskToReadyList+0xd0>)
 800650a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800650c:	4b1d      	ldr	r3, [pc, #116]	@ (8006584 <prvAddNewTaskToReadyList+0xd0>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006518:	4b1b      	ldr	r3, [pc, #108]	@ (8006588 <prvAddNewTaskToReadyList+0xd4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d903      	bls.n	8006528 <prvAddNewTaskToReadyList+0x74>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006524:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <prvAddNewTaskToReadyList+0xd4>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4a15      	ldr	r2, [pc, #84]	@ (800658c <prvAddNewTaskToReadyList+0xd8>)
 8006536:	441a      	add	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7ff f8ad 	bl	800569e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006544:	f001 fa62 	bl	8007a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006548:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <prvAddNewTaskToReadyList+0xcc>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00e      	beq.n	800656e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006550:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <prvAddNewTaskToReadyList+0xc8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	429a      	cmp	r2, r3
 800655c:	d207      	bcs.n	800656e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800655e:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <prvAddNewTaskToReadyList+0xdc>)
 8006560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	240012b4 	.word	0x240012b4
 800657c:	24000de0 	.word	0x24000de0
 8006580:	240012c0 	.word	0x240012c0
 8006584:	240012d0 	.word	0x240012d0
 8006588:	240012bc 	.word	0x240012bc
 800658c:	24000de4 	.word	0x24000de4
 8006590:	e000ed04 	.word	0xe000ed04

08006594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d018      	beq.n	80065d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065a6:	4b14      	ldr	r3, [pc, #80]	@ (80065f8 <vTaskDelay+0x64>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <vTaskDelay+0x32>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60bb      	str	r3, [r7, #8]
}
 80065c0:	bf00      	nop
 80065c2:	bf00      	nop
 80065c4:	e7fd      	b.n	80065c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065c6:	f000 f88b 	bl	80066e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065ca:	2100      	movs	r1, #0
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fd09 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065d2:	f000 f893 	bl	80066fc <xTaskResumeAll>
 80065d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d107      	bne.n	80065ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80065de:	4b07      	ldr	r3, [pc, #28]	@ (80065fc <vTaskDelay+0x68>)
 80065e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	240012dc 	.word	0x240012dc
 80065fc:	e000ed04 	.word	0xe000ed04

08006600 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08a      	sub	sp, #40	@ 0x28
 8006604:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800660e:	463a      	mov	r2, r7
 8006610:	1d39      	adds	r1, r7, #4
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe ffe0 	bl	80055dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	9202      	str	r2, [sp, #8]
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	2300      	movs	r3, #0
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	2300      	movs	r3, #0
 800662c:	460a      	mov	r2, r1
 800662e:	4924      	ldr	r1, [pc, #144]	@ (80066c0 <vTaskStartScheduler+0xc0>)
 8006630:	4824      	ldr	r0, [pc, #144]	@ (80066c4 <vTaskStartScheduler+0xc4>)
 8006632:	f7ff fdf1 	bl	8006218 <xTaskCreateStatic>
 8006636:	4603      	mov	r3, r0
 8006638:	4a23      	ldr	r2, [pc, #140]	@ (80066c8 <vTaskStartScheduler+0xc8>)
 800663a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800663c:	4b22      	ldr	r3, [pc, #136]	@ (80066c8 <vTaskStartScheduler+0xc8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006644:	2301      	movs	r3, #1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	e001      	b.n	800664e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d102      	bne.n	800665a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006654:	f000 fd1a 	bl	800708c <xTimerCreateTimerTask>
 8006658:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d11b      	bne.n	8006698 <vTaskStartScheduler+0x98>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
}
 8006672:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006674:	4b15      	ldr	r3, [pc, #84]	@ (80066cc <vTaskStartScheduler+0xcc>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3354      	adds	r3, #84	@ 0x54
 800667a:	4a15      	ldr	r2, [pc, #84]	@ (80066d0 <vTaskStartScheduler+0xd0>)
 800667c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800667e:	4b15      	ldr	r3, [pc, #84]	@ (80066d4 <vTaskStartScheduler+0xd4>)
 8006680:	f04f 32ff 	mov.w	r2, #4294967295
 8006684:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006686:	4b14      	ldr	r3, [pc, #80]	@ (80066d8 <vTaskStartScheduler+0xd8>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800668c:	4b13      	ldr	r3, [pc, #76]	@ (80066dc <vTaskStartScheduler+0xdc>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006692:	f001 f8e5 	bl	8007860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006696:	e00f      	b.n	80066b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d10b      	bne.n	80066b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <vTaskStartScheduler+0xb4>
}
 80066b8:	bf00      	nop
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	0800a400 	.word	0x0800a400
 80066c4:	08006d11 	.word	0x08006d11
 80066c8:	240012d8 	.word	0x240012d8
 80066cc:	24000de0 	.word	0x24000de0
 80066d0:	24000050 	.word	0x24000050
 80066d4:	240012d4 	.word	0x240012d4
 80066d8:	240012c0 	.word	0x240012c0
 80066dc:	240012b8 	.word	0x240012b8

080066e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066e4:	4b04      	ldr	r3, [pc, #16]	@ (80066f8 <vTaskSuspendAll+0x18>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	4a03      	ldr	r2, [pc, #12]	@ (80066f8 <vTaskSuspendAll+0x18>)
 80066ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	240012dc 	.word	0x240012dc

080066fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800670a:	4b42      	ldr	r3, [pc, #264]	@ (8006814 <xTaskResumeAll+0x118>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <xTaskResumeAll+0x2e>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	603b      	str	r3, [r7, #0]
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	e7fd      	b.n	8006726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800672a:	f001 f93d 	bl	80079a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800672e:	4b39      	ldr	r3, [pc, #228]	@ (8006814 <xTaskResumeAll+0x118>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3b01      	subs	r3, #1
 8006734:	4a37      	ldr	r2, [pc, #220]	@ (8006814 <xTaskResumeAll+0x118>)
 8006736:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006738:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <xTaskResumeAll+0x118>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d162      	bne.n	8006806 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006740:	4b35      	ldr	r3, [pc, #212]	@ (8006818 <xTaskResumeAll+0x11c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d05e      	beq.n	8006806 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006748:	e02f      	b.n	80067aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800674a:	4b34      	ldr	r3, [pc, #208]	@ (800681c <xTaskResumeAll+0x120>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3318      	adds	r3, #24
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe fffe 	bl	8005758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fff9 	bl	8005758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676a:	4b2d      	ldr	r3, [pc, #180]	@ (8006820 <xTaskResumeAll+0x124>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d903      	bls.n	800677a <xTaskResumeAll+0x7e>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	4a2a      	ldr	r2, [pc, #168]	@ (8006820 <xTaskResumeAll+0x124>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a27      	ldr	r2, [pc, #156]	@ (8006824 <xTaskResumeAll+0x128>)
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3304      	adds	r3, #4
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f7fe ff84 	bl	800569e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679a:	4b23      	ldr	r3, [pc, #140]	@ (8006828 <xTaskResumeAll+0x12c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80067a4:	4b21      	ldr	r3, [pc, #132]	@ (800682c <xTaskResumeAll+0x130>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067aa:	4b1c      	ldr	r3, [pc, #112]	@ (800681c <xTaskResumeAll+0x120>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1cb      	bne.n	800674a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067b8:	f000 fb66 	bl	8006e88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006830 <xTaskResumeAll+0x134>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067c8:	f000 f846 	bl	8006858 <xTaskIncrementTick>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80067d2:	4b16      	ldr	r3, [pc, #88]	@ (800682c <xTaskResumeAll+0x130>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3b01      	subs	r3, #1
 80067dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f1      	bne.n	80067c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80067e4:	4b12      	ldr	r3, [pc, #72]	@ (8006830 <xTaskResumeAll+0x134>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067ea:	4b10      	ldr	r3, [pc, #64]	@ (800682c <xTaskResumeAll+0x130>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067f2:	2301      	movs	r3, #1
 80067f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006834 <xTaskResumeAll+0x138>)
 80067f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006806:	f001 f901 	bl	8007a0c <vPortExitCritical>

	return xAlreadyYielded;
 800680a:	68bb      	ldr	r3, [r7, #8]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	240012dc 	.word	0x240012dc
 8006818:	240012b4 	.word	0x240012b4
 800681c:	24001274 	.word	0x24001274
 8006820:	240012bc 	.word	0x240012bc
 8006824:	24000de4 	.word	0x24000de4
 8006828:	24000de0 	.word	0x24000de0
 800682c:	240012c8 	.word	0x240012c8
 8006830:	240012c4 	.word	0x240012c4
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800683e:	4b05      	ldr	r3, [pc, #20]	@ (8006854 <xTaskGetTickCount+0x1c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006844:	687b      	ldr	r3, [r7, #4]
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	240012b8 	.word	0x240012b8

08006858 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006862:	4b4f      	ldr	r3, [pc, #316]	@ (80069a0 <xTaskIncrementTick+0x148>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f040 8090 	bne.w	800698c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800686c:	4b4d      	ldr	r3, [pc, #308]	@ (80069a4 <xTaskIncrementTick+0x14c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006874:	4a4b      	ldr	r2, [pc, #300]	@ (80069a4 <xTaskIncrementTick+0x14c>)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d121      	bne.n	80068c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006880:	4b49      	ldr	r3, [pc, #292]	@ (80069a8 <xTaskIncrementTick+0x150>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	603b      	str	r3, [r7, #0]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <xTaskIncrementTick+0x46>
 80068a2:	4b41      	ldr	r3, [pc, #260]	@ (80069a8 <xTaskIncrementTick+0x150>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	4b40      	ldr	r3, [pc, #256]	@ (80069ac <xTaskIncrementTick+0x154>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a3e      	ldr	r2, [pc, #248]	@ (80069a8 <xTaskIncrementTick+0x150>)
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	4a3e      	ldr	r2, [pc, #248]	@ (80069ac <xTaskIncrementTick+0x154>)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	4b3e      	ldr	r3, [pc, #248]	@ (80069b0 <xTaskIncrementTick+0x158>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3301      	adds	r3, #1
 80068bc:	4a3c      	ldr	r2, [pc, #240]	@ (80069b0 <xTaskIncrementTick+0x158>)
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	f000 fae2 	bl	8006e88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068c4:	4b3b      	ldr	r3, [pc, #236]	@ (80069b4 <xTaskIncrementTick+0x15c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d349      	bcc.n	8006962 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ce:	4b36      	ldr	r3, [pc, #216]	@ (80069a8 <xTaskIncrementTick+0x150>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d8:	4b36      	ldr	r3, [pc, #216]	@ (80069b4 <xTaskIncrementTick+0x15c>)
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	601a      	str	r2, [r3, #0]
					break;
 80068e0:	e03f      	b.n	8006962 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e2:	4b31      	ldr	r3, [pc, #196]	@ (80069a8 <xTaskIncrementTick+0x150>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d203      	bcs.n	8006902 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068fa:	4a2e      	ldr	r2, [pc, #184]	@ (80069b4 <xTaskIncrementTick+0x15c>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006900:	e02f      	b.n	8006962 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	3304      	adds	r3, #4
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe ff26 	bl	8005758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	d004      	beq.n	800691e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	3318      	adds	r3, #24
 8006918:	4618      	mov	r0, r3
 800691a:	f7fe ff1d 	bl	8005758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006922:	4b25      	ldr	r3, [pc, #148]	@ (80069b8 <xTaskIncrementTick+0x160>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d903      	bls.n	8006932 <xTaskIncrementTick+0xda>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	4a22      	ldr	r2, [pc, #136]	@ (80069b8 <xTaskIncrementTick+0x160>)
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4a1f      	ldr	r2, [pc, #124]	@ (80069bc <xTaskIncrementTick+0x164>)
 8006940:	441a      	add	r2, r3
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	3304      	adds	r3, #4
 8006946:	4619      	mov	r1, r3
 8006948:	4610      	mov	r0, r2
 800694a:	f7fe fea8 	bl	800569e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006952:	4b1b      	ldr	r3, [pc, #108]	@ (80069c0 <xTaskIncrementTick+0x168>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006958:	429a      	cmp	r2, r3
 800695a:	d3b8      	bcc.n	80068ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800695c:	2301      	movs	r3, #1
 800695e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006960:	e7b5      	b.n	80068ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006962:	4b17      	ldr	r3, [pc, #92]	@ (80069c0 <xTaskIncrementTick+0x168>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006968:	4914      	ldr	r1, [pc, #80]	@ (80069bc <xTaskIncrementTick+0x164>)
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d901      	bls.n	800697e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800697a:	2301      	movs	r3, #1
 800697c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800697e:	4b11      	ldr	r3, [pc, #68]	@ (80069c4 <xTaskIncrementTick+0x16c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006986:	2301      	movs	r3, #1
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	e004      	b.n	8006996 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800698c:	4b0e      	ldr	r3, [pc, #56]	@ (80069c8 <xTaskIncrementTick+0x170>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	4a0d      	ldr	r2, [pc, #52]	@ (80069c8 <xTaskIncrementTick+0x170>)
 8006994:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006996:	697b      	ldr	r3, [r7, #20]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	240012dc 	.word	0x240012dc
 80069a4:	240012b8 	.word	0x240012b8
 80069a8:	2400126c 	.word	0x2400126c
 80069ac:	24001270 	.word	0x24001270
 80069b0:	240012cc 	.word	0x240012cc
 80069b4:	240012d4 	.word	0x240012d4
 80069b8:	240012bc 	.word	0x240012bc
 80069bc:	24000de4 	.word	0x24000de4
 80069c0:	24000de0 	.word	0x24000de0
 80069c4:	240012c8 	.word	0x240012c8
 80069c8:	240012c4 	.word	0x240012c4

080069cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006a80 <vTaskSwitchContext+0xb4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069da:	4b2a      	ldr	r3, [pc, #168]	@ (8006a84 <vTaskSwitchContext+0xb8>)
 80069dc:	2201      	movs	r2, #1
 80069de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069e0:	e047      	b.n	8006a72 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80069e2:	4b28      	ldr	r3, [pc, #160]	@ (8006a84 <vTaskSwitchContext+0xb8>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e8:	4b27      	ldr	r3, [pc, #156]	@ (8006a88 <vTaskSwitchContext+0xbc>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	e011      	b.n	8006a14 <vTaskSwitchContext+0x48>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <vTaskSwitchContext+0x42>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	607b      	str	r3, [r7, #4]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <vTaskSwitchContext+0x3e>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	491d      	ldr	r1, [pc, #116]	@ (8006a8c <vTaskSwitchContext+0xc0>)
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	440b      	add	r3, r1
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0e3      	beq.n	80069f0 <vTaskSwitchContext+0x24>
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a16      	ldr	r2, [pc, #88]	@ (8006a8c <vTaskSwitchContext+0xc0>)
 8006a34:	4413      	add	r3, r2
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d104      	bne.n	8006a58 <vTaskSwitchContext+0x8c>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	605a      	str	r2, [r3, #4]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a90 <vTaskSwitchContext+0xc4>)
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <vTaskSwitchContext+0xbc>)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a68:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <vTaskSwitchContext+0xc4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3354      	adds	r3, #84	@ 0x54
 8006a6e:	4a09      	ldr	r2, [pc, #36]	@ (8006a94 <vTaskSwitchContext+0xc8>)
 8006a70:	6013      	str	r3, [r2, #0]
}
 8006a72:	bf00      	nop
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	240012dc 	.word	0x240012dc
 8006a84:	240012c8 	.word	0x240012c8
 8006a88:	240012bc 	.word	0x240012bc
 8006a8c:	24000de4 	.word	0x24000de4
 8006a90:	24000de0 	.word	0x24000de0
 8006a94:	24000050 	.word	0x24000050

08006a98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60fb      	str	r3, [r7, #12]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ac0:	4b07      	ldr	r3, [pc, #28]	@ (8006ae0 <vTaskPlaceOnEventList+0x48>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3318      	adds	r3, #24
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fe fe0c 	bl	80056e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ace:	2101      	movs	r1, #1
 8006ad0:	6838      	ldr	r0, [r7, #0]
 8006ad2:	f000 fa87 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	24000de0 	.word	0x24000de0

08006ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10b      	bne.n	8006b0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	617b      	str	r3, [r7, #20]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3318      	adds	r3, #24
 8006b14:	4619      	mov	r1, r3
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7fe fdc1 	bl	800569e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006b22:	f04f 33ff 	mov.w	r3, #4294967295
 8006b26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f000 fa5a 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
	}
 8006b30:	bf00      	nop
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	24000de0 	.word	0x24000de0

08006b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60fb      	str	r3, [r7, #12]
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3318      	adds	r3, #24
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fdf2 	bl	8005758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b74:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <xTaskRemoveFromEventList+0xb0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11d      	bne.n	8006bb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fde9 	bl	8005758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8a:	4b19      	ldr	r3, [pc, #100]	@ (8006bf0 <xTaskRemoveFromEventList+0xb4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d903      	bls.n	8006b9a <xTaskRemoveFromEventList+0x5e>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b96:	4a16      	ldr	r2, [pc, #88]	@ (8006bf0 <xTaskRemoveFromEventList+0xb4>)
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4a13      	ldr	r2, [pc, #76]	@ (8006bf4 <xTaskRemoveFromEventList+0xb8>)
 8006ba8:	441a      	add	r2, r3
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3304      	adds	r3, #4
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	f7fe fd74 	bl	800569e <vListInsertEnd>
 8006bb6:	e005      	b.n	8006bc4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	3318      	adds	r3, #24
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	480e      	ldr	r0, [pc, #56]	@ (8006bf8 <xTaskRemoveFromEventList+0xbc>)
 8006bc0:	f7fe fd6d 	bl	800569e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <xTaskRemoveFromEventList+0xc0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d905      	bls.n	8006bde <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <xTaskRemoveFromEventList+0xc4>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	e001      	b.n	8006be2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006be2:	697b      	ldr	r3, [r7, #20]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	240012dc 	.word	0x240012dc
 8006bf0:	240012bc 	.word	0x240012bc
 8006bf4:	24000de4 	.word	0x24000de4
 8006bf8:	24001274 	.word	0x24001274
 8006bfc:	24000de0 	.word	0x24000de0
 8006c00:	240012c8 	.word	0x240012c8

08006c04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c0c:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <vTaskInternalSetTimeOutState+0x24>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c14:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <vTaskInternalSetTimeOutState+0x28>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	605a      	str	r2, [r3, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	240012cc 	.word	0x240012cc
 8006c2c:	240012b8 	.word	0x240012b8

08006c30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	613b      	str	r3, [r7, #16]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	60fb      	str	r3, [r7, #12]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006c76:	f000 fe97 	bl	80079a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf0 <xTaskCheckForTimeOut+0xc0>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c92:	d102      	bne.n	8006c9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	e023      	b.n	8006ce2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b15      	ldr	r3, [pc, #84]	@ (8006cf4 <xTaskCheckForTimeOut+0xc4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d007      	beq.n	8006cb6 <xTaskCheckForTimeOut+0x86>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d302      	bcc.n	8006cb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	e015      	b.n	8006ce2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d20b      	bcs.n	8006cd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	1ad2      	subs	r2, r2, r3
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff ff99 	bl	8006c04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	e004      	b.n	8006ce2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ce2:	f000 fe93 	bl	8007a0c <vPortExitCritical>

	return xReturn;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	240012b8 	.word	0x240012b8
 8006cf4:	240012cc 	.word	0x240012cc

08006cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cfc:	4b03      	ldr	r3, [pc, #12]	@ (8006d0c <vTaskMissedYield+0x14>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	601a      	str	r2, [r3, #0]
}
 8006d02:	bf00      	nop
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	240012c8 	.word	0x240012c8

08006d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d18:	f000 f852 	bl	8006dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <prvIdleTask+0x28>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d9f9      	bls.n	8006d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d24:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <prvIdleTask+0x2c>)
 8006d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d34:	e7f0      	b.n	8006d18 <prvIdleTask+0x8>
 8006d36:	bf00      	nop
 8006d38:	24000de4 	.word	0x24000de4
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d46:	2300      	movs	r3, #0
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	e00c      	b.n	8006d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a12      	ldr	r2, [pc, #72]	@ (8006da0 <prvInitialiseTaskLists+0x60>)
 8006d58:	4413      	add	r3, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fc72 	bl	8005644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3301      	adds	r3, #1
 8006d64:	607b      	str	r3, [r7, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b37      	cmp	r3, #55	@ 0x37
 8006d6a:	d9ef      	bls.n	8006d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d6c:	480d      	ldr	r0, [pc, #52]	@ (8006da4 <prvInitialiseTaskLists+0x64>)
 8006d6e:	f7fe fc69 	bl	8005644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d72:	480d      	ldr	r0, [pc, #52]	@ (8006da8 <prvInitialiseTaskLists+0x68>)
 8006d74:	f7fe fc66 	bl	8005644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d78:	480c      	ldr	r0, [pc, #48]	@ (8006dac <prvInitialiseTaskLists+0x6c>)
 8006d7a:	f7fe fc63 	bl	8005644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d7e:	480c      	ldr	r0, [pc, #48]	@ (8006db0 <prvInitialiseTaskLists+0x70>)
 8006d80:	f7fe fc60 	bl	8005644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d84:	480b      	ldr	r0, [pc, #44]	@ (8006db4 <prvInitialiseTaskLists+0x74>)
 8006d86:	f7fe fc5d 	bl	8005644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <prvInitialiseTaskLists+0x78>)
 8006d8c:	4a05      	ldr	r2, [pc, #20]	@ (8006da4 <prvInitialiseTaskLists+0x64>)
 8006d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d90:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <prvInitialiseTaskLists+0x7c>)
 8006d92:	4a05      	ldr	r2, [pc, #20]	@ (8006da8 <prvInitialiseTaskLists+0x68>)
 8006d94:	601a      	str	r2, [r3, #0]
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	24000de4 	.word	0x24000de4
 8006da4:	24001244 	.word	0x24001244
 8006da8:	24001258 	.word	0x24001258
 8006dac:	24001274 	.word	0x24001274
 8006db0:	24001288 	.word	0x24001288
 8006db4:	240012a0 	.word	0x240012a0
 8006db8:	2400126c 	.word	0x2400126c
 8006dbc:	24001270 	.word	0x24001270

08006dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dc6:	e019      	b.n	8006dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dc8:	f000 fdee 	bl	80079a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dcc:	4b10      	ldr	r3, [pc, #64]	@ (8006e10 <prvCheckTasksWaitingTermination+0x50>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fcbd 	bl	8005758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dde:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <prvCheckTasksWaitingTermination+0x54>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	4a0b      	ldr	r2, [pc, #44]	@ (8006e14 <prvCheckTasksWaitingTermination+0x54>)
 8006de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006de8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <prvCheckTasksWaitingTermination+0x58>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	4a0a      	ldr	r2, [pc, #40]	@ (8006e18 <prvCheckTasksWaitingTermination+0x58>)
 8006df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006df2:	f000 fe0b 	bl	8007a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f810 	bl	8006e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dfc:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <prvCheckTasksWaitingTermination+0x58>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e1      	bne.n	8006dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	24001288 	.word	0x24001288
 8006e14:	240012b4 	.word	0x240012b4
 8006e18:	2400129c 	.word	0x2400129c

08006e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3354      	adds	r3, #84	@ 0x54
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f002 f829 	bl	8008e80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 ffa3 	bl	8007d88 <vPortFree>
				vPortFree( pxTCB );
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 ffa0 	bl	8007d88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e48:	e019      	b.n	8006e7e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d103      	bne.n	8006e5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 ff97 	bl	8007d88 <vPortFree>
	}
 8006e5a:	e010      	b.n	8006e7e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d00b      	beq.n	8006e7e <prvDeleteTCB+0x62>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60fb      	str	r3, [r7, #12]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <prvDeleteTCB+0x5e>
	}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec0 <prvResetNextTaskUnblockTime+0x38>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e98:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8006e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ea0:	e008      	b.n	8006eb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea2:	4b07      	ldr	r3, [pc, #28]	@ (8006ec0 <prvResetNextTaskUnblockTime+0x38>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	4a04      	ldr	r2, [pc, #16]	@ (8006ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8006eb2:	6013      	str	r3, [r2, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	2400126c 	.word	0x2400126c
 8006ec4:	240012d4 	.word	0x240012d4

08006ec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ece:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <xTaskGetSchedulerState+0x34>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	607b      	str	r3, [r7, #4]
 8006eda:	e008      	b.n	8006eee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006edc:	4b08      	ldr	r3, [pc, #32]	@ (8006f00 <xTaskGetSchedulerState+0x38>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d102      	bne.n	8006eea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	607b      	str	r3, [r7, #4]
 8006ee8:	e001      	b.n	8006eee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eee:	687b      	ldr	r3, [r7, #4]
	}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	240012c0 	.word	0x240012c0
 8006f00:	240012dc 	.word	0x240012dc

08006f04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d058      	beq.n	8006fcc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd8 <xTaskPriorityDisinherit+0xd4>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d00b      	beq.n	8006f3c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	60fb      	str	r3, [r7, #12]
}
 8006f36:	bf00      	nop
 8006f38:	bf00      	nop
 8006f3a:	e7fd      	b.n	8006f38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60bb      	str	r3, [r7, #8]
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f60:	1e5a      	subs	r2, r3, #1
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d02c      	beq.n	8006fcc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d128      	bne.n	8006fcc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fbea 	bl	8005758 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fdc <xTaskPriorityDisinherit+0xd8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d903      	bls.n	8006fac <xTaskPriorityDisinherit+0xa8>
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8006fdc <xTaskPriorityDisinherit+0xd8>)
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4a09      	ldr	r2, [pc, #36]	@ (8006fe0 <xTaskPriorityDisinherit+0xdc>)
 8006fba:	441a      	add	r2, r3
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7fe fb6b 	bl	800569e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fcc:	697b      	ldr	r3, [r7, #20]
	}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	24000de0 	.word	0x24000de0
 8006fdc:	240012bc 	.word	0x240012bc
 8006fe0:	24000de4 	.word	0x24000de4

08006fe4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fee:	4b21      	ldr	r3, [pc, #132]	@ (8007074 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff4:	4b20      	ldr	r3, [pc, #128]	@ (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fbac 	bl	8005758 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007006:	d10a      	bne.n	800701e <prvAddCurrentTaskToDelayedList+0x3a>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800700e:	4b1a      	ldr	r3, [pc, #104]	@ (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4819      	ldr	r0, [pc, #100]	@ (800707c <prvAddCurrentTaskToDelayedList+0x98>)
 8007018:	f7fe fb41 	bl	800569e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800701c:	e026      	b.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007026:	4b14      	ldr	r3, [pc, #80]	@ (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	429a      	cmp	r2, r3
 8007034:	d209      	bcs.n	800704a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007036:	4b12      	ldr	r3, [pc, #72]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	4b0f      	ldr	r3, [pc, #60]	@ (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f7fe fb4f 	bl	80056e6 <vListInsert>
}
 8007048:	e010      	b.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800704a:	4b0e      	ldr	r3, [pc, #56]	@ (8007084 <prvAddCurrentTaskToDelayedList+0xa0>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b0a      	ldr	r3, [pc, #40]	@ (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3304      	adds	r3, #4
 8007054:	4619      	mov	r1, r3
 8007056:	4610      	mov	r0, r2
 8007058:	f7fe fb45 	bl	80056e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800705c:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <prvAddCurrentTaskToDelayedList+0xa4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	d202      	bcs.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007066:	4a08      	ldr	r2, [pc, #32]	@ (8007088 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6013      	str	r3, [r2, #0]
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	240012b8 	.word	0x240012b8
 8007078:	24000de0 	.word	0x24000de0
 800707c:	240012a0 	.word	0x240012a0
 8007080:	24001270 	.word	0x24001270
 8007084:	2400126c 	.word	0x2400126c
 8007088:	240012d4 	.word	0x240012d4

0800708c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	@ 0x28
 8007090:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007096:	f000 fb13 	bl	80076c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800709a:	4b1d      	ldr	r3, [pc, #116]	@ (8007110 <xTimerCreateTimerTask+0x84>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d021      	beq.n	80070e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070aa:	1d3a      	adds	r2, r7, #4
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	f107 030c 	add.w	r3, r7, #12
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe faab 	bl	8005610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	9202      	str	r2, [sp, #8]
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	2302      	movs	r3, #2
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	460a      	mov	r2, r1
 80070cc:	4911      	ldr	r1, [pc, #68]	@ (8007114 <xTimerCreateTimerTask+0x88>)
 80070ce:	4812      	ldr	r0, [pc, #72]	@ (8007118 <xTimerCreateTimerTask+0x8c>)
 80070d0:	f7ff f8a2 	bl	8006218 <xTaskCreateStatic>
 80070d4:	4603      	mov	r3, r0
 80070d6:	4a11      	ldr	r2, [pc, #68]	@ (800711c <xTimerCreateTimerTask+0x90>)
 80070d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070da:	4b10      	ldr	r3, [pc, #64]	@ (800711c <xTimerCreateTimerTask+0x90>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	613b      	str	r3, [r7, #16]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007104:	697b      	ldr	r3, [r7, #20]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	24001310 	.word	0x24001310
 8007114:	0800a408 	.word	0x0800a408
 8007118:	08007259 	.word	0x08007259
 800711c:	24001314 	.word	0x24001314

08007120 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	@ 0x28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800712e:	2300      	movs	r3, #0
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10b      	bne.n	8007150 <xTimerGenericCommand+0x30>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	623b      	str	r3, [r7, #32]
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	e7fd      	b.n	800714c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007150:	4b19      	ldr	r3, [pc, #100]	@ (80071b8 <xTimerGenericCommand+0x98>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02a      	beq.n	80071ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b05      	cmp	r3, #5
 8007168:	dc18      	bgt.n	800719c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800716a:	f7ff fead 	bl	8006ec8 <xTaskGetSchedulerState>
 800716e:	4603      	mov	r3, r0
 8007170:	2b02      	cmp	r3, #2
 8007172:	d109      	bne.n	8007188 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007174:	4b10      	ldr	r3, [pc, #64]	@ (80071b8 <xTimerGenericCommand+0x98>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	f107 0110 	add.w	r1, r7, #16
 800717c:	2300      	movs	r3, #0
 800717e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007180:	f7fe fc5a 	bl	8005a38 <xQueueGenericSend>
 8007184:	6278      	str	r0, [r7, #36]	@ 0x24
 8007186:	e012      	b.n	80071ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007188:	4b0b      	ldr	r3, [pc, #44]	@ (80071b8 <xTimerGenericCommand+0x98>)
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	f107 0110 	add.w	r1, r7, #16
 8007190:	2300      	movs	r3, #0
 8007192:	2200      	movs	r2, #0
 8007194:	f7fe fc50 	bl	8005a38 <xQueueGenericSend>
 8007198:	6278      	str	r0, [r7, #36]	@ 0x24
 800719a:	e008      	b.n	80071ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800719c:	4b06      	ldr	r3, [pc, #24]	@ (80071b8 <xTimerGenericCommand+0x98>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	f107 0110 	add.w	r1, r7, #16
 80071a4:	2300      	movs	r3, #0
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	f7fe fd48 	bl	8005c3c <xQueueGenericSendFromISR>
 80071ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3728      	adds	r7, #40	@ 0x28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	24001310 	.word	0x24001310

080071bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c6:	4b23      	ldr	r3, [pc, #140]	@ (8007254 <prvProcessExpiredTimer+0x98>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fabf 	bl	8005758 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d023      	beq.n	8007230 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	18d1      	adds	r1, r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	6978      	ldr	r0, [r7, #20]
 80071f6:	f000 f8d5 	bl	80073a4 <prvInsertTimerInActiveList>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d020      	beq.n	8007242 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007200:	2300      	movs	r3, #0
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2300      	movs	r3, #0
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	2100      	movs	r1, #0
 800720a:	6978      	ldr	r0, [r7, #20]
 800720c:	f7ff ff88 	bl	8007120 <xTimerGenericCommand>
 8007210:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d114      	bne.n	8007242 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	60fb      	str	r3, [r7, #12]
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	e7fd      	b.n	800722c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	b2da      	uxtb	r2, r3
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	6978      	ldr	r0, [r7, #20]
 8007248:	4798      	blx	r3
}
 800724a:	bf00      	nop
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	24001308 	.word	0x24001308

08007258 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007260:	f107 0308 	add.w	r3, r7, #8
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f859 	bl	800731c <prvGetNextExpireTime>
 800726a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4619      	mov	r1, r3
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f805 	bl	8007280 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007276:	f000 f8d7 	bl	8007428 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800727a:	bf00      	nop
 800727c:	e7f0      	b.n	8007260 <prvTimerTask+0x8>
	...

08007280 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800728a:	f7ff fa29 	bl	80066e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800728e:	f107 0308 	add.w	r3, r7, #8
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f866 	bl	8007364 <prvSampleTimeNow>
 8007298:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d130      	bne.n	8007302 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <prvProcessTimerOrBlockTask+0x3c>
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d806      	bhi.n	80072bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072ae:	f7ff fa25 	bl	80066fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff ff81 	bl	80071bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072ba:	e024      	b.n	8007306 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d008      	beq.n	80072d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072c2:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <prvProcessTimerOrBlockTask+0x90>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <prvProcessTimerOrBlockTask+0x50>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <prvProcessTimerOrBlockTask+0x52>
 80072d0:	2300      	movs	r3, #0
 80072d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007314 <prvProcessTimerOrBlockTask+0x94>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	4619      	mov	r1, r3
 80072e2:	f7fe ff65 	bl	80061b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072e6:	f7ff fa09 	bl	80066fc <xTaskResumeAll>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072f0:	4b09      	ldr	r3, [pc, #36]	@ (8007318 <prvProcessTimerOrBlockTask+0x98>)
 80072f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	f3bf 8f6f 	isb	sy
}
 8007300:	e001      	b.n	8007306 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007302:	f7ff f9fb 	bl	80066fc <xTaskResumeAll>
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	2400130c 	.word	0x2400130c
 8007314:	24001310 	.word	0x24001310
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007324:	4b0e      	ldr	r3, [pc, #56]	@ (8007360 <prvGetNextExpireTime+0x44>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <prvGetNextExpireTime+0x16>
 800732e:	2201      	movs	r2, #1
 8007330:	e000      	b.n	8007334 <prvGetNextExpireTime+0x18>
 8007332:	2200      	movs	r2, #0
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d105      	bne.n	800734c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007340:	4b07      	ldr	r3, [pc, #28]	@ (8007360 <prvGetNextExpireTime+0x44>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e001      	b.n	8007350 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007350:	68fb      	ldr	r3, [r7, #12]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	24001308 	.word	0x24001308

08007364 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800736c:	f7ff fa64 	bl	8006838 <xTaskGetTickCount>
 8007370:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007372:	4b0b      	ldr	r3, [pc, #44]	@ (80073a0 <prvSampleTimeNow+0x3c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	429a      	cmp	r2, r3
 800737a:	d205      	bcs.n	8007388 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800737c:	f000 f93a 	bl	80075f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e002      	b.n	800738e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800738e:	4a04      	ldr	r2, [pc, #16]	@ (80073a0 <prvSampleTimeNow+0x3c>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007394:	68fb      	ldr	r3, [r7, #12]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	24001318 	.word	0x24001318

080073a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d812      	bhi.n	80073f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e01b      	b.n	8007416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073de:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <prvInsertTimerInActiveList+0x7c>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7fe f97c 	bl	80056e6 <vListInsert>
 80073ee:	e012      	b.n	8007416 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d206      	bcs.n	8007406 <prvInsertTimerInActiveList+0x62>
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d302      	bcc.n	8007406 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	e007      	b.n	8007416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007406:	4b07      	ldr	r3, [pc, #28]	@ (8007424 <prvInsertTimerInActiveList+0x80>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3304      	adds	r3, #4
 800740e:	4619      	mov	r1, r3
 8007410:	4610      	mov	r0, r2
 8007412:	f7fe f968 	bl	80056e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007416:	697b      	ldr	r3, [r7, #20]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	2400130c 	.word	0x2400130c
 8007424:	24001308 	.word	0x24001308

08007428 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	@ 0x38
 800742c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800742e:	e0ce      	b.n	80075ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	da19      	bge.n	800746a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007436:	1d3b      	adds	r3, r7, #4
 8007438:	3304      	adds	r3, #4
 800743a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800743c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	61fb      	str	r3, [r7, #28]
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	e7fd      	b.n	8007456 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800745a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007460:	6850      	ldr	r0, [r2, #4]
 8007462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007464:	6892      	ldr	r2, [r2, #8]
 8007466:	4611      	mov	r1, r2
 8007468:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	f2c0 80ae 	blt.w	80075ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007480:	3304      	adds	r3, #4
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe f968 	bl	8005758 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007488:	463b      	mov	r3, r7
 800748a:	4618      	mov	r0, r3
 800748c:	f7ff ff6a 	bl	8007364 <prvSampleTimeNow>
 8007490:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b09      	cmp	r3, #9
 8007496:	f200 8097 	bhi.w	80075c8 <prvProcessReceivedCommands+0x1a0>
 800749a:	a201      	add	r2, pc, #4	@ (adr r2, 80074a0 <prvProcessReceivedCommands+0x78>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074c9 	.word	0x080074c9
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074c9 	.word	0x080074c9
 80074ac:	0800753f 	.word	0x0800753f
 80074b0:	08007553 	.word	0x08007553
 80074b4:	0800759f 	.word	0x0800759f
 80074b8:	080074c9 	.word	0x080074c9
 80074bc:	080074c9 	.word	0x080074c9
 80074c0:	0800753f 	.word	0x0800753f
 80074c4:	08007553 	.word	0x08007553
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	18d1      	adds	r1, r2, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e8:	f7ff ff5c 	bl	80073a4 <prvInsertTimerInActiveList>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d06c      	beq.n	80075cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d061      	beq.n	80075cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	441a      	add	r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	2300      	movs	r3, #0
 8007516:	2100      	movs	r1, #0
 8007518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800751a:	f7ff fe01 	bl	8007120 <xTimerGenericCommand>
 800751e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d152      	bne.n	80075cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	61bb      	str	r3, [r7, #24]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	b2da      	uxtb	r2, r3
 800754a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007550:	e03d      	b.n	80075ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007558:	f043 0301 	orr.w	r3, r3, #1
 800755c:	b2da      	uxtb	r2, r3
 800755e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007560:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007568:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	617b      	str	r3, [r7, #20]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	18d1      	adds	r1, r2, r3
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007598:	f7ff ff04 	bl	80073a4 <prvInsertTimerInActiveList>
					break;
 800759c:	e017      	b.n	80075ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800759e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80075ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ae:	f000 fbeb 	bl	8007d88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075b2:	e00c      	b.n	80075ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075c6:	e002      	b.n	80075ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80075c8:	bf00      	nop
 80075ca:	e000      	b.n	80075ce <prvProcessReceivedCommands+0x1a6>
					break;
 80075cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ce:	4b08      	ldr	r3, [pc, #32]	@ (80075f0 <prvProcessReceivedCommands+0x1c8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	1d39      	adds	r1, r7, #4
 80075d4:	2200      	movs	r2, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fbce 	bl	8005d78 <xQueueReceive>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f47f af26 	bne.w	8007430 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	3730      	adds	r7, #48	@ 0x30
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	24001310 	.word	0x24001310

080075f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075fa:	e049      	b.n	8007690 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075fc:	4b2e      	ldr	r3, [pc, #184]	@ (80076b8 <prvSwitchTimerLists+0xc4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007606:	4b2c      	ldr	r3, [pc, #176]	@ (80076b8 <prvSwitchTimerLists+0xc4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3304      	adds	r3, #4
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe f89f 	bl	8005758 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d02f      	beq.n	8007690 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4413      	add	r3, r2
 8007638:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	429a      	cmp	r2, r3
 8007640:	d90e      	bls.n	8007660 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800764e:	4b1a      	ldr	r3, [pc, #104]	@ (80076b8 <prvSwitchTimerLists+0xc4>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fe f844 	bl	80056e6 <vListInsert>
 800765e:	e017      	b.n	8007690 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007660:	2300      	movs	r3, #0
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	2300      	movs	r3, #0
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	2100      	movs	r1, #0
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff fd58 	bl	8007120 <xTimerGenericCommand>
 8007670:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	603b      	str	r3, [r7, #0]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007690:	4b09      	ldr	r3, [pc, #36]	@ (80076b8 <prvSwitchTimerLists+0xc4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1b0      	bne.n	80075fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800769a:	4b07      	ldr	r3, [pc, #28]	@ (80076b8 <prvSwitchTimerLists+0xc4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076a0:	4b06      	ldr	r3, [pc, #24]	@ (80076bc <prvSwitchTimerLists+0xc8>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a04      	ldr	r2, [pc, #16]	@ (80076b8 <prvSwitchTimerLists+0xc4>)
 80076a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076a8:	4a04      	ldr	r2, [pc, #16]	@ (80076bc <prvSwitchTimerLists+0xc8>)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	6013      	str	r3, [r2, #0]
}
 80076ae:	bf00      	nop
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	24001308 	.word	0x24001308
 80076bc:	2400130c 	.word	0x2400130c

080076c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076c6:	f000 f96f 	bl	80079a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076ca:	4b15      	ldr	r3, [pc, #84]	@ (8007720 <prvCheckForValidListAndQueue+0x60>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d120      	bne.n	8007714 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076d2:	4814      	ldr	r0, [pc, #80]	@ (8007724 <prvCheckForValidListAndQueue+0x64>)
 80076d4:	f7fd ffb6 	bl	8005644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076d8:	4813      	ldr	r0, [pc, #76]	@ (8007728 <prvCheckForValidListAndQueue+0x68>)
 80076da:	f7fd ffb3 	bl	8005644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076de:	4b13      	ldr	r3, [pc, #76]	@ (800772c <prvCheckForValidListAndQueue+0x6c>)
 80076e0:	4a10      	ldr	r2, [pc, #64]	@ (8007724 <prvCheckForValidListAndQueue+0x64>)
 80076e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076e4:	4b12      	ldr	r3, [pc, #72]	@ (8007730 <prvCheckForValidListAndQueue+0x70>)
 80076e6:	4a10      	ldr	r2, [pc, #64]	@ (8007728 <prvCheckForValidListAndQueue+0x68>)
 80076e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076ea:	2300      	movs	r3, #0
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	4b11      	ldr	r3, [pc, #68]	@ (8007734 <prvCheckForValidListAndQueue+0x74>)
 80076f0:	4a11      	ldr	r2, [pc, #68]	@ (8007738 <prvCheckForValidListAndQueue+0x78>)
 80076f2:	2110      	movs	r1, #16
 80076f4:	200a      	movs	r0, #10
 80076f6:	f7fe f8c3 	bl	8005880 <xQueueGenericCreateStatic>
 80076fa:	4603      	mov	r3, r0
 80076fc:	4a08      	ldr	r2, [pc, #32]	@ (8007720 <prvCheckForValidListAndQueue+0x60>)
 80076fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007700:	4b07      	ldr	r3, [pc, #28]	@ (8007720 <prvCheckForValidListAndQueue+0x60>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007708:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <prvCheckForValidListAndQueue+0x60>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	490b      	ldr	r1, [pc, #44]	@ (800773c <prvCheckForValidListAndQueue+0x7c>)
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fd24 	bl	800615c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007714:	f000 f97a 	bl	8007a0c <vPortExitCritical>
}
 8007718:	bf00      	nop
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	24001310 	.word	0x24001310
 8007724:	240012e0 	.word	0x240012e0
 8007728:	240012f4 	.word	0x240012f4
 800772c:	24001308 	.word	0x24001308
 8007730:	2400130c 	.word	0x2400130c
 8007734:	240013bc 	.word	0x240013bc
 8007738:	2400131c 	.word	0x2400131c
 800773c:	0800a410 	.word	0x0800a410

08007740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3b04      	subs	r3, #4
 8007750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3b04      	subs	r3, #4
 800775e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f023 0201 	bic.w	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3b04      	subs	r3, #4
 800776e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007770:	4a0c      	ldr	r2, [pc, #48]	@ (80077a4 <pxPortInitialiseStack+0x64>)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3b14      	subs	r3, #20
 800777a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3b04      	subs	r3, #4
 8007786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f06f 0202 	mvn.w	r2, #2
 800778e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3b20      	subs	r3, #32
 8007794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007796:	68fb      	ldr	r3, [r7, #12]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	080077a9 	.word	0x080077a9

080077a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077b2:	4b13      	ldr	r3, [pc, #76]	@ (8007800 <prvTaskExitError+0x58>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d00b      	beq.n	80077d4 <prvTaskExitError+0x2c>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	bf00      	nop
 80077d2:	e7fd      	b.n	80077d0 <prvTaskExitError+0x28>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	60bb      	str	r3, [r7, #8]
}
 80077e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077e8:	bf00      	nop
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0fc      	beq.n	80077ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	24000040 	.word	0x24000040
	...

08007810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007810:	4b07      	ldr	r3, [pc, #28]	@ (8007830 <pxCurrentTCBConst2>)
 8007812:	6819      	ldr	r1, [r3, #0]
 8007814:	6808      	ldr	r0, [r1, #0]
 8007816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	f380 8809 	msr	PSP, r0
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f04f 0000 	mov.w	r0, #0
 8007826:	f380 8811 	msr	BASEPRI, r0
 800782a:	4770      	bx	lr
 800782c:	f3af 8000 	nop.w

08007830 <pxCurrentTCBConst2>:
 8007830:	24000de0 	.word	0x24000de0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop

08007838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007838:	4808      	ldr	r0, [pc, #32]	@ (800785c <prvPortStartFirstTask+0x24>)
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	6800      	ldr	r0, [r0, #0]
 800783e:	f380 8808 	msr	MSP, r0
 8007842:	f04f 0000 	mov.w	r0, #0
 8007846:	f380 8814 	msr	CONTROL, r0
 800784a:	b662      	cpsie	i
 800784c:	b661      	cpsie	f
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	df00      	svc	0
 8007858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800785a:	bf00      	nop
 800785c:	e000ed08 	.word	0xe000ed08

08007860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007866:	4b47      	ldr	r3, [pc, #284]	@ (8007984 <xPortStartScheduler+0x124>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a47      	ldr	r2, [pc, #284]	@ (8007988 <xPortStartScheduler+0x128>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d10b      	bne.n	8007888 <xPortStartScheduler+0x28>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007888:	4b3e      	ldr	r3, [pc, #248]	@ (8007984 <xPortStartScheduler+0x124>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a3f      	ldr	r2, [pc, #252]	@ (800798c <xPortStartScheduler+0x12c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d10b      	bne.n	80078aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	613b      	str	r3, [r7, #16]
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	e7fd      	b.n	80078a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078aa:	4b39      	ldr	r3, [pc, #228]	@ (8007990 <xPortStartScheduler+0x130>)
 80078ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	22ff      	movs	r2, #255	@ 0xff
 80078ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	4b31      	ldr	r3, [pc, #196]	@ (8007994 <xPortStartScheduler+0x134>)
 80078d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078d2:	4b31      	ldr	r3, [pc, #196]	@ (8007998 <xPortStartScheduler+0x138>)
 80078d4:	2207      	movs	r2, #7
 80078d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078d8:	e009      	b.n	80078ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80078da:	4b2f      	ldr	r3, [pc, #188]	@ (8007998 <xPortStartScheduler+0x138>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3b01      	subs	r3, #1
 80078e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007998 <xPortStartScheduler+0x138>)
 80078e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f6:	2b80      	cmp	r3, #128	@ 0x80
 80078f8:	d0ef      	beq.n	80078da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078fa:	4b27      	ldr	r3, [pc, #156]	@ (8007998 <xPortStartScheduler+0x138>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f1c3 0307 	rsb	r3, r3, #7
 8007902:	2b04      	cmp	r3, #4
 8007904:	d00b      	beq.n	800791e <xPortStartScheduler+0xbe>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	60bb      	str	r3, [r7, #8]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800791e:	4b1e      	ldr	r3, [pc, #120]	@ (8007998 <xPortStartScheduler+0x138>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	4a1c      	ldr	r2, [pc, #112]	@ (8007998 <xPortStartScheduler+0x138>)
 8007926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007928:	4b1b      	ldr	r3, [pc, #108]	@ (8007998 <xPortStartScheduler+0x138>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007930:	4a19      	ldr	r2, [pc, #100]	@ (8007998 <xPortStartScheduler+0x138>)
 8007932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800793c:	4b17      	ldr	r3, [pc, #92]	@ (800799c <xPortStartScheduler+0x13c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a16      	ldr	r2, [pc, #88]	@ (800799c <xPortStartScheduler+0x13c>)
 8007942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007948:	4b14      	ldr	r3, [pc, #80]	@ (800799c <xPortStartScheduler+0x13c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a13      	ldr	r2, [pc, #76]	@ (800799c <xPortStartScheduler+0x13c>)
 800794e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007954:	f000 f8da 	bl	8007b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007958:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <xPortStartScheduler+0x140>)
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800795e:	f000 f8f9 	bl	8007b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007962:	4b10      	ldr	r3, [pc, #64]	@ (80079a4 <xPortStartScheduler+0x144>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a0f      	ldr	r2, [pc, #60]	@ (80079a4 <xPortStartScheduler+0x144>)
 8007968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800796c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800796e:	f7ff ff63 	bl	8007838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007972:	f7ff f82b 	bl	80069cc <vTaskSwitchContext>
	prvTaskExitError();
 8007976:	f7ff ff17 	bl	80077a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed00 	.word	0xe000ed00
 8007988:	410fc271 	.word	0x410fc271
 800798c:	410fc270 	.word	0x410fc270
 8007990:	e000e400 	.word	0xe000e400
 8007994:	2400140c 	.word	0x2400140c
 8007998:	24001410 	.word	0x24001410
 800799c:	e000ed20 	.word	0xe000ed20
 80079a0:	24000040 	.word	0x24000040
 80079a4:	e000ef34 	.word	0xe000ef34

080079a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	607b      	str	r3, [r7, #4]
}
 80079c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079c2:	4b10      	ldr	r3, [pc, #64]	@ (8007a04 <vPortEnterCritical+0x5c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007a04 <vPortEnterCritical+0x5c>)
 80079ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a04 <vPortEnterCritical+0x5c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d110      	bne.n	80079f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a08 <vPortEnterCritical+0x60>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	603b      	str	r3, [r7, #0]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <vPortEnterCritical+0x4a>
	}
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	24000040 	.word	0x24000040
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a12:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <vPortExitCritical+0x50>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10b      	bne.n	8007a32 <vPortExitCritical+0x26>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	607b      	str	r3, [r7, #4]
}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	e7fd      	b.n	8007a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a32:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <vPortExitCritical+0x50>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	4a08      	ldr	r2, [pc, #32]	@ (8007a5c <vPortExitCritical+0x50>)
 8007a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a3c:	4b07      	ldr	r3, [pc, #28]	@ (8007a5c <vPortExitCritical+0x50>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d105      	bne.n	8007a50 <vPortExitCritical+0x44>
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f383 8811 	msr	BASEPRI, r3
}
 8007a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	24000040 	.word	0x24000040

08007a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a60:	f3ef 8009 	mrs	r0, PSP
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	4b15      	ldr	r3, [pc, #84]	@ (8007ac0 <pxCurrentTCBConst>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	f01e 0f10 	tst.w	lr, #16
 8007a70:	bf08      	it	eq
 8007a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	6010      	str	r0, [r2, #0]
 8007a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a84:	f380 8811 	msr	BASEPRI, r0
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f7fe ff9c 	bl	80069cc <vTaskSwitchContext>
 8007a94:	f04f 0000 	mov.w	r0, #0
 8007a98:	f380 8811 	msr	BASEPRI, r0
 8007a9c:	bc09      	pop	{r0, r3}
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	6808      	ldr	r0, [r1, #0]
 8007aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa6:	f01e 0f10 	tst.w	lr, #16
 8007aaa:	bf08      	it	eq
 8007aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ab0:	f380 8809 	msr	PSP, r0
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	f3af 8000 	nop.w

08007ac0 <pxCurrentTCBConst>:
 8007ac0:	24000de0 	.word	0x24000de0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop

08007ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ae2:	f7fe feb9 	bl	8006858 <xTaskIncrementTick>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aec:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <xPortSysTickHandler+0x40>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f383 8811 	msr	BASEPRI, r3
}
 8007afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b10:	4b0b      	ldr	r3, [pc, #44]	@ (8007b40 <vPortSetupTimerInterrupt+0x34>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b16:	4b0b      	ldr	r3, [pc, #44]	@ (8007b44 <vPortSetupTimerInterrupt+0x38>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b48 <vPortSetupTimerInterrupt+0x3c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0a      	ldr	r2, [pc, #40]	@ (8007b4c <vPortSetupTimerInterrupt+0x40>)
 8007b22:	fba2 2303 	umull	r2, r3, r2, r3
 8007b26:	099b      	lsrs	r3, r3, #6
 8007b28:	4a09      	ldr	r2, [pc, #36]	@ (8007b50 <vPortSetupTimerInterrupt+0x44>)
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b2e:	4b04      	ldr	r3, [pc, #16]	@ (8007b40 <vPortSetupTimerInterrupt+0x34>)
 8007b30:	2207      	movs	r2, #7
 8007b32:	601a      	str	r2, [r3, #0]
}
 8007b34:	bf00      	nop
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	e000e010 	.word	0xe000e010
 8007b44:	e000e018 	.word	0xe000e018
 8007b48:	24000000 	.word	0x24000000
 8007b4c:	10624dd3 	.word	0x10624dd3
 8007b50:	e000e014 	.word	0xe000e014

08007b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b64 <vPortEnableVFP+0x10>
 8007b58:	6801      	ldr	r1, [r0, #0]
 8007b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b5e:	6001      	str	r1, [r0, #0]
 8007b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b62:	bf00      	nop
 8007b64:	e000ed88 	.word	0xe000ed88

08007b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b6e:	f3ef 8305 	mrs	r3, IPSR
 8007b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b0f      	cmp	r3, #15
 8007b78:	d915      	bls.n	8007ba6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b7a:	4a18      	ldr	r2, [pc, #96]	@ (8007bdc <vPortValidateInterruptPriority+0x74>)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b84:	4b16      	ldr	r3, [pc, #88]	@ (8007be0 <vPortValidateInterruptPriority+0x78>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	7afa      	ldrb	r2, [r7, #11]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d20b      	bcs.n	8007ba6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8007be4 <vPortValidateInterruptPriority+0x7c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bae:	4b0e      	ldr	r3, [pc, #56]	@ (8007be8 <vPortValidateInterruptPriority+0x80>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d90b      	bls.n	8007bce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	603b      	str	r3, [r7, #0]
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <vPortValidateInterruptPriority+0x62>
	}
 8007bce:	bf00      	nop
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	e000e3f0 	.word	0xe000e3f0
 8007be0:	2400140c 	.word	0x2400140c
 8007be4:	e000ed0c 	.word	0xe000ed0c
 8007be8:	24001410 	.word	0x24001410

08007bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	@ 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bf8:	f7fe fd72 	bl	80066e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8007d70 <pvPortMalloc+0x184>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c04:	f000 f924 	bl	8007e50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c08:	4b5a      	ldr	r3, [pc, #360]	@ (8007d74 <pvPortMalloc+0x188>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 8095 	bne.w	8007d40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01e      	beq.n	8007c5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4413      	add	r3, r2
 8007c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d015      	beq.n	8007c5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <pvPortMalloc+0x6e>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	617b      	str	r3, [r7, #20]
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	e7fd      	b.n	8007c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d06f      	beq.n	8007d40 <pvPortMalloc+0x154>
 8007c60:	4b45      	ldr	r3, [pc, #276]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d86a      	bhi.n	8007d40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c6a:	4b44      	ldr	r3, [pc, #272]	@ (8007d7c <pvPortMalloc+0x190>)
 8007c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c6e:	4b43      	ldr	r3, [pc, #268]	@ (8007d7c <pvPortMalloc+0x190>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c74:	e004      	b.n	8007c80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d903      	bls.n	8007c92 <pvPortMalloc+0xa6>
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1f1      	bne.n	8007c76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c92:	4b37      	ldr	r3, [pc, #220]	@ (8007d70 <pvPortMalloc+0x184>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d051      	beq.n	8007d40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	4413      	add	r3, r2
 8007ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	1ad2      	subs	r2, r2, r3
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d920      	bls.n	8007d00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <pvPortMalloc+0xfc>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	613b      	str	r3, [r7, #16]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cfa:	69b8      	ldr	r0, [r7, #24]
 8007cfc:	f000 f90a 	bl	8007f14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d00:	4b1d      	ldr	r3, [pc, #116]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007d0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b1b      	ldr	r3, [pc, #108]	@ (8007d80 <pvPortMalloc+0x194>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d203      	bcs.n	8007d22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d1a:	4b17      	ldr	r3, [pc, #92]	@ (8007d78 <pvPortMalloc+0x18c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a18      	ldr	r2, [pc, #96]	@ (8007d80 <pvPortMalloc+0x194>)
 8007d20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	4b13      	ldr	r3, [pc, #76]	@ (8007d74 <pvPortMalloc+0x188>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d36:	4b13      	ldr	r3, [pc, #76]	@ (8007d84 <pvPortMalloc+0x198>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	4a11      	ldr	r2, [pc, #68]	@ (8007d84 <pvPortMalloc+0x198>)
 8007d3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d40:	f7fe fcdc 	bl	80066fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <pvPortMalloc+0x17a>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60fb      	str	r3, [r7, #12]
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	e7fd      	b.n	8007d62 <pvPortMalloc+0x176>
	return pvReturn;
 8007d66:	69fb      	ldr	r3, [r7, #28]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3728      	adds	r7, #40	@ 0x28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	2400501c 	.word	0x2400501c
 8007d74:	24005030 	.word	0x24005030
 8007d78:	24005020 	.word	0x24005020
 8007d7c:	24005014 	.word	0x24005014
 8007d80:	24005024 	.word	0x24005024
 8007d84:	24005028 	.word	0x24005028

08007d88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d04f      	beq.n	8007e3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d9a:	2308      	movs	r3, #8
 8007d9c:	425b      	negs	r3, r3
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	4b25      	ldr	r3, [pc, #148]	@ (8007e44 <vPortFree+0xbc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4013      	ands	r3, r2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <vPortFree+0x46>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	60fb      	str	r3, [r7, #12]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <vPortFree+0x66>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	60bb      	str	r3, [r7, #8]
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	e7fd      	b.n	8007dea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	4b14      	ldr	r3, [pc, #80]	@ (8007e44 <vPortFree+0xbc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4013      	ands	r3, r2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01e      	beq.n	8007e3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11a      	bne.n	8007e3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	4b0e      	ldr	r3, [pc, #56]	@ (8007e44 <vPortFree+0xbc>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	43db      	mvns	r3, r3
 8007e0e:	401a      	ands	r2, r3
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e14:	f7fe fc64 	bl	80066e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e48 <vPortFree+0xc0>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4413      	add	r3, r2
 8007e22:	4a09      	ldr	r2, [pc, #36]	@ (8007e48 <vPortFree+0xc0>)
 8007e24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e26:	6938      	ldr	r0, [r7, #16]
 8007e28:	f000 f874 	bl	8007f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e2c:	4b07      	ldr	r3, [pc, #28]	@ (8007e4c <vPortFree+0xc4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	4a06      	ldr	r2, [pc, #24]	@ (8007e4c <vPortFree+0xc4>)
 8007e34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e36:	f7fe fc61 	bl	80066fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e3a:	bf00      	nop
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	24005030 	.word	0x24005030
 8007e48:	24005020 	.word	0x24005020
 8007e4c:	2400502c 	.word	0x2400502c

08007e50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007e5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e5c:	4b27      	ldr	r3, [pc, #156]	@ (8007efc <prvHeapInit+0xac>)
 8007e5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00c      	beq.n	8007e84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3307      	adds	r3, #7
 8007e6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0307 	bic.w	r3, r3, #7
 8007e76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007efc <prvHeapInit+0xac>)
 8007e80:	4413      	add	r3, r2
 8007e82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e88:	4a1d      	ldr	r2, [pc, #116]	@ (8007f00 <prvHeapInit+0xb0>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007f00 <prvHeapInit+0xb0>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	4413      	add	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e9c:	2208      	movs	r2, #8
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0307 	bic.w	r3, r3, #7
 8007eaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a15      	ldr	r2, [pc, #84]	@ (8007f04 <prvHeapInit+0xb4>)
 8007eb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007eb2:	4b14      	ldr	r3, [pc, #80]	@ (8007f04 <prvHeapInit+0xb4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eba:	4b12      	ldr	r3, [pc, #72]	@ (8007f04 <prvHeapInit+0xb4>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	1ad2      	subs	r2, r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <prvHeapInit+0xb4>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	4a0a      	ldr	r2, [pc, #40]	@ (8007f08 <prvHeapInit+0xb8>)
 8007ede:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	4a09      	ldr	r2, [pc, #36]	@ (8007f0c <prvHeapInit+0xbc>)
 8007ee6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ee8:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <prvHeapInit+0xc0>)
 8007eea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007eee:	601a      	str	r2, [r3, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	24001414 	.word	0x24001414
 8007f00:	24005014 	.word	0x24005014
 8007f04:	2400501c 	.word	0x2400501c
 8007f08:	24005024 	.word	0x24005024
 8007f0c:	24005020 	.word	0x24005020
 8007f10:	24005030 	.word	0x24005030

08007f14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f1c:	4b28      	ldr	r3, [pc, #160]	@ (8007fc0 <prvInsertBlockIntoFreeList+0xac>)
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e002      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x14>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d8f7      	bhi.n	8007f22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d108      	bne.n	8007f56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	441a      	add	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d118      	bne.n	8007f9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b15      	ldr	r3, [pc, #84]	@ (8007fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d00d      	beq.n	8007f92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	441a      	add	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	e008      	b.n	8007fa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f92:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e003      	b.n	8007fa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d002      	beq.n	8007fb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	24005014 	.word	0x24005014
 8007fc4:	2400501c 	.word	0x2400501c

08007fc8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007fce:	4b26      	ldr	r3, [pc, #152]	@ (8008068 <_DoInit+0xa0>)
 8007fd0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007fd2:	22a8      	movs	r2, #168	@ 0xa8
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	6838      	ldr	r0, [r7, #0]
 8007fd8:	f000 ff12 	bl	8008e00 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2203      	movs	r2, #3
 8007fe0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	4a20      	ldr	r2, [pc, #128]	@ (800806c <_DoInit+0xa4>)
 8007fec:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8008070 <_DoInit+0xa8>)
 8007ff2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ffa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2200      	movs	r2, #0
 8008000:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2200      	movs	r2, #0
 8008006:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	4a16      	ldr	r2, [pc, #88]	@ (800806c <_DoInit+0xa4>)
 8008012:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	4a17      	ldr	r2, [pc, #92]	@ (8008074 <_DoInit+0xac>)
 8008018:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2210      	movs	r2, #16
 800801e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2200      	movs	r2, #0
 8008024:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2200      	movs	r2, #0
 800802a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2200      	movs	r2, #0
 8008030:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008032:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008036:	2300      	movs	r3, #0
 8008038:	607b      	str	r3, [r7, #4]
 800803a:	e00c      	b.n	8008056 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f1c3 030f 	rsb	r3, r3, #15
 8008042:	4a0d      	ldr	r2, [pc, #52]	@ (8008078 <_DoInit+0xb0>)
 8008044:	5cd1      	ldrb	r1, [r2, r3]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	460a      	mov	r2, r1
 800804e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3301      	adds	r3, #1
 8008054:	607b      	str	r3, [r7, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b0f      	cmp	r3, #15
 800805a:	d9ef      	bls.n	800803c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800805c:	f3bf 8f5f 	dmb	sy
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	24005034 	.word	0x24005034
 800806c:	0800a418 	.word	0x0800a418
 8008070:	240050dc 	.word	0x240050dc
 8008074:	240054dc 	.word	0x240054dc
 8008078:	0800a51c 	.word	0x0800a51c

0800807c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	@ 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8008088:	2300      	movs	r3, #0
 800808a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	429a      	cmp	r2, r3
 800809e:	d905      	bls.n	80080ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80080aa:	e007      	b.n	80080bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	69b9      	ldr	r1, [r7, #24]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	1acb      	subs	r3, r1, r3
 80080b6:	4413      	add	r3, r2
 80080b8:	3b01      	subs	r3, #1
 80080ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c6:	4293      	cmp	r3, r2
 80080c8:	bf28      	it	cs
 80080ca:	4613      	movcs	r3, r2
 80080cc:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80080ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bf28      	it	cs
 80080d6:	4613      	movcs	r3, r2
 80080d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	4413      	add	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80080e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	6978      	ldr	r0, [r7, #20]
 80080ea:	f000 ff8a 	bl	8009002 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80080ee:	6a3a      	ldr	r2, [r7, #32]
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	4413      	add	r3, r2
 80080f4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fa:	4413      	add	r3, r2
 80080fc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	4413      	add	r3, r2
 800810c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	429a      	cmp	r2, r3
 8008116:	d101      	bne.n	800811c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008118:	2300      	movs	r3, #0
 800811a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800811c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1b2      	bne.n	8008092 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800812c:	6a3b      	ldr	r3, [r7, #32]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3728      	adds	r7, #40	@ 0x28
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008136:	b580      	push	{r7, lr}
 8008138:	b088      	sub	sp, #32
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	429a      	cmp	r2, r3
 8008158:	d911      	bls.n	800817e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	4413      	add	r3, r2
 8008162:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	6938      	ldr	r0, [r7, #16]
 800816a:	f000 ff4a 	bl	8009002 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800816e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	441a      	add	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800817c:	e01f      	b.n	80081be <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	6938      	ldr	r0, [r7, #16]
 8008192:	f000 ff36 	bl	8009002 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	4413      	add	r3, r2
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6938      	ldr	r0, [r7, #16]
 80081b0:	f000 ff27 	bl	8009002 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80081b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	60da      	str	r2, [r3, #12]
}
 80081be:	bf00      	nop
 80081c0:	3720      	adds	r7, #32
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80081c6:	b480      	push	{r7}
 80081c8:	b087      	sub	sp, #28
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d808      	bhi.n	80081f4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	1ad2      	subs	r2, r2, r3
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	4413      	add	r3, r2
 80081ee:	3b01      	subs	r3, #1
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	e004      	b.n	80081fe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80081fe:	697b      	ldr	r3, [r7, #20]
}
 8008200:	4618      	mov	r0, r3
 8008202:	371c      	adds	r7, #28
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	4613      	mov	r3, r2
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	4413      	add	r3, r2
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	4a1f      	ldr	r2, [pc, #124]	@ (80082a8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800822a:	4413      	add	r3, r2
 800822c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d029      	beq.n	800828a <SEGGER_RTT_WriteNoLock+0x7e>
 8008236:	2b02      	cmp	r3, #2
 8008238:	d82e      	bhi.n	8008298 <SEGGER_RTT_WriteNoLock+0x8c>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <SEGGER_RTT_WriteNoLock+0x38>
 800823e:	2b01      	cmp	r3, #1
 8008240:	d013      	beq.n	800826a <SEGGER_RTT_WriteNoLock+0x5e>
 8008242:	e029      	b.n	8008298 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008244:	6978      	ldr	r0, [r7, #20]
 8008246:	f7ff ffbe 	bl	80081c6 <_GetAvailWriteSpace>
 800824a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	429a      	cmp	r2, r3
 8008252:	d202      	bcs.n	800825a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8008254:	2300      	movs	r3, #0
 8008256:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008258:	e021      	b.n	800829e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	6978      	ldr	r0, [r7, #20]
 8008264:	f7ff ff67 	bl	8008136 <_WriteNoCheck>
    break;
 8008268:	e019      	b.n	800829e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800826a:	6978      	ldr	r0, [r7, #20]
 800826c:	f7ff ffab 	bl	80081c6 <_GetAvailWriteSpace>
 8008270:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	4293      	cmp	r3, r2
 8008278:	bf28      	it	cs
 800827a:	4613      	movcs	r3, r2
 800827c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	69b9      	ldr	r1, [r7, #24]
 8008282:	6978      	ldr	r0, [r7, #20]
 8008284:	f7ff ff57 	bl	8008136 <_WriteNoCheck>
    break;
 8008288:	e009      	b.n	800829e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	69b9      	ldr	r1, [r7, #24]
 800828e:	6978      	ldr	r0, [r7, #20]
 8008290:	f7ff fef4 	bl	800807c <_WriteBlocking>
 8008294:	61f8      	str	r0, [r7, #28]
    break;
 8008296:	e002      	b.n	800829e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8008298:	2300      	movs	r3, #0
 800829a:	61fb      	str	r3, [r7, #28]
    break;
 800829c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800829e:	69fb      	ldr	r3, [r7, #28]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	24005034 	.word	0x24005034

080082ac <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80082b8:	4b0e      	ldr	r3, [pc, #56]	@ (80082f4 <SEGGER_RTT_Write+0x48>)
 80082ba:	61fb      	str	r3, [r7, #28]
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b53      	cmp	r3, #83	@ 0x53
 80082c4:	d001      	beq.n	80082ca <SEGGER_RTT_Write+0x1e>
 80082c6:	f7ff fe7f 	bl	8007fc8 <_DoInit>
  SEGGER_RTT_LOCK();
 80082ca:	f3ef 8311 	mrs	r3, BASEPRI
 80082ce:	f04f 0120 	mov.w	r1, #32
 80082d2:	f381 8811 	msr	BASEPRI, r1
 80082d6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7ff ff95 	bl	800820c <SEGGER_RTT_WriteNoLock>
 80082e2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80082ea:	697b      	ldr	r3, [r7, #20]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	24005034 	.word	0x24005034

080082f8 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d80e      	bhi.n	8008334 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d115      	bne.n	800836c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6918      	ldr	r0, [r3, #16]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6819      	ldr	r1, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	461a      	mov	r2, r3
 800834e:	f7ff ffad 	bl	80082ac <SEGGER_RTT_Write>
 8008352:	4602      	mov	r2, r0
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	d004      	beq.n	8008366 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f04f 32ff 	mov.w	r2, #4294967295
 8008362:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8008364:	e002      	b.n	800836c <_StoreChar+0x74>
      p->Cnt = 0u;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	609a      	str	r2, [r3, #8]
}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8008374:	b580      	push	{r7, lr}
 8008376:	b08a      	sub	sp, #40	@ 0x28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8008386:	2301      	movs	r3, #1
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800838a:	2301      	movs	r3, #1
 800838c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800838e:	e007      	b.n	80083a0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8008390:	6a3a      	ldr	r2, [r7, #32]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	fbb2 f3f3 	udiv	r3, r2, r3
 8008398:	623b      	str	r3, [r7, #32]
    Width++;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	3301      	adds	r3, #1
 800839e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80083a0:	6a3a      	ldr	r2, [r7, #32]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d2f3      	bcs.n	8008390 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d901      	bls.n	80083b4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80083b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d125      	bne.n	800840a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d022      	beq.n	800840a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80083c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d005      	beq.n	80083da <_PrintUnsigned+0x66>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <_PrintUnsigned+0x66>
        c = '0';
 80083d4:	2330      	movs	r3, #48	@ 0x30
 80083d6:	76fb      	strb	r3, [r7, #27]
 80083d8:	e001      	b.n	80083de <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80083da:	2320      	movs	r3, #32
 80083dc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80083de:	e00b      	b.n	80083f8 <_PrintUnsigned+0x84>
        FieldWidth--;
 80083e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e2:	3b01      	subs	r3, #1
 80083e4:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80083e6:	7efb      	ldrb	r3, [r7, #27]
 80083e8:	4619      	mov	r1, r3
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ff84 	bl	80082f8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	db07      	blt.n	8008408 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80083f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <_PrintUnsigned+0x96>
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	429a      	cmp	r2, r3
 8008404:	d3ec      	bcc.n	80083e0 <_PrintUnsigned+0x6c>
 8008406:	e000      	b.n	800840a <_PrintUnsigned+0x96>
          break;
 8008408:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	db55      	blt.n	80084be <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d903      	bls.n	8008420 <_PrintUnsigned+0xac>
        NumDigits--;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	e009      	b.n	8008434 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	fbb2 f3f3 	udiv	r3, r2, r3
 8008428:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d200      	bcs.n	8008434 <_PrintUnsigned+0xc0>
          break;
 8008432:	e005      	b.n	8008440 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800843e:	e7e8      	b.n	8008412 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	fbb2 f3f3 	udiv	r3, r2, r3
 8008448:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844e:	fb02 f303 	mul.w	r3, r2, r3
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8008458:	4a1b      	ldr	r2, [pc, #108]	@ (80084c8 <_PrintUnsigned+0x154>)
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4413      	add	r3, r2
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	4619      	mov	r1, r3
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7ff ff48 	bl	80082f8 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	db08      	blt.n	8008482 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8008470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	fbb2 f3f3 	udiv	r3, r2, r3
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1df      	bne.n	8008440 <_PrintUnsigned+0xcc>
 8008480:	e000      	b.n	8008484 <_PrintUnsigned+0x110>
        break;
 8008482:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8008484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d017      	beq.n	80084be <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	2b00      	cmp	r3, #0
 8008492:	d014      	beq.n	80084be <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008494:	e00a      	b.n	80084ac <_PrintUnsigned+0x138>
          FieldWidth--;
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	3b01      	subs	r3, #1
 800849a:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 800849c:	2120      	movs	r1, #32
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7ff ff2a 	bl	80082f8 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	db07      	blt.n	80084bc <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <_PrintUnsigned+0x14a>
 80084b2:	69fa      	ldr	r2, [r7, #28]
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d3ed      	bcc.n	8008496 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80084ba:	e000      	b.n	80084be <_PrintUnsigned+0x14a>
            break;
 80084bc:	bf00      	nop
}
 80084be:	bf00      	nop
 80084c0:	3728      	adds	r7, #40	@ 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	0800a530 	.word	0x0800a530

080084cc <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	bfb8      	it	lt
 80084e0:	425b      	neglt	r3, r3
 80084e2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80084e4:	2301      	movs	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80084e8:	e007      	b.n	80084fa <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80084f2:	613b      	str	r3, [r7, #16]
    Width++;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	3301      	adds	r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	429a      	cmp	r2, r3
 8008500:	daf3      	bge.n	80084ea <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	429a      	cmp	r2, r3
 8008508:	d901      	bls.n	800850e <_PrintInt+0x42>
    Width = NumDigits;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00a      	beq.n	800852a <_PrintInt+0x5e>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	db04      	blt.n	8008524 <_PrintInt+0x58>
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <_PrintInt+0x5e>
    FieldWidth--;
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	3b01      	subs	r3, #1
 8008528:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <_PrintInt+0x6e>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01c      	beq.n	8008574 <_PrintInt+0xa8>
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d117      	bne.n	8008574 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d014      	beq.n	8008574 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800854a:	e00a      	b.n	8008562 <_PrintInt+0x96>
        FieldWidth--;
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	3b01      	subs	r3, #1
 8008550:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8008552:	2120      	movs	r1, #32
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7ff fecf 	bl	80082f8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	db07      	blt.n	8008572 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <_PrintInt+0xa8>
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	429a      	cmp	r2, r3
 800856e:	d3ed      	bcc.n	800854c <_PrintInt+0x80>
 8008570:	e000      	b.n	8008574 <_PrintInt+0xa8>
          break;
 8008572:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	db4a      	blt.n	8008612 <_PrintInt+0x146>
    if (v < 0) {
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	da07      	bge.n	8008592 <_PrintInt+0xc6>
      v = -v;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	425b      	negs	r3, r3
 8008586:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8008588:	212d      	movs	r1, #45	@ 0x2d
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff feb4 	bl	80082f8 <_StoreChar>
 8008590:	e008      	b.n	80085a4 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 800859c:	212b      	movs	r1, #43	@ 0x2b
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff feaa 	bl	80082f8 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	db32      	blt.n	8008612 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80085ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01f      	beq.n	80085f6 <_PrintInt+0x12a>
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d11a      	bne.n	80085f6 <_PrintInt+0x12a>
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d117      	bne.n	80085f6 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d014      	beq.n	80085f6 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80085cc:	e00a      	b.n	80085e4 <_PrintInt+0x118>
            FieldWidth--;
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80085d4:	2130      	movs	r1, #48	@ 0x30
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff fe8e 	bl	80082f8 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	db07      	blt.n	80085f4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <_PrintInt+0x12a>
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d3ed      	bcc.n	80085ce <_PrintInt+0x102>
 80085f2:	e000      	b.n	80085f6 <_PrintInt+0x12a>
              break;
 80085f4:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	db09      	blt.n	8008612 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff feb1 	bl	8008374 <_PrintUnsigned>
      }
    }
  }
}
 8008612:	bf00      	nop
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800861c:	b580      	push	{r7, lr}
 800861e:	b0a4      	sub	sp, #144	@ 0x90
 8008620:	af02      	add	r7, sp, #8
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8008628:	f107 0314 	add.w	r3, r7, #20
 800862c:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800862e:	2340      	movs	r3, #64	@ 0x40
 8008630:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 8008632:	2300      	movs	r3, #0
 8008634:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	3301      	adds	r3, #1
 800864a:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 800864c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 81d9 	beq.w	8008a08 <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 8008656:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800865a:	2b25      	cmp	r3, #37	@ 0x25
 800865c:	f040 81c7 	bne.w	80089ee <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8008660:	2300      	movs	r3, #0
 8008662:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8008664:	2301      	movs	r3, #1
 8008666:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 8008672:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8008676:	3b23      	subs	r3, #35	@ 0x23
 8008678:	2b0d      	cmp	r3, #13
 800867a:	d83f      	bhi.n	80086fc <SEGGER_RTT_vprintf+0xe0>
 800867c:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <SEGGER_RTT_vprintf+0x68>)
 800867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008682:	bf00      	nop
 8008684:	080086ed 	.word	0x080086ed
 8008688:	080086fd 	.word	0x080086fd
 800868c:	080086fd 	.word	0x080086fd
 8008690:	080086fd 	.word	0x080086fd
 8008694:	080086fd 	.word	0x080086fd
 8008698:	080086fd 	.word	0x080086fd
 800869c:	080086fd 	.word	0x080086fd
 80086a0:	080086fd 	.word	0x080086fd
 80086a4:	080086dd 	.word	0x080086dd
 80086a8:	080086fd 	.word	0x080086fd
 80086ac:	080086bd 	.word	0x080086bd
 80086b0:	080086fd 	.word	0x080086fd
 80086b4:	080086fd 	.word	0x080086fd
 80086b8:	080086cd 	.word	0x080086cd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80086bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086be:	f043 0301 	orr.w	r3, r3, #1
 80086c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3301      	adds	r3, #1
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	e01b      	b.n	8008704 <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80086cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086ce:	f043 0302 	orr.w	r3, r3, #2
 80086d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	3301      	adds	r3, #1
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	e013      	b.n	8008704 <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80086dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086de:	f043 0304 	orr.w	r3, r3, #4
 80086e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60bb      	str	r3, [r7, #8]
 80086ea:	e00b      	b.n	8008704 <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80086ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086ee:	f043 0308 	orr.w	r3, r3, #8
 80086f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	3301      	adds	r3, #1
 80086f8:	60bb      	str	r3, [r7, #8]
 80086fa:	e003      	b.n	8008704 <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 80086fc:	2300      	movs	r3, #0
 80086fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008702:	bf00      	nop
        }
      } while (v);
 8008704:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1ae      	bne.n	800866a <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800870c:	2300      	movs	r3, #0
 800870e:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 8008718:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800871c:	2b2f      	cmp	r3, #47	@ 0x2f
 800871e:	d912      	bls.n	8008746 <SEGGER_RTT_vprintf+0x12a>
 8008720:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8008724:	2b39      	cmp	r3, #57	@ 0x39
 8008726:	d80e      	bhi.n	8008746 <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3301      	adds	r3, #1
 800872c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800872e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	461a      	mov	r2, r3
 800873a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800873e:	4413      	add	r3, r2
 8008740:	3b30      	subs	r3, #48	@ 0x30
 8008742:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8008744:	e7e4      	b.n	8008710 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 800874c:	2300      	movs	r3, #0
 800874e:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 8008758:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800875c:	2b2e      	cmp	r3, #46	@ 0x2e
 800875e:	d132      	bne.n	80087c6 <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	3301      	adds	r3, #1
 8008764:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b2a      	cmp	r3, #42	@ 0x2a
 800876c:	d10d      	bne.n	800878a <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	3301      	adds	r3, #1
 8008772:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8008774:	2301      	movs	r3, #1
 8008776:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	1d19      	adds	r1, r3, #4
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6011      	str	r1, [r2, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008788:	e01d      	b.n	80087c6 <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 8008792:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8008796:	2b2f      	cmp	r3, #47	@ 0x2f
 8008798:	d915      	bls.n	80087c6 <SEGGER_RTT_vprintf+0x1aa>
 800879a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800879e:	2b39      	cmp	r3, #57	@ 0x39
 80087a0:	d811      	bhi.n	80087c6 <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3301      	adds	r3, #1
 80087ac:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 80087ae:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	461a      	mov	r2, r3
 80087ba:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80087be:	4413      	add	r3, r2
 80087c0:	3b30      	subs	r3, #48	@ 0x30
 80087c2:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 80087c4:	e7e1      	b.n	800878a <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 80087ce:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80087d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80087d4:	d003      	beq.n	80087de <SEGGER_RTT_vprintf+0x1c2>
 80087d6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80087da:	2b68      	cmp	r3, #104	@ 0x68
 80087dc:	d107      	bne.n	80087ee <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	3301      	adds	r3, #1
 80087e2:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 80087ec:	e7ef      	b.n	80087ce <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80087ee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80087f2:	2b25      	cmp	r3, #37	@ 0x25
 80087f4:	f000 80ef 	beq.w	80089d6 <SEGGER_RTT_vprintf+0x3ba>
 80087f8:	2b25      	cmp	r3, #37	@ 0x25
 80087fa:	f2c0 80f3 	blt.w	80089e4 <SEGGER_RTT_vprintf+0x3c8>
 80087fe:	2b78      	cmp	r3, #120	@ 0x78
 8008800:	f300 80f0 	bgt.w	80089e4 <SEGGER_RTT_vprintf+0x3c8>
 8008804:	2b58      	cmp	r3, #88	@ 0x58
 8008806:	f2c0 80ed 	blt.w	80089e4 <SEGGER_RTT_vprintf+0x3c8>
 800880a:	3b58      	subs	r3, #88	@ 0x58
 800880c:	2b20      	cmp	r3, #32
 800880e:	f200 80e9 	bhi.w	80089e4 <SEGGER_RTT_vprintf+0x3c8>
 8008812:	a201      	add	r2, pc, #4	@ (adr r2, 8008818 <SEGGER_RTT_vprintf+0x1fc>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	0800891b 	.word	0x0800891b
 800881c:	080089e5 	.word	0x080089e5
 8008820:	080089e5 	.word	0x080089e5
 8008824:	080089e5 	.word	0x080089e5
 8008828:	080089e5 	.word	0x080089e5
 800882c:	080089e5 	.word	0x080089e5
 8008830:	080089e5 	.word	0x080089e5
 8008834:	080089e5 	.word	0x080089e5
 8008838:	080089e5 	.word	0x080089e5
 800883c:	080089e5 	.word	0x080089e5
 8008840:	080089e5 	.word	0x080089e5
 8008844:	0800889d 	.word	0x0800889d
 8008848:	080088c7 	.word	0x080088c7
 800884c:	080089e5 	.word	0x080089e5
 8008850:	080089e5 	.word	0x080089e5
 8008854:	080089e5 	.word	0x080089e5
 8008858:	080089e5 	.word	0x080089e5
 800885c:	080089e5 	.word	0x080089e5
 8008860:	080089e5 	.word	0x080089e5
 8008864:	080089e5 	.word	0x080089e5
 8008868:	080089e5 	.word	0x080089e5
 800886c:	080089e5 	.word	0x080089e5
 8008870:	080089e5 	.word	0x080089e5
 8008874:	080089e5 	.word	0x080089e5
 8008878:	080089ad 	.word	0x080089ad
 800887c:	080089e5 	.word	0x080089e5
 8008880:	080089e5 	.word	0x080089e5
 8008884:	08008945 	.word	0x08008945
 8008888:	080089e5 	.word	0x080089e5
 800888c:	080088f1 	.word	0x080088f1
 8008890:	080089e5 	.word	0x080089e5
 8008894:	080089e5 	.word	0x080089e5
 8008898:	0800891b 	.word	0x0800891b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	1d19      	adds	r1, r3, #4
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 80088ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088b0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 80088b4:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80088b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff fd1a 	bl	80082f8 <_StoreChar>
        break;
 80088c4:	e08f      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	1d19      	adds	r1, r3, #4
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6011      	str	r1, [r2, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 80088d6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80088da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088e4:	220a      	movs	r2, #10
 80088e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80088ea:	f7ff fdef 	bl	80084cc <_PrintInt>
        break;
 80088ee:	e07a      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	1d19      	adds	r1, r3, #4
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6011      	str	r1, [r2, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8008900:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8008904:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8008908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800890a:	9301      	str	r3, [sp, #4]
 800890c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008912:	220a      	movs	r2, #10
 8008914:	f7ff fd2e 	bl	8008374 <_PrintUnsigned>
        break;
 8008918:	e065      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	1d19      	adds	r1, r3, #4
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6011      	str	r1, [r2, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 800892a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800892e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8008932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800893c:	2210      	movs	r2, #16
 800893e:	f7ff fd19 	bl	8008374 <_PrintUnsigned>
        break;
 8008942:	e050      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	1d19      	adds	r1, r3, #4
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8008952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8008958:	4b37      	ldr	r3, [pc, #220]	@ (8008a38 <SEGGER_RTT_vprintf+0x41c>)
 800895a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 800895c:	2300      	movs	r3, #0
 800895e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 8008962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 800896a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800896c:	3301      	adds	r3, #1
 800896e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8008970:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8008974:	2b00      	cmp	r3, #0
 8008976:	d015      	beq.n	80089a4 <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8008978:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <SEGGER_RTT_vprintf+0x36a>
 8008980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008982:	2b00      	cmp	r3, #0
 8008984:	d010      	beq.n	80089a8 <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8008986:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800898a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff fcb1 	bl	80082f8 <_StoreChar>
            Precision--;
 8008996:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008998:	3b01      	subs	r3, #1
 800899a:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 800899c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dadf      	bge.n	8008962 <SEGGER_RTT_vprintf+0x346>
        }
        break;
 80089a2:	e020      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
              break;
 80089a4:	bf00      	nop
 80089a6:	e01e      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
              break;
 80089a8:	bf00      	nop
        break;
 80089aa:	e01c      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	1d19      	adds	r1, r3, #4
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6011      	str	r1, [r2, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80089bc:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80089c0:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80089c4:	2300      	movs	r3, #0
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	2308      	movs	r3, #8
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	2308      	movs	r3, #8
 80089ce:	2210      	movs	r2, #16
 80089d0:	f7ff fcd0 	bl	8008374 <_PrintUnsigned>
        break;
 80089d4:	e007      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80089d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80089da:	2125      	movs	r1, #37	@ 0x25
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff fc8b 	bl	80082f8 <_StoreChar>
        break;
 80089e2:	e000      	b.n	80089e6 <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 80089e4:	bf00      	nop
      }
      sFormat++;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60bb      	str	r3, [r7, #8]
 80089ec:	e007      	b.n	80089fe <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 80089ee:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80089f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80089f6:	4611      	mov	r1, r2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fc7d 	bl	80082f8 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 80089fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f6bf ae1c 	bge.w	800863e <SEGGER_RTT_vprintf+0x22>
 8008a06:	e000      	b.n	8008a0a <SEGGER_RTT_vprintf+0x3ee>
      break;
 8008a08:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8008a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd0d      	ble.n	8008a2c <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8008a10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d006      	beq.n	8008a24 <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8008a16:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a18:	f107 0314 	add.w	r3, r7, #20
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff fc44 	bl	80082ac <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8008a24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a28:	4413      	add	r3, r2
 8008a2a:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 8008a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3788      	adds	r7, #136	@ 0x88
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	0800a424 	.word	0x0800a424

08008a3c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8008a3c:	b40e      	push	{r1, r2, r3}
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8008a46:	f107 0320 	add.w	r3, r7, #32
 8008a4a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8008a4c:	f107 0308 	add.w	r3, r7, #8
 8008a50:	461a      	mov	r2, r3
 8008a52:	69f9      	ldr	r1, [r7, #28]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff fde1 	bl	800861c <SEGGER_RTT_vprintf>
 8008a5a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a68:	b003      	add	sp, #12
 8008a6a:	4770      	bx	lr

08008a6c <__assert_func>:
 8008a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a6e:	4614      	mov	r4, r2
 8008a70:	461a      	mov	r2, r3
 8008a72:	4b09      	ldr	r3, [pc, #36]	@ (8008a98 <__assert_func+0x2c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4605      	mov	r5, r0
 8008a78:	68d8      	ldr	r0, [r3, #12]
 8008a7a:	b14c      	cbz	r4, 8008a90 <__assert_func+0x24>
 8008a7c:	4b07      	ldr	r3, [pc, #28]	@ (8008a9c <__assert_func+0x30>)
 8008a7e:	9100      	str	r1, [sp, #0]
 8008a80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a84:	4906      	ldr	r1, [pc, #24]	@ (8008aa0 <__assert_func+0x34>)
 8008a86:	462b      	mov	r3, r5
 8008a88:	f000 f8b2 	bl	8008bf0 <fiprintf>
 8008a8c:	f000 fac7 	bl	800901e <abort>
 8008a90:	4b04      	ldr	r3, [pc, #16]	@ (8008aa4 <__assert_func+0x38>)
 8008a92:	461c      	mov	r4, r3
 8008a94:	e7f3      	b.n	8008a7e <__assert_func+0x12>
 8008a96:	bf00      	nop
 8008a98:	24000050 	.word	0x24000050
 8008a9c:	0800a540 	.word	0x0800a540
 8008aa0:	0800a54d 	.word	0x0800a54d
 8008aa4:	0800a57b 	.word	0x0800a57b

08008aa8 <std>:
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	4604      	mov	r4, r0
 8008aae:	e9c0 3300 	strd	r3, r3, [r0]
 8008ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ab6:	6083      	str	r3, [r0, #8]
 8008ab8:	8181      	strh	r1, [r0, #12]
 8008aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8008abc:	81c2      	strh	r2, [r0, #14]
 8008abe:	6183      	str	r3, [r0, #24]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	2208      	movs	r2, #8
 8008ac4:	305c      	adds	r0, #92	@ 0x5c
 8008ac6:	f000 f99b 	bl	8008e00 <memset>
 8008aca:	4b0d      	ldr	r3, [pc, #52]	@ (8008b00 <std+0x58>)
 8008acc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <std+0x5c>)
 8008ad0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <std+0x60>)
 8008ad4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <std+0x64>)
 8008ad8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ada:	4b0d      	ldr	r3, [pc, #52]	@ (8008b10 <std+0x68>)
 8008adc:	6224      	str	r4, [r4, #32]
 8008ade:	429c      	cmp	r4, r3
 8008ae0:	d006      	beq.n	8008af0 <std+0x48>
 8008ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ae6:	4294      	cmp	r4, r2
 8008ae8:	d002      	beq.n	8008af0 <std+0x48>
 8008aea:	33d0      	adds	r3, #208	@ 0xd0
 8008aec:	429c      	cmp	r4, r3
 8008aee:	d105      	bne.n	8008afc <std+0x54>
 8008af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af8:	f000 ba80 	b.w	8008ffc <__retarget_lock_init_recursive>
 8008afc:	bd10      	pop	{r4, pc}
 8008afe:	bf00      	nop
 8008b00:	08008d01 	.word	0x08008d01
 8008b04:	08008d23 	.word	0x08008d23
 8008b08:	08008d5b 	.word	0x08008d5b
 8008b0c:	08008d7f 	.word	0x08008d7f
 8008b10:	240054ec 	.word	0x240054ec

08008b14 <stdio_exit_handler>:
 8008b14:	4a02      	ldr	r2, [pc, #8]	@ (8008b20 <stdio_exit_handler+0xc>)
 8008b16:	4903      	ldr	r1, [pc, #12]	@ (8008b24 <stdio_exit_handler+0x10>)
 8008b18:	4803      	ldr	r0, [pc, #12]	@ (8008b28 <stdio_exit_handler+0x14>)
 8008b1a:	f000 b87b 	b.w	8008c14 <_fwalk_sglue>
 8008b1e:	bf00      	nop
 8008b20:	24000044 	.word	0x24000044
 8008b24:	08009b71 	.word	0x08009b71
 8008b28:	24000054 	.word	0x24000054

08008b2c <cleanup_stdio>:
 8008b2c:	6841      	ldr	r1, [r0, #4]
 8008b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b60 <cleanup_stdio+0x34>)
 8008b30:	4299      	cmp	r1, r3
 8008b32:	b510      	push	{r4, lr}
 8008b34:	4604      	mov	r4, r0
 8008b36:	d001      	beq.n	8008b3c <cleanup_stdio+0x10>
 8008b38:	f001 f81a 	bl	8009b70 <_fflush_r>
 8008b3c:	68a1      	ldr	r1, [r4, #8]
 8008b3e:	4b09      	ldr	r3, [pc, #36]	@ (8008b64 <cleanup_stdio+0x38>)
 8008b40:	4299      	cmp	r1, r3
 8008b42:	d002      	beq.n	8008b4a <cleanup_stdio+0x1e>
 8008b44:	4620      	mov	r0, r4
 8008b46:	f001 f813 	bl	8009b70 <_fflush_r>
 8008b4a:	68e1      	ldr	r1, [r4, #12]
 8008b4c:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <cleanup_stdio+0x3c>)
 8008b4e:	4299      	cmp	r1, r3
 8008b50:	d004      	beq.n	8008b5c <cleanup_stdio+0x30>
 8008b52:	4620      	mov	r0, r4
 8008b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b58:	f001 b80a 	b.w	8009b70 <_fflush_r>
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	bf00      	nop
 8008b60:	240054ec 	.word	0x240054ec
 8008b64:	24005554 	.word	0x24005554
 8008b68:	240055bc 	.word	0x240055bc

08008b6c <global_stdio_init.part.0>:
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b9c <global_stdio_init.part.0+0x30>)
 8008b70:	4c0b      	ldr	r4, [pc, #44]	@ (8008ba0 <global_stdio_init.part.0+0x34>)
 8008b72:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba4 <global_stdio_init.part.0+0x38>)
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	4620      	mov	r0, r4
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2104      	movs	r1, #4
 8008b7c:	f7ff ff94 	bl	8008aa8 <std>
 8008b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b84:	2201      	movs	r2, #1
 8008b86:	2109      	movs	r1, #9
 8008b88:	f7ff ff8e 	bl	8008aa8 <std>
 8008b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b90:	2202      	movs	r2, #2
 8008b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b96:	2112      	movs	r1, #18
 8008b98:	f7ff bf86 	b.w	8008aa8 <std>
 8008b9c:	24005624 	.word	0x24005624
 8008ba0:	240054ec 	.word	0x240054ec
 8008ba4:	08008b15 	.word	0x08008b15

08008ba8 <__sfp_lock_acquire>:
 8008ba8:	4801      	ldr	r0, [pc, #4]	@ (8008bb0 <__sfp_lock_acquire+0x8>)
 8008baa:	f000 ba28 	b.w	8008ffe <__retarget_lock_acquire_recursive>
 8008bae:	bf00      	nop
 8008bb0:	2400562d 	.word	0x2400562d

08008bb4 <__sfp_lock_release>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	@ (8008bbc <__sfp_lock_release+0x8>)
 8008bb6:	f000 ba23 	b.w	8009000 <__retarget_lock_release_recursive>
 8008bba:	bf00      	nop
 8008bbc:	2400562d 	.word	0x2400562d

08008bc0 <__sinit>:
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	f7ff fff0 	bl	8008ba8 <__sfp_lock_acquire>
 8008bc8:	6a23      	ldr	r3, [r4, #32]
 8008bca:	b11b      	cbz	r3, 8008bd4 <__sinit+0x14>
 8008bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd0:	f7ff bff0 	b.w	8008bb4 <__sfp_lock_release>
 8008bd4:	4b04      	ldr	r3, [pc, #16]	@ (8008be8 <__sinit+0x28>)
 8008bd6:	6223      	str	r3, [r4, #32]
 8008bd8:	4b04      	ldr	r3, [pc, #16]	@ (8008bec <__sinit+0x2c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1f5      	bne.n	8008bcc <__sinit+0xc>
 8008be0:	f7ff ffc4 	bl	8008b6c <global_stdio_init.part.0>
 8008be4:	e7f2      	b.n	8008bcc <__sinit+0xc>
 8008be6:	bf00      	nop
 8008be8:	08008b2d 	.word	0x08008b2d
 8008bec:	24005624 	.word	0x24005624

08008bf0 <fiprintf>:
 8008bf0:	b40e      	push	{r1, r2, r3}
 8008bf2:	b503      	push	{r0, r1, lr}
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	4805      	ldr	r0, [pc, #20]	@ (8008c10 <fiprintf+0x20>)
 8008bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfe:	6800      	ldr	r0, [r0, #0]
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	f000 fc8d 	bl	8009520 <_vfiprintf_r>
 8008c06:	b002      	add	sp, #8
 8008c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c0c:	b003      	add	sp, #12
 8008c0e:	4770      	bx	lr
 8008c10:	24000050 	.word	0x24000050

08008c14 <_fwalk_sglue>:
 8008c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	4607      	mov	r7, r0
 8008c1a:	4688      	mov	r8, r1
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	2600      	movs	r6, #0
 8008c20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c24:	f1b9 0901 	subs.w	r9, r9, #1
 8008c28:	d505      	bpl.n	8008c36 <_fwalk_sglue+0x22>
 8008c2a:	6824      	ldr	r4, [r4, #0]
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d1f7      	bne.n	8008c20 <_fwalk_sglue+0xc>
 8008c30:	4630      	mov	r0, r6
 8008c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d907      	bls.n	8008c4c <_fwalk_sglue+0x38>
 8008c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c40:	3301      	adds	r3, #1
 8008c42:	d003      	beq.n	8008c4c <_fwalk_sglue+0x38>
 8008c44:	4629      	mov	r1, r5
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	4306      	orrs	r6, r0
 8008c4c:	3568      	adds	r5, #104	@ 0x68
 8008c4e:	e7e9      	b.n	8008c24 <_fwalk_sglue+0x10>

08008c50 <sniprintf>:
 8008c50:	b40c      	push	{r2, r3}
 8008c52:	b530      	push	{r4, r5, lr}
 8008c54:	4b18      	ldr	r3, [pc, #96]	@ (8008cb8 <sniprintf+0x68>)
 8008c56:	1e0c      	subs	r4, r1, #0
 8008c58:	681d      	ldr	r5, [r3, #0]
 8008c5a:	b09d      	sub	sp, #116	@ 0x74
 8008c5c:	da08      	bge.n	8008c70 <sniprintf+0x20>
 8008c5e:	238b      	movs	r3, #139	@ 0x8b
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	f04f 30ff 	mov.w	r0, #4294967295
 8008c66:	b01d      	add	sp, #116	@ 0x74
 8008c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c6c:	b002      	add	sp, #8
 8008c6e:	4770      	bx	lr
 8008c70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c78:	f04f 0300 	mov.w	r3, #0
 8008c7c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008c7e:	bf14      	ite	ne
 8008c80:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c84:	4623      	moveq	r3, r4
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	9307      	str	r3, [sp, #28]
 8008c8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c8e:	9002      	str	r0, [sp, #8]
 8008c90:	9006      	str	r0, [sp, #24]
 8008c92:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c96:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c98:	ab21      	add	r3, sp, #132	@ 0x84
 8008c9a:	a902      	add	r1, sp, #8
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	f000 fb18 	bl	80092d4 <_svfiprintf_r>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	bfbc      	itt	lt
 8008ca8:	238b      	movlt	r3, #139	@ 0x8b
 8008caa:	602b      	strlt	r3, [r5, #0]
 8008cac:	2c00      	cmp	r4, #0
 8008cae:	d0da      	beq.n	8008c66 <sniprintf+0x16>
 8008cb0:	9b02      	ldr	r3, [sp, #8]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	e7d6      	b.n	8008c66 <sniprintf+0x16>
 8008cb8:	24000050 	.word	0x24000050

08008cbc <siprintf>:
 8008cbc:	b40e      	push	{r1, r2, r3}
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	b09d      	sub	sp, #116	@ 0x74
 8008cc2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008cc4:	9002      	str	r0, [sp, #8]
 8008cc6:	9006      	str	r0, [sp, #24]
 8008cc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ccc:	480a      	ldr	r0, [pc, #40]	@ (8008cf8 <siprintf+0x3c>)
 8008cce:	9107      	str	r1, [sp, #28]
 8008cd0:	9104      	str	r1, [sp, #16]
 8008cd2:	490a      	ldr	r1, [pc, #40]	@ (8008cfc <siprintf+0x40>)
 8008cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd8:	9105      	str	r1, [sp, #20]
 8008cda:	2400      	movs	r4, #0
 8008cdc:	a902      	add	r1, sp, #8
 8008cde:	6800      	ldr	r0, [r0, #0]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008ce4:	f000 faf6 	bl	80092d4 <_svfiprintf_r>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	701c      	strb	r4, [r3, #0]
 8008cec:	b01d      	add	sp, #116	@ 0x74
 8008cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf2:	b003      	add	sp, #12
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	24000050 	.word	0x24000050
 8008cfc:	ffff0208 	.word	0xffff0208

08008d00 <__sread>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	460c      	mov	r4, r1
 8008d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d08:	f000 f92a 	bl	8008f60 <_read_r>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	bfab      	itete	ge
 8008d10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d12:	89a3      	ldrhlt	r3, [r4, #12]
 8008d14:	181b      	addge	r3, r3, r0
 8008d16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d1a:	bfac      	ite	ge
 8008d1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d1e:	81a3      	strhlt	r3, [r4, #12]
 8008d20:	bd10      	pop	{r4, pc}

08008d22 <__swrite>:
 8008d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d26:	461f      	mov	r7, r3
 8008d28:	898b      	ldrh	r3, [r1, #12]
 8008d2a:	05db      	lsls	r3, r3, #23
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	4616      	mov	r6, r2
 8008d32:	d505      	bpl.n	8008d40 <__swrite+0x1e>
 8008d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d38:	2302      	movs	r3, #2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f000 f8fe 	bl	8008f3c <_lseek_r>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	463b      	mov	r3, r7
 8008d50:	4628      	mov	r0, r5
 8008d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d56:	f000 b915 	b.w	8008f84 <_write_r>

08008d5a <__sseek>:
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d62:	f000 f8eb 	bl	8008f3c <_lseek_r>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	bf15      	itete	ne
 8008d6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d76:	81a3      	strheq	r3, [r4, #12]
 8008d78:	bf18      	it	ne
 8008d7a:	81a3      	strhne	r3, [r4, #12]
 8008d7c:	bd10      	pop	{r4, pc}

08008d7e <__sclose>:
 8008d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d82:	f000 b86d 	b.w	8008e60 <_close_r>

08008d86 <_vsniprintf_r>:
 8008d86:	b530      	push	{r4, r5, lr}
 8008d88:	4614      	mov	r4, r2
 8008d8a:	2c00      	cmp	r4, #0
 8008d8c:	b09b      	sub	sp, #108	@ 0x6c
 8008d8e:	4605      	mov	r5, r0
 8008d90:	461a      	mov	r2, r3
 8008d92:	da05      	bge.n	8008da0 <_vsniprintf_r+0x1a>
 8008d94:	238b      	movs	r3, #139	@ 0x8b
 8008d96:	6003      	str	r3, [r0, #0]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	b01b      	add	sp, #108	@ 0x6c
 8008d9e:	bd30      	pop	{r4, r5, pc}
 8008da0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008da4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dae:	bf14      	ite	ne
 8008db0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008db4:	4623      	moveq	r3, r4
 8008db6:	9302      	str	r3, [sp, #8]
 8008db8:	9305      	str	r3, [sp, #20]
 8008dba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008dbe:	9100      	str	r1, [sp, #0]
 8008dc0:	9104      	str	r1, [sp, #16]
 8008dc2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008dc6:	4669      	mov	r1, sp
 8008dc8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008dca:	f000 fa83 	bl	80092d4 <_svfiprintf_r>
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	bfbc      	itt	lt
 8008dd2:	238b      	movlt	r3, #139	@ 0x8b
 8008dd4:	602b      	strlt	r3, [r5, #0]
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	d0e0      	beq.n	8008d9c <_vsniprintf_r+0x16>
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	e7dc      	b.n	8008d9c <_vsniprintf_r+0x16>
	...

08008de4 <vsniprintf>:
 8008de4:	b507      	push	{r0, r1, r2, lr}
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	4613      	mov	r3, r2
 8008dea:	460a      	mov	r2, r1
 8008dec:	4601      	mov	r1, r0
 8008dee:	4803      	ldr	r0, [pc, #12]	@ (8008dfc <vsniprintf+0x18>)
 8008df0:	6800      	ldr	r0, [r0, #0]
 8008df2:	f7ff ffc8 	bl	8008d86 <_vsniprintf_r>
 8008df6:	b003      	add	sp, #12
 8008df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dfc:	24000050 	.word	0x24000050

08008e00 <memset>:
 8008e00:	4402      	add	r2, r0
 8008e02:	4603      	mov	r3, r0
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d100      	bne.n	8008e0a <memset+0xa>
 8008e08:	4770      	bx	lr
 8008e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0e:	e7f9      	b.n	8008e04 <memset+0x4>

08008e10 <strncmp>:
 8008e10:	b510      	push	{r4, lr}
 8008e12:	b16a      	cbz	r2, 8008e30 <strncmp+0x20>
 8008e14:	3901      	subs	r1, #1
 8008e16:	1884      	adds	r4, r0, r2
 8008e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d103      	bne.n	8008e2c <strncmp+0x1c>
 8008e24:	42a0      	cmp	r0, r4
 8008e26:	d001      	beq.n	8008e2c <strncmp+0x1c>
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	d1f5      	bne.n	8008e18 <strncmp+0x8>
 8008e2c:	1ad0      	subs	r0, r2, r3
 8008e2e:	bd10      	pop	{r4, pc}
 8008e30:	4610      	mov	r0, r2
 8008e32:	e7fc      	b.n	8008e2e <strncmp+0x1e>

08008e34 <strstr>:
 8008e34:	780a      	ldrb	r2, [r1, #0]
 8008e36:	b570      	push	{r4, r5, r6, lr}
 8008e38:	b96a      	cbnz	r2, 8008e56 <strstr+0x22>
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d109      	bne.n	8008e54 <strstr+0x20>
 8008e40:	460c      	mov	r4, r1
 8008e42:	4605      	mov	r5, r0
 8008e44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0f6      	beq.n	8008e3a <strstr+0x6>
 8008e4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008e50:	429e      	cmp	r6, r3
 8008e52:	d0f7      	beq.n	8008e44 <strstr+0x10>
 8008e54:	3001      	adds	r0, #1
 8008e56:	7803      	ldrb	r3, [r0, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1ef      	bne.n	8008e3c <strstr+0x8>
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	e7ec      	b.n	8008e3a <strstr+0x6>

08008e60 <_close_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d06      	ldr	r5, [pc, #24]	@ (8008e7c <_close_r+0x1c>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	f7f7 fe74 	bl	8000b58 <_close>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_close_r+0x1a>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_close_r+0x1a>
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	24005628 	.word	0x24005628

08008e80 <_reclaim_reent>:
 8008e80:	4b2d      	ldr	r3, [pc, #180]	@ (8008f38 <_reclaim_reent+0xb8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4283      	cmp	r3, r0
 8008e86:	b570      	push	{r4, r5, r6, lr}
 8008e88:	4604      	mov	r4, r0
 8008e8a:	d053      	beq.n	8008f34 <_reclaim_reent+0xb4>
 8008e8c:	69c3      	ldr	r3, [r0, #28]
 8008e8e:	b31b      	cbz	r3, 8008ed8 <_reclaim_reent+0x58>
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	b163      	cbz	r3, 8008eae <_reclaim_reent+0x2e>
 8008e94:	2500      	movs	r5, #0
 8008e96:	69e3      	ldr	r3, [r4, #28]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	5959      	ldr	r1, [r3, r5]
 8008e9c:	b9b1      	cbnz	r1, 8008ecc <_reclaim_reent+0x4c>
 8008e9e:	3504      	adds	r5, #4
 8008ea0:	2d80      	cmp	r5, #128	@ 0x80
 8008ea2:	d1f8      	bne.n	8008e96 <_reclaim_reent+0x16>
 8008ea4:	69e3      	ldr	r3, [r4, #28]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	68d9      	ldr	r1, [r3, #12]
 8008eaa:	f000 f8bf 	bl	800902c <_free_r>
 8008eae:	69e3      	ldr	r3, [r4, #28]
 8008eb0:	6819      	ldr	r1, [r3, #0]
 8008eb2:	b111      	cbz	r1, 8008eba <_reclaim_reent+0x3a>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 f8b9 	bl	800902c <_free_r>
 8008eba:	69e3      	ldr	r3, [r4, #28]
 8008ebc:	689d      	ldr	r5, [r3, #8]
 8008ebe:	b15d      	cbz	r5, 8008ed8 <_reclaim_reent+0x58>
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	682d      	ldr	r5, [r5, #0]
 8008ec6:	f000 f8b1 	bl	800902c <_free_r>
 8008eca:	e7f8      	b.n	8008ebe <_reclaim_reent+0x3e>
 8008ecc:	680e      	ldr	r6, [r1, #0]
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 f8ac 	bl	800902c <_free_r>
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	e7e1      	b.n	8008e9c <_reclaim_reent+0x1c>
 8008ed8:	6961      	ldr	r1, [r4, #20]
 8008eda:	b111      	cbz	r1, 8008ee2 <_reclaim_reent+0x62>
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 f8a5 	bl	800902c <_free_r>
 8008ee2:	69e1      	ldr	r1, [r4, #28]
 8008ee4:	b111      	cbz	r1, 8008eec <_reclaim_reent+0x6c>
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f000 f8a0 	bl	800902c <_free_r>
 8008eec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008eee:	b111      	cbz	r1, 8008ef6 <_reclaim_reent+0x76>
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 f89b 	bl	800902c <_free_r>
 8008ef6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ef8:	b111      	cbz	r1, 8008f00 <_reclaim_reent+0x80>
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 f896 	bl	800902c <_free_r>
 8008f00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008f02:	b111      	cbz	r1, 8008f0a <_reclaim_reent+0x8a>
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 f891 	bl	800902c <_free_r>
 8008f0a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008f0c:	b111      	cbz	r1, 8008f14 <_reclaim_reent+0x94>
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f000 f88c 	bl	800902c <_free_r>
 8008f14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008f16:	b111      	cbz	r1, 8008f1e <_reclaim_reent+0x9e>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 f887 	bl	800902c <_free_r>
 8008f1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008f20:	b111      	cbz	r1, 8008f28 <_reclaim_reent+0xa8>
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 f882 	bl	800902c <_free_r>
 8008f28:	6a23      	ldr	r3, [r4, #32]
 8008f2a:	b11b      	cbz	r3, 8008f34 <_reclaim_reent+0xb4>
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f32:	4718      	bx	r3
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	bf00      	nop
 8008f38:	24000050 	.word	0x24000050

08008f3c <_lseek_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d07      	ldr	r5, [pc, #28]	@ (8008f5c <_lseek_r+0x20>)
 8008f40:	4604      	mov	r4, r0
 8008f42:	4608      	mov	r0, r1
 8008f44:	4611      	mov	r1, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	602a      	str	r2, [r5, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f7f7 fe2b 	bl	8000ba6 <_lseek>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_lseek_r+0x1e>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_lseek_r+0x1e>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	24005628 	.word	0x24005628

08008f60 <_read_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d07      	ldr	r5, [pc, #28]	@ (8008f80 <_read_r+0x20>)
 8008f64:	4604      	mov	r4, r0
 8008f66:	4608      	mov	r0, r1
 8008f68:	4611      	mov	r1, r2
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	602a      	str	r2, [r5, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f7f7 fdb9 	bl	8000ae6 <_read>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_read_r+0x1e>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_read_r+0x1e>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	24005628 	.word	0x24005628

08008f84 <_write_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d07      	ldr	r5, [pc, #28]	@ (8008fa4 <_write_r+0x20>)
 8008f88:	4604      	mov	r4, r0
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	602a      	str	r2, [r5, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	f7f7 fdc4 	bl	8000b20 <_write>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_write_r+0x1e>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_write_r+0x1e>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	24005628 	.word	0x24005628

08008fa8 <__errno>:
 8008fa8:	4b01      	ldr	r3, [pc, #4]	@ (8008fb0 <__errno+0x8>)
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	24000050 	.word	0x24000050

08008fb4 <__libc_init_array>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8008fec <__libc_init_array+0x38>)
 8008fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8008ff0 <__libc_init_array+0x3c>)
 8008fba:	1b64      	subs	r4, r4, r5
 8008fbc:	10a4      	asrs	r4, r4, #2
 8008fbe:	2600      	movs	r6, #0
 8008fc0:	42a6      	cmp	r6, r4
 8008fc2:	d109      	bne.n	8008fd8 <__libc_init_array+0x24>
 8008fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ff4 <__libc_init_array+0x40>)
 8008fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ff8 <__libc_init_array+0x44>)
 8008fc8:	f000 ffb6 	bl	8009f38 <_init>
 8008fcc:	1b64      	subs	r4, r4, r5
 8008fce:	10a4      	asrs	r4, r4, #2
 8008fd0:	2600      	movs	r6, #0
 8008fd2:	42a6      	cmp	r6, r4
 8008fd4:	d105      	bne.n	8008fe2 <__libc_init_array+0x2e>
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fdc:	4798      	blx	r3
 8008fde:	3601      	adds	r6, #1
 8008fe0:	e7ee      	b.n	8008fc0 <__libc_init_array+0xc>
 8008fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe6:	4798      	blx	r3
 8008fe8:	3601      	adds	r6, #1
 8008fea:	e7f2      	b.n	8008fd2 <__libc_init_array+0x1e>
 8008fec:	0800a5b8 	.word	0x0800a5b8
 8008ff0:	0800a5b8 	.word	0x0800a5b8
 8008ff4:	0800a5b8 	.word	0x0800a5b8
 8008ff8:	0800a5bc 	.word	0x0800a5bc

08008ffc <__retarget_lock_init_recursive>:
 8008ffc:	4770      	bx	lr

08008ffe <__retarget_lock_acquire_recursive>:
 8008ffe:	4770      	bx	lr

08009000 <__retarget_lock_release_recursive>:
 8009000:	4770      	bx	lr

08009002 <memcpy>:
 8009002:	440a      	add	r2, r1
 8009004:	4291      	cmp	r1, r2
 8009006:	f100 33ff 	add.w	r3, r0, #4294967295
 800900a:	d100      	bne.n	800900e <memcpy+0xc>
 800900c:	4770      	bx	lr
 800900e:	b510      	push	{r4, lr}
 8009010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009018:	4291      	cmp	r1, r2
 800901a:	d1f9      	bne.n	8009010 <memcpy+0xe>
 800901c:	bd10      	pop	{r4, pc}

0800901e <abort>:
 800901e:	b508      	push	{r3, lr}
 8009020:	2006      	movs	r0, #6
 8009022:	f000 fea3 	bl	8009d6c <raise>
 8009026:	2001      	movs	r0, #1
 8009028:	f7f7 fd52 	bl	8000ad0 <_exit>

0800902c <_free_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4605      	mov	r5, r0
 8009030:	2900      	cmp	r1, #0
 8009032:	d041      	beq.n	80090b8 <_free_r+0x8c>
 8009034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009038:	1f0c      	subs	r4, r1, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	bfb8      	it	lt
 800903e:	18e4      	addlt	r4, r4, r3
 8009040:	f000 f8e0 	bl	8009204 <__malloc_lock>
 8009044:	4a1d      	ldr	r2, [pc, #116]	@ (80090bc <_free_r+0x90>)
 8009046:	6813      	ldr	r3, [r2, #0]
 8009048:	b933      	cbnz	r3, 8009058 <_free_r+0x2c>
 800904a:	6063      	str	r3, [r4, #4]
 800904c:	6014      	str	r4, [r2, #0]
 800904e:	4628      	mov	r0, r5
 8009050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009054:	f000 b8dc 	b.w	8009210 <__malloc_unlock>
 8009058:	42a3      	cmp	r3, r4
 800905a:	d908      	bls.n	800906e <_free_r+0x42>
 800905c:	6820      	ldr	r0, [r4, #0]
 800905e:	1821      	adds	r1, r4, r0
 8009060:	428b      	cmp	r3, r1
 8009062:	bf01      	itttt	eq
 8009064:	6819      	ldreq	r1, [r3, #0]
 8009066:	685b      	ldreq	r3, [r3, #4]
 8009068:	1809      	addeq	r1, r1, r0
 800906a:	6021      	streq	r1, [r4, #0]
 800906c:	e7ed      	b.n	800904a <_free_r+0x1e>
 800906e:	461a      	mov	r2, r3
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	b10b      	cbz	r3, 8009078 <_free_r+0x4c>
 8009074:	42a3      	cmp	r3, r4
 8009076:	d9fa      	bls.n	800906e <_free_r+0x42>
 8009078:	6811      	ldr	r1, [r2, #0]
 800907a:	1850      	adds	r0, r2, r1
 800907c:	42a0      	cmp	r0, r4
 800907e:	d10b      	bne.n	8009098 <_free_r+0x6c>
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	4401      	add	r1, r0
 8009084:	1850      	adds	r0, r2, r1
 8009086:	4283      	cmp	r3, r0
 8009088:	6011      	str	r1, [r2, #0]
 800908a:	d1e0      	bne.n	800904e <_free_r+0x22>
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	6053      	str	r3, [r2, #4]
 8009092:	4408      	add	r0, r1
 8009094:	6010      	str	r0, [r2, #0]
 8009096:	e7da      	b.n	800904e <_free_r+0x22>
 8009098:	d902      	bls.n	80090a0 <_free_r+0x74>
 800909a:	230c      	movs	r3, #12
 800909c:	602b      	str	r3, [r5, #0]
 800909e:	e7d6      	b.n	800904e <_free_r+0x22>
 80090a0:	6820      	ldr	r0, [r4, #0]
 80090a2:	1821      	adds	r1, r4, r0
 80090a4:	428b      	cmp	r3, r1
 80090a6:	bf04      	itt	eq
 80090a8:	6819      	ldreq	r1, [r3, #0]
 80090aa:	685b      	ldreq	r3, [r3, #4]
 80090ac:	6063      	str	r3, [r4, #4]
 80090ae:	bf04      	itt	eq
 80090b0:	1809      	addeq	r1, r1, r0
 80090b2:	6021      	streq	r1, [r4, #0]
 80090b4:	6054      	str	r4, [r2, #4]
 80090b6:	e7ca      	b.n	800904e <_free_r+0x22>
 80090b8:	bd38      	pop	{r3, r4, r5, pc}
 80090ba:	bf00      	nop
 80090bc:	24005634 	.word	0x24005634

080090c0 <sbrk_aligned>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	4e0f      	ldr	r6, [pc, #60]	@ (8009100 <sbrk_aligned+0x40>)
 80090c4:	460c      	mov	r4, r1
 80090c6:	6831      	ldr	r1, [r6, #0]
 80090c8:	4605      	mov	r5, r0
 80090ca:	b911      	cbnz	r1, 80090d2 <sbrk_aligned+0x12>
 80090cc:	f000 fe6a 	bl	8009da4 <_sbrk_r>
 80090d0:	6030      	str	r0, [r6, #0]
 80090d2:	4621      	mov	r1, r4
 80090d4:	4628      	mov	r0, r5
 80090d6:	f000 fe65 	bl	8009da4 <_sbrk_r>
 80090da:	1c43      	adds	r3, r0, #1
 80090dc:	d103      	bne.n	80090e6 <sbrk_aligned+0x26>
 80090de:	f04f 34ff 	mov.w	r4, #4294967295
 80090e2:	4620      	mov	r0, r4
 80090e4:	bd70      	pop	{r4, r5, r6, pc}
 80090e6:	1cc4      	adds	r4, r0, #3
 80090e8:	f024 0403 	bic.w	r4, r4, #3
 80090ec:	42a0      	cmp	r0, r4
 80090ee:	d0f8      	beq.n	80090e2 <sbrk_aligned+0x22>
 80090f0:	1a21      	subs	r1, r4, r0
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 fe56 	bl	8009da4 <_sbrk_r>
 80090f8:	3001      	adds	r0, #1
 80090fa:	d1f2      	bne.n	80090e2 <sbrk_aligned+0x22>
 80090fc:	e7ef      	b.n	80090de <sbrk_aligned+0x1e>
 80090fe:	bf00      	nop
 8009100:	24005630 	.word	0x24005630

08009104 <_malloc_r>:
 8009104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009108:	1ccd      	adds	r5, r1, #3
 800910a:	f025 0503 	bic.w	r5, r5, #3
 800910e:	3508      	adds	r5, #8
 8009110:	2d0c      	cmp	r5, #12
 8009112:	bf38      	it	cc
 8009114:	250c      	movcc	r5, #12
 8009116:	2d00      	cmp	r5, #0
 8009118:	4606      	mov	r6, r0
 800911a:	db01      	blt.n	8009120 <_malloc_r+0x1c>
 800911c:	42a9      	cmp	r1, r5
 800911e:	d904      	bls.n	800912a <_malloc_r+0x26>
 8009120:	230c      	movs	r3, #12
 8009122:	6033      	str	r3, [r6, #0]
 8009124:	2000      	movs	r0, #0
 8009126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800912a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009200 <_malloc_r+0xfc>
 800912e:	f000 f869 	bl	8009204 <__malloc_lock>
 8009132:	f8d8 3000 	ldr.w	r3, [r8]
 8009136:	461c      	mov	r4, r3
 8009138:	bb44      	cbnz	r4, 800918c <_malloc_r+0x88>
 800913a:	4629      	mov	r1, r5
 800913c:	4630      	mov	r0, r6
 800913e:	f7ff ffbf 	bl	80090c0 <sbrk_aligned>
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	4604      	mov	r4, r0
 8009146:	d158      	bne.n	80091fa <_malloc_r+0xf6>
 8009148:	f8d8 4000 	ldr.w	r4, [r8]
 800914c:	4627      	mov	r7, r4
 800914e:	2f00      	cmp	r7, #0
 8009150:	d143      	bne.n	80091da <_malloc_r+0xd6>
 8009152:	2c00      	cmp	r4, #0
 8009154:	d04b      	beq.n	80091ee <_malloc_r+0xea>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	4639      	mov	r1, r7
 800915a:	4630      	mov	r0, r6
 800915c:	eb04 0903 	add.w	r9, r4, r3
 8009160:	f000 fe20 	bl	8009da4 <_sbrk_r>
 8009164:	4581      	cmp	r9, r0
 8009166:	d142      	bne.n	80091ee <_malloc_r+0xea>
 8009168:	6821      	ldr	r1, [r4, #0]
 800916a:	1a6d      	subs	r5, r5, r1
 800916c:	4629      	mov	r1, r5
 800916e:	4630      	mov	r0, r6
 8009170:	f7ff ffa6 	bl	80090c0 <sbrk_aligned>
 8009174:	3001      	adds	r0, #1
 8009176:	d03a      	beq.n	80091ee <_malloc_r+0xea>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	442b      	add	r3, r5
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	f8d8 3000 	ldr.w	r3, [r8]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	bb62      	cbnz	r2, 80091e0 <_malloc_r+0xdc>
 8009186:	f8c8 7000 	str.w	r7, [r8]
 800918a:	e00f      	b.n	80091ac <_malloc_r+0xa8>
 800918c:	6822      	ldr	r2, [r4, #0]
 800918e:	1b52      	subs	r2, r2, r5
 8009190:	d420      	bmi.n	80091d4 <_malloc_r+0xd0>
 8009192:	2a0b      	cmp	r2, #11
 8009194:	d917      	bls.n	80091c6 <_malloc_r+0xc2>
 8009196:	1961      	adds	r1, r4, r5
 8009198:	42a3      	cmp	r3, r4
 800919a:	6025      	str	r5, [r4, #0]
 800919c:	bf18      	it	ne
 800919e:	6059      	strne	r1, [r3, #4]
 80091a0:	6863      	ldr	r3, [r4, #4]
 80091a2:	bf08      	it	eq
 80091a4:	f8c8 1000 	streq.w	r1, [r8]
 80091a8:	5162      	str	r2, [r4, r5]
 80091aa:	604b      	str	r3, [r1, #4]
 80091ac:	4630      	mov	r0, r6
 80091ae:	f000 f82f 	bl	8009210 <__malloc_unlock>
 80091b2:	f104 000b 	add.w	r0, r4, #11
 80091b6:	1d23      	adds	r3, r4, #4
 80091b8:	f020 0007 	bic.w	r0, r0, #7
 80091bc:	1ac2      	subs	r2, r0, r3
 80091be:	bf1c      	itt	ne
 80091c0:	1a1b      	subne	r3, r3, r0
 80091c2:	50a3      	strne	r3, [r4, r2]
 80091c4:	e7af      	b.n	8009126 <_malloc_r+0x22>
 80091c6:	6862      	ldr	r2, [r4, #4]
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	bf0c      	ite	eq
 80091cc:	f8c8 2000 	streq.w	r2, [r8]
 80091d0:	605a      	strne	r2, [r3, #4]
 80091d2:	e7eb      	b.n	80091ac <_malloc_r+0xa8>
 80091d4:	4623      	mov	r3, r4
 80091d6:	6864      	ldr	r4, [r4, #4]
 80091d8:	e7ae      	b.n	8009138 <_malloc_r+0x34>
 80091da:	463c      	mov	r4, r7
 80091dc:	687f      	ldr	r7, [r7, #4]
 80091de:	e7b6      	b.n	800914e <_malloc_r+0x4a>
 80091e0:	461a      	mov	r2, r3
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	d1fb      	bne.n	80091e0 <_malloc_r+0xdc>
 80091e8:	2300      	movs	r3, #0
 80091ea:	6053      	str	r3, [r2, #4]
 80091ec:	e7de      	b.n	80091ac <_malloc_r+0xa8>
 80091ee:	230c      	movs	r3, #12
 80091f0:	6033      	str	r3, [r6, #0]
 80091f2:	4630      	mov	r0, r6
 80091f4:	f000 f80c 	bl	8009210 <__malloc_unlock>
 80091f8:	e794      	b.n	8009124 <_malloc_r+0x20>
 80091fa:	6005      	str	r5, [r0, #0]
 80091fc:	e7d6      	b.n	80091ac <_malloc_r+0xa8>
 80091fe:	bf00      	nop
 8009200:	24005634 	.word	0x24005634

08009204 <__malloc_lock>:
 8009204:	4801      	ldr	r0, [pc, #4]	@ (800920c <__malloc_lock+0x8>)
 8009206:	f7ff befa 	b.w	8008ffe <__retarget_lock_acquire_recursive>
 800920a:	bf00      	nop
 800920c:	2400562c 	.word	0x2400562c

08009210 <__malloc_unlock>:
 8009210:	4801      	ldr	r0, [pc, #4]	@ (8009218 <__malloc_unlock+0x8>)
 8009212:	f7ff bef5 	b.w	8009000 <__retarget_lock_release_recursive>
 8009216:	bf00      	nop
 8009218:	2400562c 	.word	0x2400562c

0800921c <__ssputs_r>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	688e      	ldr	r6, [r1, #8]
 8009222:	461f      	mov	r7, r3
 8009224:	42be      	cmp	r6, r7
 8009226:	680b      	ldr	r3, [r1, #0]
 8009228:	4682      	mov	sl, r0
 800922a:	460c      	mov	r4, r1
 800922c:	4690      	mov	r8, r2
 800922e:	d82d      	bhi.n	800928c <__ssputs_r+0x70>
 8009230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009238:	d026      	beq.n	8009288 <__ssputs_r+0x6c>
 800923a:	6965      	ldr	r5, [r4, #20]
 800923c:	6909      	ldr	r1, [r1, #16]
 800923e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009242:	eba3 0901 	sub.w	r9, r3, r1
 8009246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800924a:	1c7b      	adds	r3, r7, #1
 800924c:	444b      	add	r3, r9
 800924e:	106d      	asrs	r5, r5, #1
 8009250:	429d      	cmp	r5, r3
 8009252:	bf38      	it	cc
 8009254:	461d      	movcc	r5, r3
 8009256:	0553      	lsls	r3, r2, #21
 8009258:	d527      	bpl.n	80092aa <__ssputs_r+0x8e>
 800925a:	4629      	mov	r1, r5
 800925c:	f7ff ff52 	bl	8009104 <_malloc_r>
 8009260:	4606      	mov	r6, r0
 8009262:	b360      	cbz	r0, 80092be <__ssputs_r+0xa2>
 8009264:	6921      	ldr	r1, [r4, #16]
 8009266:	464a      	mov	r2, r9
 8009268:	f7ff fecb 	bl	8009002 <memcpy>
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009276:	81a3      	strh	r3, [r4, #12]
 8009278:	6126      	str	r6, [r4, #16]
 800927a:	6165      	str	r5, [r4, #20]
 800927c:	444e      	add	r6, r9
 800927e:	eba5 0509 	sub.w	r5, r5, r9
 8009282:	6026      	str	r6, [r4, #0]
 8009284:	60a5      	str	r5, [r4, #8]
 8009286:	463e      	mov	r6, r7
 8009288:	42be      	cmp	r6, r7
 800928a:	d900      	bls.n	800928e <__ssputs_r+0x72>
 800928c:	463e      	mov	r6, r7
 800928e:	6820      	ldr	r0, [r4, #0]
 8009290:	4632      	mov	r2, r6
 8009292:	4641      	mov	r1, r8
 8009294:	f000 fd28 	bl	8009ce8 <memmove>
 8009298:	68a3      	ldr	r3, [r4, #8]
 800929a:	1b9b      	subs	r3, r3, r6
 800929c:	60a3      	str	r3, [r4, #8]
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	4433      	add	r3, r6
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	2000      	movs	r0, #0
 80092a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092aa:	462a      	mov	r2, r5
 80092ac:	f000 fd8a 	bl	8009dc4 <_realloc_r>
 80092b0:	4606      	mov	r6, r0
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d1e0      	bne.n	8009278 <__ssputs_r+0x5c>
 80092b6:	6921      	ldr	r1, [r4, #16]
 80092b8:	4650      	mov	r0, sl
 80092ba:	f7ff feb7 	bl	800902c <_free_r>
 80092be:	230c      	movs	r3, #12
 80092c0:	f8ca 3000 	str.w	r3, [sl]
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ca:	81a3      	strh	r3, [r4, #12]
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295
 80092d0:	e7e9      	b.n	80092a6 <__ssputs_r+0x8a>
	...

080092d4 <_svfiprintf_r>:
 80092d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	4698      	mov	r8, r3
 80092da:	898b      	ldrh	r3, [r1, #12]
 80092dc:	061b      	lsls	r3, r3, #24
 80092de:	b09d      	sub	sp, #116	@ 0x74
 80092e0:	4607      	mov	r7, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	4614      	mov	r4, r2
 80092e6:	d510      	bpl.n	800930a <_svfiprintf_r+0x36>
 80092e8:	690b      	ldr	r3, [r1, #16]
 80092ea:	b973      	cbnz	r3, 800930a <_svfiprintf_r+0x36>
 80092ec:	2140      	movs	r1, #64	@ 0x40
 80092ee:	f7ff ff09 	bl	8009104 <_malloc_r>
 80092f2:	6028      	str	r0, [r5, #0]
 80092f4:	6128      	str	r0, [r5, #16]
 80092f6:	b930      	cbnz	r0, 8009306 <_svfiprintf_r+0x32>
 80092f8:	230c      	movs	r3, #12
 80092fa:	603b      	str	r3, [r7, #0]
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	b01d      	add	sp, #116	@ 0x74
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	2340      	movs	r3, #64	@ 0x40
 8009308:	616b      	str	r3, [r5, #20]
 800930a:	2300      	movs	r3, #0
 800930c:	9309      	str	r3, [sp, #36]	@ 0x24
 800930e:	2320      	movs	r3, #32
 8009310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009314:	f8cd 800c 	str.w	r8, [sp, #12]
 8009318:	2330      	movs	r3, #48	@ 0x30
 800931a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094b8 <_svfiprintf_r+0x1e4>
 800931e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009322:	f04f 0901 	mov.w	r9, #1
 8009326:	4623      	mov	r3, r4
 8009328:	469a      	mov	sl, r3
 800932a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800932e:	b10a      	cbz	r2, 8009334 <_svfiprintf_r+0x60>
 8009330:	2a25      	cmp	r2, #37	@ 0x25
 8009332:	d1f9      	bne.n	8009328 <_svfiprintf_r+0x54>
 8009334:	ebba 0b04 	subs.w	fp, sl, r4
 8009338:	d00b      	beq.n	8009352 <_svfiprintf_r+0x7e>
 800933a:	465b      	mov	r3, fp
 800933c:	4622      	mov	r2, r4
 800933e:	4629      	mov	r1, r5
 8009340:	4638      	mov	r0, r7
 8009342:	f7ff ff6b 	bl	800921c <__ssputs_r>
 8009346:	3001      	adds	r0, #1
 8009348:	f000 80a7 	beq.w	800949a <_svfiprintf_r+0x1c6>
 800934c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800934e:	445a      	add	r2, fp
 8009350:	9209      	str	r2, [sp, #36]	@ 0x24
 8009352:	f89a 3000 	ldrb.w	r3, [sl]
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 809f 	beq.w	800949a <_svfiprintf_r+0x1c6>
 800935c:	2300      	movs	r3, #0
 800935e:	f04f 32ff 	mov.w	r2, #4294967295
 8009362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009366:	f10a 0a01 	add.w	sl, sl, #1
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	9307      	str	r3, [sp, #28]
 800936e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009372:	931a      	str	r3, [sp, #104]	@ 0x68
 8009374:	4654      	mov	r4, sl
 8009376:	2205      	movs	r2, #5
 8009378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937c:	484e      	ldr	r0, [pc, #312]	@ (80094b8 <_svfiprintf_r+0x1e4>)
 800937e:	f7f6 ffaf 	bl	80002e0 <memchr>
 8009382:	9a04      	ldr	r2, [sp, #16]
 8009384:	b9d8      	cbnz	r0, 80093be <_svfiprintf_r+0xea>
 8009386:	06d0      	lsls	r0, r2, #27
 8009388:	bf44      	itt	mi
 800938a:	2320      	movmi	r3, #32
 800938c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009390:	0711      	lsls	r1, r2, #28
 8009392:	bf44      	itt	mi
 8009394:	232b      	movmi	r3, #43	@ 0x2b
 8009396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800939a:	f89a 3000 	ldrb.w	r3, [sl]
 800939e:	2b2a      	cmp	r3, #42	@ 0x2a
 80093a0:	d015      	beq.n	80093ce <_svfiprintf_r+0xfa>
 80093a2:	9a07      	ldr	r2, [sp, #28]
 80093a4:	4654      	mov	r4, sl
 80093a6:	2000      	movs	r0, #0
 80093a8:	f04f 0c0a 	mov.w	ip, #10
 80093ac:	4621      	mov	r1, r4
 80093ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093b2:	3b30      	subs	r3, #48	@ 0x30
 80093b4:	2b09      	cmp	r3, #9
 80093b6:	d94b      	bls.n	8009450 <_svfiprintf_r+0x17c>
 80093b8:	b1b0      	cbz	r0, 80093e8 <_svfiprintf_r+0x114>
 80093ba:	9207      	str	r2, [sp, #28]
 80093bc:	e014      	b.n	80093e8 <_svfiprintf_r+0x114>
 80093be:	eba0 0308 	sub.w	r3, r0, r8
 80093c2:	fa09 f303 	lsl.w	r3, r9, r3
 80093c6:	4313      	orrs	r3, r2
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	46a2      	mov	sl, r4
 80093cc:	e7d2      	b.n	8009374 <_svfiprintf_r+0xa0>
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	1d19      	adds	r1, r3, #4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	9103      	str	r1, [sp, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bfbb      	ittet	lt
 80093da:	425b      	neglt	r3, r3
 80093dc:	f042 0202 	orrlt.w	r2, r2, #2
 80093e0:	9307      	strge	r3, [sp, #28]
 80093e2:	9307      	strlt	r3, [sp, #28]
 80093e4:	bfb8      	it	lt
 80093e6:	9204      	strlt	r2, [sp, #16]
 80093e8:	7823      	ldrb	r3, [r4, #0]
 80093ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ec:	d10a      	bne.n	8009404 <_svfiprintf_r+0x130>
 80093ee:	7863      	ldrb	r3, [r4, #1]
 80093f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093f2:	d132      	bne.n	800945a <_svfiprintf_r+0x186>
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	1d1a      	adds	r2, r3, #4
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	9203      	str	r2, [sp, #12]
 80093fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009400:	3402      	adds	r4, #2
 8009402:	9305      	str	r3, [sp, #20]
 8009404:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094c8 <_svfiprintf_r+0x1f4>
 8009408:	7821      	ldrb	r1, [r4, #0]
 800940a:	2203      	movs	r2, #3
 800940c:	4650      	mov	r0, sl
 800940e:	f7f6 ff67 	bl	80002e0 <memchr>
 8009412:	b138      	cbz	r0, 8009424 <_svfiprintf_r+0x150>
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	eba0 000a 	sub.w	r0, r0, sl
 800941a:	2240      	movs	r2, #64	@ 0x40
 800941c:	4082      	lsls	r2, r0
 800941e:	4313      	orrs	r3, r2
 8009420:	3401      	adds	r4, #1
 8009422:	9304      	str	r3, [sp, #16]
 8009424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009428:	4824      	ldr	r0, [pc, #144]	@ (80094bc <_svfiprintf_r+0x1e8>)
 800942a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800942e:	2206      	movs	r2, #6
 8009430:	f7f6 ff56 	bl	80002e0 <memchr>
 8009434:	2800      	cmp	r0, #0
 8009436:	d036      	beq.n	80094a6 <_svfiprintf_r+0x1d2>
 8009438:	4b21      	ldr	r3, [pc, #132]	@ (80094c0 <_svfiprintf_r+0x1ec>)
 800943a:	bb1b      	cbnz	r3, 8009484 <_svfiprintf_r+0x1b0>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	3307      	adds	r3, #7
 8009440:	f023 0307 	bic.w	r3, r3, #7
 8009444:	3308      	adds	r3, #8
 8009446:	9303      	str	r3, [sp, #12]
 8009448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800944a:	4433      	add	r3, r6
 800944c:	9309      	str	r3, [sp, #36]	@ 0x24
 800944e:	e76a      	b.n	8009326 <_svfiprintf_r+0x52>
 8009450:	fb0c 3202 	mla	r2, ip, r2, r3
 8009454:	460c      	mov	r4, r1
 8009456:	2001      	movs	r0, #1
 8009458:	e7a8      	b.n	80093ac <_svfiprintf_r+0xd8>
 800945a:	2300      	movs	r3, #0
 800945c:	3401      	adds	r4, #1
 800945e:	9305      	str	r3, [sp, #20]
 8009460:	4619      	mov	r1, r3
 8009462:	f04f 0c0a 	mov.w	ip, #10
 8009466:	4620      	mov	r0, r4
 8009468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800946c:	3a30      	subs	r2, #48	@ 0x30
 800946e:	2a09      	cmp	r2, #9
 8009470:	d903      	bls.n	800947a <_svfiprintf_r+0x1a6>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0c6      	beq.n	8009404 <_svfiprintf_r+0x130>
 8009476:	9105      	str	r1, [sp, #20]
 8009478:	e7c4      	b.n	8009404 <_svfiprintf_r+0x130>
 800947a:	fb0c 2101 	mla	r1, ip, r1, r2
 800947e:	4604      	mov	r4, r0
 8009480:	2301      	movs	r3, #1
 8009482:	e7f0      	b.n	8009466 <_svfiprintf_r+0x192>
 8009484:	ab03      	add	r3, sp, #12
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	462a      	mov	r2, r5
 800948a:	4b0e      	ldr	r3, [pc, #56]	@ (80094c4 <_svfiprintf_r+0x1f0>)
 800948c:	a904      	add	r1, sp, #16
 800948e:	4638      	mov	r0, r7
 8009490:	f3af 8000 	nop.w
 8009494:	1c42      	adds	r2, r0, #1
 8009496:	4606      	mov	r6, r0
 8009498:	d1d6      	bne.n	8009448 <_svfiprintf_r+0x174>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	065b      	lsls	r3, r3, #25
 800949e:	f53f af2d 	bmi.w	80092fc <_svfiprintf_r+0x28>
 80094a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094a4:	e72c      	b.n	8009300 <_svfiprintf_r+0x2c>
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	462a      	mov	r2, r5
 80094ac:	4b05      	ldr	r3, [pc, #20]	@ (80094c4 <_svfiprintf_r+0x1f0>)
 80094ae:	a904      	add	r1, sp, #16
 80094b0:	4638      	mov	r0, r7
 80094b2:	f000 f9bb 	bl	800982c <_printf_i>
 80094b6:	e7ed      	b.n	8009494 <_svfiprintf_r+0x1c0>
 80094b8:	0800a57c 	.word	0x0800a57c
 80094bc:	0800a586 	.word	0x0800a586
 80094c0:	00000000 	.word	0x00000000
 80094c4:	0800921d 	.word	0x0800921d
 80094c8:	0800a582 	.word	0x0800a582

080094cc <__sfputc_r>:
 80094cc:	6893      	ldr	r3, [r2, #8]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	b410      	push	{r4}
 80094d4:	6093      	str	r3, [r2, #8]
 80094d6:	da08      	bge.n	80094ea <__sfputc_r+0x1e>
 80094d8:	6994      	ldr	r4, [r2, #24]
 80094da:	42a3      	cmp	r3, r4
 80094dc:	db01      	blt.n	80094e2 <__sfputc_r+0x16>
 80094de:	290a      	cmp	r1, #10
 80094e0:	d103      	bne.n	80094ea <__sfputc_r+0x1e>
 80094e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e6:	f000 bb6b 	b.w	8009bc0 <__swbuf_r>
 80094ea:	6813      	ldr	r3, [r2, #0]
 80094ec:	1c58      	adds	r0, r3, #1
 80094ee:	6010      	str	r0, [r2, #0]
 80094f0:	7019      	strb	r1, [r3, #0]
 80094f2:	4608      	mov	r0, r1
 80094f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <__sfputs_r>:
 80094fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fc:	4606      	mov	r6, r0
 80094fe:	460f      	mov	r7, r1
 8009500:	4614      	mov	r4, r2
 8009502:	18d5      	adds	r5, r2, r3
 8009504:	42ac      	cmp	r4, r5
 8009506:	d101      	bne.n	800950c <__sfputs_r+0x12>
 8009508:	2000      	movs	r0, #0
 800950a:	e007      	b.n	800951c <__sfputs_r+0x22>
 800950c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009510:	463a      	mov	r2, r7
 8009512:	4630      	mov	r0, r6
 8009514:	f7ff ffda 	bl	80094cc <__sfputc_r>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d1f3      	bne.n	8009504 <__sfputs_r+0xa>
 800951c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009520 <_vfiprintf_r>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	460d      	mov	r5, r1
 8009526:	b09d      	sub	sp, #116	@ 0x74
 8009528:	4614      	mov	r4, r2
 800952a:	4698      	mov	r8, r3
 800952c:	4606      	mov	r6, r0
 800952e:	b118      	cbz	r0, 8009538 <_vfiprintf_r+0x18>
 8009530:	6a03      	ldr	r3, [r0, #32]
 8009532:	b90b      	cbnz	r3, 8009538 <_vfiprintf_r+0x18>
 8009534:	f7ff fb44 	bl	8008bc0 <__sinit>
 8009538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800953a:	07d9      	lsls	r1, r3, #31
 800953c:	d405      	bmi.n	800954a <_vfiprintf_r+0x2a>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	059a      	lsls	r2, r3, #22
 8009542:	d402      	bmi.n	800954a <_vfiprintf_r+0x2a>
 8009544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009546:	f7ff fd5a 	bl	8008ffe <__retarget_lock_acquire_recursive>
 800954a:	89ab      	ldrh	r3, [r5, #12]
 800954c:	071b      	lsls	r3, r3, #28
 800954e:	d501      	bpl.n	8009554 <_vfiprintf_r+0x34>
 8009550:	692b      	ldr	r3, [r5, #16]
 8009552:	b99b      	cbnz	r3, 800957c <_vfiprintf_r+0x5c>
 8009554:	4629      	mov	r1, r5
 8009556:	4630      	mov	r0, r6
 8009558:	f000 fb70 	bl	8009c3c <__swsetup_r>
 800955c:	b170      	cbz	r0, 800957c <_vfiprintf_r+0x5c>
 800955e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009560:	07dc      	lsls	r4, r3, #31
 8009562:	d504      	bpl.n	800956e <_vfiprintf_r+0x4e>
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	b01d      	add	sp, #116	@ 0x74
 800956a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956e:	89ab      	ldrh	r3, [r5, #12]
 8009570:	0598      	lsls	r0, r3, #22
 8009572:	d4f7      	bmi.n	8009564 <_vfiprintf_r+0x44>
 8009574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009576:	f7ff fd43 	bl	8009000 <__retarget_lock_release_recursive>
 800957a:	e7f3      	b.n	8009564 <_vfiprintf_r+0x44>
 800957c:	2300      	movs	r3, #0
 800957e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009580:	2320      	movs	r3, #32
 8009582:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009586:	f8cd 800c 	str.w	r8, [sp, #12]
 800958a:	2330      	movs	r3, #48	@ 0x30
 800958c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800973c <_vfiprintf_r+0x21c>
 8009590:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009594:	f04f 0901 	mov.w	r9, #1
 8009598:	4623      	mov	r3, r4
 800959a:	469a      	mov	sl, r3
 800959c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a0:	b10a      	cbz	r2, 80095a6 <_vfiprintf_r+0x86>
 80095a2:	2a25      	cmp	r2, #37	@ 0x25
 80095a4:	d1f9      	bne.n	800959a <_vfiprintf_r+0x7a>
 80095a6:	ebba 0b04 	subs.w	fp, sl, r4
 80095aa:	d00b      	beq.n	80095c4 <_vfiprintf_r+0xa4>
 80095ac:	465b      	mov	r3, fp
 80095ae:	4622      	mov	r2, r4
 80095b0:	4629      	mov	r1, r5
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ffa1 	bl	80094fa <__sfputs_r>
 80095b8:	3001      	adds	r0, #1
 80095ba:	f000 80a7 	beq.w	800970c <_vfiprintf_r+0x1ec>
 80095be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095c0:	445a      	add	r2, fp
 80095c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80095c4:	f89a 3000 	ldrb.w	r3, [sl]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 809f 	beq.w	800970c <_vfiprintf_r+0x1ec>
 80095ce:	2300      	movs	r3, #0
 80095d0:	f04f 32ff 	mov.w	r2, #4294967295
 80095d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095d8:	f10a 0a01 	add.w	sl, sl, #1
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	9307      	str	r3, [sp, #28]
 80095e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80095e6:	4654      	mov	r4, sl
 80095e8:	2205      	movs	r2, #5
 80095ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ee:	4853      	ldr	r0, [pc, #332]	@ (800973c <_vfiprintf_r+0x21c>)
 80095f0:	f7f6 fe76 	bl	80002e0 <memchr>
 80095f4:	9a04      	ldr	r2, [sp, #16]
 80095f6:	b9d8      	cbnz	r0, 8009630 <_vfiprintf_r+0x110>
 80095f8:	06d1      	lsls	r1, r2, #27
 80095fa:	bf44      	itt	mi
 80095fc:	2320      	movmi	r3, #32
 80095fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009602:	0713      	lsls	r3, r2, #28
 8009604:	bf44      	itt	mi
 8009606:	232b      	movmi	r3, #43	@ 0x2b
 8009608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800960c:	f89a 3000 	ldrb.w	r3, [sl]
 8009610:	2b2a      	cmp	r3, #42	@ 0x2a
 8009612:	d015      	beq.n	8009640 <_vfiprintf_r+0x120>
 8009614:	9a07      	ldr	r2, [sp, #28]
 8009616:	4654      	mov	r4, sl
 8009618:	2000      	movs	r0, #0
 800961a:	f04f 0c0a 	mov.w	ip, #10
 800961e:	4621      	mov	r1, r4
 8009620:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009624:	3b30      	subs	r3, #48	@ 0x30
 8009626:	2b09      	cmp	r3, #9
 8009628:	d94b      	bls.n	80096c2 <_vfiprintf_r+0x1a2>
 800962a:	b1b0      	cbz	r0, 800965a <_vfiprintf_r+0x13a>
 800962c:	9207      	str	r2, [sp, #28]
 800962e:	e014      	b.n	800965a <_vfiprintf_r+0x13a>
 8009630:	eba0 0308 	sub.w	r3, r0, r8
 8009634:	fa09 f303 	lsl.w	r3, r9, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	9304      	str	r3, [sp, #16]
 800963c:	46a2      	mov	sl, r4
 800963e:	e7d2      	b.n	80095e6 <_vfiprintf_r+0xc6>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	1d19      	adds	r1, r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	9103      	str	r1, [sp, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfbb      	ittet	lt
 800964c:	425b      	neglt	r3, r3
 800964e:	f042 0202 	orrlt.w	r2, r2, #2
 8009652:	9307      	strge	r3, [sp, #28]
 8009654:	9307      	strlt	r3, [sp, #28]
 8009656:	bfb8      	it	lt
 8009658:	9204      	strlt	r2, [sp, #16]
 800965a:	7823      	ldrb	r3, [r4, #0]
 800965c:	2b2e      	cmp	r3, #46	@ 0x2e
 800965e:	d10a      	bne.n	8009676 <_vfiprintf_r+0x156>
 8009660:	7863      	ldrb	r3, [r4, #1]
 8009662:	2b2a      	cmp	r3, #42	@ 0x2a
 8009664:	d132      	bne.n	80096cc <_vfiprintf_r+0x1ac>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	1d1a      	adds	r2, r3, #4
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	9203      	str	r2, [sp, #12]
 800966e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009672:	3402      	adds	r4, #2
 8009674:	9305      	str	r3, [sp, #20]
 8009676:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800974c <_vfiprintf_r+0x22c>
 800967a:	7821      	ldrb	r1, [r4, #0]
 800967c:	2203      	movs	r2, #3
 800967e:	4650      	mov	r0, sl
 8009680:	f7f6 fe2e 	bl	80002e0 <memchr>
 8009684:	b138      	cbz	r0, 8009696 <_vfiprintf_r+0x176>
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	eba0 000a 	sub.w	r0, r0, sl
 800968c:	2240      	movs	r2, #64	@ 0x40
 800968e:	4082      	lsls	r2, r0
 8009690:	4313      	orrs	r3, r2
 8009692:	3401      	adds	r4, #1
 8009694:	9304      	str	r3, [sp, #16]
 8009696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969a:	4829      	ldr	r0, [pc, #164]	@ (8009740 <_vfiprintf_r+0x220>)
 800969c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096a0:	2206      	movs	r2, #6
 80096a2:	f7f6 fe1d 	bl	80002e0 <memchr>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d03f      	beq.n	800972a <_vfiprintf_r+0x20a>
 80096aa:	4b26      	ldr	r3, [pc, #152]	@ (8009744 <_vfiprintf_r+0x224>)
 80096ac:	bb1b      	cbnz	r3, 80096f6 <_vfiprintf_r+0x1d6>
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	3307      	adds	r3, #7
 80096b2:	f023 0307 	bic.w	r3, r3, #7
 80096b6:	3308      	adds	r3, #8
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096bc:	443b      	add	r3, r7
 80096be:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c0:	e76a      	b.n	8009598 <_vfiprintf_r+0x78>
 80096c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096c6:	460c      	mov	r4, r1
 80096c8:	2001      	movs	r0, #1
 80096ca:	e7a8      	b.n	800961e <_vfiprintf_r+0xfe>
 80096cc:	2300      	movs	r3, #0
 80096ce:	3401      	adds	r4, #1
 80096d0:	9305      	str	r3, [sp, #20]
 80096d2:	4619      	mov	r1, r3
 80096d4:	f04f 0c0a 	mov.w	ip, #10
 80096d8:	4620      	mov	r0, r4
 80096da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096de:	3a30      	subs	r2, #48	@ 0x30
 80096e0:	2a09      	cmp	r2, #9
 80096e2:	d903      	bls.n	80096ec <_vfiprintf_r+0x1cc>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d0c6      	beq.n	8009676 <_vfiprintf_r+0x156>
 80096e8:	9105      	str	r1, [sp, #20]
 80096ea:	e7c4      	b.n	8009676 <_vfiprintf_r+0x156>
 80096ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80096f0:	4604      	mov	r4, r0
 80096f2:	2301      	movs	r3, #1
 80096f4:	e7f0      	b.n	80096d8 <_vfiprintf_r+0x1b8>
 80096f6:	ab03      	add	r3, sp, #12
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	462a      	mov	r2, r5
 80096fc:	4b12      	ldr	r3, [pc, #72]	@ (8009748 <_vfiprintf_r+0x228>)
 80096fe:	a904      	add	r1, sp, #16
 8009700:	4630      	mov	r0, r6
 8009702:	f3af 8000 	nop.w
 8009706:	4607      	mov	r7, r0
 8009708:	1c78      	adds	r0, r7, #1
 800970a:	d1d6      	bne.n	80096ba <_vfiprintf_r+0x19a>
 800970c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800970e:	07d9      	lsls	r1, r3, #31
 8009710:	d405      	bmi.n	800971e <_vfiprintf_r+0x1fe>
 8009712:	89ab      	ldrh	r3, [r5, #12]
 8009714:	059a      	lsls	r2, r3, #22
 8009716:	d402      	bmi.n	800971e <_vfiprintf_r+0x1fe>
 8009718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800971a:	f7ff fc71 	bl	8009000 <__retarget_lock_release_recursive>
 800971e:	89ab      	ldrh	r3, [r5, #12]
 8009720:	065b      	lsls	r3, r3, #25
 8009722:	f53f af1f 	bmi.w	8009564 <_vfiprintf_r+0x44>
 8009726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009728:	e71e      	b.n	8009568 <_vfiprintf_r+0x48>
 800972a:	ab03      	add	r3, sp, #12
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	462a      	mov	r2, r5
 8009730:	4b05      	ldr	r3, [pc, #20]	@ (8009748 <_vfiprintf_r+0x228>)
 8009732:	a904      	add	r1, sp, #16
 8009734:	4630      	mov	r0, r6
 8009736:	f000 f879 	bl	800982c <_printf_i>
 800973a:	e7e4      	b.n	8009706 <_vfiprintf_r+0x1e6>
 800973c:	0800a57c 	.word	0x0800a57c
 8009740:	0800a586 	.word	0x0800a586
 8009744:	00000000 	.word	0x00000000
 8009748:	080094fb 	.word	0x080094fb
 800974c:	0800a582 	.word	0x0800a582

08009750 <_printf_common>:
 8009750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009754:	4616      	mov	r6, r2
 8009756:	4698      	mov	r8, r3
 8009758:	688a      	ldr	r2, [r1, #8]
 800975a:	690b      	ldr	r3, [r1, #16]
 800975c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009760:	4293      	cmp	r3, r2
 8009762:	bfb8      	it	lt
 8009764:	4613      	movlt	r3, r2
 8009766:	6033      	str	r3, [r6, #0]
 8009768:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800976c:	4607      	mov	r7, r0
 800976e:	460c      	mov	r4, r1
 8009770:	b10a      	cbz	r2, 8009776 <_printf_common+0x26>
 8009772:	3301      	adds	r3, #1
 8009774:	6033      	str	r3, [r6, #0]
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	0699      	lsls	r1, r3, #26
 800977a:	bf42      	ittt	mi
 800977c:	6833      	ldrmi	r3, [r6, #0]
 800977e:	3302      	addmi	r3, #2
 8009780:	6033      	strmi	r3, [r6, #0]
 8009782:	6825      	ldr	r5, [r4, #0]
 8009784:	f015 0506 	ands.w	r5, r5, #6
 8009788:	d106      	bne.n	8009798 <_printf_common+0x48>
 800978a:	f104 0a19 	add.w	sl, r4, #25
 800978e:	68e3      	ldr	r3, [r4, #12]
 8009790:	6832      	ldr	r2, [r6, #0]
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	42ab      	cmp	r3, r5
 8009796:	dc26      	bgt.n	80097e6 <_printf_common+0x96>
 8009798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800979c:	6822      	ldr	r2, [r4, #0]
 800979e:	3b00      	subs	r3, #0
 80097a0:	bf18      	it	ne
 80097a2:	2301      	movne	r3, #1
 80097a4:	0692      	lsls	r2, r2, #26
 80097a6:	d42b      	bmi.n	8009800 <_printf_common+0xb0>
 80097a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097ac:	4641      	mov	r1, r8
 80097ae:	4638      	mov	r0, r7
 80097b0:	47c8      	blx	r9
 80097b2:	3001      	adds	r0, #1
 80097b4:	d01e      	beq.n	80097f4 <_printf_common+0xa4>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	6922      	ldr	r2, [r4, #16]
 80097ba:	f003 0306 	and.w	r3, r3, #6
 80097be:	2b04      	cmp	r3, #4
 80097c0:	bf02      	ittt	eq
 80097c2:	68e5      	ldreq	r5, [r4, #12]
 80097c4:	6833      	ldreq	r3, [r6, #0]
 80097c6:	1aed      	subeq	r5, r5, r3
 80097c8:	68a3      	ldr	r3, [r4, #8]
 80097ca:	bf0c      	ite	eq
 80097cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097d0:	2500      	movne	r5, #0
 80097d2:	4293      	cmp	r3, r2
 80097d4:	bfc4      	itt	gt
 80097d6:	1a9b      	subgt	r3, r3, r2
 80097d8:	18ed      	addgt	r5, r5, r3
 80097da:	2600      	movs	r6, #0
 80097dc:	341a      	adds	r4, #26
 80097de:	42b5      	cmp	r5, r6
 80097e0:	d11a      	bne.n	8009818 <_printf_common+0xc8>
 80097e2:	2000      	movs	r0, #0
 80097e4:	e008      	b.n	80097f8 <_printf_common+0xa8>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4652      	mov	r2, sl
 80097ea:	4641      	mov	r1, r8
 80097ec:	4638      	mov	r0, r7
 80097ee:	47c8      	blx	r9
 80097f0:	3001      	adds	r0, #1
 80097f2:	d103      	bne.n	80097fc <_printf_common+0xac>
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295
 80097f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fc:	3501      	adds	r5, #1
 80097fe:	e7c6      	b.n	800978e <_printf_common+0x3e>
 8009800:	18e1      	adds	r1, r4, r3
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	2030      	movs	r0, #48	@ 0x30
 8009806:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800980a:	4422      	add	r2, r4
 800980c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009814:	3302      	adds	r3, #2
 8009816:	e7c7      	b.n	80097a8 <_printf_common+0x58>
 8009818:	2301      	movs	r3, #1
 800981a:	4622      	mov	r2, r4
 800981c:	4641      	mov	r1, r8
 800981e:	4638      	mov	r0, r7
 8009820:	47c8      	blx	r9
 8009822:	3001      	adds	r0, #1
 8009824:	d0e6      	beq.n	80097f4 <_printf_common+0xa4>
 8009826:	3601      	adds	r6, #1
 8009828:	e7d9      	b.n	80097de <_printf_common+0x8e>
	...

0800982c <_printf_i>:
 800982c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009830:	7e0f      	ldrb	r7, [r1, #24]
 8009832:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009834:	2f78      	cmp	r7, #120	@ 0x78
 8009836:	4691      	mov	r9, r2
 8009838:	4680      	mov	r8, r0
 800983a:	460c      	mov	r4, r1
 800983c:	469a      	mov	sl, r3
 800983e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009842:	d807      	bhi.n	8009854 <_printf_i+0x28>
 8009844:	2f62      	cmp	r7, #98	@ 0x62
 8009846:	d80a      	bhi.n	800985e <_printf_i+0x32>
 8009848:	2f00      	cmp	r7, #0
 800984a:	f000 80d1 	beq.w	80099f0 <_printf_i+0x1c4>
 800984e:	2f58      	cmp	r7, #88	@ 0x58
 8009850:	f000 80b8 	beq.w	80099c4 <_printf_i+0x198>
 8009854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800985c:	e03a      	b.n	80098d4 <_printf_i+0xa8>
 800985e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009862:	2b15      	cmp	r3, #21
 8009864:	d8f6      	bhi.n	8009854 <_printf_i+0x28>
 8009866:	a101      	add	r1, pc, #4	@ (adr r1, 800986c <_printf_i+0x40>)
 8009868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800986c:	080098c5 	.word	0x080098c5
 8009870:	080098d9 	.word	0x080098d9
 8009874:	08009855 	.word	0x08009855
 8009878:	08009855 	.word	0x08009855
 800987c:	08009855 	.word	0x08009855
 8009880:	08009855 	.word	0x08009855
 8009884:	080098d9 	.word	0x080098d9
 8009888:	08009855 	.word	0x08009855
 800988c:	08009855 	.word	0x08009855
 8009890:	08009855 	.word	0x08009855
 8009894:	08009855 	.word	0x08009855
 8009898:	080099d7 	.word	0x080099d7
 800989c:	08009903 	.word	0x08009903
 80098a0:	08009991 	.word	0x08009991
 80098a4:	08009855 	.word	0x08009855
 80098a8:	08009855 	.word	0x08009855
 80098ac:	080099f9 	.word	0x080099f9
 80098b0:	08009855 	.word	0x08009855
 80098b4:	08009903 	.word	0x08009903
 80098b8:	08009855 	.word	0x08009855
 80098bc:	08009855 	.word	0x08009855
 80098c0:	08009999 	.word	0x08009999
 80098c4:	6833      	ldr	r3, [r6, #0]
 80098c6:	1d1a      	adds	r2, r3, #4
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6032      	str	r2, [r6, #0]
 80098cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098d4:	2301      	movs	r3, #1
 80098d6:	e09c      	b.n	8009a12 <_printf_i+0x1e6>
 80098d8:	6833      	ldr	r3, [r6, #0]
 80098da:	6820      	ldr	r0, [r4, #0]
 80098dc:	1d19      	adds	r1, r3, #4
 80098de:	6031      	str	r1, [r6, #0]
 80098e0:	0606      	lsls	r6, r0, #24
 80098e2:	d501      	bpl.n	80098e8 <_printf_i+0xbc>
 80098e4:	681d      	ldr	r5, [r3, #0]
 80098e6:	e003      	b.n	80098f0 <_printf_i+0xc4>
 80098e8:	0645      	lsls	r5, r0, #25
 80098ea:	d5fb      	bpl.n	80098e4 <_printf_i+0xb8>
 80098ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	da03      	bge.n	80098fc <_printf_i+0xd0>
 80098f4:	232d      	movs	r3, #45	@ 0x2d
 80098f6:	426d      	negs	r5, r5
 80098f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098fc:	4858      	ldr	r0, [pc, #352]	@ (8009a60 <_printf_i+0x234>)
 80098fe:	230a      	movs	r3, #10
 8009900:	e011      	b.n	8009926 <_printf_i+0xfa>
 8009902:	6821      	ldr	r1, [r4, #0]
 8009904:	6833      	ldr	r3, [r6, #0]
 8009906:	0608      	lsls	r0, r1, #24
 8009908:	f853 5b04 	ldr.w	r5, [r3], #4
 800990c:	d402      	bmi.n	8009914 <_printf_i+0xe8>
 800990e:	0649      	lsls	r1, r1, #25
 8009910:	bf48      	it	mi
 8009912:	b2ad      	uxthmi	r5, r5
 8009914:	2f6f      	cmp	r7, #111	@ 0x6f
 8009916:	4852      	ldr	r0, [pc, #328]	@ (8009a60 <_printf_i+0x234>)
 8009918:	6033      	str	r3, [r6, #0]
 800991a:	bf14      	ite	ne
 800991c:	230a      	movne	r3, #10
 800991e:	2308      	moveq	r3, #8
 8009920:	2100      	movs	r1, #0
 8009922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009926:	6866      	ldr	r6, [r4, #4]
 8009928:	60a6      	str	r6, [r4, #8]
 800992a:	2e00      	cmp	r6, #0
 800992c:	db05      	blt.n	800993a <_printf_i+0x10e>
 800992e:	6821      	ldr	r1, [r4, #0]
 8009930:	432e      	orrs	r6, r5
 8009932:	f021 0104 	bic.w	r1, r1, #4
 8009936:	6021      	str	r1, [r4, #0]
 8009938:	d04b      	beq.n	80099d2 <_printf_i+0x1a6>
 800993a:	4616      	mov	r6, r2
 800993c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009940:	fb03 5711 	mls	r7, r3, r1, r5
 8009944:	5dc7      	ldrb	r7, [r0, r7]
 8009946:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800994a:	462f      	mov	r7, r5
 800994c:	42bb      	cmp	r3, r7
 800994e:	460d      	mov	r5, r1
 8009950:	d9f4      	bls.n	800993c <_printf_i+0x110>
 8009952:	2b08      	cmp	r3, #8
 8009954:	d10b      	bne.n	800996e <_printf_i+0x142>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	07df      	lsls	r7, r3, #31
 800995a:	d508      	bpl.n	800996e <_printf_i+0x142>
 800995c:	6923      	ldr	r3, [r4, #16]
 800995e:	6861      	ldr	r1, [r4, #4]
 8009960:	4299      	cmp	r1, r3
 8009962:	bfde      	ittt	le
 8009964:	2330      	movle	r3, #48	@ 0x30
 8009966:	f806 3c01 	strble.w	r3, [r6, #-1]
 800996a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800996e:	1b92      	subs	r2, r2, r6
 8009970:	6122      	str	r2, [r4, #16]
 8009972:	f8cd a000 	str.w	sl, [sp]
 8009976:	464b      	mov	r3, r9
 8009978:	aa03      	add	r2, sp, #12
 800997a:	4621      	mov	r1, r4
 800997c:	4640      	mov	r0, r8
 800997e:	f7ff fee7 	bl	8009750 <_printf_common>
 8009982:	3001      	adds	r0, #1
 8009984:	d14a      	bne.n	8009a1c <_printf_i+0x1f0>
 8009986:	f04f 30ff 	mov.w	r0, #4294967295
 800998a:	b004      	add	sp, #16
 800998c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	f043 0320 	orr.w	r3, r3, #32
 8009996:	6023      	str	r3, [r4, #0]
 8009998:	4832      	ldr	r0, [pc, #200]	@ (8009a64 <_printf_i+0x238>)
 800999a:	2778      	movs	r7, #120	@ 0x78
 800999c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	6831      	ldr	r1, [r6, #0]
 80099a4:	061f      	lsls	r7, r3, #24
 80099a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80099aa:	d402      	bmi.n	80099b2 <_printf_i+0x186>
 80099ac:	065f      	lsls	r7, r3, #25
 80099ae:	bf48      	it	mi
 80099b0:	b2ad      	uxthmi	r5, r5
 80099b2:	6031      	str	r1, [r6, #0]
 80099b4:	07d9      	lsls	r1, r3, #31
 80099b6:	bf44      	itt	mi
 80099b8:	f043 0320 	orrmi.w	r3, r3, #32
 80099bc:	6023      	strmi	r3, [r4, #0]
 80099be:	b11d      	cbz	r5, 80099c8 <_printf_i+0x19c>
 80099c0:	2310      	movs	r3, #16
 80099c2:	e7ad      	b.n	8009920 <_printf_i+0xf4>
 80099c4:	4826      	ldr	r0, [pc, #152]	@ (8009a60 <_printf_i+0x234>)
 80099c6:	e7e9      	b.n	800999c <_printf_i+0x170>
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	f023 0320 	bic.w	r3, r3, #32
 80099ce:	6023      	str	r3, [r4, #0]
 80099d0:	e7f6      	b.n	80099c0 <_printf_i+0x194>
 80099d2:	4616      	mov	r6, r2
 80099d4:	e7bd      	b.n	8009952 <_printf_i+0x126>
 80099d6:	6833      	ldr	r3, [r6, #0]
 80099d8:	6825      	ldr	r5, [r4, #0]
 80099da:	6961      	ldr	r1, [r4, #20]
 80099dc:	1d18      	adds	r0, r3, #4
 80099de:	6030      	str	r0, [r6, #0]
 80099e0:	062e      	lsls	r6, r5, #24
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	d501      	bpl.n	80099ea <_printf_i+0x1be>
 80099e6:	6019      	str	r1, [r3, #0]
 80099e8:	e002      	b.n	80099f0 <_printf_i+0x1c4>
 80099ea:	0668      	lsls	r0, r5, #25
 80099ec:	d5fb      	bpl.n	80099e6 <_printf_i+0x1ba>
 80099ee:	8019      	strh	r1, [r3, #0]
 80099f0:	2300      	movs	r3, #0
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	4616      	mov	r6, r2
 80099f6:	e7bc      	b.n	8009972 <_printf_i+0x146>
 80099f8:	6833      	ldr	r3, [r6, #0]
 80099fa:	1d1a      	adds	r2, r3, #4
 80099fc:	6032      	str	r2, [r6, #0]
 80099fe:	681e      	ldr	r6, [r3, #0]
 8009a00:	6862      	ldr	r2, [r4, #4]
 8009a02:	2100      	movs	r1, #0
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7f6 fc6b 	bl	80002e0 <memchr>
 8009a0a:	b108      	cbz	r0, 8009a10 <_printf_i+0x1e4>
 8009a0c:	1b80      	subs	r0, r0, r6
 8009a0e:	6060      	str	r0, [r4, #4]
 8009a10:	6863      	ldr	r3, [r4, #4]
 8009a12:	6123      	str	r3, [r4, #16]
 8009a14:	2300      	movs	r3, #0
 8009a16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a1a:	e7aa      	b.n	8009972 <_printf_i+0x146>
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	4632      	mov	r2, r6
 8009a20:	4649      	mov	r1, r9
 8009a22:	4640      	mov	r0, r8
 8009a24:	47d0      	blx	sl
 8009a26:	3001      	adds	r0, #1
 8009a28:	d0ad      	beq.n	8009986 <_printf_i+0x15a>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	079b      	lsls	r3, r3, #30
 8009a2e:	d413      	bmi.n	8009a58 <_printf_i+0x22c>
 8009a30:	68e0      	ldr	r0, [r4, #12]
 8009a32:	9b03      	ldr	r3, [sp, #12]
 8009a34:	4298      	cmp	r0, r3
 8009a36:	bfb8      	it	lt
 8009a38:	4618      	movlt	r0, r3
 8009a3a:	e7a6      	b.n	800998a <_printf_i+0x15e>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	4632      	mov	r2, r6
 8009a40:	4649      	mov	r1, r9
 8009a42:	4640      	mov	r0, r8
 8009a44:	47d0      	blx	sl
 8009a46:	3001      	adds	r0, #1
 8009a48:	d09d      	beq.n	8009986 <_printf_i+0x15a>
 8009a4a:	3501      	adds	r5, #1
 8009a4c:	68e3      	ldr	r3, [r4, #12]
 8009a4e:	9903      	ldr	r1, [sp, #12]
 8009a50:	1a5b      	subs	r3, r3, r1
 8009a52:	42ab      	cmp	r3, r5
 8009a54:	dcf2      	bgt.n	8009a3c <_printf_i+0x210>
 8009a56:	e7eb      	b.n	8009a30 <_printf_i+0x204>
 8009a58:	2500      	movs	r5, #0
 8009a5a:	f104 0619 	add.w	r6, r4, #25
 8009a5e:	e7f5      	b.n	8009a4c <_printf_i+0x220>
 8009a60:	0800a58d 	.word	0x0800a58d
 8009a64:	0800a59e 	.word	0x0800a59e

08009a68 <__sflush_r>:
 8009a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a70:	0716      	lsls	r6, r2, #28
 8009a72:	4605      	mov	r5, r0
 8009a74:	460c      	mov	r4, r1
 8009a76:	d454      	bmi.n	8009b22 <__sflush_r+0xba>
 8009a78:	684b      	ldr	r3, [r1, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	dc02      	bgt.n	8009a84 <__sflush_r+0x1c>
 8009a7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	dd48      	ble.n	8009b16 <__sflush_r+0xae>
 8009a84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	d045      	beq.n	8009b16 <__sflush_r+0xae>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a90:	682f      	ldr	r7, [r5, #0]
 8009a92:	6a21      	ldr	r1, [r4, #32]
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	d030      	beq.n	8009afa <__sflush_r+0x92>
 8009a98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	0759      	lsls	r1, r3, #29
 8009a9e:	d505      	bpl.n	8009aac <__sflush_r+0x44>
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	1ad2      	subs	r2, r2, r3
 8009aa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009aa6:	b10b      	cbz	r3, 8009aac <__sflush_r+0x44>
 8009aa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009aaa:	1ad2      	subs	r2, r2, r3
 8009aac:	2300      	movs	r3, #0
 8009aae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ab0:	6a21      	ldr	r1, [r4, #32]
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b0      	blx	r6
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	d106      	bne.n	8009aca <__sflush_r+0x62>
 8009abc:	6829      	ldr	r1, [r5, #0]
 8009abe:	291d      	cmp	r1, #29
 8009ac0:	d82b      	bhi.n	8009b1a <__sflush_r+0xb2>
 8009ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8009b6c <__sflush_r+0x104>)
 8009ac4:	40ca      	lsrs	r2, r1
 8009ac6:	07d6      	lsls	r6, r2, #31
 8009ac8:	d527      	bpl.n	8009b1a <__sflush_r+0xb2>
 8009aca:	2200      	movs	r2, #0
 8009acc:	6062      	str	r2, [r4, #4]
 8009ace:	04d9      	lsls	r1, r3, #19
 8009ad0:	6922      	ldr	r2, [r4, #16]
 8009ad2:	6022      	str	r2, [r4, #0]
 8009ad4:	d504      	bpl.n	8009ae0 <__sflush_r+0x78>
 8009ad6:	1c42      	adds	r2, r0, #1
 8009ad8:	d101      	bne.n	8009ade <__sflush_r+0x76>
 8009ada:	682b      	ldr	r3, [r5, #0]
 8009adc:	b903      	cbnz	r3, 8009ae0 <__sflush_r+0x78>
 8009ade:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ae2:	602f      	str	r7, [r5, #0]
 8009ae4:	b1b9      	cbz	r1, 8009b16 <__sflush_r+0xae>
 8009ae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aea:	4299      	cmp	r1, r3
 8009aec:	d002      	beq.n	8009af4 <__sflush_r+0x8c>
 8009aee:	4628      	mov	r0, r5
 8009af0:	f7ff fa9c 	bl	800902c <_free_r>
 8009af4:	2300      	movs	r3, #0
 8009af6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009af8:	e00d      	b.n	8009b16 <__sflush_r+0xae>
 8009afa:	2301      	movs	r3, #1
 8009afc:	4628      	mov	r0, r5
 8009afe:	47b0      	blx	r6
 8009b00:	4602      	mov	r2, r0
 8009b02:	1c50      	adds	r0, r2, #1
 8009b04:	d1c9      	bne.n	8009a9a <__sflush_r+0x32>
 8009b06:	682b      	ldr	r3, [r5, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0c6      	beq.n	8009a9a <__sflush_r+0x32>
 8009b0c:	2b1d      	cmp	r3, #29
 8009b0e:	d001      	beq.n	8009b14 <__sflush_r+0xac>
 8009b10:	2b16      	cmp	r3, #22
 8009b12:	d11e      	bne.n	8009b52 <__sflush_r+0xea>
 8009b14:	602f      	str	r7, [r5, #0]
 8009b16:	2000      	movs	r0, #0
 8009b18:	e022      	b.n	8009b60 <__sflush_r+0xf8>
 8009b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b1e:	b21b      	sxth	r3, r3
 8009b20:	e01b      	b.n	8009b5a <__sflush_r+0xf2>
 8009b22:	690f      	ldr	r7, [r1, #16]
 8009b24:	2f00      	cmp	r7, #0
 8009b26:	d0f6      	beq.n	8009b16 <__sflush_r+0xae>
 8009b28:	0793      	lsls	r3, r2, #30
 8009b2a:	680e      	ldr	r6, [r1, #0]
 8009b2c:	bf08      	it	eq
 8009b2e:	694b      	ldreq	r3, [r1, #20]
 8009b30:	600f      	str	r7, [r1, #0]
 8009b32:	bf18      	it	ne
 8009b34:	2300      	movne	r3, #0
 8009b36:	eba6 0807 	sub.w	r8, r6, r7
 8009b3a:	608b      	str	r3, [r1, #8]
 8009b3c:	f1b8 0f00 	cmp.w	r8, #0
 8009b40:	dde9      	ble.n	8009b16 <__sflush_r+0xae>
 8009b42:	6a21      	ldr	r1, [r4, #32]
 8009b44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b46:	4643      	mov	r3, r8
 8009b48:	463a      	mov	r2, r7
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b0      	blx	r6
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	dc08      	bgt.n	8009b64 <__sflush_r+0xfc>
 8009b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b64:	4407      	add	r7, r0
 8009b66:	eba8 0800 	sub.w	r8, r8, r0
 8009b6a:	e7e7      	b.n	8009b3c <__sflush_r+0xd4>
 8009b6c:	20400001 	.word	0x20400001

08009b70 <_fflush_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	690b      	ldr	r3, [r1, #16]
 8009b74:	4605      	mov	r5, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	b913      	cbnz	r3, 8009b80 <_fflush_r+0x10>
 8009b7a:	2500      	movs	r5, #0
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	b118      	cbz	r0, 8009b8a <_fflush_r+0x1a>
 8009b82:	6a03      	ldr	r3, [r0, #32]
 8009b84:	b90b      	cbnz	r3, 8009b8a <_fflush_r+0x1a>
 8009b86:	f7ff f81b 	bl	8008bc0 <__sinit>
 8009b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0f3      	beq.n	8009b7a <_fflush_r+0xa>
 8009b92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b94:	07d0      	lsls	r0, r2, #31
 8009b96:	d404      	bmi.n	8009ba2 <_fflush_r+0x32>
 8009b98:	0599      	lsls	r1, r3, #22
 8009b9a:	d402      	bmi.n	8009ba2 <_fflush_r+0x32>
 8009b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b9e:	f7ff fa2e 	bl	8008ffe <__retarget_lock_acquire_recursive>
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	f7ff ff5f 	bl	8009a68 <__sflush_r>
 8009baa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bac:	07da      	lsls	r2, r3, #31
 8009bae:	4605      	mov	r5, r0
 8009bb0:	d4e4      	bmi.n	8009b7c <_fflush_r+0xc>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	059b      	lsls	r3, r3, #22
 8009bb6:	d4e1      	bmi.n	8009b7c <_fflush_r+0xc>
 8009bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bba:	f7ff fa21 	bl	8009000 <__retarget_lock_release_recursive>
 8009bbe:	e7dd      	b.n	8009b7c <_fflush_r+0xc>

08009bc0 <__swbuf_r>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	460e      	mov	r6, r1
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	b118      	cbz	r0, 8009bd2 <__swbuf_r+0x12>
 8009bca:	6a03      	ldr	r3, [r0, #32]
 8009bcc:	b90b      	cbnz	r3, 8009bd2 <__swbuf_r+0x12>
 8009bce:	f7fe fff7 	bl	8008bc0 <__sinit>
 8009bd2:	69a3      	ldr	r3, [r4, #24]
 8009bd4:	60a3      	str	r3, [r4, #8]
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	071a      	lsls	r2, r3, #28
 8009bda:	d501      	bpl.n	8009be0 <__swbuf_r+0x20>
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	b943      	cbnz	r3, 8009bf2 <__swbuf_r+0x32>
 8009be0:	4621      	mov	r1, r4
 8009be2:	4628      	mov	r0, r5
 8009be4:	f000 f82a 	bl	8009c3c <__swsetup_r>
 8009be8:	b118      	cbz	r0, 8009bf2 <__swbuf_r+0x32>
 8009bea:	f04f 37ff 	mov.w	r7, #4294967295
 8009bee:	4638      	mov	r0, r7
 8009bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	6922      	ldr	r2, [r4, #16]
 8009bf6:	1a98      	subs	r0, r3, r2
 8009bf8:	6963      	ldr	r3, [r4, #20]
 8009bfa:	b2f6      	uxtb	r6, r6
 8009bfc:	4283      	cmp	r3, r0
 8009bfe:	4637      	mov	r7, r6
 8009c00:	dc05      	bgt.n	8009c0e <__swbuf_r+0x4e>
 8009c02:	4621      	mov	r1, r4
 8009c04:	4628      	mov	r0, r5
 8009c06:	f7ff ffb3 	bl	8009b70 <_fflush_r>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d1ed      	bne.n	8009bea <__swbuf_r+0x2a>
 8009c0e:	68a3      	ldr	r3, [r4, #8]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	60a3      	str	r3, [r4, #8]
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	6022      	str	r2, [r4, #0]
 8009c1a:	701e      	strb	r6, [r3, #0]
 8009c1c:	6962      	ldr	r2, [r4, #20]
 8009c1e:	1c43      	adds	r3, r0, #1
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d004      	beq.n	8009c2e <__swbuf_r+0x6e>
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	07db      	lsls	r3, r3, #31
 8009c28:	d5e1      	bpl.n	8009bee <__swbuf_r+0x2e>
 8009c2a:	2e0a      	cmp	r6, #10
 8009c2c:	d1df      	bne.n	8009bee <__swbuf_r+0x2e>
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	f7ff ff9d 	bl	8009b70 <_fflush_r>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d0d9      	beq.n	8009bee <__swbuf_r+0x2e>
 8009c3a:	e7d6      	b.n	8009bea <__swbuf_r+0x2a>

08009c3c <__swsetup_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4b29      	ldr	r3, [pc, #164]	@ (8009ce4 <__swsetup_r+0xa8>)
 8009c40:	4605      	mov	r5, r0
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	460c      	mov	r4, r1
 8009c46:	b118      	cbz	r0, 8009c50 <__swsetup_r+0x14>
 8009c48:	6a03      	ldr	r3, [r0, #32]
 8009c4a:	b90b      	cbnz	r3, 8009c50 <__swsetup_r+0x14>
 8009c4c:	f7fe ffb8 	bl	8008bc0 <__sinit>
 8009c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c54:	0719      	lsls	r1, r3, #28
 8009c56:	d422      	bmi.n	8009c9e <__swsetup_r+0x62>
 8009c58:	06da      	lsls	r2, r3, #27
 8009c5a:	d407      	bmi.n	8009c6c <__swsetup_r+0x30>
 8009c5c:	2209      	movs	r2, #9
 8009c5e:	602a      	str	r2, [r5, #0]
 8009c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6a:	e033      	b.n	8009cd4 <__swsetup_r+0x98>
 8009c6c:	0758      	lsls	r0, r3, #29
 8009c6e:	d512      	bpl.n	8009c96 <__swsetup_r+0x5a>
 8009c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c72:	b141      	cbz	r1, 8009c86 <__swsetup_r+0x4a>
 8009c74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c78:	4299      	cmp	r1, r3
 8009c7a:	d002      	beq.n	8009c82 <__swsetup_r+0x46>
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f7ff f9d5 	bl	800902c <_free_r>
 8009c82:	2300      	movs	r3, #0
 8009c84:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	6063      	str	r3, [r4, #4]
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	f043 0308 	orr.w	r3, r3, #8
 8009c9c:	81a3      	strh	r3, [r4, #12]
 8009c9e:	6923      	ldr	r3, [r4, #16]
 8009ca0:	b94b      	cbnz	r3, 8009cb6 <__swsetup_r+0x7a>
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cac:	d003      	beq.n	8009cb6 <__swsetup_r+0x7a>
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f000 f8db 	bl	8009e6c <__smakebuf_r>
 8009cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cba:	f013 0201 	ands.w	r2, r3, #1
 8009cbe:	d00a      	beq.n	8009cd6 <__swsetup_r+0x9a>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	60a2      	str	r2, [r4, #8]
 8009cc4:	6962      	ldr	r2, [r4, #20]
 8009cc6:	4252      	negs	r2, r2
 8009cc8:	61a2      	str	r2, [r4, #24]
 8009cca:	6922      	ldr	r2, [r4, #16]
 8009ccc:	b942      	cbnz	r2, 8009ce0 <__swsetup_r+0xa4>
 8009cce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cd2:	d1c5      	bne.n	8009c60 <__swsetup_r+0x24>
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
 8009cd6:	0799      	lsls	r1, r3, #30
 8009cd8:	bf58      	it	pl
 8009cda:	6962      	ldrpl	r2, [r4, #20]
 8009cdc:	60a2      	str	r2, [r4, #8]
 8009cde:	e7f4      	b.n	8009cca <__swsetup_r+0x8e>
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	e7f7      	b.n	8009cd4 <__swsetup_r+0x98>
 8009ce4:	24000050 	.word	0x24000050

08009ce8 <memmove>:
 8009ce8:	4288      	cmp	r0, r1
 8009cea:	b510      	push	{r4, lr}
 8009cec:	eb01 0402 	add.w	r4, r1, r2
 8009cf0:	d902      	bls.n	8009cf8 <memmove+0x10>
 8009cf2:	4284      	cmp	r4, r0
 8009cf4:	4623      	mov	r3, r4
 8009cf6:	d807      	bhi.n	8009d08 <memmove+0x20>
 8009cf8:	1e43      	subs	r3, r0, #1
 8009cfa:	42a1      	cmp	r1, r4
 8009cfc:	d008      	beq.n	8009d10 <memmove+0x28>
 8009cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d06:	e7f8      	b.n	8009cfa <memmove+0x12>
 8009d08:	4402      	add	r2, r0
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	428a      	cmp	r2, r1
 8009d0e:	d100      	bne.n	8009d12 <memmove+0x2a>
 8009d10:	bd10      	pop	{r4, pc}
 8009d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d1a:	e7f7      	b.n	8009d0c <memmove+0x24>

08009d1c <_raise_r>:
 8009d1c:	291f      	cmp	r1, #31
 8009d1e:	b538      	push	{r3, r4, r5, lr}
 8009d20:	4605      	mov	r5, r0
 8009d22:	460c      	mov	r4, r1
 8009d24:	d904      	bls.n	8009d30 <_raise_r+0x14>
 8009d26:	2316      	movs	r3, #22
 8009d28:	6003      	str	r3, [r0, #0]
 8009d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d32:	b112      	cbz	r2, 8009d3a <_raise_r+0x1e>
 8009d34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d38:	b94b      	cbnz	r3, 8009d4e <_raise_r+0x32>
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 f830 	bl	8009da0 <_getpid_r>
 8009d40:	4622      	mov	r2, r4
 8009d42:	4601      	mov	r1, r0
 8009d44:	4628      	mov	r0, r5
 8009d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d4a:	f000 b817 	b.w	8009d7c <_kill_r>
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d00a      	beq.n	8009d68 <_raise_r+0x4c>
 8009d52:	1c59      	adds	r1, r3, #1
 8009d54:	d103      	bne.n	8009d5e <_raise_r+0x42>
 8009d56:	2316      	movs	r3, #22
 8009d58:	6003      	str	r3, [r0, #0]
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	e7e7      	b.n	8009d2e <_raise_r+0x12>
 8009d5e:	2100      	movs	r1, #0
 8009d60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d64:	4620      	mov	r0, r4
 8009d66:	4798      	blx	r3
 8009d68:	2000      	movs	r0, #0
 8009d6a:	e7e0      	b.n	8009d2e <_raise_r+0x12>

08009d6c <raise>:
 8009d6c:	4b02      	ldr	r3, [pc, #8]	@ (8009d78 <raise+0xc>)
 8009d6e:	4601      	mov	r1, r0
 8009d70:	6818      	ldr	r0, [r3, #0]
 8009d72:	f7ff bfd3 	b.w	8009d1c <_raise_r>
 8009d76:	bf00      	nop
 8009d78:	24000050 	.word	0x24000050

08009d7c <_kill_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d07      	ldr	r5, [pc, #28]	@ (8009d9c <_kill_r+0x20>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	602b      	str	r3, [r5, #0]
 8009d8a:	f7f6 fe91 	bl	8000ab0 <_kill>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	d102      	bne.n	8009d98 <_kill_r+0x1c>
 8009d92:	682b      	ldr	r3, [r5, #0]
 8009d94:	b103      	cbz	r3, 8009d98 <_kill_r+0x1c>
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	bf00      	nop
 8009d9c:	24005628 	.word	0x24005628

08009da0 <_getpid_r>:
 8009da0:	f7f6 be7e 	b.w	8000aa0 <_getpid>

08009da4 <_sbrk_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d06      	ldr	r5, [pc, #24]	@ (8009dc0 <_sbrk_r+0x1c>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	602b      	str	r3, [r5, #0]
 8009db0:	f7f6 ff06 	bl	8000bc0 <_sbrk>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_sbrk_r+0x1a>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_sbrk_r+0x1a>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	24005628 	.word	0x24005628

08009dc4 <_realloc_r>:
 8009dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc8:	4607      	mov	r7, r0
 8009dca:	4614      	mov	r4, r2
 8009dcc:	460d      	mov	r5, r1
 8009dce:	b921      	cbnz	r1, 8009dda <_realloc_r+0x16>
 8009dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	f7ff b995 	b.w	8009104 <_malloc_r>
 8009dda:	b92a      	cbnz	r2, 8009de8 <_realloc_r+0x24>
 8009ddc:	f7ff f926 	bl	800902c <_free_r>
 8009de0:	4625      	mov	r5, r4
 8009de2:	4628      	mov	r0, r5
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	f000 f89e 	bl	8009f28 <_malloc_usable_size_r>
 8009dec:	4284      	cmp	r4, r0
 8009dee:	4606      	mov	r6, r0
 8009df0:	d802      	bhi.n	8009df8 <_realloc_r+0x34>
 8009df2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009df6:	d8f4      	bhi.n	8009de2 <_realloc_r+0x1e>
 8009df8:	4621      	mov	r1, r4
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f7ff f982 	bl	8009104 <_malloc_r>
 8009e00:	4680      	mov	r8, r0
 8009e02:	b908      	cbnz	r0, 8009e08 <_realloc_r+0x44>
 8009e04:	4645      	mov	r5, r8
 8009e06:	e7ec      	b.n	8009de2 <_realloc_r+0x1e>
 8009e08:	42b4      	cmp	r4, r6
 8009e0a:	4622      	mov	r2, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	bf28      	it	cs
 8009e10:	4632      	movcs	r2, r6
 8009e12:	f7ff f8f6 	bl	8009002 <memcpy>
 8009e16:	4629      	mov	r1, r5
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff f907 	bl	800902c <_free_r>
 8009e1e:	e7f1      	b.n	8009e04 <_realloc_r+0x40>

08009e20 <__swhatbuf_r>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	460c      	mov	r4, r1
 8009e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	b096      	sub	sp, #88	@ 0x58
 8009e2c:	4615      	mov	r5, r2
 8009e2e:	461e      	mov	r6, r3
 8009e30:	da0d      	bge.n	8009e4e <__swhatbuf_r+0x2e>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e38:	f04f 0100 	mov.w	r1, #0
 8009e3c:	bf14      	ite	ne
 8009e3e:	2340      	movne	r3, #64	@ 0x40
 8009e40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e44:	2000      	movs	r0, #0
 8009e46:	6031      	str	r1, [r6, #0]
 8009e48:	602b      	str	r3, [r5, #0]
 8009e4a:	b016      	add	sp, #88	@ 0x58
 8009e4c:	bd70      	pop	{r4, r5, r6, pc}
 8009e4e:	466a      	mov	r2, sp
 8009e50:	f000 f848 	bl	8009ee4 <_fstat_r>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	dbec      	blt.n	8009e32 <__swhatbuf_r+0x12>
 8009e58:	9901      	ldr	r1, [sp, #4]
 8009e5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e62:	4259      	negs	r1, r3
 8009e64:	4159      	adcs	r1, r3
 8009e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e6a:	e7eb      	b.n	8009e44 <__swhatbuf_r+0x24>

08009e6c <__smakebuf_r>:
 8009e6c:	898b      	ldrh	r3, [r1, #12]
 8009e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e70:	079d      	lsls	r5, r3, #30
 8009e72:	4606      	mov	r6, r0
 8009e74:	460c      	mov	r4, r1
 8009e76:	d507      	bpl.n	8009e88 <__smakebuf_r+0x1c>
 8009e78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	2301      	movs	r3, #1
 8009e82:	6163      	str	r3, [r4, #20]
 8009e84:	b003      	add	sp, #12
 8009e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e88:	ab01      	add	r3, sp, #4
 8009e8a:	466a      	mov	r2, sp
 8009e8c:	f7ff ffc8 	bl	8009e20 <__swhatbuf_r>
 8009e90:	9f00      	ldr	r7, [sp, #0]
 8009e92:	4605      	mov	r5, r0
 8009e94:	4639      	mov	r1, r7
 8009e96:	4630      	mov	r0, r6
 8009e98:	f7ff f934 	bl	8009104 <_malloc_r>
 8009e9c:	b948      	cbnz	r0, 8009eb2 <__smakebuf_r+0x46>
 8009e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea2:	059a      	lsls	r2, r3, #22
 8009ea4:	d4ee      	bmi.n	8009e84 <__smakebuf_r+0x18>
 8009ea6:	f023 0303 	bic.w	r3, r3, #3
 8009eaa:	f043 0302 	orr.w	r3, r3, #2
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	e7e2      	b.n	8009e78 <__smakebuf_r+0xc>
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	6020      	str	r0, [r4, #0]
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eba:	81a3      	strh	r3, [r4, #12]
 8009ebc:	9b01      	ldr	r3, [sp, #4]
 8009ebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ec2:	b15b      	cbz	r3, 8009edc <__smakebuf_r+0x70>
 8009ec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f000 f81d 	bl	8009f08 <_isatty_r>
 8009ece:	b128      	cbz	r0, 8009edc <__smakebuf_r+0x70>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	f023 0303 	bic.w	r3, r3, #3
 8009ed6:	f043 0301 	orr.w	r3, r3, #1
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	431d      	orrs	r5, r3
 8009ee0:	81a5      	strh	r5, [r4, #12]
 8009ee2:	e7cf      	b.n	8009e84 <__smakebuf_r+0x18>

08009ee4 <_fstat_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d07      	ldr	r5, [pc, #28]	@ (8009f04 <_fstat_r+0x20>)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4604      	mov	r4, r0
 8009eec:	4608      	mov	r0, r1
 8009eee:	4611      	mov	r1, r2
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	f7f6 fe3d 	bl	8000b70 <_fstat>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d102      	bne.n	8009f00 <_fstat_r+0x1c>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	b103      	cbz	r3, 8009f00 <_fstat_r+0x1c>
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	bd38      	pop	{r3, r4, r5, pc}
 8009f02:	bf00      	nop
 8009f04:	24005628 	.word	0x24005628

08009f08 <_isatty_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d06      	ldr	r5, [pc, #24]	@ (8009f24 <_isatty_r+0x1c>)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	602b      	str	r3, [r5, #0]
 8009f14:	f7f6 fe3c 	bl	8000b90 <_isatty>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_isatty_r+0x1a>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_isatty_r+0x1a>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	24005628 	.word	0x24005628

08009f28 <_malloc_usable_size_r>:
 8009f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f2c:	1f18      	subs	r0, r3, #4
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	bfbc      	itt	lt
 8009f32:	580b      	ldrlt	r3, [r1, r0]
 8009f34:	18c0      	addlt	r0, r0, r3
 8009f36:	4770      	bx	lr

08009f38 <_init>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr

08009f44 <_fini>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	bf00      	nop
 8009f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4a:	bc08      	pop	{r3}
 8009f4c:	469e      	mov	lr, r3
 8009f4e:	4770      	bx	lr
