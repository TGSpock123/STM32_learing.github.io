
new_15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006d28  08006d28  00007d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e20  08006e20  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006e20  08006e20  00007e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e28  08006e28  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e28  08006e28  00007e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e2c  08006e2c  00007e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006e30  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c90  20000064  08006e94  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cf4  08006e94  00008cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cd9  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ab  00000000  00000000  0001fd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00023618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103e  00000000  00000000  00024b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dae  00000000  00000000  00025b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b2f  00000000  00000000  0003e8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098e2d  00000000  00000000  0005642b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c9c  00000000  00000000  000ef29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000f4f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d10 	.word	0x08006d10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08006d10 	.word	0x08006d10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_0 */
  Task_0Handle = osThreadNew(StartTask_0, NULL, &Task_0_attributes);
 80005ac:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <MX_FREERTOS_Init+0x38>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <MX_FREERTOS_Init+0x3c>)
 80005b2:	f002 fd7d 	bl	80030b0 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <MX_FREERTOS_Init+0x40>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of Task_1 */
  Task_1Handle = osThreadNew(StartTask_1, NULL, &Task_1_attributes);
 80005bc:	4a0b      	ldr	r2, [pc, #44]	@ (80005ec <MX_FREERTOS_Init+0x44>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <MX_FREERTOS_Init+0x48>)
 80005c2:	f002 fd75 	bl	80030b0 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <MX_FREERTOS_Init+0x4c>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(StartTask_2, NULL, &Task_2_attributes);
 80005cc:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <MX_FREERTOS_Init+0x50>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480a      	ldr	r0, [pc, #40]	@ (80005fc <MX_FREERTOS_Init+0x54>)
 80005d2:	f002 fd6d 	bl	80030b0 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a09      	ldr	r2, [pc, #36]	@ (8000600 <MX_FREERTOS_Init+0x58>)
 80005da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08006d68 	.word	0x08006d68
 80005e4:	08000605 	.word	0x08000605
 80005e8:	200001ac 	.word	0x200001ac
 80005ec:	08006d8c 	.word	0x08006d8c
 80005f0:	0800063d 	.word	0x0800063d
 80005f4:	200001b0 	.word	0x200001b0
 80005f8:	08006db0 	.word	0x08006db0
 80005fc:	08000675 	.word	0x08000675
 8000600:	200001b4 	.word	0x200001b4

08000604 <StartTask_0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_0 */
void StartTask_0(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_0 */
  TickType_t last_wake_time = xTaskGetTickCount();
 800060c:	f003 ff9e 	bl	800454c <xTaskGetTickCount>
 8000610:	4603      	mov	r3, r0
 8000612:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_red_GPIO_Port, LED_red_Pin);
 8000614:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000618:	4806      	ldr	r0, [pc, #24]	@ (8000634 <StartTask_0+0x30>)
 800061a:	f000 fe4e 	bl	80012ba <HAL_GPIO_TogglePin>
    vTaskDelayUntil(&last_wake_time, count);
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <StartTask_0+0x34>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fd5b 	bl	80040e4 <vTaskDelayUntil>
    HAL_GPIO_TogglePin(LED_red_GPIO_Port, LED_red_Pin);
 800062e:	bf00      	nop
 8000630:	e7f0      	b.n	8000614 <StartTask_0+0x10>
 8000632:	bf00      	nop
 8000634:	40020000 	.word	0x40020000
 8000638:	20000000 	.word	0x20000000

0800063c <StartTask_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_1 */
void StartTask_1(void *argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_1 */
  TickType_t last_wake_time = xTaskGetTickCount();
 8000644:	f003 ff82 	bl	800454c <xTaskGetTickCount>
 8000648:	4603      	mov	r3, r0
 800064a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 800064c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000650:	4806      	ldr	r0, [pc, #24]	@ (800066c <StartTask_1+0x30>)
 8000652:	f000 fe32 	bl	80012ba <HAL_GPIO_TogglePin>
    vTaskDelayUntil(&last_wake_time, count);
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <StartTask_1+0x34>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fd3f 	bl	80040e4 <vTaskDelayUntil>
    HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 8000666:	bf00      	nop
 8000668:	e7f0      	b.n	800064c <StartTask_1+0x10>
 800066a:	bf00      	nop
 800066c:	40020000 	.word	0x40020000
 8000670:	20000000 	.word	0x20000000

08000674 <StartTask_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_2 */
void StartTask_2(void *argument)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_2 */
  TickType_t last_wake_time = xTaskGetTickCount();
 800067c:	f003 ff66 	bl	800454c <xTaskGetTickCount>
 8000680:	4603      	mov	r3, r0
 8000682:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    vTaskList(buffer);
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <StartTask_2+0x44>)
 8000686:	f004 fd31 	bl	80050ec <vTaskList>
    HAL_UART_Transmit_IT(&huart2, (unsigned char *)buffer, strlen(buffer));
 800068a:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <StartTask_2+0x44>)
 800068c:	f7ff fda8 	bl	80001e0 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29b      	uxth	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	@ (80006b8 <StartTask_2+0x44>)
 8000698:	4808      	ldr	r0, [pc, #32]	@ (80006bc <StartTask_2+0x48>)
 800069a:	f001 fd77 	bl	800218c <HAL_UART_Transmit_IT>
    vTaskDelayUntil(&last_wake_time, count * 5);
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <StartTask_2+0x4c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	441a      	add	r2, r3
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4611      	mov	r1, r2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fd18 	bl	80040e4 <vTaskDelayUntil>
    vTaskList(buffer);
 80006b4:	bf00      	nop
 80006b6:	e7e5      	b.n	8000684 <StartTask_2+0x10>
 80006b8:	20000080 	.word	0x20000080
 80006bc:	20000204 	.word	0x20000204
 80006c0:	20000000 	.word	0x20000000

080006c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_GPIO_Init+0x80>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a18      	ldr	r2, [pc, #96]	@ (8000744 <MX_GPIO_Init+0x80>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_GPIO_Init+0x80>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_GPIO_Init+0x80>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <MX_GPIO_Init+0x80>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_GPIO_Init+0x80>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_green_Pin|LED_red_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <MX_GPIO_Init+0x84>)
 800071a:	f000 fdb5 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_green_Pin|LED_red_Pin;
 800071e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_GPIO_Init+0x84>)
 8000738:	f000 fc22 	bl	8000f80 <HAL_GPIO_Init>

}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020000 	.word	0x40020000

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fa60 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f80c 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f7ff ffb4 	bl	80006c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075c:	f000 f9b6 	bl	8000acc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000760:	f002 fc5c 	bl	800301c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000764:	f7ff ff20 	bl	80005a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000768:	f002 fc7c 	bl	8003064 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <main+0x20>

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	@ 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f005 fe3e 	bl	8006400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <SystemClock_Config+0xc8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a26      	ldr	r2, [pc, #152]	@ (8000838 <SystemClock_Config+0xc8>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <SystemClock_Config+0xc8>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a20      	ldr	r2, [pc, #128]	@ (800083c <SystemClock_Config+0xcc>)
 80007ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <SystemClock_Config+0xcc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80007e0:	230c      	movs	r3, #12
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007e4:	2360      	movs	r3, #96	@ 0x60
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fd7b 	bl	80012f0 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 f830 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2103      	movs	r1, #3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 ffdd 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800082c:	f000 f81a 	bl	8000864 <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	@ 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 fa01 	bl	8000c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40000c00 	.word	0x40000c00

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <HAL_MspInit+0x64>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	4a15      	ldr	r2, [pc, #84]	@ (80008d4 <HAL_MspInit+0x64>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000884:	6453      	str	r3, [r2, #68]	@ 0x44
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <HAL_MspInit+0x64>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x64>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	4a0e      	ldr	r2, [pc, #56]	@ (80008d4 <HAL_MspInit+0x64>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <HAL_MspInit+0x64>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	f06f 0001 	mvn.w	r0, #1
 80008b6:	f000 faa7 	bl	8000e08 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	2005      	movs	r0, #5
 80008c0:	f000 faa2 	bl	8000e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80008c4:	2005      	movs	r0, #5
 80008c6:	f000 fabb 	bl	8000e40 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	@ 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <HAL_InitTick+0xe4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a32      	ldr	r2, [pc, #200]	@ (80009bc <HAL_InitTick+0xe4>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b30      	ldr	r3, [pc, #192]	@ (80009bc <HAL_InitTick+0xe4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000904:	f107 0210 	add.w	r2, r7, #16
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f946 	bl	8001ba0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800091a:	2b00      	cmp	r3, #0
 800091c:	d103      	bne.n	8000926 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800091e:	f001 f917 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000922:	6378      	str	r0, [r7, #52]	@ 0x34
 8000924:	e004      	b.n	8000930 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000926:	f001 f913 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 800092a:	4603      	mov	r3, r0
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000932:	4a23      	ldr	r2, [pc, #140]	@ (80009c0 <HAL_InitTick+0xe8>)
 8000934:	fba2 2303 	umull	r2, r3, r2, r3
 8000938:	0c9b      	lsrs	r3, r3, #18
 800093a:	3b01      	subs	r3, #1
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <HAL_InitTick+0xec>)
 8000940:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <HAL_InitTick+0xf0>)
 8000942:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <HAL_InitTick+0xec>)
 8000946:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800094a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800094c:	4a1d      	ldr	r2, [pc, #116]	@ (80009c4 <HAL_InitTick+0xec>)
 800094e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000950:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <HAL_InitTick+0xec>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <HAL_InitTick+0xec>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <HAL_InitTick+0xec>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000964:	4817      	ldr	r0, [pc, #92]	@ (80009c4 <HAL_InitTick+0xec>)
 8000966:	f001 f94d 	bl	8001c04 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000974:	2b00      	cmp	r3, #0
 8000976:	d11b      	bne.n	80009b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000978:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <HAL_InitTick+0xec>)
 800097a:	f001 f99d 	bl	8001cb8 <HAL_TIM_Base_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000984:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000988:	2b00      	cmp	r3, #0
 800098a:	d111      	bne.n	80009b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800098c:	2032      	movs	r0, #50	@ 0x32
 800098e:	f000 fa57 	bl	8000e40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d808      	bhi.n	80009aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	2032      	movs	r0, #50	@ 0x32
 800099e:	f000 fa33 	bl	8000e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <HAL_InitTick+0xf4>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e002      	b.n	80009b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3738      	adds	r7, #56	@ 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	200001b8 	.word	0x200001b8
 80009c8:	40000c00 	.word	0x40000c00
 80009cc:	20000008 	.word	0x20000008

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <USART2_IRQHandler+0x10>)
 8000a1a:	f001 fbed 	bl	80021f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000204 	.word	0x20000204

08000a28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <TIM5_IRQHandler+0x10>)
 8000a2e:	f001 f9a5 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001b8 	.word	0x200001b8

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a6c:	f005 fcd0 	bl	8006410 <__errno>
 8000a70:	4603      	mov	r3, r0
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <_sbrk+0x64>)
 8000a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20020000 	.word	0x20020000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	20000200 	.word	0x20000200
 8000aa4:	20004cf8 	.word	0x20004cf8

08000aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <MX_USART2_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f001 faf2 	bl	80020ec <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f7ff fea9 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000204 	.word	0x20000204
 8000b1c:	40004400 	.word	0x40004400

08000b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb4 <HAL_UART_MspInit+0x94>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d133      	bne.n	8000baa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <HAL_UART_MspInit+0x9c>)
 8000b96:	f000 f9f3 	bl	8000f80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	2026      	movs	r0, #38	@ 0x26
 8000ba0:	f000 f932 	bl	8000e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba4:	2026      	movs	r0, #38	@ 0x26
 8000ba6:	f000 f94b 	bl	8000e40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc4:	f7ff ff70 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f005 fc15 	bl	800641c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fdab 	bl	800074c <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c04:	08006e30 	.word	0x08006e30
  ldr r2, =_sbss
 8000c08:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c0c:	20004cf4 	.word	0x20004cf4

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <HAL_Init+0x40>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <HAL_Init+0x40>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <HAL_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f8d8 	bl	8000df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	200f      	movs	r0, #15
 8000c44:	f7ff fe48 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff fe12 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	2000000c 	.word	0x2000000c
 8000c7c:	2000024c 	.word	0x2000024c

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	2000024c 	.word	0x2000024c

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	@ (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	@ 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff4c 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1a:	f7ff ff61 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	6978      	ldr	r0, [r7, #20]
 8000e26:	f7ff ffb1 	bl	8000d8c <NVIC_EncodePriority>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff80 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff54 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e6a:	f7ff ff09 	bl	8000c80 <HAL_GetTick>
 8000e6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d008      	beq.n	8000e8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2280      	movs	r2, #128	@ 0x80
 8000e80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e052      	b.n	8000f34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0216 	bic.w	r2, r2, #22
 8000e9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d103      	bne.n	8000ebe <HAL_DMA_Abort+0x62>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0208 	bic.w	r2, r2, #8
 8000ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0201 	bic.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ede:	e013      	b.n	8000f08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ee0:	f7ff fece 	bl	8000c80 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	d90c      	bls.n	8000f08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e015      	b.n	8000f34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1e4      	bne.n	8000ee0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f1a:	223f      	movs	r2, #63	@ 0x3f
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d004      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00c      	b.n	8000f74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e159      	b.n	8001250 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8148 	bne.w	800124a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	69b9      	ldr	r1, [r7, #24]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80a2 	beq.w	800124a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b57      	ldr	r3, [pc, #348]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	4a56      	ldr	r2, [pc, #344]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001114:	6453      	str	r3, [r2, #68]	@ 0x44
 8001116:	4b54      	ldr	r3, [pc, #336]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a52      	ldr	r2, [pc, #328]	@ (800126c <HAL_GPIO_Init+0x2ec>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a49      	ldr	r2, [pc, #292]	@ (8001270 <HAL_GPIO_Init+0x2f0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x202>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a48      	ldr	r2, [pc, #288]	@ (8001274 <HAL_GPIO_Init+0x2f4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x1fe>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a47      	ldr	r2, [pc, #284]	@ (8001278 <HAL_GPIO_Init+0x2f8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x1fa>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a46      	ldr	r2, [pc, #280]	@ (800127c <HAL_GPIO_Init+0x2fc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x1f6>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a45      	ldr	r2, [pc, #276]	@ (8001280 <HAL_GPIO_Init+0x300>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x1f2>
 800116e:	2304      	movs	r3, #4
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001172:	2307      	movs	r3, #7
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x204>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x204>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	@ (800126c <HAL_GPIO_Init+0x2ec>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a24      	ldr	r2, [pc, #144]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1a      	ldr	r2, [pc, #104]	@ (8001284 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_GPIO_Init+0x304>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a0f      	ldr	r2, [pc, #60]	@ (8001284 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f aea2 	bls.w	8000f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	@ 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012cc:	887a      	ldrh	r2, [r7, #2]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4013      	ands	r3, r2
 80012d2:	041a      	lsls	r2, r3, #16
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	400b      	ands	r3, r1
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e267      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d075      	beq.n	80013fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130e:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d00c      	beq.n	8001334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131a:	4b85      	ldr	r3, [pc, #532]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	2b08      	cmp	r3, #8
 8001324:	d112      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001326:	4b82      	ldr	r3, [pc, #520]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800132e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001332:	d10b      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	4b7e      	ldr	r3, [pc, #504]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d05b      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d157      	bne.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e242      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x74>
 8001356:	4b76      	ldr	r3, [pc, #472]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a75      	ldr	r2, [pc, #468]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x98>
 800136e:	4b70      	ldr	r3, [pc, #448]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6f      	ldr	r2, [pc, #444]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b6d      	ldr	r3, [pc, #436]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6c      	ldr	r2, [pc, #432]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001388:	4b69      	ldr	r3, [pc, #420]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a68      	ldr	r2, [pc, #416]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b66      	ldr	r3, [pc, #408]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a65      	ldr	r2, [pc, #404]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d013      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc6a 	bl	8000c80 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc66 	bl	8000c80 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	@ 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e207      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 80013ce:	e014      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc56 	bl	8000c80 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc52 	bl	8000c80 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1f3      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b51      	ldr	r3, [pc, #324]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0xe8>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d063      	beq.n	80014ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001406:	4b4a      	ldr	r3, [pc, #296]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001412:	4b47      	ldr	r3, [pc, #284]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141a:	2b08      	cmp	r3, #8
 800141c:	d11c      	bne.n	8001458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b44      	ldr	r3, [pc, #272]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d116      	bne.n	8001458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x152>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e1c7      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4937      	ldr	r1, [pc, #220]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	e03a      	b.n	80014ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <HAL_RCC_OscConfig+0x244>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff fc0b 	bl	8000c80 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fc07 	bl	8000c80 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1a8      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4925      	ldr	r1, [pc, #148]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e015      	b.n	80014ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a2:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <HAL_RCC_OscConfig+0x244>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fbea 	bl	8000c80 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fbe6 	bl	8000c80 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e187      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d036      	beq.n	8001548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d016      	beq.n	8001510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_RCC_OscConfig+0x248>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fbca 	bl	8000c80 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fbc6 	bl	8000c80 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e167      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_RCC_OscConfig+0x240>)
 8001504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x200>
 800150e:	e01b      	b.n	8001548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001510:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_RCC_OscConfig+0x248>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fbb3 	bl	8000c80 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	e00e      	b.n	800153c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fbaf 	bl	8000c80 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d907      	bls.n	800153c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e150      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
 8001530:	40023800 	.word	0x40023800
 8001534:	42470000 	.word	0x42470000
 8001538:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	4b88      	ldr	r3, [pc, #544]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ea      	bne.n	800151e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8097 	beq.w	8001684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b81      	ldr	r3, [pc, #516]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10f      	bne.n	8001586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b7d      	ldr	r3, [pc, #500]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	4a7c      	ldr	r2, [pc, #496]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	@ 0x40
 8001576:	4b7a      	ldr	r3, [pc, #488]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b77      	ldr	r3, [pc, #476]	@ (8001764 <HAL_RCC_OscConfig+0x474>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d118      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001592:	4b74      	ldr	r3, [pc, #464]	@ (8001764 <HAL_RCC_OscConfig+0x474>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a73      	ldr	r2, [pc, #460]	@ (8001764 <HAL_RCC_OscConfig+0x474>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159e:	f7ff fb6f 	bl	8000c80 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff fb6b 	bl	8000c80 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e10c      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001764 <HAL_RCC_OscConfig+0x474>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x2ea>
 80015cc:	4b64      	ldr	r3, [pc, #400]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d0:	4a63      	ldr	r2, [pc, #396]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d8:	e01c      	b.n	8001614 <HAL_RCC_OscConfig+0x324>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x30c>
 80015e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0x324>
 80015fc:	4b58      	ldr	r3, [pc, #352]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001600:	4a57      	ldr	r2, [pc, #348]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	@ 0x70
 8001608:	4b55      	ldr	r3, [pc, #340]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160c:	4a54      	ldr	r2, [pc, #336]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800160e:	f023 0304 	bic.w	r3, r3, #4
 8001612:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d015      	beq.n	8001648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fb30 	bl	8000c80 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fb2c 	bl	8000c80 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0cb      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163a:	4b49      	ldr	r3, [pc, #292]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0ee      	beq.n	8001624 <HAL_RCC_OscConfig+0x334>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff fb1a 	bl	8000c80 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fb16 	bl	8000c80 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0b5      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001666:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ee      	bne.n	8001650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001678:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	4a38      	ldr	r2, [pc, #224]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800167e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a1 	beq.w	80017d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168e:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b08      	cmp	r3, #8
 8001698:	d05c      	beq.n	8001754 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d141      	bne.n	8001726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <HAL_RCC_OscConfig+0x478>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff faea 	bl	8000c80 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fae6 	bl	8000c80 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e087      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	019b      	lsls	r3, r3, #6
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	3b01      	subs	r3, #1
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	491b      	ldr	r1, [pc, #108]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x478>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fabf 	bl	8000c80 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fabb 	bl	8000c80 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e05c      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x416>
 8001724:	e054      	b.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_RCC_OscConfig+0x478>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff faa8 	bl	8000c80 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff faa4 	bl	8000c80 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e045      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_RCC_OscConfig+0x470>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x444>
 8001752:	e03d      	b.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e038      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000
 8001768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <HAL_RCC_OscConfig+0x4ec>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d028      	beq.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d121      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d11a      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	3b01      	subs	r3, #1
 80017b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0cc      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b68      	ldr	r3, [pc, #416]	@ (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d90c      	bls.n	800181c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b65      	ldr	r3, [pc, #404]	@ (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b63      	ldr	r3, [pc, #396]	@ (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b8      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001834:	4b59      	ldr	r3, [pc, #356]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a58      	ldr	r2, [pc, #352]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800183e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800184c:	4b53      	ldr	r3, [pc, #332]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a52      	ldr	r2, [pc, #328]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001858:	4b50      	ldr	r3, [pc, #320]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	494d      	ldr	r1, [pc, #308]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d044      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b47      	ldr	r3, [pc, #284]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d119      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e07f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d003      	beq.n	800189e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189a:	2b03      	cmp	r3, #3
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3b      	ldr	r3, [pc, #236]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e067      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b37      	ldr	r3, [pc, #220]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4934      	ldr	r1, [pc, #208]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff f9d6 	bl	8000c80 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff f9d2 	bl	8000c80 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e04f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d20c      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b20      	ldr	r3, [pc, #128]	@ (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e032      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4916      	ldr	r1, [pc, #88]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	490e      	ldr	r1, [pc, #56]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001966:	f000 f821 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 800196a:	4602      	mov	r2, r0
 800196c:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	490a      	ldr	r1, [pc, #40]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	5ccb      	ldrb	r3, [r1, r3]
 800197a:	fa22 f303 	lsr.w	r3, r2, r3
 800197e:	4a09      	ldr	r2, [pc, #36]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe ffa6 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00
 800199c:	40023800 	.word	0x40023800
 80019a0:	08006dd4 	.word	0x08006dd4
 80019a4:	20000004 	.word	0x20000004
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b0:	b090      	sub	sp, #64	@ 0x40
 80019b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b8:	2300      	movs	r3, #0
 80019ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019bc:	2300      	movs	r3, #0
 80019be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c4:	4b59      	ldr	r3, [pc, #356]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d00d      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x40>
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	f200 80a1 	bhi.w	8001b18 <HAL_RCC_GetSysClockFreq+0x16c>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x34>
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019de:	e09b      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x184>)
 80019e2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80019e4:	e09b      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e6:	4b53      	ldr	r3, [pc, #332]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019ea:	e098      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ec:	4b4f      	ldr	r3, [pc, #316]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f6:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d028      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	2200      	movs	r2, #0
 8001a0a:	623b      	str	r3, [r7, #32]
 8001a0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a14:	2100      	movs	r1, #0
 8001a16:	4b47      	ldr	r3, [pc, #284]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a18:	fb03 f201 	mul.w	r2, r3, r1
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	fb00 f303 	mul.w	r3, r0, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	4a43      	ldr	r2, [pc, #268]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a26:	fba0 1202 	umull	r1, r2, r0, r2
 8001a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a32:	4413      	add	r3, r2
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	61fa      	str	r2, [r7, #28]
 8001a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a46:	f7fe fc23 	bl	8000290 <__aeabi_uldivmod>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4613      	mov	r3, r2
 8001a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a52:	e053      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a54:	4b35      	ldr	r3, [pc, #212]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	617a      	str	r2, [r7, #20]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a66:	f04f 0b00 	mov.w	fp, #0
 8001a6a:	4652      	mov	r2, sl
 8001a6c:	465b      	mov	r3, fp
 8001a6e:	f04f 0000 	mov.w	r0, #0
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	0159      	lsls	r1, r3, #5
 8001a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7c:	0150      	lsls	r0, r2, #5
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	ebb2 080a 	subs.w	r8, r2, sl
 8001a86:	eb63 090b 	sbc.w	r9, r3, fp
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a9e:	ebb2 0408 	subs.w	r4, r2, r8
 8001aa2:	eb63 0509 	sbc.w	r5, r3, r9
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	00eb      	lsls	r3, r5, #3
 8001ab0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab4:	00e2      	lsls	r2, r4, #3
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	461d      	mov	r5, r3
 8001aba:	eb14 030a 	adds.w	r3, r4, sl
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	eb45 030b 	adc.w	r3, r5, fp
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	028b      	lsls	r3, r1, #10
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001adc:	4621      	mov	r1, r4
 8001ade:	028a      	lsls	r2, r1, #10
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af0:	f7fe fbce 	bl	8000290 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001b0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3740      	adds	r7, #64	@ 0x40
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	017d7840 	.word	0x017d7840

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	@ (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08006de4 	.word	0x08006de4

08001b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b7c:	f7ff ffdc 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0b5b      	lsrs	r3, r3, #13
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	@ (8001b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08006de4 	.word	0x08006de4

08001ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	220f      	movs	r2, #15
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <HAL_RCC_GetClockConfig+0x60>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0207 	and.w	r2, r3, #7
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e041      	b.n	8001c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f839 	bl	8001ca2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f000 f9b2 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d001      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e044      	b.n	8001d5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d018      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfa:	d013      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1a      	ldr	r2, [pc, #104]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xb4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a19      	ldr	r2, [pc, #100]	@ (8001d70 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	@ (8001d74 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d111      	bne.n	8001d48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d010      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	e007      	b.n	8001d58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	40014000 	.word	0x40014000

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d020      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0202 	mvn.w	r2, #2
 8001db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8d2 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8c4 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8d5 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d020      	beq.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8ac 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f89e 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8af 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d020      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01b      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0208 	mvn.w	r2, #8
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f886 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f878 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f889 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0210 	mvn.w	r2, #16
 8001e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f860 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f852 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f863 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0201 	mvn.w	r2, #1
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fcac 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8e6 	bl	80020d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f834 	bl	8001f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00c      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0220 	mvn.w	r2, #32
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8b8 	bl	80020c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	@ (80020a8 <TIM_Base_SetConfig+0xfc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00f      	beq.n	8001fe4 <TIM_Base_SetConfig+0x38>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fca:	d00b      	beq.n	8001fe4 <TIM_Base_SetConfig+0x38>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a37      	ldr	r2, [pc, #220]	@ (80020ac <TIM_Base_SetConfig+0x100>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <TIM_Base_SetConfig+0x38>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a36      	ldr	r2, [pc, #216]	@ (80020b0 <TIM_Base_SetConfig+0x104>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <TIM_Base_SetConfig+0x38>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a35      	ldr	r2, [pc, #212]	@ (80020b4 <TIM_Base_SetConfig+0x108>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d108      	bne.n	8001ff6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80020a8 <TIM_Base_SetConfig+0xfc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01b      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002004:	d017      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a28      	ldr	r2, [pc, #160]	@ (80020ac <TIM_Base_SetConfig+0x100>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a27      	ldr	r2, [pc, #156]	@ (80020b0 <TIM_Base_SetConfig+0x104>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00f      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a26      	ldr	r2, [pc, #152]	@ (80020b4 <TIM_Base_SetConfig+0x108>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a25      	ldr	r2, [pc, #148]	@ (80020b8 <TIM_Base_SetConfig+0x10c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a24      	ldr	r2, [pc, #144]	@ (80020bc <TIM_Base_SetConfig+0x110>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a23      	ldr	r2, [pc, #140]	@ (80020c0 <TIM_Base_SetConfig+0x114>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800203c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0e      	ldr	r2, [pc, #56]	@ (80020a8 <TIM_Base_SetConfig+0xfc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f023 0201 	bic.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]
  }
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40000c00 	.word	0x40000c00
 80020b8:	40014000 	.word	0x40014000
 80020bc:	40014400 	.word	0x40014400
 80020c0:	40014800 	.word	0x40014800

080020c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e042      	b.n	8002184 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fd04 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	@ 0x24
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800212e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fcbb 	bl	8002aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d121      	bne.n	80021ea <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_UART_Transmit_IT+0x26>
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e01a      	b.n	80021ec <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	88fa      	ldrh	r2, [r7, #6]
 80021c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2221      	movs	r2, #33	@ 0x21
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0ba      	sub	sp, #232	@ 0xe8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800222a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_UART_IRQHandler+0x66>
 800224a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fb69 	bl	800292e <UART_Receive_IT>
      return;
 800225c:	e25b      	b.n	8002716 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800225e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80de 	beq.w	8002424 <HAL_UART_IRQHandler+0x22c>
 8002268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002278:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80d1 	beq.w	8002424 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_UART_IRQHandler+0xae>
 800228e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_UART_IRQHandler+0xd2>
 80022b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f043 0202 	orr.w	r2, r3, #2
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_UART_IRQHandler+0xf6>
 80022d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d011      	beq.n	800231e <HAL_UART_IRQHandler+0x126>
 80022fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f043 0208 	orr.w	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 81f2 	beq.w	800270c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_UART_IRQHandler+0x14e>
 8002334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 faf4 	bl	800292e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002350:	2b40      	cmp	r3, #64	@ 0x40
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <HAL_UART_IRQHandler+0x17a>
 800236a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d04f      	beq.n	8002412 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9fc 	bl	8002770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002382:	2b40      	cmp	r3, #64	@ 0x40
 8002384:	d141      	bne.n	800240a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3314      	adds	r3, #20
 800238c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002390:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800239c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3314      	adds	r3, #20
 80023ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80023b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80023be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80023ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1d9      	bne.n	8002386 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d013      	beq.n	8002402 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023de:	4a7e      	ldr	r2, [pc, #504]	@ (80025d8 <HAL_UART_IRQHandler+0x3e0>)
 80023e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fda8 	bl	8000f3c <HAL_DMA_Abort_IT>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023fc:	4610      	mov	r0, r2
 80023fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002400:	e00e      	b.n	8002420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f99e 	bl	8002744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002408:	e00a      	b.n	8002420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f99a 	bl	8002744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002410:	e006      	b.n	8002420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f996 	bl	8002744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800241e:	e175      	b.n	800270c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002420:	bf00      	nop
    return;
 8002422:	e173      	b.n	800270c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 814f 	bne.w	80026cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800242e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8148 	beq.w	80026cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800243c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8141 	beq.w	80026cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246a:	2b40      	cmp	r3, #64	@ 0x40
 800246c:	f040 80b6 	bne.w	80025dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800247c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8145 	beq.w	8002710 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800248a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800248e:	429a      	cmp	r2, r3
 8002490:	f080 813e 	bcs.w	8002710 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800249a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024a6:	f000 8088 	beq.w	80025ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80024c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80024d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80024e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80024e6:	e841 2300 	strex	r3, r2, [r1]
 80024ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80024ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1d9      	bne.n	80024aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002500:	e853 3f00 	ldrex	r3, [r3]
 8002504:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3314      	adds	r3, #20
 8002516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800251a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800251e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002520:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002522:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002526:	e841 2300 	strex	r3, r2, [r1]
 800252a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800252c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e1      	bne.n	80024f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3314      	adds	r3, #20
 8002538:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800253c:	e853 3f00 	ldrex	r3, [r3]
 8002540:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3314      	adds	r3, #20
 8002552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002556:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002558:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800255c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800255e:	e841 2300 	strex	r3, r2, [r1]
 8002562:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e3      	bne.n	8002532 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002582:	e853 3f00 	ldrex	r3, [r3]
 8002586:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800258a:	f023 0310 	bic.w	r3, r3, #16
 800258e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800259c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800259e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025a4:	e841 2300 	strex	r3, r2, [r1]
 80025a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80025aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e3      	bne.n	8002578 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fc51 	bl	8000e5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f8c1 	bl	8002758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025d6:	e09b      	b.n	8002710 <HAL_UART_IRQHandler+0x518>
 80025d8:	08002837 	.word	0x08002837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 808e 	beq.w	8002714 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8089 	beq.w	8002714 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002626:	647a      	str	r2, [r7, #68]	@ 0x44
 8002628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800262c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e3      	bne.n	8002602 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3314      	adds	r3, #20
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	623b      	str	r3, [r7, #32]
   return(result);
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3314      	adds	r3, #20
 800265a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800265e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002666:	e841 2300 	strex	r3, r2, [r1]
 800266a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e3      	bne.n	800263a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	330c      	adds	r3, #12
 8002686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	e853 3f00 	ldrex	r3, [r3]
 800268e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0310 	bic.w	r3, r3, #16
 8002696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80026a4:	61fa      	str	r2, [r7, #28]
 80026a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a8:	69b9      	ldr	r1, [r7, #24]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	e841 2300 	strex	r3, r2, [r1]
 80026b0:	617b      	str	r3, [r7, #20]
   return(result);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e3      	bne.n	8002680 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026c2:	4619      	mov	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f847 	bl	8002758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026ca:	e023      	b.n	8002714 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <HAL_UART_IRQHandler+0x4f4>
 80026d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8ba 	bl	800285e <UART_Transmit_IT>
    return;
 80026ea:	e014      	b.n	8002716 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00e      	beq.n	8002716 <HAL_UART_IRQHandler+0x51e>
 80026f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8fa 	bl	80028fe <UART_EndTransmit_IT>
    return;
 800270a:	e004      	b.n	8002716 <HAL_UART_IRQHandler+0x51e>
    return;
 800270c:	bf00      	nop
 800270e:	e002      	b.n	8002716 <HAL_UART_IRQHandler+0x51e>
      return;
 8002710:	bf00      	nop
 8002712:	e000      	b.n	8002716 <HAL_UART_IRQHandler+0x51e>
      return;
 8002714:	bf00      	nop
  }
}
 8002716:	37e8      	adds	r7, #232	@ 0xe8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002770:	b480      	push	{r7}
 8002772:	b095      	sub	sp, #84	@ 0x54
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800278e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002798:	643a      	str	r2, [r7, #64]	@ 0x40
 800279a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800279e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027a0:	e841 2300 	strex	r3, r2, [r1]
 80027a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e5      	bne.n	8002778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	e853 3f00 	ldrex	r3, [r3]
 80027ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d4:	e841 2300 	strex	r3, r2, [r1]
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e5      	bne.n	80027ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d119      	bne.n	800281c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	330c      	adds	r3, #12
 80027ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	e853 3f00 	ldrex	r3, [r3]
 80027f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f023 0310 	bic.w	r3, r3, #16
 80027fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	330c      	adds	r3, #12
 8002806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002808:	61ba      	str	r2, [r7, #24]
 800280a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	6979      	ldr	r1, [r7, #20]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	613b      	str	r3, [r7, #16]
   return(result);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e5      	bne.n	80027e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800282a:	bf00      	nop
 800282c:	3754      	adds	r7, #84	@ 0x54
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ff77 	bl	8002744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b21      	cmp	r3, #33	@ 0x21
 8002870:	d13e      	bne.n	80028f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287a:	d114      	bne.n	80028a6 <UART_Transmit_IT+0x48>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d110      	bne.n	80028a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	1c9a      	adds	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	621a      	str	r2, [r3, #32]
 80028a4:	e008      	b.n	80028b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	1c59      	adds	r1, r3, #1
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6211      	str	r1, [r2, #32]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4619      	mov	r1, r3
 80028c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10f      	bne.n	80028ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fefc 	bl	800271c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08c      	sub	sp, #48	@ 0x30
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b22      	cmp	r3, #34	@ 0x22
 8002940:	f040 80ae 	bne.w	8002aa0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800294c:	d117      	bne.n	800297e <UART_Receive_IT+0x50>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d113      	bne.n	800297e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296c:	b29a      	uxth	r2, r3
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	1c9a      	adds	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
 800297c:	e026      	b.n	80029cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002990:	d007      	beq.n	80029a2 <UART_Receive_IT+0x74>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <UART_Receive_IT+0x82>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e008      	b.n	80029c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4619      	mov	r1, r3
 80029da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d15d      	bne.n	8002a9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0220 	bic.w	r2, r2, #32
 80029ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d135      	bne.n	8002a92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4c:	623a      	str	r2, [r7, #32]
 8002a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a50:	69f9      	ldr	r1, [r7, #28]
 8002a52:	6a3a      	ldr	r2, [r7, #32]
 8002a54:	e841 2300 	strex	r3, r2, [r1]
 8002a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e5      	bne.n	8002a2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d10a      	bne.n	8002a84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fe64 	bl	8002758 <HAL_UARTEx_RxEventCallback>
 8002a90:	e002      	b.n	8002a98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fe4c 	bl	8002730 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e002      	b.n	8002aa2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e000      	b.n	8002aa2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3730      	adds	r7, #48	@ 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab0:	b0c0      	sub	sp, #256	@ 0x100
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	ea40 0301 	orr.w	r3, r0, r1
 8002ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b04:	f021 010c 	bic.w	r1, r1, #12
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b12:	430b      	orrs	r3, r1
 8002b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b26:	6999      	ldr	r1, [r3, #24]
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	ea40 0301 	orr.w	r3, r0, r1
 8002b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8002d78 <UART_SetConfig+0x2cc>)
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d005      	beq.n	8002b4c <UART_SetConfig+0xa0>
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b8d      	ldr	r3, [pc, #564]	@ (8002d7c <UART_SetConfig+0x2d0>)
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d104      	bne.n	8002b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b4c:	f7ff f814 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 8002b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b54:	e003      	b.n	8002b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b56:	f7fe fffb 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b68:	f040 810c 	bne.w	8002d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b70:	2200      	movs	r2, #0
 8002b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b7e:	4622      	mov	r2, r4
 8002b80:	462b      	mov	r3, r5
 8002b82:	1891      	adds	r1, r2, r2
 8002b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b86:	415b      	adcs	r3, r3
 8002b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b8e:	4621      	mov	r1, r4
 8002b90:	eb12 0801 	adds.w	r8, r2, r1
 8002b94:	4629      	mov	r1, r5
 8002b96:	eb43 0901 	adc.w	r9, r3, r1
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bae:	4690      	mov	r8, r2
 8002bb0:	4699      	mov	r9, r3
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	eb18 0303 	adds.w	r3, r8, r3
 8002bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	eb49 0303 	adc.w	r3, r9, r3
 8002bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bda:	460b      	mov	r3, r1
 8002bdc:	18db      	adds	r3, r3, r3
 8002bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be0:	4613      	mov	r3, r2
 8002be2:	eb42 0303 	adc.w	r3, r2, r3
 8002be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bf0:	f7fd fb4e 	bl	8000290 <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4b61      	ldr	r3, [pc, #388]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	011c      	lsls	r4, r3, #4
 8002c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	1891      	adds	r1, r2, r2
 8002c1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c1c:	415b      	adcs	r3, r3
 8002c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c24:	4641      	mov	r1, r8
 8002c26:	eb12 0a01 	adds.w	sl, r2, r1
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c44:	4692      	mov	sl, r2
 8002c46:	469b      	mov	fp, r3
 8002c48:	4643      	mov	r3, r8
 8002c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c52:	464b      	mov	r3, r9
 8002c54:	eb4b 0303 	adc.w	r3, fp, r3
 8002c58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c70:	460b      	mov	r3, r1
 8002c72:	18db      	adds	r3, r3, r3
 8002c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c76:	4613      	mov	r3, r2
 8002c78:	eb42 0303 	adc.w	r3, r2, r3
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c86:	f7fd fb03 	bl	8000290 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002c92:	fba3 2301 	umull	r2, r3, r3, r1
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2264      	movs	r2, #100	@ 0x64
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	1acb      	subs	r3, r1, r3
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ca6:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cb4:	441c      	add	r4, r3
 8002cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cd8:	4641      	mov	r1, r8
 8002cda:	1851      	adds	r1, r2, r1
 8002cdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002cde:	4649      	mov	r1, r9
 8002ce0:	414b      	adcs	r3, r1
 8002ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	00cb      	lsls	r3, r1, #3
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	00ca      	lsls	r2, r1, #3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	4642      	mov	r2, r8
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	460a      	mov	r2, r1
 8002d10:	eb42 0303 	adc.w	r3, r2, r3
 8002d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	18db      	adds	r3, r3, r3
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d32:	4613      	mov	r3, r2
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d42:	f7fd faa5 	bl	8000290 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	2164      	movs	r1, #100	@ 0x64
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	3332      	adds	r3, #50	@ 0x32
 8002d5e:	4a08      	ldr	r2, [pc, #32]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	f003 0207 	and.w	r2, r3, #7
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4422      	add	r2, r4
 8002d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d74:	e106      	b.n	8002f84 <UART_SetConfig+0x4d8>
 8002d76:	bf00      	nop
 8002d78:	40011000 	.word	0x40011000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d96:	4642      	mov	r2, r8
 8002d98:	464b      	mov	r3, r9
 8002d9a:	1891      	adds	r1, r2, r2
 8002d9c:	6239      	str	r1, [r7, #32]
 8002d9e:	415b      	adcs	r3, r3
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002da6:	4641      	mov	r1, r8
 8002da8:	1854      	adds	r4, r2, r1
 8002daa:	4649      	mov	r1, r9
 8002dac:	eb43 0501 	adc.w	r5, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	00eb      	lsls	r3, r5, #3
 8002dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dbe:	00e2      	lsls	r2, r4, #3
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	461d      	mov	r5, r3
 8002dc4:	4643      	mov	r3, r8
 8002dc6:	18e3      	adds	r3, r4, r3
 8002dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dcc:	464b      	mov	r3, r9
 8002dce:	eb45 0303 	adc.w	r3, r5, r3
 8002dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002df2:	4629      	mov	r1, r5
 8002df4:	008b      	lsls	r3, r1, #2
 8002df6:	4621      	mov	r1, r4
 8002df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	008a      	lsls	r2, r1, #2
 8002e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e04:	f7fd fa44 	bl	8000290 <__aeabi_uldivmod>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4b60      	ldr	r3, [pc, #384]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	011c      	lsls	r4, r3, #4
 8002e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e28:	4642      	mov	r2, r8
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	1891      	adds	r1, r2, r2
 8002e2e:	61b9      	str	r1, [r7, #24]
 8002e30:	415b      	adcs	r3, r3
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e38:	4641      	mov	r1, r8
 8002e3a:	1851      	adds	r1, r2, r1
 8002e3c:	6139      	str	r1, [r7, #16]
 8002e3e:	4649      	mov	r1, r9
 8002e40:	414b      	adcs	r3, r1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e50:	4659      	mov	r1, fp
 8002e52:	00cb      	lsls	r3, r1, #3
 8002e54:	4651      	mov	r1, sl
 8002e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	00ca      	lsls	r2, r1, #3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	4642      	mov	r2, r8
 8002e66:	189b      	adds	r3, r3, r2
 8002e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e6c:	464b      	mov	r3, r9
 8002e6e:	460a      	mov	r2, r1
 8002e70:	eb42 0303 	adc.w	r3, r2, r3
 8002e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e90:	4649      	mov	r1, r9
 8002e92:	008b      	lsls	r3, r1, #2
 8002e94:	4641      	mov	r1, r8
 8002e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	008a      	lsls	r2, r1, #2
 8002e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ea2:	f7fd f9f5 	bl	8000290 <__aeabi_uldivmod>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002eae:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2264      	movs	r2, #100	@ 0x64
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	1acb      	subs	r3, r1, r3
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	3332      	adds	r3, #50	@ 0x32
 8002ec0:	4a33      	ldr	r2, [pc, #204]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ecc:	441c      	add	r4, r3
 8002ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ed6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ed8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	1891      	adds	r1, r2, r2
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	415b      	adcs	r3, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eec:	4641      	mov	r1, r8
 8002eee:	1851      	adds	r1, r2, r1
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	414b      	adcs	r3, r1
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f04:	4659      	mov	r1, fp
 8002f06:	00cb      	lsls	r3, r1, #3
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0e:	4651      	mov	r1, sl
 8002f10:	00ca      	lsls	r2, r1, #3
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	4642      	mov	r2, r8
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f1e:	464b      	mov	r3, r9
 8002f20:	460a      	mov	r2, r1
 8002f22:	eb42 0303 	adc.w	r3, r2, r3
 8002f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f32:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f40:	4649      	mov	r1, r9
 8002f42:	008b      	lsls	r3, r1, #2
 8002f44:	4641      	mov	r1, r8
 8002f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	008a      	lsls	r2, r1, #2
 8002f4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f52:	f7fd f99d 	bl	8000290 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	2164      	movs	r1, #100	@ 0x64
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	3332      	adds	r3, #50	@ 0x32
 8002f6e:	4a08      	ldr	r2, [pc, #32]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	f003 020f 	and.w	r2, r3, #15
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4422      	add	r2, r4
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f90:	51eb851f 	.word	0x51eb851f

08002f94 <__NVIC_SetPriority>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	@ (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	@ (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <SysTick_Handler+0x1c>)
 8002fee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ff0:	f001 ffc8 	bl	8004f84 <xTaskGetSchedulerState>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ffa:	f002 fe7d 	bl	8005cf8 <xPortSysTickHandler>
  }
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	e000e010 	.word	0xe000e010

08003008 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800300c:	2100      	movs	r1, #0
 800300e:	f06f 0004 	mvn.w	r0, #4
 8003012:	f7ff ffbf 	bl	8002f94 <__NVIC_SetPriority>
#endif
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003022:	f3ef 8305 	mrs	r3, IPSR
 8003026:	603b      	str	r3, [r7, #0]
  return(result);
 8003028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800302e:	f06f 0305 	mvn.w	r3, #5
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	e00c      	b.n	8003050 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003036:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <osKernelInitialize+0x44>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <osKernelInitialize+0x44>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003044:	2300      	movs	r3, #0
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	e002      	b.n	8003050 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800304e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003050:	687b      	ldr	r3, [r7, #4]
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000250 	.word	0x20000250

08003064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800306a:	f3ef 8305 	mrs	r3, IPSR
 800306e:	603b      	str	r3, [r7, #0]
  return(result);
 8003070:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003076:	f06f 0305 	mvn.w	r3, #5
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	e010      	b.n	80030a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <osKernelStart+0x48>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d109      	bne.n	800309a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003086:	f7ff ffbf 	bl	8003008 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <osKernelStart+0x48>)
 800308c:	2202      	movs	r2, #2
 800308e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003090:	f001 f910 	bl	80042b4 <vTaskStartScheduler>
      stat = osOK;
 8003094:	2300      	movs	r3, #0
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	e002      	b.n	80030a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800309e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030a0:	687b      	ldr	r3, [r7, #4]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000250 	.word	0x20000250

080030b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08e      	sub	sp, #56	@ 0x38
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c0:	f3ef 8305 	mrs	r3, IPSR
 80030c4:	617b      	str	r3, [r7, #20]
  return(result);
 80030c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d17e      	bne.n	80031ca <osThreadNew+0x11a>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d07b      	beq.n	80031ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030d6:	2318      	movs	r3, #24
 80030d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d045      	beq.n	8003176 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <osThreadNew+0x48>
        name = attr->name;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <osThreadNew+0x6e>
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b38      	cmp	r3, #56	@ 0x38
 8003110:	d805      	bhi.n	800311e <osThreadNew+0x6e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <osThreadNew+0x72>
        return (NULL);
 800311e:	2300      	movs	r3, #0
 8003120:	e054      	b.n	80031cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <osThreadNew+0xa8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003140:	d90a      	bls.n	8003158 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <osThreadNew+0xa8>
        mem = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e010      	b.n	800317a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <osThreadNew+0xca>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <osThreadNew+0xca>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <osThreadNew+0xca>
          mem = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	e001      	b.n	800317a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d110      	bne.n	80031a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003188:	9202      	str	r2, [sp, #8]
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fdfe 	bl	8003d98 <xTaskCreateStatic>
 800319c:	4603      	mov	r3, r0
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e013      	b.n	80031ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d110      	bne.n	80031ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	f107 0310 	add.w	r3, r7, #16
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fe4c 	bl	8003e58 <xTaskCreate>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <osThreadNew+0x11a>
            hTask = NULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031ca:	693b      	ldr	r3, [r7, #16]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a07      	ldr	r2, [pc, #28]	@ (8003200 <vApplicationGetIdleTaskMemory+0x2c>)
 80031e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4a06      	ldr	r2, [pc, #24]	@ (8003204 <vApplicationGetIdleTaskMemory+0x30>)
 80031ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2280      	movs	r2, #128	@ 0x80
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000254 	.word	0x20000254
 8003204:	200002b0 	.word	0x200002b0

08003208 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a07      	ldr	r2, [pc, #28]	@ (8003234 <vApplicationGetTimerTaskMemory+0x2c>)
 8003218:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4a06      	ldr	r2, [pc, #24]	@ (8003238 <vApplicationGetTimerTaskMemory+0x30>)
 800321e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003226:	601a      	str	r2, [r3, #0]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	200004b0 	.word	0x200004b0
 8003238:	2000050c 	.word	0x2000050c

0800323c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f103 0208 	add.w	r2, r3, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f103 0208 	add.w	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f103 0208 	add.w	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032f4:	d103      	bne.n	80032fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e00c      	b.n	8003318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3308      	adds	r3, #8
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e002      	b.n	800330c <vListInsert+0x2e>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d2f6      	bcs.n	8003306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	601a      	str	r2, [r3, #0]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6852      	ldr	r2, [r2, #4]
 8003370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d103      	bne.n	8003384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1e5a      	subs	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033d0:	f002 fc02 	bl	8005bd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033dc:	68f9      	ldr	r1, [r7, #12]
 80033de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	3b01      	subs	r3, #1
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	22ff      	movs	r2, #255	@ 0xff
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d114      	bne.n	8003450 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01a      	beq.n	8003464 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3310      	adds	r3, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f001 faba 	bl	80049ac <xTaskRemoveFromEventList>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800343e:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <xQueueGenericReset+0xd0>)
 8003440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	e009      	b.n	8003464 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3310      	adds	r3, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fef1 	bl	800323c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3324      	adds	r3, #36	@ 0x24
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff feec 	bl	800323c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003464:	f002 fbea 	bl	8005c3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003468:	2301      	movs	r3, #1
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08e      	sub	sp, #56	@ 0x38
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	e7fd      	b.n	80034be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <xQueueGenericCreateStatic+0x56>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <xQueueGenericCreateStatic+0x5a>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <xQueueGenericCreateStatic+0x5c>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	623b      	str	r3, [r7, #32]
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <xQueueGenericCreateStatic+0x84>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <xQueueGenericCreateStatic+0x88>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <xQueueGenericCreateStatic+0x8a>
 8003500:	2300      	movs	r3, #0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	61fb      	str	r3, [r7, #28]
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	e7fd      	b.n	800351a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800351e:	2350      	movs	r3, #80	@ 0x50
 8003520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b50      	cmp	r3, #80	@ 0x50
 8003526:	d00b      	beq.n	8003540 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	61bb      	str	r3, [r7, #24]
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003540:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800354c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003554:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f805 	bl	8003572 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800356a:	4618      	mov	r0, r3
 800356c:	3730      	adds	r7, #48	@ 0x30
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e002      	b.n	8003594 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035a0:	2101      	movs	r1, #1
 80035a2:	69b8      	ldr	r0, [r7, #24]
 80035a4:	f7ff fefe 	bl	80033a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08e      	sub	sp, #56	@ 0x38
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035c6:	2300      	movs	r3, #0
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xQueueGenericSend+0x34>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSend+0x42>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSend+0x46>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSend+0x48>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <xQueueGenericSend+0x64>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d103      	bne.n	800362a <xQueueGenericSend+0x72>
 8003622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <xQueueGenericSend+0x76>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xQueueGenericSend+0x78>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <xQueueGenericSend+0x94>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	623b      	str	r3, [r7, #32]
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800364c:	f001 fc9a 	bl	8004f84 <xTaskGetSchedulerState>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <xQueueGenericSend+0xa4>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <xQueueGenericSend+0xa8>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <xQueueGenericSend+0xaa>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <xQueueGenericSend+0xc6>
	__asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	61fb      	str	r3, [r7, #28]
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	e7fd      	b.n	800367a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800367e:	f002 faab 	bl	8005bd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <xQueueGenericSend+0xdc>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d129      	bne.n	80036e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800369a:	f000 fa0f 	bl	8003abc <prvCopyDataToQueue>
 800369e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	3324      	adds	r3, #36	@ 0x24
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f97d 	bl	80049ac <xTaskRemoveFromEventList>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036b8:	4b3f      	ldr	r3, [pc, #252]	@ (80037b8 <xQueueGenericSend+0x200>)
 80036ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	e00a      	b.n	80036e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036d0:	4b39      	ldr	r3, [pc, #228]	@ (80037b8 <xQueueGenericSend+0x200>)
 80036d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036e0:	f002 faac 	bl	8005c3c <vPortExitCritical>
				return pdPASS;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e063      	b.n	80037b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036ee:	f002 faa5 	bl	8005c3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e05c      	b.n	80037b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4618      	mov	r0, r3
 8003702:	f001 f9b9 	bl	8004a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003706:	2301      	movs	r3, #1
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800370a:	f002 fa97 	bl	8005c3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800370e:	f000 fe39 	bl	8004384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003712:	f002 fa61 	bl	8005bd8 <vPortEnterCritical>
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800371c:	b25b      	sxtb	r3, r3
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003722:	d103      	bne.n	800372c <xQueueGenericSend+0x174>
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800372c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003732:	b25b      	sxtb	r3, r3
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003738:	d103      	bne.n	8003742 <xQueueGenericSend+0x18a>
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003742:	f002 fa7b 	bl	8005c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003746:	1d3a      	adds	r2, r7, #4
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f001 f9a8 	bl	8004aa4 <xTaskCheckForTimeOut>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d124      	bne.n	80037a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800375a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800375c:	f000 faa6 	bl	8003cac <prvIsQueueFull>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d018      	beq.n	8003798 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	3310      	adds	r3, #16
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f8ca 	bl	8004908 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003776:	f000 fa31 	bl	8003bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800377a:	f000 fe49 	bl	8004410 <xTaskResumeAll>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	f47f af7c 	bne.w	800367e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003786:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <xQueueGenericSend+0x200>)
 8003788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	e772      	b.n	800367e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800379a:	f000 fa1f 	bl	8003bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800379e:	f000 fe37 	bl	8004410 <xTaskResumeAll>
 80037a2:	e76c      	b.n	800367e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037a6:	f000 fa19 	bl	8003bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037aa:	f000 fe31 	bl	8004410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3738      	adds	r7, #56	@ 0x38
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	e000ed04 	.word	0xe000ed04

080037bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b090      	sub	sp, #64	@ 0x40
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <xQueueGenericSendFromISR+0x3e>
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <xQueueGenericSendFromISR+0x42>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueGenericSendFromISR+0x44>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d103      	bne.n	800382a <xQueueGenericSendFromISR+0x6e>
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <xQueueGenericSendFromISR+0x72>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSendFromISR+0x74>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	623b      	str	r3, [r7, #32]
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800384c:	f002 fb88 	bl	8005f60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003850:	f3ef 8211 	mrs	r2, BASEPRI
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61fa      	str	r2, [r7, #28]
 8003866:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003868:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800386c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <xQueueGenericSendFromISR+0xc2>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d12f      	bne.n	80038de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003884:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003894:	f000 f912 	bl	8003abc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003898:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d112      	bne.n	80038c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ac:	3324      	adds	r3, #36	@ 0x24
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f87c 	bl	80049ac <xTaskRemoveFromEventList>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00e      	beq.n	80038d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e007      	b.n	80038d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80038cc:	3301      	adds	r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	b25a      	sxtb	r2, r3
 80038d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80038d8:	2301      	movs	r3, #1
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80038dc:	e001      	b.n	80038e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3740      	adds	r7, #64	@ 0x40
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	@ 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <xQueueReceive+0x32>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	623b      	str	r3, [r7, #32]
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	e7fd      	b.n	8003926 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d103      	bne.n	8003938 <xQueueReceive+0x40>
 8003930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <xQueueReceive+0x44>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <xQueueReceive+0x46>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <xQueueReceive+0x62>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	61fb      	str	r3, [r7, #28]
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	e7fd      	b.n	8003956 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800395a:	f001 fb13 	bl	8004f84 <xTaskGetSchedulerState>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <xQueueReceive+0x72>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <xQueueReceive+0x76>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <xQueueReceive+0x78>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <xQueueReceive+0x94>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	61bb      	str	r3, [r7, #24]
}
 8003986:	bf00      	nop
 8003988:	bf00      	nop
 800398a:	e7fd      	b.n	8003988 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800398c:	f002 f924 	bl	8005bd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039a0:	f000 f8f6 	bl	8003b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	1e5a      	subs	r2, r3, #1
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00f      	beq.n	80039d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	3310      	adds	r3, #16
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fff7 	bl	80049ac <xTaskRemoveFromEventList>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039c4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab8 <xQueueReceive+0x1c0>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039d4:	f002 f932 	bl	8005c3c <vPortExitCritical>
				return pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	e069      	b.n	8003ab0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e2:	f002 f92b 	bl	8005c3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e062      	b.n	8003ab0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f0:	f107 0310 	add.w	r3, r7, #16
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 f83f 	bl	8004a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fe:	f002 f91d 	bl	8005c3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a02:	f000 fcbf 	bl	8004384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a06:	f002 f8e7 	bl	8005bd8 <vPortEnterCritical>
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a16:	d103      	bne.n	8003a20 <xQueueReceive+0x128>
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a2c:	d103      	bne.n	8003a36 <xQueueReceive+0x13e>
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a36:	f002 f901 	bl	8005c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a3a:	1d3a      	adds	r2, r7, #4
 8003a3c:	f107 0310 	add.w	r3, r7, #16
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f82e 	bl	8004aa4 <xTaskCheckForTimeOut>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d123      	bne.n	8003a96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a50:	f000 f916 	bl	8003c80 <prvIsQueueEmpty>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	3324      	adds	r3, #36	@ 0x24
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 ff50 	bl	8004908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a6a:	f000 f8b7 	bl	8003bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a6e:	f000 fccf 	bl	8004410 <xTaskResumeAll>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d189      	bne.n	800398c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a78:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <xQueueReceive+0x1c0>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	e780      	b.n	800398c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a8c:	f000 f8a6 	bl	8003bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a90:	f000 fcbe 	bl	8004410 <xTaskResumeAll>
 8003a94:	e77a      	b.n	800398c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a98:	f000 f8a0 	bl	8003bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9c:	f000 fcb8 	bl	8004410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aa2:	f000 f8ed 	bl	8003c80 <prvIsQueueEmpty>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f43f af6f 	beq.w	800398c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3730      	adds	r7, #48	@ 0x30
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d14d      	bne.n	8003b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fa6a 	bl	8004fc0 <xTaskPriorityDisinherit>
 8003aec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	e043      	b.n	8003b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d119      	bne.n	8003b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6858      	ldr	r0, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	f002 fcae 	bl	8006468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	441a      	add	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d32b      	bcc.n	8003b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	e026      	b.n	8003b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68d8      	ldr	r0, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	f002 fc94 	bl	8006468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	425b      	negs	r3, r3
 8003b4a:	441a      	add	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d207      	bcs.n	8003b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	425b      	negs	r3, r3
 8003b66:	441a      	add	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d105      	bne.n	8003b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	441a      	add	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d303      	bcc.n	8003bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6838      	ldr	r0, [r7, #0]
 8003bd0:	f002 fc4a 	bl	8006468 <memcpy>
	}
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003be4:	f001 fff8 	bl	8005bd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bf0:	e011      	b.n	8003c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d012      	beq.n	8003c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3324      	adds	r3, #36	@ 0x24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fed4 	bl	80049ac <xTaskRemoveFromEventList>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c0a:	f000 ffaf 	bl	8004b6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dce9      	bgt.n	8003bf2 <prvUnlockQueue+0x16>
 8003c1e:	e000      	b.n	8003c22 <prvUnlockQueue+0x46>
					break;
 8003c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	22ff      	movs	r2, #255	@ 0xff
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c2a:	f002 f807 	bl	8005c3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c2e:	f001 ffd3 	bl	8005bd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c3a:	e011      	b.n	8003c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d012      	beq.n	8003c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3310      	adds	r3, #16
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 feaf 	bl	80049ac <xTaskRemoveFromEventList>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c54:	f000 ff8a 	bl	8004b6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c58:	7bbb      	ldrb	r3, [r7, #14]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dce9      	bgt.n	8003c3c <prvUnlockQueue+0x60>
 8003c68:	e000      	b.n	8003c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	22ff      	movs	r2, #255	@ 0xff
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003c74:	f001 ffe2 	bl	8005c3c <vPortExitCritical>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c88:	f001 ffa6 	bl	8005bd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e001      	b.n	8003c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9e:	f001 ffcd 	bl	8005c3c <vPortExitCritical>

	return xReturn;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb4:	f001 ff90 	bl	8005bd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d102      	bne.n	8003cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e001      	b.n	8003cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f001 ffb5 	bl	8005c3c <vPortExitCritical>

	return xReturn;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e014      	b.n	8003d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cec:	4a0f      	ldr	r2, [pc, #60]	@ (8003d2c <vQueueAddToRegistry+0x50>)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cf8:	490c      	ldr	r1, [pc, #48]	@ (8003d2c <vQueueAddToRegistry+0x50>)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d02:	4a0a      	ldr	r2, [pc, #40]	@ (8003d2c <vQueueAddToRegistry+0x50>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d0e:	e006      	b.n	8003d1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	d9e7      	bls.n	8003cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	2000090c 	.word	0x2000090c

08003d30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d40:	f001 ff4a 	bl	8005bd8 <vPortEnterCritical>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d4a:	b25b      	sxtb	r3, r3
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d50:	d103      	bne.n	8003d5a <vQueueWaitForMessageRestricted+0x2a>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d60:	b25b      	sxtb	r3, r3
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d66:	d103      	bne.n	8003d70 <vQueueWaitForMessageRestricted+0x40>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d70:	f001 ff64 	bl	8005c3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3324      	adds	r3, #36	@ 0x24
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fde5 	bl	8004954 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff26 	bl	8003bdc <prvUnlockQueue>
	}
 8003d90:	bf00      	nop
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08e      	sub	sp, #56	@ 0x38
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	623b      	str	r3, [r7, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	61fb      	str	r3, [r7, #28]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003de2:	235c      	movs	r3, #92	@ 0x5c
 8003de4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b5c      	cmp	r3, #92	@ 0x5c
 8003dea:	d00b      	beq.n	8003e04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	61bb      	str	r3, [r7, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01e      	beq.n	8003e4a <xTaskCreateStatic+0xb2>
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01b      	beq.n	8003e4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e24:	2300      	movs	r3, #0
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	9302      	str	r3, [sp, #8]
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f850 	bl	8003ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e44:	f000 f8de 	bl	8004004 <prvAddNewTaskToReadyList>
 8003e48:	e001      	b.n	8003e4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e4e:	697b      	ldr	r3, [r7, #20]
	}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3728      	adds	r7, #40	@ 0x28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af04      	add	r7, sp, #16
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f002 f8b9 	bl	8005fe4 <pvPortMalloc>
 8003e72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e7a:	205c      	movs	r0, #92	@ 0x5c
 8003e7c:	f002 f8b2 	bl	8005fe4 <pvPortMalloc>
 8003e80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e8e:	e005      	b.n	8003e9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f002 f975 	bl	8006180 <vPortFree>
 8003e96:	e001      	b.n	8003e9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d017      	beq.n	8003ed2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f80e 	bl	8003ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ec6:	69f8      	ldr	r0, [r7, #28]
 8003ec8:	f000 f89c 	bl	8004004 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e002      	b.n	8003ed8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b088      	sub	sp, #32
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	21a5      	movs	r1, #165	@ 0xa5
 8003efc:	f002 fa80 	bl	8006400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f023 0307 	bic.w	r3, r3, #7
 8003f18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00b      	beq.n	8003f3c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	617b      	str	r3, [r7, #20]
}
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
 8003f3a:	e7fd      	b.n	8003f38 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01f      	beq.n	8003f82 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e012      	b.n	8003f6e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	7819      	ldrb	r1, [r3, #0]
 8003f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	3334      	adds	r3, #52	@ 0x34
 8003f58:	460a      	mov	r2, r1
 8003f5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d006      	beq.n	8003f76 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b0f      	cmp	r3, #15
 8003f72:	d9e9      	bls.n	8003f48 <prvInitialiseNewTask+0x66>
 8003f74:	e000      	b.n	8003f78 <prvInitialiseNewTask+0x96>
			{
				break;
 8003f76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f80:	e003      	b.n	8003f8a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	2b37      	cmp	r3, #55	@ 0x37
 8003f8e:	d901      	bls.n	8003f94 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f90:	2337      	movs	r3, #55	@ 0x37
 8003f92:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f98:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff f966 	bl	800327c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff f961 	bl	800327c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	69b8      	ldr	r0, [r7, #24]
 8003fe4:	f001 fcc6 	bl	8005974 <pxPortInitialiseStack>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ffa:	bf00      	nop
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800400c:	f001 fde4 	bl	8005bd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004010:	4b2d      	ldr	r3, [pc, #180]	@ (80040c8 <prvAddNewTaskToReadyList+0xc4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	4a2c      	ldr	r2, [pc, #176]	@ (80040c8 <prvAddNewTaskToReadyList+0xc4>)
 8004018:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800401a:	4b2c      	ldr	r3, [pc, #176]	@ (80040cc <prvAddNewTaskToReadyList+0xc8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004022:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <prvAddNewTaskToReadyList+0xc8>)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004028:	4b27      	ldr	r3, [pc, #156]	@ (80040c8 <prvAddNewTaskToReadyList+0xc4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d110      	bne.n	8004052 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004030:	f000 fe16 	bl	8004c60 <prvInitialiseTaskLists>
 8004034:	e00d      	b.n	8004052 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004036:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <prvAddNewTaskToReadyList+0xcc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800403e:	4b23      	ldr	r3, [pc, #140]	@ (80040cc <prvAddNewTaskToReadyList+0xc8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	429a      	cmp	r2, r3
 800404a:	d802      	bhi.n	8004052 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800404c:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <prvAddNewTaskToReadyList+0xc8>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004052:	4b20      	ldr	r3, [pc, #128]	@ (80040d4 <prvAddNewTaskToReadyList+0xd0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3301      	adds	r3, #1
 8004058:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <prvAddNewTaskToReadyList+0xd0>)
 800405a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800405c:	4b1d      	ldr	r3, [pc, #116]	@ (80040d4 <prvAddNewTaskToReadyList+0xd0>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004068:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <prvAddNewTaskToReadyList+0xd4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d903      	bls.n	8004078 <prvAddNewTaskToReadyList+0x74>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <prvAddNewTaskToReadyList+0xd4>)
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4a15      	ldr	r2, [pc, #84]	@ (80040dc <prvAddNewTaskToReadyList+0xd8>)
 8004086:	441a      	add	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f7ff f901 	bl	8003296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004094:	f001 fdd2 	bl	8005c3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004098:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <prvAddNewTaskToReadyList+0xcc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00e      	beq.n	80040be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040a0:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <prvAddNewTaskToReadyList+0xc8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d207      	bcs.n	80040be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040ae:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <prvAddNewTaskToReadyList+0xdc>)
 80040b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000e20 	.word	0x20000e20
 80040cc:	2000094c 	.word	0x2000094c
 80040d0:	20000e2c 	.word	0x20000e2c
 80040d4:	20000e3c 	.word	0x20000e3c
 80040d8:	20000e28 	.word	0x20000e28
 80040dc:	20000950 	.word	0x20000950
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	@ 0x28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <vTaskDelayUntil+0x2c>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	617b      	str	r3, [r7, #20]
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <vTaskDelayUntil+0x4a>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	613b      	str	r3, [r7, #16]
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	e7fd      	b.n	800412a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800412e:	4b2a      	ldr	r3, [pc, #168]	@ (80041d8 <vTaskDelayUntil+0xf4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <vTaskDelayUntil+0x6a>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	60fb      	str	r3, [r7, #12]
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	e7fd      	b.n	800414a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800414e:	f000 f919 	bl	8004384 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004152:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <vTaskDelayUntil+0xf8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	4413      	add	r3, r2
 8004160:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a3a      	ldr	r2, [r7, #32]
 8004168:	429a      	cmp	r2, r3
 800416a:	d20b      	bcs.n	8004184 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	429a      	cmp	r2, r3
 8004174:	d211      	bcs.n	800419a <vTaskDelayUntil+0xb6>
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	429a      	cmp	r2, r3
 800417c:	d90d      	bls.n	800419a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
 8004182:	e00a      	b.n	800419a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	429a      	cmp	r2, r3
 800418c:	d303      	bcc.n	8004196 <vTaskDelayUntil+0xb2>
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	429a      	cmp	r2, r3
 8004194:	d901      	bls.n	800419a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004196:	2301      	movs	r3, #1
 8004198:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d006      	beq.n	80041b4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 f832 	bl	8005218 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80041b4:	f000 f92c 	bl	8004410 <xTaskResumeAll>
 80041b8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80041c0:	4b07      	ldr	r3, [pc, #28]	@ (80041e0 <vTaskDelayUntil+0xfc>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041d0:	bf00      	nop
 80041d2:	3728      	adds	r7, #40	@ 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000e48 	.word	0x20000e48
 80041dc:	20000e24 	.word	0x20000e24
 80041e0:	e000ed04 	.word	0xe000ed04

080041e4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <eTaskGetState+0x2a>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60bb      	str	r3, [r7, #8]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800420e:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <eTaskGetState+0xbc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d102      	bne.n	800421e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004218:	2300      	movs	r3, #0
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e03a      	b.n	8004294 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800421e:	f001 fcdb 	bl	8005bd8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004228:	4b1e      	ldr	r3, [pc, #120]	@ (80042a4 <eTaskGetState+0xc0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800422e:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <eTaskGetState+0xc4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004234:	f001 fd02 	bl	8005c3c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d003      	beq.n	8004248 <eTaskGetState+0x64>
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d102      	bne.n	800424e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004248:	2302      	movs	r3, #2
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e022      	b.n	8004294 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <eTaskGetState+0xc8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d112      	bne.n	800427c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d102      	bne.n	8004270 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800426a:	2302      	movs	r3, #2
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e011      	b.n	8004294 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8004270:	2303      	movs	r3, #3
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e00e      	b.n	8004294 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004276:	2302      	movs	r3, #2
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e00b      	b.n	8004294 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4a0c      	ldr	r2, [pc, #48]	@ (80042b0 <eTaskGetState+0xcc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d002      	beq.n	800428a <eTaskGetState+0xa6>
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800428a:	2304      	movs	r3, #4
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e001      	b.n	8004294 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004290:	2301      	movs	r3, #1
 8004292:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004294:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	2000094c 	.word	0x2000094c
 80042a4:	20000dd8 	.word	0x20000dd8
 80042a8:	20000ddc 	.word	0x20000ddc
 80042ac:	20000e0c 	.word	0x20000e0c
 80042b0:	20000df4 	.word	0x20000df4

080042b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	@ 0x28
 80042b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042c2:	463a      	mov	r2, r7
 80042c4:	1d39      	adds	r1, r7, #4
 80042c6:	f107 0308 	add.w	r3, r7, #8
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe ff82 	bl	80031d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	9202      	str	r2, [sp, #8]
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	460a      	mov	r2, r1
 80042e2:	4922      	ldr	r1, [pc, #136]	@ (800436c <vTaskStartScheduler+0xb8>)
 80042e4:	4822      	ldr	r0, [pc, #136]	@ (8004370 <vTaskStartScheduler+0xbc>)
 80042e6:	f7ff fd57 	bl	8003d98 <xTaskCreateStatic>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a21      	ldr	r2, [pc, #132]	@ (8004374 <vTaskStartScheduler+0xc0>)
 80042ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042f0:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <vTaskStartScheduler+0xc0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042f8:	2301      	movs	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e001      	b.n	8004302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d102      	bne.n	800430e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004308:	f000 ffda 	bl	80052c0 <xTimerCreateTimerTask>
 800430c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d116      	bne.n	8004342 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	613b      	str	r3, [r7, #16]
}
 8004326:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004328:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <vTaskStartScheduler+0xc4>)
 800432a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800432e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004330:	4b12      	ldr	r3, [pc, #72]	@ (800437c <vTaskStartScheduler+0xc8>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004336:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <vTaskStartScheduler+0xcc>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800433c:	f001 fba8 	bl	8005a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004340:	e00f      	b.n	8004362 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004348:	d10b      	bne.n	8004362 <vTaskStartScheduler+0xae>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60fb      	str	r3, [r7, #12]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <vTaskStartScheduler+0xaa>
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	08006d40 	.word	0x08006d40
 8004370:	08004b85 	.word	0x08004b85
 8004374:	20000e44 	.word	0x20000e44
 8004378:	20000e40 	.word	0x20000e40
 800437c:	20000e2c 	.word	0x20000e2c
 8004380:	20000e24 	.word	0x20000e24

08004384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004388:	4b04      	ldr	r3, [pc, #16]	@ (800439c <vTaskSuspendAll+0x18>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	4a03      	ldr	r2, [pc, #12]	@ (800439c <vTaskSuspendAll+0x18>)
 8004390:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20000e48 	.word	0x20000e48

080043a0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80043aa:	4b14      	ldr	r3, [pc, #80]	@ (80043fc <prvGetExpectedIdleTime+0x5c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80043b6:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <prvGetExpectedIdleTime+0x60>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	e012      	b.n	80043ec <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80043c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <prvGetExpectedIdleTime+0x64>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d902      	bls.n	80043d4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	e00b      	b.n	80043ec <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	e005      	b.n	80043ec <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80043e0:	4b09      	ldr	r3, [pc, #36]	@ (8004408 <prvGetExpectedIdleTime+0x68>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b09      	ldr	r3, [pc, #36]	@ (800440c <prvGetExpectedIdleTime+0x6c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80043ec:	687b      	ldr	r3, [r7, #4]
	}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000e28 	.word	0x20000e28
 8004400:	2000094c 	.word	0x2000094c
 8004404:	20000950 	.word	0x20000950
 8004408:	20000e40 	.word	0x20000e40
 800440c:	20000e24 	.word	0x20000e24

08004410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800441e:	4b42      	ldr	r3, [pc, #264]	@ (8004528 <xTaskResumeAll+0x118>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <xTaskResumeAll+0x2e>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	603b      	str	r3, [r7, #0]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800443e:	f001 fbcb 	bl	8005bd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004442:	4b39      	ldr	r3, [pc, #228]	@ (8004528 <xTaskResumeAll+0x118>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3b01      	subs	r3, #1
 8004448:	4a37      	ldr	r2, [pc, #220]	@ (8004528 <xTaskResumeAll+0x118>)
 800444a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800444c:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <xTaskResumeAll+0x118>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d162      	bne.n	800451a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004454:	4b35      	ldr	r3, [pc, #212]	@ (800452c <xTaskResumeAll+0x11c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05e      	beq.n	800451a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800445c:	e02f      	b.n	80044be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800445e:	4b34      	ldr	r3, [pc, #208]	@ (8004530 <xTaskResumeAll+0x120>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3318      	adds	r3, #24
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe ff70 	bl	8003350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3304      	adds	r3, #4
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe ff6b 	bl	8003350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447e:	4b2d      	ldr	r3, [pc, #180]	@ (8004534 <xTaskResumeAll+0x124>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d903      	bls.n	800448e <xTaskResumeAll+0x7e>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	4a2a      	ldr	r2, [pc, #168]	@ (8004534 <xTaskResumeAll+0x124>)
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4a27      	ldr	r2, [pc, #156]	@ (8004538 <xTaskResumeAll+0x128>)
 800449c:	441a      	add	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fe fef6 	bl	8003296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ae:	4b23      	ldr	r3, [pc, #140]	@ (800453c <xTaskResumeAll+0x12c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80044b8:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <xTaskResumeAll+0x130>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044be:	4b1c      	ldr	r3, [pc, #112]	@ (8004530 <xTaskResumeAll+0x120>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1cb      	bne.n	800445e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044cc:	f000 fd3a 	bl	8004f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004544 <xTaskResumeAll+0x134>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044dc:	f000 f8fc 	bl	80046d8 <xTaskIncrementTick>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80044e6:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <xTaskResumeAll+0x130>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f1      	bne.n	80044dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80044f8:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <xTaskResumeAll+0x134>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044fe:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <xTaskResumeAll+0x130>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004506:	2301      	movs	r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800450a:	4b0f      	ldr	r3, [pc, #60]	@ (8004548 <xTaskResumeAll+0x138>)
 800450c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800451a:	f001 fb8f 	bl	8005c3c <vPortExitCritical>

	return xAlreadyYielded;
 800451e:	68bb      	ldr	r3, [r7, #8]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000e48 	.word	0x20000e48
 800452c:	20000e20 	.word	0x20000e20
 8004530:	20000de0 	.word	0x20000de0
 8004534:	20000e28 	.word	0x20000e28
 8004538:	20000950 	.word	0x20000950
 800453c:	2000094c 	.word	0x2000094c
 8004540:	20000e34 	.word	0x20000e34
 8004544:	20000e30 	.word	0x20000e30
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <xTaskGetTickCount+0x1c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004558:	687b      	ldr	r3, [r7, #4]
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000e24 	.word	0x20000e24

0800456c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	2338      	movs	r3, #56	@ 0x38
 800457e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8004580:	f7ff ff00 	bl	8004384 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004584:	4b3a      	ldr	r3, [pc, #232]	@ (8004670 <uxTaskGetSystemState+0x104>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	d368      	bcc.n	8004660 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	3b01      	subs	r3, #1
 8004592:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1898      	adds	r0, r3, r2
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4a31      	ldr	r2, [pc, #196]	@ (8004674 <uxTaskGetSystemState+0x108>)
 80045b0:	4413      	add	r3, r2
 80045b2:	2201      	movs	r2, #1
 80045b4:	4619      	mov	r1, r3
 80045b6:	f000 fc27 	bl	8004e08 <prvListTasksWithinSingleList>
 80045ba:	4602      	mov	r2, r0
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4413      	add	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e2      	bne.n	800458e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4613      	mov	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	461a      	mov	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	4a27      	ldr	r2, [pc, #156]	@ (8004678 <uxTaskGetSystemState+0x10c>)
 80045da:	6811      	ldr	r1, [r2, #0]
 80045dc:	2202      	movs	r2, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fc12 	bl	8004e08 <prvListTasksWithinSingleList>
 80045e4:	4602      	mov	r2, r0
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	461a      	mov	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	4a1f      	ldr	r2, [pc, #124]	@ (800467c <uxTaskGetSystemState+0x110>)
 80045fe:	6811      	ldr	r1, [r2, #0]
 8004600:	2202      	movs	r2, #2
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fc00 	bl	8004e08 <prvListTasksWithinSingleList>
 8004608:	4602      	mov	r2, r0
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	4413      	add	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	2204      	movs	r2, #4
 8004622:	4917      	ldr	r1, [pc, #92]	@ (8004680 <uxTaskGetSystemState+0x114>)
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fbef 	bl	8004e08 <prvListTasksWithinSingleList>
 800462a:	4602      	mov	r2, r0
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	4413      	add	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	461a      	mov	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	2203      	movs	r2, #3
 8004644:	490f      	ldr	r1, [pc, #60]	@ (8004684 <uxTaskGetSystemState+0x118>)
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fbde 	bl	8004e08 <prvListTasksWithinSingleList>
 800464c:	4602      	mov	r2, r0
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8004660:	f7ff fed6 	bl	8004410 <xTaskResumeAll>

		return uxTask;
 8004664:	697b      	ldr	r3, [r7, #20]
	}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000e20 	.word	0x20000e20
 8004674:	20000950 	.word	0x20000950
 8004678:	20000dd8 	.word	0x20000dd8
 800467c:	20000ddc 	.word	0x20000ddc
 8004680:	20000df4 	.word	0x20000df4
 8004684:	20000e0c 	.word	0x20000e0c

08004688 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8004690:	4b0f      	ldr	r3, [pc, #60]	@ (80046d0 <vTaskStepTick+0x48>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	441a      	add	r2, r3
 8004698:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <vTaskStepTick+0x4c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d90b      	bls.n	80046b8 <vTaskStepTick+0x30>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	60fb      	str	r3, [r7, #12]
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	e7fd      	b.n	80046b4 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <vTaskStepTick+0x48>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	4a03      	ldr	r2, [pc, #12]	@ (80046d0 <vTaskStepTick+0x48>)
 80046c2:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	20000e24 	.word	0x20000e24
 80046d4:	20000e40 	.word	0x20000e40

080046d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004820 <xTaskIncrementTick+0x148>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 8090 	bne.w	800480c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004824 <xTaskIncrementTick+0x14c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004824 <xTaskIncrementTick+0x14c>)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d121      	bne.n	8004744 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004700:	4b49      	ldr	r3, [pc, #292]	@ (8004828 <xTaskIncrementTick+0x150>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <xTaskIncrementTick+0x4a>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	603b      	str	r3, [r7, #0]
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	e7fd      	b.n	800471e <xTaskIncrementTick+0x46>
 8004722:	4b41      	ldr	r3, [pc, #260]	@ (8004828 <xTaskIncrementTick+0x150>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	4b40      	ldr	r3, [pc, #256]	@ (800482c <xTaskIncrementTick+0x154>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a3e      	ldr	r2, [pc, #248]	@ (8004828 <xTaskIncrementTick+0x150>)
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4a3e      	ldr	r2, [pc, #248]	@ (800482c <xTaskIncrementTick+0x154>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	4b3e      	ldr	r3, [pc, #248]	@ (8004830 <xTaskIncrementTick+0x158>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	4a3c      	ldr	r2, [pc, #240]	@ (8004830 <xTaskIncrementTick+0x158>)
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	f000 fc00 	bl	8004f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004744:	4b3b      	ldr	r3, [pc, #236]	@ (8004834 <xTaskIncrementTick+0x15c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	429a      	cmp	r2, r3
 800474c:	d349      	bcc.n	80047e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800474e:	4b36      	ldr	r3, [pc, #216]	@ (8004828 <xTaskIncrementTick+0x150>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004758:	4b36      	ldr	r3, [pc, #216]	@ (8004834 <xTaskIncrementTick+0x15c>)
 800475a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800475e:	601a      	str	r2, [r3, #0]
					break;
 8004760:	e03f      	b.n	80047e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004762:	4b31      	ldr	r3, [pc, #196]	@ (8004828 <xTaskIncrementTick+0x150>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d203      	bcs.n	8004782 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800477a:	4a2e      	ldr	r2, [pc, #184]	@ (8004834 <xTaskIncrementTick+0x15c>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004780:	e02f      	b.n	80047e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3304      	adds	r3, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fde2 	bl	8003350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3318      	adds	r3, #24
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe fdd9 	bl	8003350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a2:	4b25      	ldr	r3, [pc, #148]	@ (8004838 <xTaskIncrementTick+0x160>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d903      	bls.n	80047b2 <xTaskIncrementTick+0xda>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	4a22      	ldr	r2, [pc, #136]	@ (8004838 <xTaskIncrementTick+0x160>)
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <xTaskIncrementTick+0x164>)
 80047c0:	441a      	add	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f7fe fd64 	bl	8003296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <xTaskIncrementTick+0x168>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	429a      	cmp	r2, r3
 80047da:	d3b8      	bcc.n	800474e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e0:	e7b5      	b.n	800474e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047e2:	4b17      	ldr	r3, [pc, #92]	@ (8004840 <xTaskIncrementTick+0x168>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e8:	4914      	ldr	r1, [pc, #80]	@ (800483c <xTaskIncrementTick+0x164>)
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d901      	bls.n	80047fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047fe:	4b11      	ldr	r3, [pc, #68]	@ (8004844 <xTaskIncrementTick+0x16c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004806:	2301      	movs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e004      	b.n	8004816 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800480c:	4b0e      	ldr	r3, [pc, #56]	@ (8004848 <xTaskIncrementTick+0x170>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	4a0d      	ldr	r2, [pc, #52]	@ (8004848 <xTaskIncrementTick+0x170>)
 8004814:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004816:	697b      	ldr	r3, [r7, #20]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000e48 	.word	0x20000e48
 8004824:	20000e24 	.word	0x20000e24
 8004828:	20000dd8 	.word	0x20000dd8
 800482c:	20000ddc 	.word	0x20000ddc
 8004830:	20000e38 	.word	0x20000e38
 8004834:	20000e40 	.word	0x20000e40
 8004838:	20000e28 	.word	0x20000e28
 800483c:	20000950 	.word	0x20000950
 8004840:	2000094c 	.word	0x2000094c
 8004844:	20000e34 	.word	0x20000e34
 8004848:	20000e30 	.word	0x20000e30

0800484c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004852:	4b28      	ldr	r3, [pc, #160]	@ (80048f4 <vTaskSwitchContext+0xa8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800485a:	4b27      	ldr	r3, [pc, #156]	@ (80048f8 <vTaskSwitchContext+0xac>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004860:	e042      	b.n	80048e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004862:	4b25      	ldr	r3, [pc, #148]	@ (80048f8 <vTaskSwitchContext+0xac>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004868:	4b24      	ldr	r3, [pc, #144]	@ (80048fc <vTaskSwitchContext+0xb0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e011      	b.n	8004894 <vTaskSwitchContext+0x48>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <vTaskSwitchContext+0x42>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	607b      	str	r3, [r7, #4]
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	e7fd      	b.n	800488a <vTaskSwitchContext+0x3e>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3b01      	subs	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	491a      	ldr	r1, [pc, #104]	@ (8004900 <vTaskSwitchContext+0xb4>)
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0e3      	beq.n	8004870 <vTaskSwitchContext+0x24>
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <vTaskSwitchContext+0xb4>)
 80048b4:	4413      	add	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3308      	adds	r3, #8
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d104      	bne.n	80048d8 <vTaskSwitchContext+0x8c>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	605a      	str	r2, [r3, #4]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <vTaskSwitchContext+0xb8>)
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4a06      	ldr	r2, [pc, #24]	@ (80048fc <vTaskSwitchContext+0xb0>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6013      	str	r3, [r2, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000e48 	.word	0x20000e48
 80048f8:	20000e34 	.word	0x20000e34
 80048fc:	20000e28 	.word	0x20000e28
 8004900:	20000950 	.word	0x20000950
 8004904:	2000094c 	.word	0x2000094c

08004908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	e7fd      	b.n	800492c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004930:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <vTaskPlaceOnEventList+0x48>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3318      	adds	r3, #24
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fe fcd0 	bl	80032de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800493e:	2101      	movs	r1, #1
 8004940:	6838      	ldr	r0, [r7, #0]
 8004942:	f000 fc69 	bl	8005218 <prvAddCurrentTaskToDelayedList>
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	2000094c 	.word	0x2000094c

08004954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	617b      	str	r3, [r7, #20]
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	e7fd      	b.n	800497a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800497e:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3318      	adds	r3, #24
 8004984:	4619      	mov	r1, r3
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7fe fc85 	bl	8003296 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004996:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	68b8      	ldr	r0, [r7, #8]
 800499c:	f000 fc3c 	bl	8005218 <prvAddCurrentTaskToDelayedList>
	}
 80049a0:	bf00      	nop
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	2000094c 	.word	0x2000094c

080049ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60fb      	str	r3, [r7, #12]
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	e7fd      	b.n	80049d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	3318      	adds	r3, #24
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe fcb6 	bl	8003350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a60 <xTaskRemoveFromEventList+0xb4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d11f      	bne.n	8004a2c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fcad 	bl	8003350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <xTaskRemoveFromEventList+0xb8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d903      	bls.n	8004a0a <xTaskRemoveFromEventList+0x5e>
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <xTaskRemoveFromEventList+0xb8>)
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4a14      	ldr	r2, [pc, #80]	@ (8004a68 <xTaskRemoveFromEventList+0xbc>)
 8004a18:	441a      	add	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7fe fc38 	bl	8003296 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8004a26:	f000 fa8d 	bl	8004f44 <prvResetNextTaskUnblockTime>
 8004a2a:	e005      	b.n	8004a38 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3318      	adds	r3, #24
 8004a30:	4619      	mov	r1, r3
 8004a32:	480e      	ldr	r0, [pc, #56]	@ (8004a6c <xTaskRemoveFromEventList+0xc0>)
 8004a34:	f7fe fc2f 	bl	8003296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <xTaskRemoveFromEventList+0xc4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d905      	bls.n	8004a52 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a46:	2301      	movs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <xTaskRemoveFromEventList+0xc8>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e001      	b.n	8004a56 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a56:	697b      	ldr	r3, [r7, #20]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20000e48 	.word	0x20000e48
 8004a64:	20000e28 	.word	0x20000e28
 8004a68:	20000950 	.word	0x20000950
 8004a6c:	20000de0 	.word	0x20000de0
 8004a70:	2000094c 	.word	0x2000094c
 8004a74:	20000e34 	.word	0x20000e34

08004a78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a80:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <vTaskInternalSetTimeOutState+0x24>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <vTaskInternalSetTimeOutState+0x28>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	605a      	str	r2, [r3, #4]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	20000e38 	.word	0x20000e38
 8004aa0:	20000e24 	.word	0x20000e24

08004aa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	613b      	str	r3, [r7, #16]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60fb      	str	r3, [r7, #12]
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	e7fd      	b.n	8004ae6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004aea:	f001 f875 	bl	8005bd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004aee:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <xTaskCheckForTimeOut+0xc0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b06:	d102      	bne.n	8004b0e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
 8004b0c:	e023      	b.n	8004b56 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <xTaskCheckForTimeOut+0xc4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d007      	beq.n	8004b2a <xTaskCheckForTimeOut+0x86>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d302      	bcc.n	8004b2a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e015      	b.n	8004b56 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d20b      	bcs.n	8004b4c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff99 	bl	8004a78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e004      	b.n	8004b56 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b56:	f001 f871 	bl	8005c3c <vPortExitCritical>

	return xReturn;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000e24 	.word	0x20000e24
 8004b68:	20000e38 	.word	0x20000e38

08004b6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b70:	4b03      	ldr	r3, [pc, #12]	@ (8004b80 <vTaskMissedYield+0x14>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	20000e34 	.word	0x20000e34

08004b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b8c:	f000 f8a8 	bl	8004ce0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b90:	4b18      	ldr	r3, [pc, #96]	@ (8004bf4 <prvIdleTask+0x70>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d907      	bls.n	8004ba8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004b98:	4b17      	ldr	r3, [pc, #92]	@ (8004bf8 <prvIdleTask+0x74>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8004ba8:	f7ff fbfa 	bl	80043a0 <prvGetExpectedIdleTime>
 8004bac:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d9eb      	bls.n	8004b8c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8004bb4:	f7ff fbe6 	bl	8004384 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8004bb8:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <prvIdleTask+0x78>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <prvIdleTask+0x7c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d20b      	bcs.n	8004bdc <prvIdleTask+0x58>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60bb      	str	r3, [r7, #8]
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8004bdc:	f7ff fbe0 	bl	80043a0 <prvGetExpectedIdleTime>
 8004be0:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d902      	bls.n	8004bee <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f001 f8a7 	bl	8005d3c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8004bee:	f7ff fc0f 	bl	8004410 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8004bf2:	e7cb      	b.n	8004b8c <prvIdleTask+0x8>
 8004bf4:	20000950 	.word	0x20000950
 8004bf8:	e000ed04 	.word	0xe000ed04
 8004bfc:	20000e40 	.word	0x20000e40
 8004c00:	20000e24 	.word	0x20000e24

08004c04 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8004c12:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <eTaskConfirmSleepModeStatus+0x4c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	71fb      	strb	r3, [r7, #7]
 8004c1e:	e010      	b.n	8004c42 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <eTaskConfirmSleepModeStatus+0x50>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	71fb      	strb	r3, [r7, #7]
 8004c2c:	e009      	b.n	8004c42 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <eTaskConfirmSleepModeStatus+0x54>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <eTaskConfirmSleepModeStatus+0x58>)
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	1acb      	subs	r3, r1, r3
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d101      	bne.n	8004c42 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8004c42:	79fb      	ldrb	r3, [r7, #7]
	}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	20000de0 	.word	0x20000de0
 8004c54:	20000e34 	.word	0x20000e34
 8004c58:	20000e0c 	.word	0x20000e0c
 8004c5c:	20000e20 	.word	0x20000e20

08004c60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c66:	2300      	movs	r3, #0
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	e00c      	b.n	8004c86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4a12      	ldr	r2, [pc, #72]	@ (8004cc0 <prvInitialiseTaskLists+0x60>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fade 	bl	800323c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3301      	adds	r3, #1
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b37      	cmp	r3, #55	@ 0x37
 8004c8a:	d9ef      	bls.n	8004c6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c8c:	480d      	ldr	r0, [pc, #52]	@ (8004cc4 <prvInitialiseTaskLists+0x64>)
 8004c8e:	f7fe fad5 	bl	800323c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c92:	480d      	ldr	r0, [pc, #52]	@ (8004cc8 <prvInitialiseTaskLists+0x68>)
 8004c94:	f7fe fad2 	bl	800323c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c98:	480c      	ldr	r0, [pc, #48]	@ (8004ccc <prvInitialiseTaskLists+0x6c>)
 8004c9a:	f7fe facf 	bl	800323c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c9e:	480c      	ldr	r0, [pc, #48]	@ (8004cd0 <prvInitialiseTaskLists+0x70>)
 8004ca0:	f7fe facc 	bl	800323c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ca4:	480b      	ldr	r0, [pc, #44]	@ (8004cd4 <prvInitialiseTaskLists+0x74>)
 8004ca6:	f7fe fac9 	bl	800323c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <prvInitialiseTaskLists+0x78>)
 8004cac:	4a05      	ldr	r2, [pc, #20]	@ (8004cc4 <prvInitialiseTaskLists+0x64>)
 8004cae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <prvInitialiseTaskLists+0x7c>)
 8004cb2:	4a05      	ldr	r2, [pc, #20]	@ (8004cc8 <prvInitialiseTaskLists+0x68>)
 8004cb4:	601a      	str	r2, [r3, #0]
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000950 	.word	0x20000950
 8004cc4:	20000db0 	.word	0x20000db0
 8004cc8:	20000dc4 	.word	0x20000dc4
 8004ccc:	20000de0 	.word	0x20000de0
 8004cd0:	20000df4 	.word	0x20000df4
 8004cd4:	20000e0c 	.word	0x20000e0c
 8004cd8:	20000dd8 	.word	0x20000dd8
 8004cdc:	20000ddc 	.word	0x20000ddc

08004ce0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ce6:	e019      	b.n	8004d1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ce8:	f000 ff76 	bl	8005bd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cec:	4b10      	ldr	r3, [pc, #64]	@ (8004d30 <prvCheckTasksWaitingTermination+0x50>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe fb29 	bl	8003350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <prvCheckTasksWaitingTermination+0x54>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	4a0b      	ldr	r2, [pc, #44]	@ (8004d34 <prvCheckTasksWaitingTermination+0x54>)
 8004d06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d08:	4b0b      	ldr	r3, [pc, #44]	@ (8004d38 <prvCheckTasksWaitingTermination+0x58>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d38 <prvCheckTasksWaitingTermination+0x58>)
 8004d10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d12:	f000 ff93 	bl	8005c3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8e4 	bl	8004ee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <prvCheckTasksWaitingTermination+0x58>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e1      	bne.n	8004ce8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000df4 	.word	0x20000df4
 8004d34:	20000e20 	.word	0x20000e20
 8004d38:	20000e08 	.word	0x20000e08

08004d3c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <vTaskGetInfo+0x1a>
 8004d50:	4b2c      	ldr	r3, [pc, #176]	@ (8004e04 <vTaskGetInfo+0xc8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	e000      	b.n	8004d58 <vTaskGetInfo+0x1c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	d01a      	beq.n	8004dcc <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8004d96:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <vTaskGetInfo+0xc8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d103      	bne.n	8004da8 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	731a      	strb	r2, [r3, #12]
 8004da6:	e018      	b.n	8004dda <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d112      	bne.n	8004dda <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8004db4:	f7ff fae6 	bl	8004384 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8004dc6:	f7ff fb23 	bl	8004410 <xTaskResumeAll>
 8004dca:	e006      	b.n	8004dda <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	f7ff fa09 	bl	80041e4 <eTaskGetState>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f861 	bl	8004eac <prvTaskCheckFreeStackSpace>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004df2:	e002      	b.n	8004dfa <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	841a      	strh	r2, [r3, #32]
	}
 8004dfa:	bf00      	nop
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	2000094c 	.word	0x2000094c

08004e08 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	@ 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d03f      	beq.n	8004ea2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	605a      	str	r2, [r3, #4]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	3308      	adds	r3, #8
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d104      	bne.n	8004e46 <prvListTasksWithinSingleList+0x3e>
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	3308      	adds	r3, #8
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d104      	bne.n	8004e72 <prvListTasksWithinSingleList+0x6a>
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	461a      	mov	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1899      	adds	r1, r3, r2
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	6978      	ldr	r0, [r7, #20]
 8004e90:	f7ff ff54 	bl	8004d3c <vTaskGetInfo>
				uxTask++;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	3301      	adds	r3, #1
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d1d5      	bne.n	8004e4e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3728      	adds	r7, #40	@ 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004eb8:	e005      	b.n	8004ec6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2ba5      	cmp	r3, #165	@ 0xa5
 8004ecc:	d0f5      	beq.n	8004eba <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	b29b      	uxth	r3, r3
	}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 f940 	bl	8006180 <vPortFree>
				vPortFree( pxTCB );
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f93d 	bl	8006180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f06:	e019      	b.n	8004f3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d103      	bne.n	8004f1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 f934 	bl	8006180 <vPortFree>
	}
 8004f18:	e010      	b.n	8004f3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d00b      	beq.n	8004f3c <prvDeleteTCB+0x58>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60fb      	str	r3, [r7, #12]
}
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	e7fd      	b.n	8004f38 <prvDeleteTCB+0x54>
	}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f7c <prvResetNextTaskUnblockTime+0x38>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f54:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <prvResetNextTaskUnblockTime+0x3c>)
 8004f56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f5c:	e008      	b.n	8004f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5e:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <prvResetNextTaskUnblockTime+0x38>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a04      	ldr	r2, [pc, #16]	@ (8004f80 <prvResetNextTaskUnblockTime+0x3c>)
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000dd8 	.word	0x20000dd8
 8004f80:	20000e40 	.word	0x20000e40

08004f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <xTaskGetSchedulerState+0x34>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f92:	2301      	movs	r3, #1
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	e008      	b.n	8004faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f98:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <xTaskGetSchedulerState+0x38>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	e001      	b.n	8004faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004faa:	687b      	ldr	r3, [r7, #4]
	}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	20000e2c 	.word	0x20000e2c
 8004fbc:	20000e48 	.word	0x20000e48

08004fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d058      	beq.n	8005088 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005094 <xTaskPriorityDisinherit+0xd4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d00b      	beq.n	8004ff8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	60fb      	str	r3, [r7, #12]
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60bb      	str	r3, [r7, #8]
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502a:	429a      	cmp	r2, r3
 800502c:	d02c      	beq.n	8005088 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005032:	2b00      	cmp	r3, #0
 8005034:	d128      	bne.n	8005088 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3304      	adds	r3, #4
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe f988 	bl	8003350 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005058:	4b0f      	ldr	r3, [pc, #60]	@ (8005098 <xTaskPriorityDisinherit+0xd8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d903      	bls.n	8005068 <xTaskPriorityDisinherit+0xa8>
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	4a0c      	ldr	r2, [pc, #48]	@ (8005098 <xTaskPriorityDisinherit+0xd8>)
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4a09      	ldr	r2, [pc, #36]	@ (800509c <xTaskPriorityDisinherit+0xdc>)
 8005076:	441a      	add	r2, r3
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7fe f909 	bl	8003296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005088:	697b      	ldr	r3, [r7, #20]
	}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	2000094c 	.word	0x2000094c
 8005098:	20000e28 	.word	0x20000e28
 800509c:	20000950 	.word	0x20000950

080050a0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 f9e9 	bl	8006484 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fb f894 	bl	80001e0 <strlen>
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	e007      	b.n	80050cc <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	2220      	movs	r2, #32
 80050c4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3301      	adds	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b0e      	cmp	r3, #14
 80050d0:	d9f4      	bls.n	80050bc <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
	}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b089      	sub	sp, #36	@ 0x24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80050fa:	4b45      	ldr	r3, [pc, #276]	@ (8005210 <vTaskList+0x124>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005100:	4b43      	ldr	r3, [pc, #268]	@ (8005210 <vTaskList+0x124>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4618      	mov	r0, r3
 800510e:	f000 ff69 	bl	8005fe4 <pvPortMalloc>
 8005112:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d076      	beq.n	8005208 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800511a:	2200      	movs	r2, #0
 800511c:	68f9      	ldr	r1, [r7, #12]
 800511e:	68b8      	ldr	r0, [r7, #8]
 8005120:	f7ff fa24 	bl	800456c <uxTaskGetSystemState>
 8005124:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e066      	b.n	80051fa <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	461a      	mov	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4413      	add	r3, r2
 800513c:	7b1b      	ldrb	r3, [r3, #12]
 800513e:	2b04      	cmp	r3, #4
 8005140:	d81b      	bhi.n	800517a <vTaskList+0x8e>
 8005142:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <vTaskList+0x5c>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	0800515d 	.word	0x0800515d
 800514c:	08005163 	.word	0x08005163
 8005150:	08005169 	.word	0x08005169
 8005154:	0800516f 	.word	0x0800516f
 8005158:	08005175 	.word	0x08005175
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800515c:	2358      	movs	r3, #88	@ 0x58
 800515e:	74fb      	strb	r3, [r7, #19]
										break;
 8005160:	e00e      	b.n	8005180 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8005162:	2352      	movs	r3, #82	@ 0x52
 8005164:	74fb      	strb	r3, [r7, #19]
										break;
 8005166:	e00b      	b.n	8005180 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8005168:	2342      	movs	r3, #66	@ 0x42
 800516a:	74fb      	strb	r3, [r7, #19]
										break;
 800516c:	e008      	b.n	8005180 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800516e:	2353      	movs	r3, #83	@ 0x53
 8005170:	74fb      	strb	r3, [r7, #19]
										break;
 8005172:	e005      	b.n	8005180 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8005174:	2344      	movs	r3, #68	@ 0x44
 8005176:	74fb      	strb	r3, [r7, #19]
										break;
 8005178:	e002      	b.n	8005180 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800517a:	2300      	movs	r3, #0
 800517c:	74fb      	strb	r3, [r7, #19]
										break;
 800517e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	461a      	mov	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4413      	add	r3, r2
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ff83 	bl	80050a0 <prvWriteNameToBuffer>
 800519a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800519c:	7cf9      	ldrb	r1, [r7, #19]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	461a      	mov	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	6918      	ldr	r0, [r3, #16]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4613      	mov	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	461a      	mov	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4413      	add	r3, r2
 80051c0:	8c1b      	ldrh	r3, [r3, #32]
 80051c2:	461c      	mov	r4, r3
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4613      	mov	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	461a      	mov	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4413      	add	r3, r2
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	9400      	str	r4, [sp, #0]
 80051da:	4603      	mov	r3, r0
 80051dc:	460a      	mov	r2, r1
 80051de:	490d      	ldr	r1, [pc, #52]	@ (8005214 <vTaskList+0x128>)
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 f8ed 	bl	80063c0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fa fffa 	bl	80001e0 <strlen>
 80051ec:	4602      	mov	r2, r0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3301      	adds	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d394      	bcc.n	800512c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8005202:	68b8      	ldr	r0, [r7, #8]
 8005204:	f000 ffbc 	bl	8006180 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}
 8005210:	20000e20 	.word	0x20000e20
 8005214:	08006d48 	.word	0x08006d48

08005218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005222:	4b21      	ldr	r3, [pc, #132]	@ (80052a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005228:	4b20      	ldr	r3, [pc, #128]	@ (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3304      	adds	r3, #4
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe f88e 	bl	8003350 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800523a:	d10a      	bne.n	8005252 <prvAddCurrentTaskToDelayedList+0x3a>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005242:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4819      	ldr	r0, [pc, #100]	@ (80052b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800524c:	f7fe f823 	bl	8003296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005250:	e026      	b.n	80052a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4413      	add	r3, r2
 8005258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800525a:	4b14      	ldr	r3, [pc, #80]	@ (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	429a      	cmp	r2, r3
 8005268:	d209      	bcs.n	800527e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800526a:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b0f      	ldr	r3, [pc, #60]	@ (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fe f831 	bl	80032de <vListInsert>
}
 800527c:	e010      	b.n	80052a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800527e:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3304      	adds	r3, #4
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f7fe f827 	bl	80032de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005290:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	d202      	bcs.n	80052a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800529a:	4a08      	ldr	r2, [pc, #32]	@ (80052bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6013      	str	r3, [r2, #0]
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000e24 	.word	0x20000e24
 80052ac:	2000094c 	.word	0x2000094c
 80052b0:	20000e0c 	.word	0x20000e0c
 80052b4:	20000ddc 	.word	0x20000ddc
 80052b8:	20000dd8 	.word	0x20000dd8
 80052bc:	20000e40 	.word	0x20000e40

080052c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	@ 0x28
 80052c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052ca:	f000 fb13 	bl	80058f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005344 <xTimerCreateTimerTask+0x84>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d021      	beq.n	800531a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052de:	1d3a      	adds	r2, r7, #4
 80052e0:	f107 0108 	add.w	r1, r7, #8
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fd ff8d 	bl	8003208 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	9202      	str	r2, [sp, #8]
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	2302      	movs	r3, #2
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	460a      	mov	r2, r1
 8005300:	4911      	ldr	r1, [pc, #68]	@ (8005348 <xTimerCreateTimerTask+0x88>)
 8005302:	4812      	ldr	r0, [pc, #72]	@ (800534c <xTimerCreateTimerTask+0x8c>)
 8005304:	f7fe fd48 	bl	8003d98 <xTaskCreateStatic>
 8005308:	4603      	mov	r3, r0
 800530a:	4a11      	ldr	r2, [pc, #68]	@ (8005350 <xTimerCreateTimerTask+0x90>)
 800530c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800530e:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <xTimerCreateTimerTask+0x90>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005316:	2301      	movs	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005338:	697b      	ldr	r3, [r7, #20]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000e7c 	.word	0x20000e7c
 8005348:	08006d58 	.word	0x08006d58
 800534c:	0800548d 	.word	0x0800548d
 8005350:	20000e80 	.word	0x20000e80

08005354 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	@ 0x28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005362:	2300      	movs	r3, #0
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <xTimerGenericCommand+0x30>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	623b      	str	r3, [r7, #32]
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005384:	4b19      	ldr	r3, [pc, #100]	@ (80053ec <xTimerGenericCommand+0x98>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02a      	beq.n	80053e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b05      	cmp	r3, #5
 800539c:	dc18      	bgt.n	80053d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800539e:	f7ff fdf1 	bl	8004f84 <xTaskGetSchedulerState>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d109      	bne.n	80053bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053a8:	4b10      	ldr	r3, [pc, #64]	@ (80053ec <xTimerGenericCommand+0x98>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	f107 0110 	add.w	r1, r7, #16
 80053b0:	2300      	movs	r3, #0
 80053b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b4:	f7fe f900 	bl	80035b8 <xQueueGenericSend>
 80053b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80053ba:	e012      	b.n	80053e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053bc:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <xTimerGenericCommand+0x98>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	f107 0110 	add.w	r1, r7, #16
 80053c4:	2300      	movs	r3, #0
 80053c6:	2200      	movs	r2, #0
 80053c8:	f7fe f8f6 	bl	80035b8 <xQueueGenericSend>
 80053cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80053ce:	e008      	b.n	80053e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053d0:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <xTimerGenericCommand+0x98>)
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	f107 0110 	add.w	r1, r7, #16
 80053d8:	2300      	movs	r3, #0
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	f7fe f9ee 	bl	80037bc <xQueueGenericSendFromISR>
 80053e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3728      	adds	r7, #40	@ 0x28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000e7c 	.word	0x20000e7c

080053f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053fa:	4b23      	ldr	r3, [pc, #140]	@ (8005488 <prvProcessExpiredTimer+0x98>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	3304      	adds	r3, #4
 8005408:	4618      	mov	r0, r3
 800540a:	f7fd ffa1 	bl	8003350 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d023      	beq.n	8005464 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	18d1      	adds	r1, r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	6978      	ldr	r0, [r7, #20]
 800542a:	f000 f8d5 	bl	80055d8 <prvInsertTimerInActiveList>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005434:	2300      	movs	r3, #0
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	2300      	movs	r3, #0
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	2100      	movs	r1, #0
 800543e:	6978      	ldr	r0, [r7, #20]
 8005440:	f7ff ff88 	bl	8005354 <xTimerGenericCommand>
 8005444:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d114      	bne.n	8005476 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	60fb      	str	r3, [r7, #12]
}
 800545e:	bf00      	nop
 8005460:	bf00      	nop
 8005462:	e7fd      	b.n	8005460 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	b2da      	uxtb	r2, r3
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	6978      	ldr	r0, [r7, #20]
 800547c:	4798      	blx	r3
}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000e74 	.word	0x20000e74

0800548c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005494:	f107 0308 	add.w	r3, r7, #8
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f859 	bl	8005550 <prvGetNextExpireTime>
 800549e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4619      	mov	r1, r3
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f805 	bl	80054b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054aa:	f000 f8d7 	bl	800565c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054ae:	bf00      	nop
 80054b0:	e7f0      	b.n	8005494 <prvTimerTask+0x8>
	...

080054b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054be:	f7fe ff61 	bl	8004384 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054c2:	f107 0308 	add.w	r3, r7, #8
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f866 	bl	8005598 <prvSampleTimeNow>
 80054cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d130      	bne.n	8005536 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <prvProcessTimerOrBlockTask+0x3c>
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d806      	bhi.n	80054f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054e2:	f7fe ff95 	bl	8004410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ff81 	bl	80053f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054ee:	e024      	b.n	800553a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054f6:	4b13      	ldr	r3, [pc, #76]	@ (8005544 <prvProcessTimerOrBlockTask+0x90>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <prvProcessTimerOrBlockTask+0x50>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <prvProcessTimerOrBlockTask+0x52>
 8005504:	2300      	movs	r3, #0
 8005506:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005508:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <prvProcessTimerOrBlockTask+0x94>)
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	4619      	mov	r1, r3
 8005516:	f7fe fc0b 	bl	8003d30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800551a:	f7fe ff79 	bl	8004410 <xTaskResumeAll>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005524:	4b09      	ldr	r3, [pc, #36]	@ (800554c <prvProcessTimerOrBlockTask+0x98>)
 8005526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	f3bf 8f6f 	isb	sy
}
 8005534:	e001      	b.n	800553a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005536:	f7fe ff6b 	bl	8004410 <xTaskResumeAll>
}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000e78 	.word	0x20000e78
 8005548:	20000e7c 	.word	0x20000e7c
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005558:	4b0e      	ldr	r3, [pc, #56]	@ (8005594 <prvGetNextExpireTime+0x44>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <prvGetNextExpireTime+0x16>
 8005562:	2201      	movs	r2, #1
 8005564:	e000      	b.n	8005568 <prvGetNextExpireTime+0x18>
 8005566:	2200      	movs	r2, #0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005574:	4b07      	ldr	r3, [pc, #28]	@ (8005594 <prvGetNextExpireTime+0x44>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e001      	b.n	8005584 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005584:	68fb      	ldr	r3, [r7, #12]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000e74 	.word	0x20000e74

08005598 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055a0:	f7fe ffd4 	bl	800454c <xTaskGetTickCount>
 80055a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055a6:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <prvSampleTimeNow+0x3c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d205      	bcs.n	80055bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055b0:	f000 f93a 	bl	8005828 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	e002      	b.n	80055c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055c2:	4a04      	ldr	r2, [pc, #16]	@ (80055d4 <prvSampleTimeNow+0x3c>)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055c8:	68fb      	ldr	r3, [r7, #12]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000e84 	.word	0x20000e84

080055d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d812      	bhi.n	8005624 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	1ad2      	subs	r2, r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	429a      	cmp	r2, r3
 800560a:	d302      	bcc.n	8005612 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800560c:	2301      	movs	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e01b      	b.n	800564a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005612:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <prvInsertTimerInActiveList+0x7c>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3304      	adds	r3, #4
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f7fd fe5e 	bl	80032de <vListInsert>
 8005622:	e012      	b.n	800564a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d206      	bcs.n	800563a <prvInsertTimerInActiveList+0x62>
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d302      	bcc.n	800563a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e007      	b.n	800564a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800563a:	4b07      	ldr	r3, [pc, #28]	@ (8005658 <prvInsertTimerInActiveList+0x80>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3304      	adds	r3, #4
 8005642:	4619      	mov	r1, r3
 8005644:	4610      	mov	r0, r2
 8005646:	f7fd fe4a 	bl	80032de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800564a:	697b      	ldr	r3, [r7, #20]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000e78 	.word	0x20000e78
 8005658:	20000e74 	.word	0x20000e74

0800565c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08e      	sub	sp, #56	@ 0x38
 8005660:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005662:	e0ce      	b.n	8005802 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	da19      	bge.n	800569e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	3304      	adds	r3, #4
 800566e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	61fb      	str	r3, [r7, #28]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005694:	6850      	ldr	r0, [r2, #4]
 8005696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005698:	6892      	ldr	r2, [r2, #8]
 800569a:	4611      	mov	r1, r2
 800569c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f2c0 80ae 	blt.w	8005802 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b4:	3304      	adds	r3, #4
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fd fe4a 	bl	8003350 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056bc:	463b      	mov	r3, r7
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff ff6a 	bl	8005598 <prvSampleTimeNow>
 80056c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b09      	cmp	r3, #9
 80056ca:	f200 8097 	bhi.w	80057fc <prvProcessReceivedCommands+0x1a0>
 80056ce:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <prvProcessReceivedCommands+0x78>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	080056fd 	.word	0x080056fd
 80056e0:	08005773 	.word	0x08005773
 80056e4:	08005787 	.word	0x08005787
 80056e8:	080057d3 	.word	0x080057d3
 80056ec:	080056fd 	.word	0x080056fd
 80056f0:	080056fd 	.word	0x080056fd
 80056f4:	08005773 	.word	0x08005773
 80056f8:	08005787 	.word	0x08005787
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	b2da      	uxtb	r2, r3
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	18d1      	adds	r1, r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800571a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800571c:	f7ff ff5c 	bl	80055d8 <prvInsertTimerInActiveList>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d06c      	beq.n	8005800 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800572c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d061      	beq.n	8005800 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	441a      	add	r2, r3
 8005744:	2300      	movs	r3, #0
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2300      	movs	r3, #0
 800574a:	2100      	movs	r1, #0
 800574c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800574e:	f7ff fe01 	bl	8005354 <xTimerGenericCommand>
 8005752:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d152      	bne.n	8005800 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61bb      	str	r3, [r7, #24]
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	b2da      	uxtb	r2, r3
 800577e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005780:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005784:	e03d      	b.n	8005802 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	b2da      	uxtb	r2, r3
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800579e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10b      	bne.n	80057be <prvProcessReceivedCommands+0x162>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	617b      	str	r3, [r7, #20]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	18d1      	adds	r1, r2, r3
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057cc:	f7ff ff04 	bl	80055d8 <prvInsertTimerInActiveList>
					break;
 80057d0:	e017      	b.n	8005802 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d103      	bne.n	80057e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80057e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057e2:	f000 fccd 	bl	8006180 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057e6:	e00c      	b.n	8005802 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80057fa:	e002      	b.n	8005802 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80057fc:	bf00      	nop
 80057fe:	e000      	b.n	8005802 <prvProcessReceivedCommands+0x1a6>
					break;
 8005800:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005802:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <prvProcessReceivedCommands+0x1c8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1d39      	adds	r1, r7, #4
 8005808:	2200      	movs	r2, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe f874 	bl	80038f8 <xQueueReceive>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	f47f af26 	bne.w	8005664 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	3730      	adds	r7, #48	@ 0x30
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000e7c 	.word	0x20000e7c

08005828 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800582e:	e049      	b.n	80058c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005830:	4b2e      	ldr	r3, [pc, #184]	@ (80058ec <prvSwitchTimerLists+0xc4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800583a:	4b2c      	ldr	r3, [pc, #176]	@ (80058ec <prvSwitchTimerLists+0xc4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3304      	adds	r3, #4
 8005848:	4618      	mov	r0, r3
 800584a:	f7fd fd81 	bl	8003350 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d02f      	beq.n	80058c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	429a      	cmp	r2, r3
 8005874:	d90e      	bls.n	8005894 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005882:	4b1a      	ldr	r3, [pc, #104]	@ (80058ec <prvSwitchTimerLists+0xc4>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f7fd fd26 	bl	80032de <vListInsert>
 8005892:	e017      	b.n	80058c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005894:	2300      	movs	r3, #0
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	2300      	movs	r3, #0
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	2100      	movs	r1, #0
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f7ff fd58 	bl	8005354 <xTimerGenericCommand>
 80058a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	603b      	str	r3, [r7, #0]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058c4:	4b09      	ldr	r3, [pc, #36]	@ (80058ec <prvSwitchTimerLists+0xc4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1b0      	bne.n	8005830 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058ce:	4b07      	ldr	r3, [pc, #28]	@ (80058ec <prvSwitchTimerLists+0xc4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <prvSwitchTimerLists+0xc8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a04      	ldr	r2, [pc, #16]	@ (80058ec <prvSwitchTimerLists+0xc4>)
 80058da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058dc:	4a04      	ldr	r2, [pc, #16]	@ (80058f0 <prvSwitchTimerLists+0xc8>)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6013      	str	r3, [r2, #0]
}
 80058e2:	bf00      	nop
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000e74 	.word	0x20000e74
 80058f0:	20000e78 	.word	0x20000e78

080058f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058fa:	f000 f96d 	bl	8005bd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <prvCheckForValidListAndQueue+0x60>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d120      	bne.n	8005948 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005906:	4814      	ldr	r0, [pc, #80]	@ (8005958 <prvCheckForValidListAndQueue+0x64>)
 8005908:	f7fd fc98 	bl	800323c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800590c:	4813      	ldr	r0, [pc, #76]	@ (800595c <prvCheckForValidListAndQueue+0x68>)
 800590e:	f7fd fc95 	bl	800323c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005912:	4b13      	ldr	r3, [pc, #76]	@ (8005960 <prvCheckForValidListAndQueue+0x6c>)
 8005914:	4a10      	ldr	r2, [pc, #64]	@ (8005958 <prvCheckForValidListAndQueue+0x64>)
 8005916:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005918:	4b12      	ldr	r3, [pc, #72]	@ (8005964 <prvCheckForValidListAndQueue+0x70>)
 800591a:	4a10      	ldr	r2, [pc, #64]	@ (800595c <prvCheckForValidListAndQueue+0x68>)
 800591c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800591e:	2300      	movs	r3, #0
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	4b11      	ldr	r3, [pc, #68]	@ (8005968 <prvCheckForValidListAndQueue+0x74>)
 8005924:	4a11      	ldr	r2, [pc, #68]	@ (800596c <prvCheckForValidListAndQueue+0x78>)
 8005926:	2110      	movs	r1, #16
 8005928:	200a      	movs	r0, #10
 800592a:	f7fd fda5 	bl	8003478 <xQueueGenericCreateStatic>
 800592e:	4603      	mov	r3, r0
 8005930:	4a08      	ldr	r2, [pc, #32]	@ (8005954 <prvCheckForValidListAndQueue+0x60>)
 8005932:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005934:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <prvCheckForValidListAndQueue+0x60>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800593c:	4b05      	ldr	r3, [pc, #20]	@ (8005954 <prvCheckForValidListAndQueue+0x60>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	490b      	ldr	r1, [pc, #44]	@ (8005970 <prvCheckForValidListAndQueue+0x7c>)
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe f9ca 	bl	8003cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005948:	f000 f978 	bl	8005c3c <vPortExitCritical>
}
 800594c:	bf00      	nop
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000e7c 	.word	0x20000e7c
 8005958:	20000e4c 	.word	0x20000e4c
 800595c:	20000e60 	.word	0x20000e60
 8005960:	20000e74 	.word	0x20000e74
 8005964:	20000e78 	.word	0x20000e78
 8005968:	20000f28 	.word	0x20000f28
 800596c:	20000e88 	.word	0x20000e88
 8005970:	08006d60 	.word	0x08006d60

08005974 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3b04      	subs	r3, #4
 8005984:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800598c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b04      	subs	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f023 0201 	bic.w	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3b04      	subs	r3, #4
 80059a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059a4:	4a0c      	ldr	r2, [pc, #48]	@ (80059d8 <pxPortInitialiseStack+0x64>)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3b14      	subs	r3, #20
 80059ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3b04      	subs	r3, #4
 80059ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f06f 0202 	mvn.w	r2, #2
 80059c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3b20      	subs	r3, #32
 80059c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059ca:	68fb      	ldr	r3, [r7, #12]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	080059dd 	.word	0x080059dd

080059dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059e6:	4b13      	ldr	r3, [pc, #76]	@ (8005a34 <prvTaskExitError+0x58>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ee:	d00b      	beq.n	8005a08 <prvTaskExitError+0x2c>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	60fb      	str	r3, [r7, #12]
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	e7fd      	b.n	8005a04 <prvTaskExitError+0x28>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	60bb      	str	r3, [r7, #8]
}
 8005a1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a1c:	bf00      	nop
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0fc      	beq.n	8005a1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000010 	.word	0x20000010
	...

08005a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a40:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <pxCurrentTCBConst2>)
 8005a42:	6819      	ldr	r1, [r3, #0]
 8005a44:	6808      	ldr	r0, [r1, #0]
 8005a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4a:	f380 8809 	msr	PSP, r0
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f380 8811 	msr	BASEPRI, r0
 8005a5a:	4770      	bx	lr
 8005a5c:	f3af 8000 	nop.w

08005a60 <pxCurrentTCBConst2>:
 8005a60:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop

08005a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a68:	4808      	ldr	r0, [pc, #32]	@ (8005a8c <prvPortStartFirstTask+0x24>)
 8005a6a:	6800      	ldr	r0, [r0, #0]
 8005a6c:	6800      	ldr	r0, [r0, #0]
 8005a6e:	f380 8808 	msr	MSP, r0
 8005a72:	f04f 0000 	mov.w	r0, #0
 8005a76:	f380 8814 	msr	CONTROL, r0
 8005a7a:	b662      	cpsie	i
 8005a7c:	b661      	cpsie	f
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	df00      	svc	0
 8005a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a8a:	bf00      	nop
 8005a8c:	e000ed08 	.word	0xe000ed08

08005a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a96:	4b47      	ldr	r3, [pc, #284]	@ (8005bb4 <xPortStartScheduler+0x124>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a47      	ldr	r2, [pc, #284]	@ (8005bb8 <xPortStartScheduler+0x128>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10b      	bne.n	8005ab8 <xPortStartScheduler+0x28>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	613b      	str	r3, [r7, #16]
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8005bb4 <xPortStartScheduler+0x124>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a3f      	ldr	r2, [pc, #252]	@ (8005bbc <xPortStartScheduler+0x12c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10b      	bne.n	8005ada <xPortStartScheduler+0x4a>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	60fb      	str	r3, [r7, #12]
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ada:	4b39      	ldr	r3, [pc, #228]	@ (8005bc0 <xPortStartScheduler+0x130>)
 8005adc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	22ff      	movs	r2, #255	@ 0xff
 8005aea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	4b31      	ldr	r3, [pc, #196]	@ (8005bc4 <xPortStartScheduler+0x134>)
 8005b00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b02:	4b31      	ldr	r3, [pc, #196]	@ (8005bc8 <xPortStartScheduler+0x138>)
 8005b04:	2207      	movs	r2, #7
 8005b06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b08:	e009      	b.n	8005b1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc8 <xPortStartScheduler+0x138>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc8 <xPortStartScheduler+0x138>)
 8005b12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b26:	2b80      	cmp	r3, #128	@ 0x80
 8005b28:	d0ef      	beq.n	8005b0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b2a:	4b27      	ldr	r3, [pc, #156]	@ (8005bc8 <xPortStartScheduler+0x138>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f1c3 0307 	rsb	r3, r3, #7
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d00b      	beq.n	8005b4e <xPortStartScheduler+0xbe>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	60bb      	str	r3, [r7, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	e7fd      	b.n	8005b4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc8 <xPortStartScheduler+0x138>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc8 <xPortStartScheduler+0x138>)
 8005b56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b58:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc8 <xPortStartScheduler+0x138>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b60:	4a19      	ldr	r2, [pc, #100]	@ (8005bc8 <xPortStartScheduler+0x138>)
 8005b62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b6c:	4b17      	ldr	r3, [pc, #92]	@ (8005bcc <xPortStartScheduler+0x13c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a16      	ldr	r2, [pc, #88]	@ (8005bcc <xPortStartScheduler+0x13c>)
 8005b72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b78:	4b14      	ldr	r3, [pc, #80]	@ (8005bcc <xPortStartScheduler+0x13c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	@ (8005bcc <xPortStartScheduler+0x13c>)
 8005b7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b84:	f000 f9a6 	bl	8005ed4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b88:	4b11      	ldr	r3, [pc, #68]	@ (8005bd0 <xPortStartScheduler+0x140>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b8e:	f000 f9dd 	bl	8005f4c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b92:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <xPortStartScheduler+0x144>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd4 <xPortStartScheduler+0x144>)
 8005b98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b9e:	f7ff ff63 	bl	8005a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ba2:	f7fe fe53 	bl	800484c <vTaskSwitchContext>
	prvTaskExitError();
 8005ba6:	f7ff ff19 	bl	80059dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	e000ed00 	.word	0xe000ed00
 8005bb8:	410fc271 	.word	0x410fc271
 8005bbc:	410fc270 	.word	0x410fc270
 8005bc0:	e000e400 	.word	0xe000e400
 8005bc4:	20000f84 	.word	0x20000f84
 8005bc8:	20000f88 	.word	0x20000f88
 8005bcc:	e000ed20 	.word	0xe000ed20
 8005bd0:	20000010 	.word	0x20000010
 8005bd4:	e000ef34 	.word	0xe000ef34

08005bd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	607b      	str	r3, [r7, #4]
}
 8005bf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bf2:	4b10      	ldr	r3, [pc, #64]	@ (8005c34 <vPortEnterCritical+0x5c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8005c34 <vPortEnterCritical+0x5c>)
 8005bfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <vPortEnterCritical+0x5c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d110      	bne.n	8005c26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c04:	4b0c      	ldr	r3, [pc, #48]	@ (8005c38 <vPortEnterCritical+0x60>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <vPortEnterCritical+0x4e>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	603b      	str	r3, [r7, #0]
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	e7fd      	b.n	8005c22 <vPortEnterCritical+0x4a>
	}
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20000010 	.word	0x20000010
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c42:	4b12      	ldr	r3, [pc, #72]	@ (8005c8c <vPortExitCritical+0x50>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <vPortExitCritical+0x26>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	607b      	str	r3, [r7, #4]
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	e7fd      	b.n	8005c5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c62:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <vPortExitCritical+0x50>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	4a08      	ldr	r2, [pc, #32]	@ (8005c8c <vPortExitCritical+0x50>)
 8005c6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c6c:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <vPortExitCritical+0x50>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <vPortExitCritical+0x44>
 8005c74:	2300      	movs	r3, #0
 8005c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	20000010 	.word	0x20000010

08005c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c90:	f3ef 8009 	mrs	r0, PSP
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <pxCurrentTCBConst>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	f01e 0f10 	tst.w	lr, #16
 8005ca0:	bf08      	it	eq
 8005ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	6010      	str	r0, [r2, #0]
 8005cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005cb4:	f380 8811 	msr	BASEPRI, r0
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f7fe fdc4 	bl	800484c <vTaskSwitchContext>
 8005cc4:	f04f 0000 	mov.w	r0, #0
 8005cc8:	f380 8811 	msr	BASEPRI, r0
 8005ccc:	bc09      	pop	{r0, r3}
 8005cce:	6819      	ldr	r1, [r3, #0]
 8005cd0:	6808      	ldr	r0, [r1, #0]
 8005cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd6:	f01e 0f10 	tst.w	lr, #16
 8005cda:	bf08      	it	eq
 8005cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ce0:	f380 8809 	msr	PSP, r0
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	f3af 8000 	nop.w

08005cf0 <pxCurrentTCBConst>:
 8005cf0:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop

08005cf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	607b      	str	r3, [r7, #4]
}
 8005d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d12:	f7fe fce1 	bl	80046d8 <xTaskIncrementTick>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d1c:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <xPortSysTickHandler+0x40>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	2300      	movs	r3, #0
 8005d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f383 8811 	msr	BASEPRI, r3
}
 8005d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8005d44:	4b5d      	ldr	r3, [pc, #372]	@ (8005ebc <vPortSuppressTicksAndSleep+0x180>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d902      	bls.n	8005d54 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8005d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005ebc <vPortSuppressTicksAndSleep+0x180>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8005d54:	4b5a      	ldr	r3, [pc, #360]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a59      	ldr	r2, [pc, #356]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8005d60:	4b58      	ldr	r3, [pc, #352]	@ (8005ec4 <vPortSuppressTicksAndSleep+0x188>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4957      	ldr	r1, [pc, #348]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005d6a:	6809      	ldr	r1, [r1, #0]
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	4413      	add	r3, r2
 8005d72:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8005d74:	4b55      	ldr	r3, [pc, #340]	@ (8005ecc <vPortSuppressTicksAndSleep+0x190>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d904      	bls.n	8005d88 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8005d7e:	4b53      	ldr	r3, [pc, #332]	@ (8005ecc <vPortSuppressTicksAndSleep+0x190>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8005d88:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8005d8a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8005d8e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8005d92:	f7fe ff37 	bl	8004c04 <eTaskConfirmSleepModeStatus>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d110      	bne.n	8005dbe <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8005d9c:	4b49      	ldr	r3, [pc, #292]	@ (8005ec4 <vPortSuppressTicksAndSleep+0x188>)
 8005d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8005ed0 <vPortSuppressTicksAndSleep+0x194>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005da4:	4b46      	ldr	r3, [pc, #280]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a45      	ldr	r2, [pc, #276]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8005db0:	4b45      	ldr	r3, [pc, #276]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a46      	ldr	r2, [pc, #280]	@ (8005ed0 <vPortSuppressTicksAndSleep+0x194>)
 8005db6:	3b01      	subs	r3, #1
 8005db8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8005dba:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8005dbc:	e079      	b.n	8005eb2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8005dbe:	4a44      	ldr	r2, [pc, #272]	@ (8005ed0 <vPortSuppressTicksAndSleep+0x194>)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ec4 <vPortSuppressTicksAndSleep+0x188>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005dca:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3c      	ldr	r2, [pc, #240]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8005dda:	2300      	movs	r3, #0
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	6938      	ldr	r0, [r7, #16]
 8005de0:	f7fa fbce 	bl	8000580 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8005dea:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8005dee:	bf30      	wfi
				__asm volatile( "isb" );
 8005df0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7fa fbcd 	bl	8000594 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8005dfa:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8005dfc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8005e00:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8005e04:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8005e06:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8005e0a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8005e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005e10:	2206      	movs	r2, #6
 8005e12:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8005e14:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01d      	beq.n	8005e5c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8005e20:	4b29      	ldr	r3, [pc, #164]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b27      	ldr	r3, [pc, #156]	@ (8005ec4 <vPortSuppressTicksAndSleep+0x188>)
 8005e26:	6819      	ldr	r1, [r3, #0]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	1acb      	subs	r3, r1, r3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8005e32:	4b26      	ldr	r3, [pc, #152]	@ (8005ecc <vPortSuppressTicksAndSleep+0x190>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d304      	bcc.n	8005e46 <vPortSuppressTicksAndSleep+0x10a>
 8005e3c:	4b22      	ldr	r3, [pc, #136]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d903      	bls.n	8005e4e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8005e46:	4b20      	ldr	r3, [pc, #128]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8005e4e:	4a20      	ldr	r2, [pc, #128]	@ (8005ed0 <vPortSuppressTicksAndSleep+0x194>)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e018      	b.n	8005e8e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	fb03 f202 	mul.w	r2, r3, r2
 8005e66:	4b17      	ldr	r3, [pc, #92]	@ (8005ec4 <vPortSuppressTicksAndSleep+0x188>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8005e6e:	4b16      	ldr	r3, [pc, #88]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	4a12      	ldr	r2, [pc, #72]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	fb03 f202 	mul.w	r2, r3, r2
 8005e86:	4912      	ldr	r1, [pc, #72]	@ (8005ed0 <vPortSuppressTicksAndSleep+0x194>)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec4 <vPortSuppressTicksAndSleep+0x188>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005e94:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a09      	ldr	r2, [pc, #36]	@ (8005ec0 <vPortSuppressTicksAndSleep+0x184>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8005ea0:	69b8      	ldr	r0, [r7, #24]
 8005ea2:	f7fe fbf1 	bl	8004688 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8005ea6:	4b08      	ldr	r3, [pc, #32]	@ (8005ec8 <vPortSuppressTicksAndSleep+0x18c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a09      	ldr	r2, [pc, #36]	@ (8005ed0 <vPortSuppressTicksAndSleep+0x194>)
 8005eac:	3b01      	subs	r3, #1
 8005eae:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8005eb0:	b662      	cpsie	i
	}
 8005eb2:	bf00      	nop
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000f7c 	.word	0x20000f7c
 8005ec0:	e000e010 	.word	0xe000e010
 8005ec4:	e000e018 	.word	0xe000e018
 8005ec8:	20000f78 	.word	0x20000f78
 8005ecc:	20000f80 	.word	0x20000f80
 8005ed0:	e000e014 	.word	0xe000e014

08005ed4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8005ed8:	4b14      	ldr	r3, [pc, #80]	@ (8005f2c <vPortSetupTimerInterrupt+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a14      	ldr	r2, [pc, #80]	@ (8005f30 <vPortSetupTimerInterrupt+0x5c>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	099b      	lsrs	r3, r3, #6
 8005ee4:	4a13      	ldr	r2, [pc, #76]	@ (8005f34 <vPortSetupTimerInterrupt+0x60>)
 8005ee6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8005ee8:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <vPortSetupTimerInterrupt+0x60>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8005ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef4:	4a10      	ldr	r2, [pc, #64]	@ (8005f38 <vPortSetupTimerInterrupt+0x64>)
 8005ef6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8005ef8:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <vPortSetupTimerInterrupt+0x68>)
 8005efa:	222d      	movs	r2, #45	@ 0x2d
 8005efc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005efe:	4b10      	ldr	r3, [pc, #64]	@ (8005f40 <vPortSetupTimerInterrupt+0x6c>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f04:	4b0f      	ldr	r3, [pc, #60]	@ (8005f44 <vPortSetupTimerInterrupt+0x70>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f0a:	4b08      	ldr	r3, [pc, #32]	@ (8005f2c <vPortSetupTimerInterrupt+0x58>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a08      	ldr	r2, [pc, #32]	@ (8005f30 <vPortSetupTimerInterrupt+0x5c>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	099b      	lsrs	r3, r3, #6
 8005f16:	4a0c      	ldr	r2, [pc, #48]	@ (8005f48 <vPortSetupTimerInterrupt+0x74>)
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f1c:	4b08      	ldr	r3, [pc, #32]	@ (8005f40 <vPortSetupTimerInterrupt+0x6c>)
 8005f1e:	2207      	movs	r2, #7
 8005f20:	601a      	str	r2, [r3, #0]
}
 8005f22:	bf00      	nop
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	20000004 	.word	0x20000004
 8005f30:	10624dd3 	.word	0x10624dd3
 8005f34:	20000f78 	.word	0x20000f78
 8005f38:	20000f7c 	.word	0x20000f7c
 8005f3c:	20000f80 	.word	0x20000f80
 8005f40:	e000e010 	.word	0xe000e010
 8005f44:	e000e018 	.word	0xe000e018
 8005f48:	e000e014 	.word	0xe000e014

08005f4c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f4c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005f5c <vPortEnableVFP+0x10>
 8005f50:	6801      	ldr	r1, [r0, #0]
 8005f52:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005f56:	6001      	str	r1, [r0, #0]
 8005f58:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f5a:	bf00      	nop
 8005f5c:	e000ed88 	.word	0xe000ed88

08005f60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f66:	f3ef 8305 	mrs	r3, IPSR
 8005f6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b0f      	cmp	r3, #15
 8005f70:	d915      	bls.n	8005f9e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f72:	4a18      	ldr	r2, [pc, #96]	@ (8005fd4 <vPortValidateInterruptPriority+0x74>)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f7c:	4b16      	ldr	r3, [pc, #88]	@ (8005fd8 <vPortValidateInterruptPriority+0x78>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	7afa      	ldrb	r2, [r7, #11]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d20b      	bcs.n	8005f9e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	607b      	str	r3, [r7, #4]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005fdc <vPortValidateInterruptPriority+0x7c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe0 <vPortValidateInterruptPriority+0x80>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d90b      	bls.n	8005fc6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	603b      	str	r3, [r7, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	e7fd      	b.n	8005fc2 <vPortValidateInterruptPriority+0x62>
	}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	e000e3f0 	.word	0xe000e3f0
 8005fd8:	20000f84 	.word	0x20000f84
 8005fdc:	e000ed0c 	.word	0xe000ed0c
 8005fe0:	20000f88 	.word	0x20000f88

08005fe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	@ 0x28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ff0:	f7fe f9c8 	bl	8004384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8006168 <pvPortMalloc+0x184>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ffc:	f000 f924 	bl	8006248 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006000:	4b5a      	ldr	r3, [pc, #360]	@ (800616c <pvPortMalloc+0x188>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 8095 	bne.w	8006138 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01e      	beq.n	8006052 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006014:	2208      	movs	r2, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b00      	cmp	r3, #0
 8006024:	d015      	beq.n	8006052 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f023 0307 	bic.w	r3, r3, #7
 800602c:	3308      	adds	r3, #8
 800602e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <pvPortMalloc+0x6e>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	617b      	str	r3, [r7, #20]
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d06f      	beq.n	8006138 <pvPortMalloc+0x154>
 8006058:	4b45      	ldr	r3, [pc, #276]	@ (8006170 <pvPortMalloc+0x18c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d86a      	bhi.n	8006138 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006062:	4b44      	ldr	r3, [pc, #272]	@ (8006174 <pvPortMalloc+0x190>)
 8006064:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006066:	4b43      	ldr	r3, [pc, #268]	@ (8006174 <pvPortMalloc+0x190>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800606c:	e004      	b.n	8006078 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	429a      	cmp	r2, r3
 8006080:	d903      	bls.n	800608a <pvPortMalloc+0xa6>
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f1      	bne.n	800606e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800608a:	4b37      	ldr	r3, [pc, #220]	@ (8006168 <pvPortMalloc+0x184>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006090:	429a      	cmp	r2, r3
 8006092:	d051      	beq.n	8006138 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2208      	movs	r2, #8
 800609a:	4413      	add	r3, r2
 800609c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	1ad2      	subs	r2, r2, r3
 80060ae:	2308      	movs	r3, #8
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d920      	bls.n	80060f8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4413      	add	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <pvPortMalloc+0xfc>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	613b      	str	r3, [r7, #16]
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	e7fd      	b.n	80060dc <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060f2:	69b8      	ldr	r0, [r7, #24]
 80060f4:	f000 f90a 	bl	800630c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <pvPortMalloc+0x18c>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <pvPortMalloc+0x18c>)
 8006104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006106:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <pvPortMalloc+0x18c>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <pvPortMalloc+0x194>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d203      	bcs.n	800611a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006112:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <pvPortMalloc+0x18c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	@ (8006178 <pvPortMalloc+0x194>)
 8006118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b13      	ldr	r3, [pc, #76]	@ (800616c <pvPortMalloc+0x188>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	431a      	orrs	r2, r3
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800612e:	4b13      	ldr	r3, [pc, #76]	@ (800617c <pvPortMalloc+0x198>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a11      	ldr	r2, [pc, #68]	@ (800617c <pvPortMalloc+0x198>)
 8006136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006138:	f7fe f96a 	bl	8004410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <pvPortMalloc+0x17a>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <pvPortMalloc+0x176>
	return pvReturn;
 800615e:	69fb      	ldr	r3, [r7, #28]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3728      	adds	r7, #40	@ 0x28
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20004b94 	.word	0x20004b94
 800616c:	20004ba8 	.word	0x20004ba8
 8006170:	20004b98 	.word	0x20004b98
 8006174:	20004b8c 	.word	0x20004b8c
 8006178:	20004b9c 	.word	0x20004b9c
 800617c:	20004ba0 	.word	0x20004ba0

08006180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04f      	beq.n	8006232 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006192:	2308      	movs	r3, #8
 8006194:	425b      	negs	r3, r3
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4b25      	ldr	r3, [pc, #148]	@ (800623c <vPortFree+0xbc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <vPortFree+0x46>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60fb      	str	r3, [r7, #12]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <vPortFree+0x66>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60bb      	str	r3, [r7, #8]
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	4b14      	ldr	r3, [pc, #80]	@ (800623c <vPortFree+0xbc>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01e      	beq.n	8006232 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d11a      	bne.n	8006232 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	4b0e      	ldr	r3, [pc, #56]	@ (800623c <vPortFree+0xbc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	43db      	mvns	r3, r3
 8006206:	401a      	ands	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800620c:	f7fe f8ba 	bl	8004384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <vPortFree+0xc0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4413      	add	r3, r2
 800621a:	4a09      	ldr	r2, [pc, #36]	@ (8006240 <vPortFree+0xc0>)
 800621c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800621e:	6938      	ldr	r0, [r7, #16]
 8006220:	f000 f874 	bl	800630c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006224:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <vPortFree+0xc4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	4a06      	ldr	r2, [pc, #24]	@ (8006244 <vPortFree+0xc4>)
 800622c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800622e:	f7fe f8ef 	bl	8004410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006232:	bf00      	nop
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20004ba8 	.word	0x20004ba8
 8006240:	20004b98 	.word	0x20004b98
 8006244:	20004ba4 	.word	0x20004ba4

08006248 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800624e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006252:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006254:	4b27      	ldr	r3, [pc, #156]	@ (80062f4 <prvHeapInit+0xac>)
 8006256:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3307      	adds	r3, #7
 8006266:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	4a1f      	ldr	r2, [pc, #124]	@ (80062f4 <prvHeapInit+0xac>)
 8006278:	4413      	add	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006280:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <prvHeapInit+0xb0>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006286:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <prvHeapInit+0xb0>)
 8006288:	2200      	movs	r2, #0
 800628a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4413      	add	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006294:	2208      	movs	r2, #8
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0307 	bic.w	r3, r3, #7
 80062a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <prvHeapInit+0xb4>)
 80062a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062aa:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <prvHeapInit+0xb4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062b2:	4b12      	ldr	r3, [pc, #72]	@ (80062fc <prvHeapInit+0xb4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062c8:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <prvHeapInit+0xb4>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006300 <prvHeapInit+0xb8>)
 80062d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4a09      	ldr	r2, [pc, #36]	@ (8006304 <prvHeapInit+0xbc>)
 80062de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062e0:	4b09      	ldr	r3, [pc, #36]	@ (8006308 <prvHeapInit+0xc0>)
 80062e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062e6:	601a      	str	r2, [r3, #0]
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	20000f8c 	.word	0x20000f8c
 80062f8:	20004b8c 	.word	0x20004b8c
 80062fc:	20004b94 	.word	0x20004b94
 8006300:	20004b9c 	.word	0x20004b9c
 8006304:	20004b98 	.word	0x20004b98
 8006308:	20004ba8 	.word	0x20004ba8

0800630c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006314:	4b28      	ldr	r3, [pc, #160]	@ (80063b8 <prvInsertBlockIntoFreeList+0xac>)
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	e002      	b.n	8006320 <prvInsertBlockIntoFreeList+0x14>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d8f7      	bhi.n	800631a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	429a      	cmp	r2, r3
 800633a:	d108      	bne.n	800634e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	441a      	add	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	441a      	add	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d118      	bne.n	8006394 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b15      	ldr	r3, [pc, #84]	@ (80063bc <prvInsertBlockIntoFreeList+0xb0>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d00d      	beq.n	800638a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	441a      	add	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e008      	b.n	800639c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800638a:	4b0c      	ldr	r3, [pc, #48]	@ (80063bc <prvInsertBlockIntoFreeList+0xb0>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e003      	b.n	800639c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d002      	beq.n	80063aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20004b8c 	.word	0x20004b8c
 80063bc:	20004b94 	.word	0x20004b94

080063c0 <siprintf>:
 80063c0:	b40e      	push	{r1, r2, r3}
 80063c2:	b500      	push	{lr}
 80063c4:	b09c      	sub	sp, #112	@ 0x70
 80063c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80063c8:	9002      	str	r0, [sp, #8]
 80063ca:	9006      	str	r0, [sp, #24]
 80063cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063d0:	4809      	ldr	r0, [pc, #36]	@ (80063f8 <siprintf+0x38>)
 80063d2:	9107      	str	r1, [sp, #28]
 80063d4:	9104      	str	r1, [sp, #16]
 80063d6:	4909      	ldr	r1, [pc, #36]	@ (80063fc <siprintf+0x3c>)
 80063d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063dc:	9105      	str	r1, [sp, #20]
 80063de:	6800      	ldr	r0, [r0, #0]
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	a902      	add	r1, sp, #8
 80063e4:	f000 f8b2 	bl	800654c <_svfiprintf_r>
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	b01c      	add	sp, #112	@ 0x70
 80063f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063f4:	b003      	add	sp, #12
 80063f6:	4770      	bx	lr
 80063f8:	20000014 	.word	0x20000014
 80063fc:	ffff0208 	.word	0xffff0208

08006400 <memset>:
 8006400:	4402      	add	r2, r0
 8006402:	4603      	mov	r3, r0
 8006404:	4293      	cmp	r3, r2
 8006406:	d100      	bne.n	800640a <memset+0xa>
 8006408:	4770      	bx	lr
 800640a:	f803 1b01 	strb.w	r1, [r3], #1
 800640e:	e7f9      	b.n	8006404 <memset+0x4>

08006410 <__errno>:
 8006410:	4b01      	ldr	r3, [pc, #4]	@ (8006418 <__errno+0x8>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000014 	.word	0x20000014

0800641c <__libc_init_array>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	4d0d      	ldr	r5, [pc, #52]	@ (8006454 <__libc_init_array+0x38>)
 8006420:	4c0d      	ldr	r4, [pc, #52]	@ (8006458 <__libc_init_array+0x3c>)
 8006422:	1b64      	subs	r4, r4, r5
 8006424:	10a4      	asrs	r4, r4, #2
 8006426:	2600      	movs	r6, #0
 8006428:	42a6      	cmp	r6, r4
 800642a:	d109      	bne.n	8006440 <__libc_init_array+0x24>
 800642c:	4d0b      	ldr	r5, [pc, #44]	@ (800645c <__libc_init_array+0x40>)
 800642e:	4c0c      	ldr	r4, [pc, #48]	@ (8006460 <__libc_init_array+0x44>)
 8006430:	f000 fc6e 	bl	8006d10 <_init>
 8006434:	1b64      	subs	r4, r4, r5
 8006436:	10a4      	asrs	r4, r4, #2
 8006438:	2600      	movs	r6, #0
 800643a:	42a6      	cmp	r6, r4
 800643c:	d105      	bne.n	800644a <__libc_init_array+0x2e>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	f855 3b04 	ldr.w	r3, [r5], #4
 8006444:	4798      	blx	r3
 8006446:	3601      	adds	r6, #1
 8006448:	e7ee      	b.n	8006428 <__libc_init_array+0xc>
 800644a:	f855 3b04 	ldr.w	r3, [r5], #4
 800644e:	4798      	blx	r3
 8006450:	3601      	adds	r6, #1
 8006452:	e7f2      	b.n	800643a <__libc_init_array+0x1e>
 8006454:	08006e28 	.word	0x08006e28
 8006458:	08006e28 	.word	0x08006e28
 800645c:	08006e28 	.word	0x08006e28
 8006460:	08006e2c 	.word	0x08006e2c

08006464 <__retarget_lock_acquire_recursive>:
 8006464:	4770      	bx	lr

08006466 <__retarget_lock_release_recursive>:
 8006466:	4770      	bx	lr

08006468 <memcpy>:
 8006468:	440a      	add	r2, r1
 800646a:	4291      	cmp	r1, r2
 800646c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006470:	d100      	bne.n	8006474 <memcpy+0xc>
 8006472:	4770      	bx	lr
 8006474:	b510      	push	{r4, lr}
 8006476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800647a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800647e:	4291      	cmp	r1, r2
 8006480:	d1f9      	bne.n	8006476 <memcpy+0xe>
 8006482:	bd10      	pop	{r4, pc}

08006484 <strcpy>:
 8006484:	4603      	mov	r3, r0
 8006486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800648a:	f803 2b01 	strb.w	r2, [r3], #1
 800648e:	2a00      	cmp	r2, #0
 8006490:	d1f9      	bne.n	8006486 <strcpy+0x2>
 8006492:	4770      	bx	lr

08006494 <__ssputs_r>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	688e      	ldr	r6, [r1, #8]
 800649a:	461f      	mov	r7, r3
 800649c:	42be      	cmp	r6, r7
 800649e:	680b      	ldr	r3, [r1, #0]
 80064a0:	4682      	mov	sl, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	4690      	mov	r8, r2
 80064a6:	d82d      	bhi.n	8006504 <__ssputs_r+0x70>
 80064a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064b0:	d026      	beq.n	8006500 <__ssputs_r+0x6c>
 80064b2:	6965      	ldr	r5, [r4, #20]
 80064b4:	6909      	ldr	r1, [r1, #16]
 80064b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064ba:	eba3 0901 	sub.w	r9, r3, r1
 80064be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064c2:	1c7b      	adds	r3, r7, #1
 80064c4:	444b      	add	r3, r9
 80064c6:	106d      	asrs	r5, r5, #1
 80064c8:	429d      	cmp	r5, r3
 80064ca:	bf38      	it	cc
 80064cc:	461d      	movcc	r5, r3
 80064ce:	0553      	lsls	r3, r2, #21
 80064d0:	d527      	bpl.n	8006522 <__ssputs_r+0x8e>
 80064d2:	4629      	mov	r1, r5
 80064d4:	f000 f958 	bl	8006788 <_malloc_r>
 80064d8:	4606      	mov	r6, r0
 80064da:	b360      	cbz	r0, 8006536 <__ssputs_r+0xa2>
 80064dc:	6921      	ldr	r1, [r4, #16]
 80064de:	464a      	mov	r2, r9
 80064e0:	f7ff ffc2 	bl	8006468 <memcpy>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	6126      	str	r6, [r4, #16]
 80064f2:	6165      	str	r5, [r4, #20]
 80064f4:	444e      	add	r6, r9
 80064f6:	eba5 0509 	sub.w	r5, r5, r9
 80064fa:	6026      	str	r6, [r4, #0]
 80064fc:	60a5      	str	r5, [r4, #8]
 80064fe:	463e      	mov	r6, r7
 8006500:	42be      	cmp	r6, r7
 8006502:	d900      	bls.n	8006506 <__ssputs_r+0x72>
 8006504:	463e      	mov	r6, r7
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	4632      	mov	r2, r6
 800650a:	4641      	mov	r1, r8
 800650c:	f000 fb84 	bl	8006c18 <memmove>
 8006510:	68a3      	ldr	r3, [r4, #8]
 8006512:	1b9b      	subs	r3, r3, r6
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	4433      	add	r3, r6
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	2000      	movs	r0, #0
 800651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006522:	462a      	mov	r2, r5
 8006524:	f000 fb4a 	bl	8006bbc <_realloc_r>
 8006528:	4606      	mov	r6, r0
 800652a:	2800      	cmp	r0, #0
 800652c:	d1e0      	bne.n	80064f0 <__ssputs_r+0x5c>
 800652e:	6921      	ldr	r1, [r4, #16]
 8006530:	4650      	mov	r0, sl
 8006532:	f000 fb9b 	bl	8006c6c <_free_r>
 8006536:	230c      	movs	r3, #12
 8006538:	f8ca 3000 	str.w	r3, [sl]
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006548:	e7e9      	b.n	800651e <__ssputs_r+0x8a>
	...

0800654c <_svfiprintf_r>:
 800654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006550:	4698      	mov	r8, r3
 8006552:	898b      	ldrh	r3, [r1, #12]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	b09d      	sub	sp, #116	@ 0x74
 8006558:	4607      	mov	r7, r0
 800655a:	460d      	mov	r5, r1
 800655c:	4614      	mov	r4, r2
 800655e:	d510      	bpl.n	8006582 <_svfiprintf_r+0x36>
 8006560:	690b      	ldr	r3, [r1, #16]
 8006562:	b973      	cbnz	r3, 8006582 <_svfiprintf_r+0x36>
 8006564:	2140      	movs	r1, #64	@ 0x40
 8006566:	f000 f90f 	bl	8006788 <_malloc_r>
 800656a:	6028      	str	r0, [r5, #0]
 800656c:	6128      	str	r0, [r5, #16]
 800656e:	b930      	cbnz	r0, 800657e <_svfiprintf_r+0x32>
 8006570:	230c      	movs	r3, #12
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006578:	b01d      	add	sp, #116	@ 0x74
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657e:	2340      	movs	r3, #64	@ 0x40
 8006580:	616b      	str	r3, [r5, #20]
 8006582:	2300      	movs	r3, #0
 8006584:	9309      	str	r3, [sp, #36]	@ 0x24
 8006586:	2320      	movs	r3, #32
 8006588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800658c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006590:	2330      	movs	r3, #48	@ 0x30
 8006592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006730 <_svfiprintf_r+0x1e4>
 8006596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800659a:	f04f 0901 	mov.w	r9, #1
 800659e:	4623      	mov	r3, r4
 80065a0:	469a      	mov	sl, r3
 80065a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a6:	b10a      	cbz	r2, 80065ac <_svfiprintf_r+0x60>
 80065a8:	2a25      	cmp	r2, #37	@ 0x25
 80065aa:	d1f9      	bne.n	80065a0 <_svfiprintf_r+0x54>
 80065ac:	ebba 0b04 	subs.w	fp, sl, r4
 80065b0:	d00b      	beq.n	80065ca <_svfiprintf_r+0x7e>
 80065b2:	465b      	mov	r3, fp
 80065b4:	4622      	mov	r2, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff ff6b 	bl	8006494 <__ssputs_r>
 80065be:	3001      	adds	r0, #1
 80065c0:	f000 80a7 	beq.w	8006712 <_svfiprintf_r+0x1c6>
 80065c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065c6:	445a      	add	r2, fp
 80065c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ca:	f89a 3000 	ldrb.w	r3, [sl]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 809f 	beq.w	8006712 <_svfiprintf_r+0x1c6>
 80065d4:	2300      	movs	r3, #0
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065de:	f10a 0a01 	add.w	sl, sl, #1
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80065ec:	4654      	mov	r4, sl
 80065ee:	2205      	movs	r2, #5
 80065f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f4:	484e      	ldr	r0, [pc, #312]	@ (8006730 <_svfiprintf_r+0x1e4>)
 80065f6:	f7f9 fdfb 	bl	80001f0 <memchr>
 80065fa:	9a04      	ldr	r2, [sp, #16]
 80065fc:	b9d8      	cbnz	r0, 8006636 <_svfiprintf_r+0xea>
 80065fe:	06d0      	lsls	r0, r2, #27
 8006600:	bf44      	itt	mi
 8006602:	2320      	movmi	r3, #32
 8006604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006608:	0711      	lsls	r1, r2, #28
 800660a:	bf44      	itt	mi
 800660c:	232b      	movmi	r3, #43	@ 0x2b
 800660e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006612:	f89a 3000 	ldrb.w	r3, [sl]
 8006616:	2b2a      	cmp	r3, #42	@ 0x2a
 8006618:	d015      	beq.n	8006646 <_svfiprintf_r+0xfa>
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	4654      	mov	r4, sl
 800661e:	2000      	movs	r0, #0
 8006620:	f04f 0c0a 	mov.w	ip, #10
 8006624:	4621      	mov	r1, r4
 8006626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662a:	3b30      	subs	r3, #48	@ 0x30
 800662c:	2b09      	cmp	r3, #9
 800662e:	d94b      	bls.n	80066c8 <_svfiprintf_r+0x17c>
 8006630:	b1b0      	cbz	r0, 8006660 <_svfiprintf_r+0x114>
 8006632:	9207      	str	r2, [sp, #28]
 8006634:	e014      	b.n	8006660 <_svfiprintf_r+0x114>
 8006636:	eba0 0308 	sub.w	r3, r0, r8
 800663a:	fa09 f303 	lsl.w	r3, r9, r3
 800663e:	4313      	orrs	r3, r2
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	46a2      	mov	sl, r4
 8006644:	e7d2      	b.n	80065ec <_svfiprintf_r+0xa0>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	1d19      	adds	r1, r3, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	9103      	str	r1, [sp, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfbb      	ittet	lt
 8006652:	425b      	neglt	r3, r3
 8006654:	f042 0202 	orrlt.w	r2, r2, #2
 8006658:	9307      	strge	r3, [sp, #28]
 800665a:	9307      	strlt	r3, [sp, #28]
 800665c:	bfb8      	it	lt
 800665e:	9204      	strlt	r2, [sp, #16]
 8006660:	7823      	ldrb	r3, [r4, #0]
 8006662:	2b2e      	cmp	r3, #46	@ 0x2e
 8006664:	d10a      	bne.n	800667c <_svfiprintf_r+0x130>
 8006666:	7863      	ldrb	r3, [r4, #1]
 8006668:	2b2a      	cmp	r3, #42	@ 0x2a
 800666a:	d132      	bne.n	80066d2 <_svfiprintf_r+0x186>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	9203      	str	r2, [sp, #12]
 8006674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006678:	3402      	adds	r4, #2
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006740 <_svfiprintf_r+0x1f4>
 8006680:	7821      	ldrb	r1, [r4, #0]
 8006682:	2203      	movs	r2, #3
 8006684:	4650      	mov	r0, sl
 8006686:	f7f9 fdb3 	bl	80001f0 <memchr>
 800668a:	b138      	cbz	r0, 800669c <_svfiprintf_r+0x150>
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	eba0 000a 	sub.w	r0, r0, sl
 8006692:	2240      	movs	r2, #64	@ 0x40
 8006694:	4082      	lsls	r2, r0
 8006696:	4313      	orrs	r3, r2
 8006698:	3401      	adds	r4, #1
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	4824      	ldr	r0, [pc, #144]	@ (8006734 <_svfiprintf_r+0x1e8>)
 80066a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066a6:	2206      	movs	r2, #6
 80066a8:	f7f9 fda2 	bl	80001f0 <memchr>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d036      	beq.n	800671e <_svfiprintf_r+0x1d2>
 80066b0:	4b21      	ldr	r3, [pc, #132]	@ (8006738 <_svfiprintf_r+0x1ec>)
 80066b2:	bb1b      	cbnz	r3, 80066fc <_svfiprintf_r+0x1b0>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	3307      	adds	r3, #7
 80066b8:	f023 0307 	bic.w	r3, r3, #7
 80066bc:	3308      	adds	r3, #8
 80066be:	9303      	str	r3, [sp, #12]
 80066c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c2:	4433      	add	r3, r6
 80066c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c6:	e76a      	b.n	800659e <_svfiprintf_r+0x52>
 80066c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066cc:	460c      	mov	r4, r1
 80066ce:	2001      	movs	r0, #1
 80066d0:	e7a8      	b.n	8006624 <_svfiprintf_r+0xd8>
 80066d2:	2300      	movs	r3, #0
 80066d4:	3401      	adds	r4, #1
 80066d6:	9305      	str	r3, [sp, #20]
 80066d8:	4619      	mov	r1, r3
 80066da:	f04f 0c0a 	mov.w	ip, #10
 80066de:	4620      	mov	r0, r4
 80066e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e4:	3a30      	subs	r2, #48	@ 0x30
 80066e6:	2a09      	cmp	r2, #9
 80066e8:	d903      	bls.n	80066f2 <_svfiprintf_r+0x1a6>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0c6      	beq.n	800667c <_svfiprintf_r+0x130>
 80066ee:	9105      	str	r1, [sp, #20]
 80066f0:	e7c4      	b.n	800667c <_svfiprintf_r+0x130>
 80066f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f6:	4604      	mov	r4, r0
 80066f8:	2301      	movs	r3, #1
 80066fa:	e7f0      	b.n	80066de <_svfiprintf_r+0x192>
 80066fc:	ab03      	add	r3, sp, #12
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	462a      	mov	r2, r5
 8006702:	4b0e      	ldr	r3, [pc, #56]	@ (800673c <_svfiprintf_r+0x1f0>)
 8006704:	a904      	add	r1, sp, #16
 8006706:	4638      	mov	r0, r7
 8006708:	f3af 8000 	nop.w
 800670c:	1c42      	adds	r2, r0, #1
 800670e:	4606      	mov	r6, r0
 8006710:	d1d6      	bne.n	80066c0 <_svfiprintf_r+0x174>
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	065b      	lsls	r3, r3, #25
 8006716:	f53f af2d 	bmi.w	8006574 <_svfiprintf_r+0x28>
 800671a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800671c:	e72c      	b.n	8006578 <_svfiprintf_r+0x2c>
 800671e:	ab03      	add	r3, sp, #12
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	462a      	mov	r2, r5
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <_svfiprintf_r+0x1f0>)
 8006726:	a904      	add	r1, sp, #16
 8006728:	4638      	mov	r0, r7
 800672a:	f000 f91b 	bl	8006964 <_printf_i>
 800672e:	e7ed      	b.n	800670c <_svfiprintf_r+0x1c0>
 8006730:	08006dec 	.word	0x08006dec
 8006734:	08006df6 	.word	0x08006df6
 8006738:	00000000 	.word	0x00000000
 800673c:	08006495 	.word	0x08006495
 8006740:	08006df2 	.word	0x08006df2

08006744 <sbrk_aligned>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	4e0f      	ldr	r6, [pc, #60]	@ (8006784 <sbrk_aligned+0x40>)
 8006748:	460c      	mov	r4, r1
 800674a:	6831      	ldr	r1, [r6, #0]
 800674c:	4605      	mov	r5, r0
 800674e:	b911      	cbnz	r1, 8006756 <sbrk_aligned+0x12>
 8006750:	f000 fa7c 	bl	8006c4c <_sbrk_r>
 8006754:	6030      	str	r0, [r6, #0]
 8006756:	4621      	mov	r1, r4
 8006758:	4628      	mov	r0, r5
 800675a:	f000 fa77 	bl	8006c4c <_sbrk_r>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	d103      	bne.n	800676a <sbrk_aligned+0x26>
 8006762:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006766:	4620      	mov	r0, r4
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	1cc4      	adds	r4, r0, #3
 800676c:	f024 0403 	bic.w	r4, r4, #3
 8006770:	42a0      	cmp	r0, r4
 8006772:	d0f8      	beq.n	8006766 <sbrk_aligned+0x22>
 8006774:	1a21      	subs	r1, r4, r0
 8006776:	4628      	mov	r0, r5
 8006778:	f000 fa68 	bl	8006c4c <_sbrk_r>
 800677c:	3001      	adds	r0, #1
 800677e:	d1f2      	bne.n	8006766 <sbrk_aligned+0x22>
 8006780:	e7ef      	b.n	8006762 <sbrk_aligned+0x1e>
 8006782:	bf00      	nop
 8006784:	20004ce8 	.word	0x20004ce8

08006788 <_malloc_r>:
 8006788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800678c:	1ccd      	adds	r5, r1, #3
 800678e:	f025 0503 	bic.w	r5, r5, #3
 8006792:	3508      	adds	r5, #8
 8006794:	2d0c      	cmp	r5, #12
 8006796:	bf38      	it	cc
 8006798:	250c      	movcc	r5, #12
 800679a:	2d00      	cmp	r5, #0
 800679c:	4606      	mov	r6, r0
 800679e:	db01      	blt.n	80067a4 <_malloc_r+0x1c>
 80067a0:	42a9      	cmp	r1, r5
 80067a2:	d904      	bls.n	80067ae <_malloc_r+0x26>
 80067a4:	230c      	movs	r3, #12
 80067a6:	6033      	str	r3, [r6, #0]
 80067a8:	2000      	movs	r0, #0
 80067aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006884 <_malloc_r+0xfc>
 80067b2:	f000 f9f7 	bl	8006ba4 <__malloc_lock>
 80067b6:	f8d8 3000 	ldr.w	r3, [r8]
 80067ba:	461c      	mov	r4, r3
 80067bc:	bb44      	cbnz	r4, 8006810 <_malloc_r+0x88>
 80067be:	4629      	mov	r1, r5
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7ff ffbf 	bl	8006744 <sbrk_aligned>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	4604      	mov	r4, r0
 80067ca:	d158      	bne.n	800687e <_malloc_r+0xf6>
 80067cc:	f8d8 4000 	ldr.w	r4, [r8]
 80067d0:	4627      	mov	r7, r4
 80067d2:	2f00      	cmp	r7, #0
 80067d4:	d143      	bne.n	800685e <_malloc_r+0xd6>
 80067d6:	2c00      	cmp	r4, #0
 80067d8:	d04b      	beq.n	8006872 <_malloc_r+0xea>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	4639      	mov	r1, r7
 80067de:	4630      	mov	r0, r6
 80067e0:	eb04 0903 	add.w	r9, r4, r3
 80067e4:	f000 fa32 	bl	8006c4c <_sbrk_r>
 80067e8:	4581      	cmp	r9, r0
 80067ea:	d142      	bne.n	8006872 <_malloc_r+0xea>
 80067ec:	6821      	ldr	r1, [r4, #0]
 80067ee:	1a6d      	subs	r5, r5, r1
 80067f0:	4629      	mov	r1, r5
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7ff ffa6 	bl	8006744 <sbrk_aligned>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d03a      	beq.n	8006872 <_malloc_r+0xea>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	442b      	add	r3, r5
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	f8d8 3000 	ldr.w	r3, [r8]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	bb62      	cbnz	r2, 8006864 <_malloc_r+0xdc>
 800680a:	f8c8 7000 	str.w	r7, [r8]
 800680e:	e00f      	b.n	8006830 <_malloc_r+0xa8>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	1b52      	subs	r2, r2, r5
 8006814:	d420      	bmi.n	8006858 <_malloc_r+0xd0>
 8006816:	2a0b      	cmp	r2, #11
 8006818:	d917      	bls.n	800684a <_malloc_r+0xc2>
 800681a:	1961      	adds	r1, r4, r5
 800681c:	42a3      	cmp	r3, r4
 800681e:	6025      	str	r5, [r4, #0]
 8006820:	bf18      	it	ne
 8006822:	6059      	strne	r1, [r3, #4]
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	bf08      	it	eq
 8006828:	f8c8 1000 	streq.w	r1, [r8]
 800682c:	5162      	str	r2, [r4, r5]
 800682e:	604b      	str	r3, [r1, #4]
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f9bd 	bl	8006bb0 <__malloc_unlock>
 8006836:	f104 000b 	add.w	r0, r4, #11
 800683a:	1d23      	adds	r3, r4, #4
 800683c:	f020 0007 	bic.w	r0, r0, #7
 8006840:	1ac2      	subs	r2, r0, r3
 8006842:	bf1c      	itt	ne
 8006844:	1a1b      	subne	r3, r3, r0
 8006846:	50a3      	strne	r3, [r4, r2]
 8006848:	e7af      	b.n	80067aa <_malloc_r+0x22>
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	42a3      	cmp	r3, r4
 800684e:	bf0c      	ite	eq
 8006850:	f8c8 2000 	streq.w	r2, [r8]
 8006854:	605a      	strne	r2, [r3, #4]
 8006856:	e7eb      	b.n	8006830 <_malloc_r+0xa8>
 8006858:	4623      	mov	r3, r4
 800685a:	6864      	ldr	r4, [r4, #4]
 800685c:	e7ae      	b.n	80067bc <_malloc_r+0x34>
 800685e:	463c      	mov	r4, r7
 8006860:	687f      	ldr	r7, [r7, #4]
 8006862:	e7b6      	b.n	80067d2 <_malloc_r+0x4a>
 8006864:	461a      	mov	r2, r3
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	42a3      	cmp	r3, r4
 800686a:	d1fb      	bne.n	8006864 <_malloc_r+0xdc>
 800686c:	2300      	movs	r3, #0
 800686e:	6053      	str	r3, [r2, #4]
 8006870:	e7de      	b.n	8006830 <_malloc_r+0xa8>
 8006872:	230c      	movs	r3, #12
 8006874:	6033      	str	r3, [r6, #0]
 8006876:	4630      	mov	r0, r6
 8006878:	f000 f99a 	bl	8006bb0 <__malloc_unlock>
 800687c:	e794      	b.n	80067a8 <_malloc_r+0x20>
 800687e:	6005      	str	r5, [r0, #0]
 8006880:	e7d6      	b.n	8006830 <_malloc_r+0xa8>
 8006882:	bf00      	nop
 8006884:	20004cec 	.word	0x20004cec

08006888 <_printf_common>:
 8006888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800688c:	4616      	mov	r6, r2
 800688e:	4698      	mov	r8, r3
 8006890:	688a      	ldr	r2, [r1, #8]
 8006892:	690b      	ldr	r3, [r1, #16]
 8006894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006898:	4293      	cmp	r3, r2
 800689a:	bfb8      	it	lt
 800689c:	4613      	movlt	r3, r2
 800689e:	6033      	str	r3, [r6, #0]
 80068a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068a4:	4607      	mov	r7, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	b10a      	cbz	r2, 80068ae <_printf_common+0x26>
 80068aa:	3301      	adds	r3, #1
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	0699      	lsls	r1, r3, #26
 80068b2:	bf42      	ittt	mi
 80068b4:	6833      	ldrmi	r3, [r6, #0]
 80068b6:	3302      	addmi	r3, #2
 80068b8:	6033      	strmi	r3, [r6, #0]
 80068ba:	6825      	ldr	r5, [r4, #0]
 80068bc:	f015 0506 	ands.w	r5, r5, #6
 80068c0:	d106      	bne.n	80068d0 <_printf_common+0x48>
 80068c2:	f104 0a19 	add.w	sl, r4, #25
 80068c6:	68e3      	ldr	r3, [r4, #12]
 80068c8:	6832      	ldr	r2, [r6, #0]
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	dc26      	bgt.n	800691e <_printf_common+0x96>
 80068d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068d4:	6822      	ldr	r2, [r4, #0]
 80068d6:	3b00      	subs	r3, #0
 80068d8:	bf18      	it	ne
 80068da:	2301      	movne	r3, #1
 80068dc:	0692      	lsls	r2, r2, #26
 80068de:	d42b      	bmi.n	8006938 <_printf_common+0xb0>
 80068e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068e4:	4641      	mov	r1, r8
 80068e6:	4638      	mov	r0, r7
 80068e8:	47c8      	blx	r9
 80068ea:	3001      	adds	r0, #1
 80068ec:	d01e      	beq.n	800692c <_printf_common+0xa4>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	f003 0306 	and.w	r3, r3, #6
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	bf02      	ittt	eq
 80068fa:	68e5      	ldreq	r5, [r4, #12]
 80068fc:	6833      	ldreq	r3, [r6, #0]
 80068fe:	1aed      	subeq	r5, r5, r3
 8006900:	68a3      	ldr	r3, [r4, #8]
 8006902:	bf0c      	ite	eq
 8006904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006908:	2500      	movne	r5, #0
 800690a:	4293      	cmp	r3, r2
 800690c:	bfc4      	itt	gt
 800690e:	1a9b      	subgt	r3, r3, r2
 8006910:	18ed      	addgt	r5, r5, r3
 8006912:	2600      	movs	r6, #0
 8006914:	341a      	adds	r4, #26
 8006916:	42b5      	cmp	r5, r6
 8006918:	d11a      	bne.n	8006950 <_printf_common+0xc8>
 800691a:	2000      	movs	r0, #0
 800691c:	e008      	b.n	8006930 <_printf_common+0xa8>
 800691e:	2301      	movs	r3, #1
 8006920:	4652      	mov	r2, sl
 8006922:	4641      	mov	r1, r8
 8006924:	4638      	mov	r0, r7
 8006926:	47c8      	blx	r9
 8006928:	3001      	adds	r0, #1
 800692a:	d103      	bne.n	8006934 <_printf_common+0xac>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006934:	3501      	adds	r5, #1
 8006936:	e7c6      	b.n	80068c6 <_printf_common+0x3e>
 8006938:	18e1      	adds	r1, r4, r3
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	2030      	movs	r0, #48	@ 0x30
 800693e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006942:	4422      	add	r2, r4
 8006944:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006948:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800694c:	3302      	adds	r3, #2
 800694e:	e7c7      	b.n	80068e0 <_printf_common+0x58>
 8006950:	2301      	movs	r3, #1
 8006952:	4622      	mov	r2, r4
 8006954:	4641      	mov	r1, r8
 8006956:	4638      	mov	r0, r7
 8006958:	47c8      	blx	r9
 800695a:	3001      	adds	r0, #1
 800695c:	d0e6      	beq.n	800692c <_printf_common+0xa4>
 800695e:	3601      	adds	r6, #1
 8006960:	e7d9      	b.n	8006916 <_printf_common+0x8e>
	...

08006964 <_printf_i>:
 8006964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	7e0f      	ldrb	r7, [r1, #24]
 800696a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800696c:	2f78      	cmp	r7, #120	@ 0x78
 800696e:	4691      	mov	r9, r2
 8006970:	4680      	mov	r8, r0
 8006972:	460c      	mov	r4, r1
 8006974:	469a      	mov	sl, r3
 8006976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800697a:	d807      	bhi.n	800698c <_printf_i+0x28>
 800697c:	2f62      	cmp	r7, #98	@ 0x62
 800697e:	d80a      	bhi.n	8006996 <_printf_i+0x32>
 8006980:	2f00      	cmp	r7, #0
 8006982:	f000 80d2 	beq.w	8006b2a <_printf_i+0x1c6>
 8006986:	2f58      	cmp	r7, #88	@ 0x58
 8006988:	f000 80b9 	beq.w	8006afe <_printf_i+0x19a>
 800698c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006994:	e03a      	b.n	8006a0c <_printf_i+0xa8>
 8006996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800699a:	2b15      	cmp	r3, #21
 800699c:	d8f6      	bhi.n	800698c <_printf_i+0x28>
 800699e:	a101      	add	r1, pc, #4	@ (adr r1, 80069a4 <_printf_i+0x40>)
 80069a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	0800698d 	.word	0x0800698d
 80069b0:	0800698d 	.word	0x0800698d
 80069b4:	0800698d 	.word	0x0800698d
 80069b8:	0800698d 	.word	0x0800698d
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	0800698d 	.word	0x0800698d
 80069c4:	0800698d 	.word	0x0800698d
 80069c8:	0800698d 	.word	0x0800698d
 80069cc:	0800698d 	.word	0x0800698d
 80069d0:	08006b11 	.word	0x08006b11
 80069d4:	08006a3b 	.word	0x08006a3b
 80069d8:	08006acb 	.word	0x08006acb
 80069dc:	0800698d 	.word	0x0800698d
 80069e0:	0800698d 	.word	0x0800698d
 80069e4:	08006b33 	.word	0x08006b33
 80069e8:	0800698d 	.word	0x0800698d
 80069ec:	08006a3b 	.word	0x08006a3b
 80069f0:	0800698d 	.word	0x0800698d
 80069f4:	0800698d 	.word	0x0800698d
 80069f8:	08006ad3 	.word	0x08006ad3
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6032      	str	r2, [r6, #0]
 8006a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e09d      	b.n	8006b4c <_printf_i+0x1e8>
 8006a10:	6833      	ldr	r3, [r6, #0]
 8006a12:	6820      	ldr	r0, [r4, #0]
 8006a14:	1d19      	adds	r1, r3, #4
 8006a16:	6031      	str	r1, [r6, #0]
 8006a18:	0606      	lsls	r6, r0, #24
 8006a1a:	d501      	bpl.n	8006a20 <_printf_i+0xbc>
 8006a1c:	681d      	ldr	r5, [r3, #0]
 8006a1e:	e003      	b.n	8006a28 <_printf_i+0xc4>
 8006a20:	0645      	lsls	r5, r0, #25
 8006a22:	d5fb      	bpl.n	8006a1c <_printf_i+0xb8>
 8006a24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	da03      	bge.n	8006a34 <_printf_i+0xd0>
 8006a2c:	232d      	movs	r3, #45	@ 0x2d
 8006a2e:	426d      	negs	r5, r5
 8006a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a34:	4859      	ldr	r0, [pc, #356]	@ (8006b9c <_printf_i+0x238>)
 8006a36:	230a      	movs	r3, #10
 8006a38:	e011      	b.n	8006a5e <_printf_i+0xfa>
 8006a3a:	6821      	ldr	r1, [r4, #0]
 8006a3c:	6833      	ldr	r3, [r6, #0]
 8006a3e:	0608      	lsls	r0, r1, #24
 8006a40:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a44:	d402      	bmi.n	8006a4c <_printf_i+0xe8>
 8006a46:	0649      	lsls	r1, r1, #25
 8006a48:	bf48      	it	mi
 8006a4a:	b2ad      	uxthmi	r5, r5
 8006a4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a4e:	4853      	ldr	r0, [pc, #332]	@ (8006b9c <_printf_i+0x238>)
 8006a50:	6033      	str	r3, [r6, #0]
 8006a52:	bf14      	ite	ne
 8006a54:	230a      	movne	r3, #10
 8006a56:	2308      	moveq	r3, #8
 8006a58:	2100      	movs	r1, #0
 8006a5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a5e:	6866      	ldr	r6, [r4, #4]
 8006a60:	60a6      	str	r6, [r4, #8]
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	bfa2      	ittt	ge
 8006a66:	6821      	ldrge	r1, [r4, #0]
 8006a68:	f021 0104 	bicge.w	r1, r1, #4
 8006a6c:	6021      	strge	r1, [r4, #0]
 8006a6e:	b90d      	cbnz	r5, 8006a74 <_printf_i+0x110>
 8006a70:	2e00      	cmp	r6, #0
 8006a72:	d04b      	beq.n	8006b0c <_printf_i+0x1a8>
 8006a74:	4616      	mov	r6, r2
 8006a76:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a7a:	fb03 5711 	mls	r7, r3, r1, r5
 8006a7e:	5dc7      	ldrb	r7, [r0, r7]
 8006a80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a84:	462f      	mov	r7, r5
 8006a86:	42bb      	cmp	r3, r7
 8006a88:	460d      	mov	r5, r1
 8006a8a:	d9f4      	bls.n	8006a76 <_printf_i+0x112>
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d10b      	bne.n	8006aa8 <_printf_i+0x144>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	07df      	lsls	r7, r3, #31
 8006a94:	d508      	bpl.n	8006aa8 <_printf_i+0x144>
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	6861      	ldr	r1, [r4, #4]
 8006a9a:	4299      	cmp	r1, r3
 8006a9c:	bfde      	ittt	le
 8006a9e:	2330      	movle	r3, #48	@ 0x30
 8006aa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aa4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006aa8:	1b92      	subs	r2, r2, r6
 8006aaa:	6122      	str	r2, [r4, #16]
 8006aac:	f8cd a000 	str.w	sl, [sp]
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	aa03      	add	r2, sp, #12
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	f7ff fee6 	bl	8006888 <_printf_common>
 8006abc:	3001      	adds	r0, #1
 8006abe:	d14a      	bne.n	8006b56 <_printf_i+0x1f2>
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ac4:	b004      	add	sp, #16
 8006ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f043 0320 	orr.w	r3, r3, #32
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	4833      	ldr	r0, [pc, #204]	@ (8006ba0 <_printf_i+0x23c>)
 8006ad4:	2778      	movs	r7, #120	@ 0x78
 8006ad6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	6831      	ldr	r1, [r6, #0]
 8006ade:	061f      	lsls	r7, r3, #24
 8006ae0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ae4:	d402      	bmi.n	8006aec <_printf_i+0x188>
 8006ae6:	065f      	lsls	r7, r3, #25
 8006ae8:	bf48      	it	mi
 8006aea:	b2ad      	uxthmi	r5, r5
 8006aec:	6031      	str	r1, [r6, #0]
 8006aee:	07d9      	lsls	r1, r3, #31
 8006af0:	bf44      	itt	mi
 8006af2:	f043 0320 	orrmi.w	r3, r3, #32
 8006af6:	6023      	strmi	r3, [r4, #0]
 8006af8:	b11d      	cbz	r5, 8006b02 <_printf_i+0x19e>
 8006afa:	2310      	movs	r3, #16
 8006afc:	e7ac      	b.n	8006a58 <_printf_i+0xf4>
 8006afe:	4827      	ldr	r0, [pc, #156]	@ (8006b9c <_printf_i+0x238>)
 8006b00:	e7e9      	b.n	8006ad6 <_printf_i+0x172>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	f023 0320 	bic.w	r3, r3, #32
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	e7f6      	b.n	8006afa <_printf_i+0x196>
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	e7bd      	b.n	8006a8c <_printf_i+0x128>
 8006b10:	6833      	ldr	r3, [r6, #0]
 8006b12:	6825      	ldr	r5, [r4, #0]
 8006b14:	6961      	ldr	r1, [r4, #20]
 8006b16:	1d18      	adds	r0, r3, #4
 8006b18:	6030      	str	r0, [r6, #0]
 8006b1a:	062e      	lsls	r6, r5, #24
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	d501      	bpl.n	8006b24 <_printf_i+0x1c0>
 8006b20:	6019      	str	r1, [r3, #0]
 8006b22:	e002      	b.n	8006b2a <_printf_i+0x1c6>
 8006b24:	0668      	lsls	r0, r5, #25
 8006b26:	d5fb      	bpl.n	8006b20 <_printf_i+0x1bc>
 8006b28:	8019      	strh	r1, [r3, #0]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	4616      	mov	r6, r2
 8006b30:	e7bc      	b.n	8006aac <_printf_i+0x148>
 8006b32:	6833      	ldr	r3, [r6, #0]
 8006b34:	1d1a      	adds	r2, r3, #4
 8006b36:	6032      	str	r2, [r6, #0]
 8006b38:	681e      	ldr	r6, [r3, #0]
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f7f9 fb56 	bl	80001f0 <memchr>
 8006b44:	b108      	cbz	r0, 8006b4a <_printf_i+0x1e6>
 8006b46:	1b80      	subs	r0, r0, r6
 8006b48:	6060      	str	r0, [r4, #4]
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b54:	e7aa      	b.n	8006aac <_printf_i+0x148>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	4632      	mov	r2, r6
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	47d0      	blx	sl
 8006b60:	3001      	adds	r0, #1
 8006b62:	d0ad      	beq.n	8006ac0 <_printf_i+0x15c>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	079b      	lsls	r3, r3, #30
 8006b68:	d413      	bmi.n	8006b92 <_printf_i+0x22e>
 8006b6a:	68e0      	ldr	r0, [r4, #12]
 8006b6c:	9b03      	ldr	r3, [sp, #12]
 8006b6e:	4298      	cmp	r0, r3
 8006b70:	bfb8      	it	lt
 8006b72:	4618      	movlt	r0, r3
 8006b74:	e7a6      	b.n	8006ac4 <_printf_i+0x160>
 8006b76:	2301      	movs	r3, #1
 8006b78:	4632      	mov	r2, r6
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	47d0      	blx	sl
 8006b80:	3001      	adds	r0, #1
 8006b82:	d09d      	beq.n	8006ac0 <_printf_i+0x15c>
 8006b84:	3501      	adds	r5, #1
 8006b86:	68e3      	ldr	r3, [r4, #12]
 8006b88:	9903      	ldr	r1, [sp, #12]
 8006b8a:	1a5b      	subs	r3, r3, r1
 8006b8c:	42ab      	cmp	r3, r5
 8006b8e:	dcf2      	bgt.n	8006b76 <_printf_i+0x212>
 8006b90:	e7eb      	b.n	8006b6a <_printf_i+0x206>
 8006b92:	2500      	movs	r5, #0
 8006b94:	f104 0619 	add.w	r6, r4, #25
 8006b98:	e7f5      	b.n	8006b86 <_printf_i+0x222>
 8006b9a:	bf00      	nop
 8006b9c:	08006dfd 	.word	0x08006dfd
 8006ba0:	08006e0e 	.word	0x08006e0e

08006ba4 <__malloc_lock>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	@ (8006bac <__malloc_lock+0x8>)
 8006ba6:	f7ff bc5d 	b.w	8006464 <__retarget_lock_acquire_recursive>
 8006baa:	bf00      	nop
 8006bac:	20004ce4 	.word	0x20004ce4

08006bb0 <__malloc_unlock>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	@ (8006bb8 <__malloc_unlock+0x8>)
 8006bb2:	f7ff bc58 	b.w	8006466 <__retarget_lock_release_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	20004ce4 	.word	0x20004ce4

08006bbc <_realloc_r>:
 8006bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	4615      	mov	r5, r2
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	b921      	cbnz	r1, 8006bd2 <_realloc_r+0x16>
 8006bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	4611      	mov	r1, r2
 8006bce:	f7ff bddb 	b.w	8006788 <_malloc_r>
 8006bd2:	b92a      	cbnz	r2, 8006be0 <_realloc_r+0x24>
 8006bd4:	f000 f84a 	bl	8006c6c <_free_r>
 8006bd8:	2400      	movs	r4, #0
 8006bda:	4620      	mov	r0, r4
 8006bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be0:	f000 f88e 	bl	8006d00 <_malloc_usable_size_r>
 8006be4:	4285      	cmp	r5, r0
 8006be6:	4606      	mov	r6, r0
 8006be8:	d802      	bhi.n	8006bf0 <_realloc_r+0x34>
 8006bea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006bee:	d8f4      	bhi.n	8006bda <_realloc_r+0x1e>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	f7ff fdc8 	bl	8006788 <_malloc_r>
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d0ec      	beq.n	8006bd8 <_realloc_r+0x1c>
 8006bfe:	42b5      	cmp	r5, r6
 8006c00:	462a      	mov	r2, r5
 8006c02:	4621      	mov	r1, r4
 8006c04:	bf28      	it	cs
 8006c06:	4632      	movcs	r2, r6
 8006c08:	f7ff fc2e 	bl	8006468 <memcpy>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4640      	mov	r0, r8
 8006c10:	f000 f82c 	bl	8006c6c <_free_r>
 8006c14:	463c      	mov	r4, r7
 8006c16:	e7e0      	b.n	8006bda <_realloc_r+0x1e>

08006c18 <memmove>:
 8006c18:	4288      	cmp	r0, r1
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	eb01 0402 	add.w	r4, r1, r2
 8006c20:	d902      	bls.n	8006c28 <memmove+0x10>
 8006c22:	4284      	cmp	r4, r0
 8006c24:	4623      	mov	r3, r4
 8006c26:	d807      	bhi.n	8006c38 <memmove+0x20>
 8006c28:	1e43      	subs	r3, r0, #1
 8006c2a:	42a1      	cmp	r1, r4
 8006c2c:	d008      	beq.n	8006c40 <memmove+0x28>
 8006c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c36:	e7f8      	b.n	8006c2a <memmove+0x12>
 8006c38:	4402      	add	r2, r0
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	428a      	cmp	r2, r1
 8006c3e:	d100      	bne.n	8006c42 <memmove+0x2a>
 8006c40:	bd10      	pop	{r4, pc}
 8006c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c4a:	e7f7      	b.n	8006c3c <memmove+0x24>

08006c4c <_sbrk_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4d06      	ldr	r5, [pc, #24]	@ (8006c68 <_sbrk_r+0x1c>)
 8006c50:	2300      	movs	r3, #0
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	602b      	str	r3, [r5, #0]
 8006c58:	f7f9 fef0 	bl	8000a3c <_sbrk>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_sbrk_r+0x1a>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_sbrk_r+0x1a>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	20004cf0 	.word	0x20004cf0

08006c6c <_free_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4605      	mov	r5, r0
 8006c70:	2900      	cmp	r1, #0
 8006c72:	d041      	beq.n	8006cf8 <_free_r+0x8c>
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f0c      	subs	r4, r1, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfb8      	it	lt
 8006c7e:	18e4      	addlt	r4, r4, r3
 8006c80:	f7ff ff90 	bl	8006ba4 <__malloc_lock>
 8006c84:	4a1d      	ldr	r2, [pc, #116]	@ (8006cfc <_free_r+0x90>)
 8006c86:	6813      	ldr	r3, [r2, #0]
 8006c88:	b933      	cbnz	r3, 8006c98 <_free_r+0x2c>
 8006c8a:	6063      	str	r3, [r4, #4]
 8006c8c:	6014      	str	r4, [r2, #0]
 8006c8e:	4628      	mov	r0, r5
 8006c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c94:	f7ff bf8c 	b.w	8006bb0 <__malloc_unlock>
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	d908      	bls.n	8006cae <_free_r+0x42>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	1821      	adds	r1, r4, r0
 8006ca0:	428b      	cmp	r3, r1
 8006ca2:	bf01      	itttt	eq
 8006ca4:	6819      	ldreq	r1, [r3, #0]
 8006ca6:	685b      	ldreq	r3, [r3, #4]
 8006ca8:	1809      	addeq	r1, r1, r0
 8006caa:	6021      	streq	r1, [r4, #0]
 8006cac:	e7ed      	b.n	8006c8a <_free_r+0x1e>
 8006cae:	461a      	mov	r2, r3
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b10b      	cbz	r3, 8006cb8 <_free_r+0x4c>
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d9fa      	bls.n	8006cae <_free_r+0x42>
 8006cb8:	6811      	ldr	r1, [r2, #0]
 8006cba:	1850      	adds	r0, r2, r1
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d10b      	bne.n	8006cd8 <_free_r+0x6c>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	1850      	adds	r0, r2, r1
 8006cc6:	4283      	cmp	r3, r0
 8006cc8:	6011      	str	r1, [r2, #0]
 8006cca:	d1e0      	bne.n	8006c8e <_free_r+0x22>
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	6053      	str	r3, [r2, #4]
 8006cd2:	4408      	add	r0, r1
 8006cd4:	6010      	str	r0, [r2, #0]
 8006cd6:	e7da      	b.n	8006c8e <_free_r+0x22>
 8006cd8:	d902      	bls.n	8006ce0 <_free_r+0x74>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	602b      	str	r3, [r5, #0]
 8006cde:	e7d6      	b.n	8006c8e <_free_r+0x22>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	1821      	adds	r1, r4, r0
 8006ce4:	428b      	cmp	r3, r1
 8006ce6:	bf04      	itt	eq
 8006ce8:	6819      	ldreq	r1, [r3, #0]
 8006cea:	685b      	ldreq	r3, [r3, #4]
 8006cec:	6063      	str	r3, [r4, #4]
 8006cee:	bf04      	itt	eq
 8006cf0:	1809      	addeq	r1, r1, r0
 8006cf2:	6021      	streq	r1, [r4, #0]
 8006cf4:	6054      	str	r4, [r2, #4]
 8006cf6:	e7ca      	b.n	8006c8e <_free_r+0x22>
 8006cf8:	bd38      	pop	{r3, r4, r5, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20004cec 	.word	0x20004cec

08006d00 <_malloc_usable_size_r>:
 8006d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d04:	1f18      	subs	r0, r3, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bfbc      	itt	lt
 8006d0a:	580b      	ldrlt	r3, [r1, r0]
 8006d0c:	18c0      	addlt	r0, r0, r3
 8006d0e:	4770      	bx	lr

08006d10 <_init>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr

08006d1c <_fini>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	bf00      	nop
 8006d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d22:	bc08      	pop	{r3}
 8006d24:	469e      	mov	lr, r3
 8006d26:	4770      	bx	lr
