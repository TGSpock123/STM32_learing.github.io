ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_hal_rtc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c"
  20              		.section	.text.HAL_RTC_Init,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_RTC_Init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HAL_RTC_Init:
  28              	.LFB134:
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @file    stm32f4xx_hal_rtc.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + RTC Calendar (Time and Date) configuration functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + RTC Alarms (Alarm A and Alarm B) configuration functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + Peripheral Control functions
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + Peripheral State functions
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ******************************************************************************
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @attention
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * Copyright (c) 2016 STMicroelectronics.
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * All rights reserved.
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * in the root directory of this software component.
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ******************************************************************************
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   @verbatim
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==============================================================================
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                ##### RTC and Backup Domain Operating Condition #####
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==============================================================================
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The real-time clock (RTC), the RTC backup registers, and the backup
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        SRAM (BKP SRAM) can be powered from the VBAT voltage when the main
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 2


  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        VDD supply is powered off.
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        To retain the content of the RTC backup registers, BKP SRAM, and supply
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        the RTC when VDD is turned off, VBAT pin can be connected to an optional
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) The RTC
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) The LSE oscillator
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) The BKP SRAM when the low power backup regulator is enabled
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        the following pins are available:
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PI8 can be used as the RTC_AF2 pin
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==================================================================
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        to their reset values.
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        The BKP SRAM is not affected by this reset. The only way to reset the BKP
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        SRAM is through the Flash interface by requesting a protection level
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        change from 1 to 0.
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==================================================================
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data registers
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        and BKP SRAM) is protected against possible unwanted write accesses.
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() macro.
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() macro.
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() macro.
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==============================================================================
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ##### How to use this driver #####
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==============================================================================
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *** Time and Date configuration ***
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ===================================
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 3


  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate()
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         functions.
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To manage the RTC summer or winter time change, use the following
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         functions:
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         (++) HAL_RTC_DST_Add1Hour() or HAL_RTC_DST_Sub1Hour to add or subtract
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              1 hour from the calendar time.
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         (++) HAL_RTC_DST_SetStoreOperation() or HAL_RTC_DST_ClearStoreOperation
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              to memorize whether the time change has been performed or not.
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *** Alarm configuration ***
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ===========================
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         HAL_RTC_SetAlarm_IT() function.
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ##### RTC and low power modes #####
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==================================================================
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        function.
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC timestamp event detection.
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        Standby low power modes.
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        or the RTC wakeup events.
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        source is LSE or LSI.
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *** Callback registration ***
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   =============================================
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   The compilation define  USE_HAL_RTC_REGISTER_CALLBACKS when set to 1
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   Use Function HAL_RTC_RegisterCallback() to register an interrupt callback.
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   Function HAL_RTC_RegisterCallback() allows to register following callbacks:
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC Timestamp Event callback.
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   and a pointer to the user callback function.
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   Use function HAL_RTC_UnRegisterCallback() to reset a callback to the default
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 4


 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   weak function.
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   and the Callback ID.
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   This function allows to reset following callbacks:
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC Timestamp Event callback.
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   By default, after the HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions:
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   examples AlarmAEventCallback(), WakeUpTimerEventCallback().
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   Exception done for MspInit() and MspDeInit() callbacks that are reset to the
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   legacy weak function in the HAL_RTC_Init()/HAL_RTC_DeInit() only
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   when these callbacks are null (not registered beforehand).
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   If not, MspInit() or MspDeInit() are not null, HAL_RTC_Init()/HAL_RTC_DeInit()
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   keep and use the user MspInit()/MspDeInit() callbacks (registered beforehand).
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   Exception done MspInit()/MspDeInit() that can be registered/unregistered
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state.
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   Thus registered (user) MspInit()/MspDeInit() callbacks can be used during the
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   Init/DeInit.
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   In that case first register the MspInit()/MspDeInit() user callbacks
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   using HAL_RTC_RegisterCallback() before calling HAL_RTC_DeInit()
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   or HAL_RTC_Init() functions.
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   callbacks are set to the corresponding weak functions.
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   @endverbatim
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ******************************************************************************
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #include "stm32f4xx_hal.h"
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @addtogroup STM32F4xx_HAL_Driver
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC RTC
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief    RTC HAL module driver
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 5


 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Exported functions --------------------------------------------------------*/
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group1 Initialization and de-initialization functions
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief    Initialization and Configuration functions
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode,
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 15-bit synchronous prescaler.
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers. The HAL_RTC_WaitForSynchro() function
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
  29              		.loc 1 250 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 6


  37              		.cfi_offset 14, -4
  38 0002 84B0     		sub	sp, sp, #16
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
  45              		.loc 1 251 21
  46 0008 0123     		movs	r3, #1
  47 000a FB73     		strb	r3, [r7, #15]
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check RTC handler validity */
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (hrtc == NULL)
  48              		.loc 1 254 6
  49 000c 7B68     		ldr	r3, [r7, #4]
  50 000e 002B     		cmp	r3, #0
  51 0010 01D1     		bne	.L2
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     return HAL_ERROR;
  52              		.loc 1 256 12
  53 0012 0123     		movs	r3, #1
  54 0014 73E0     		b	.L3
  55              	.L2:
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (hrtc->State == HAL_RTC_STATE_RESET)
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmA
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmB
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeSt
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUp
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #if defined(RTC_TAMPER2_SUPPORT)
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #endif /* RTC_TAMPER2_SUPPORT */
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (hrtc->MspInitCallback == NULL)
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->MspInitCallback = HAL_RTC_MspInit;
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Init the low level hardware */
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->MspInitCallback(hrtc);
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 7


 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (hrtc->MspDeInitCallback == NULL)
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #else /* USE_HAL_RTC_REGISTER_CALLBACKS */
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (hrtc->State == HAL_RTC_STATE_RESET)
  56              		.loc 1 296 11
  57 0016 7B68     		ldr	r3, [r7, #4]
  58 0018 5B7F     		ldrb	r3, [r3, #29]
  59 001a DBB2     		uxtb	r3, r3
  60              		.loc 1 296 6
  61 001c 002B     		cmp	r3, #0
  62 001e 05D1     		bne	.L4
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
  63              		.loc 1 299 16
  64 0020 7B68     		ldr	r3, [r7, #4]
  65 0022 0022     		movs	r2, #0
  66 0024 1A77     		strb	r2, [r3, #28]
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Initialize RTC MSP */
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
  67              		.loc 1 302 5
  68 0026 7868     		ldr	r0, [r7, #4]
  69 0028 FFF7FEFF 		bl	HAL_RTC_MspInit
  70              	.L4:
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Set RTC state */
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  71              		.loc 1 307 15
  72 002c 7B68     		ldr	r3, [r7, #4]
  73 002e 0222     		movs	r2, #2
  74 0030 5A77     		strb	r2, [r3, #29]
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check whether the calendar needs to be initialized */
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
  75              		.loc 1 310 7
  76 0032 7B68     		ldr	r3, [r7, #4]
  77 0034 1B68     		ldr	r3, [r3]
  78 0036 DB68     		ldr	r3, [r3, #12]
  79 0038 03F01003 		and	r3, r3, #16
  80              		.loc 1 310 6
  81 003c 102B     		cmp	r3, #16
  82 003e 55D0     		beq	.L5
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  83              		.loc 1 313 5
  84 0040 7B68     		ldr	r3, [r7, #4]
  85 0042 1B68     		ldr	r3, [r3]
  86 0044 CA22     		movs	r2, #202
  87 0046 5A62     		str	r2, [r3, #36]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 8


  88 0048 7B68     		ldr	r3, [r7, #4]
  89 004a 1B68     		ldr	r3, [r3]
  90 004c 5322     		movs	r2, #83
  91 004e 5A62     		str	r2, [r3, #36]
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enter Initialization mode */
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     status = RTC_EnterInitMode(hrtc);
  92              		.loc 1 316 14
  93 0050 7868     		ldr	r0, [r7, #4]
  94 0052 FFF7FEFF 		bl	RTC_EnterInitMode
  95 0056 0346     		mov	r3, r0
  96 0058 FB73     		strb	r3, [r7, #15]
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (status == HAL_OK)
  97              		.loc 1 318 8
  98 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  99 005c 002B     		cmp	r3, #0
 100 005e 2CD1     		bne	.L6
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Clear RTC_CR FMT, OSEL and POL Bits */
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 101              		.loc 1 321 11
 102 0060 7B68     		ldr	r3, [r7, #4]
 103 0062 1B68     		ldr	r3, [r3]
 104              		.loc 1 321 21
 105 0064 9B68     		ldr	r3, [r3, #8]
 106              		.loc 1 321 11
 107 0066 7A68     		ldr	r2, [r7, #4]
 108 0068 1268     		ldr	r2, [r2]
 109              		.loc 1 321 26
 110 006a 23F4E003 		bic	r3, r3, #7340032
 111 006e 23F04003 		bic	r3, r3, #64
 112 0072 9360     		str	r3, [r2, #8]
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Set RTC_CR register */
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPu
 113              		.loc 1 323 11
 114 0074 7B68     		ldr	r3, [r7, #4]
 115 0076 1B68     		ldr	r3, [r3]
 116              		.loc 1 323 21
 117 0078 9968     		ldr	r1, [r3, #8]
 118              		.loc 1 323 50
 119 007a 7B68     		ldr	r3, [r7, #4]
 120 007c 5A68     		ldr	r2, [r3, #4]
 121              		.loc 1 323 74
 122 007e 7B68     		ldr	r3, [r7, #4]
 123 0080 1B69     		ldr	r3, [r3, #16]
 124              		.loc 1 323 62
 125 0082 1A43     		orrs	r2, r2, r3
 126              		.loc 1 323 94
 127 0084 7B68     		ldr	r3, [r7, #4]
 128 0086 5B69     		ldr	r3, [r3, #20]
 129              		.loc 1 323 82
 130 0088 1A43     		orrs	r2, r2, r3
 131              		.loc 1 323 11
 132 008a 7B68     		ldr	r3, [r7, #4]
 133 008c 1B68     		ldr	r3, [r3]
 134              		.loc 1 323 26
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 9


 135 008e 0A43     		orrs	r2, r2, r1
 136 0090 9A60     		str	r2, [r3, #8]
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Configure the RTC PRER */
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 137              		.loc 1 326 11
 138 0092 7B68     		ldr	r3, [r7, #4]
 139 0094 1B68     		ldr	r3, [r3]
 140              		.loc 1 326 51
 141 0096 7A68     		ldr	r2, [r7, #4]
 142 0098 D268     		ldr	r2, [r2, #12]
 143              		.loc 1 326 28
 144 009a 1A61     		str	r2, [r3, #16]
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 145              		.loc 1 327 11
 146 009c 7B68     		ldr	r3, [r7, #4]
 147 009e 1B68     		ldr	r3, [r3]
 148              		.loc 1 327 21
 149 00a0 1969     		ldr	r1, [r3, #16]
 150              		.loc 1 327 52
 151 00a2 7B68     		ldr	r3, [r7, #4]
 152 00a4 9B68     		ldr	r3, [r3, #8]
 153              		.loc 1 327 31
 154 00a6 1A04     		lsls	r2, r3, #16
 155              		.loc 1 327 11
 156 00a8 7B68     		ldr	r3, [r7, #4]
 157 00aa 1B68     		ldr	r3, [r3]
 158              		.loc 1 327 28
 159 00ac 0A43     		orrs	r2, r2, r1
 160 00ae 1A61     		str	r2, [r3, #16]
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Exit Initialization mode */
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       status = RTC_ExitInitMode(hrtc);
 161              		.loc 1 330 16
 162 00b0 7868     		ldr	r0, [r7, #4]
 163 00b2 FFF7FEFF 		bl	RTC_ExitInitMode
 164 00b6 0346     		mov	r3, r0
 165 00b8 FB73     		strb	r3, [r7, #15]
 166              	.L6:
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (status == HAL_OK)
 167              		.loc 1 333 8
 168 00ba FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 169 00bc 002B     		cmp	r3, #0
 170 00be 10D1     		bne	.L7
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 171              		.loc 1 335 11
 172 00c0 7B68     		ldr	r3, [r7, #4]
 173 00c2 1B68     		ldr	r3, [r3]
 174              		.loc 1 335 21
 175 00c4 1A6C     		ldr	r2, [r3, #64]
 176              		.loc 1 335 11
 177 00c6 7B68     		ldr	r3, [r7, #4]
 178 00c8 1B68     		ldr	r3, [r3]
 179              		.loc 1 335 29
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 10


 180 00ca 22F48022 		bic	r2, r2, #262144
 181 00ce 1A64     		str	r2, [r3, #64]
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 182              		.loc 1 336 11
 183 00d0 7B68     		ldr	r3, [r7, #4]
 184 00d2 1B68     		ldr	r3, [r3]
 185              		.loc 1 336 21
 186 00d4 196C     		ldr	r1, [r3, #64]
 187              		.loc 1 336 53
 188 00d6 7B68     		ldr	r3, [r7, #4]
 189 00d8 9A69     		ldr	r2, [r3, #24]
 190              		.loc 1 336 11
 191 00da 7B68     		ldr	r3, [r7, #4]
 192 00dc 1B68     		ldr	r3, [r3]
 193              		.loc 1 336 29
 194 00de 0A43     		orrs	r2, r2, r1
 195 00e0 1A64     		str	r2, [r3, #64]
 196              	.L7:
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 197              		.loc 1 340 5
 198 00e2 7B68     		ldr	r3, [r7, #4]
 199 00e4 1B68     		ldr	r3, [r3]
 200 00e6 FF22     		movs	r2, #255
 201 00e8 5A62     		str	r2, [r3, #36]
 202 00ea 01E0     		b	.L8
 203              	.L5:
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* The calendar is already initialized */
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     status = HAL_OK;
 204              		.loc 1 345 12
 205 00ec 0023     		movs	r3, #0
 206 00ee FB73     		strb	r3, [r7, #15]
 207              	.L8:
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (status == HAL_OK)
 208              		.loc 1 348 6
 209 00f0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 210 00f2 002B     		cmp	r3, #0
 211 00f4 02D1     		bne	.L9
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 212              		.loc 1 350 17
 213 00f6 7B68     		ldr	r3, [r7, #4]
 214 00f8 0122     		movs	r2, #1
 215 00fa 5A77     		strb	r2, [r3, #29]
 216              	.L9:
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return status;
 217              		.loc 1 353 10
 218 00fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 11


 219              	.L3:
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 220              		.loc 1 354 1
 221 00fe 1846     		mov	r0, r3
 222 0100 1037     		adds	r7, r7, #16
 223              	.LCFI3:
 224              		.cfi_def_cfa_offset 8
 225 0102 BD46     		mov	sp, r7
 226              	.LCFI4:
 227              		.cfi_def_cfa_register 13
 228              		@ sp needed
 229 0104 80BD     		pop	{r7, pc}
 230              		.cfi_endproc
 231              	.LFE134:
 233              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 234              		.align	1
 235              		.global	HAL_RTC_DeInit
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 240              	HAL_RTC_DeInit:
 241              	.LFB135:
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   This function does not reset the RTC Backup Data registers.
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 242              		.loc 1 364 1
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 16
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246 0000 80B5     		push	{r7, lr}
 247              	.LCFI5:
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 84B0     		sub	sp, sp, #16
 252              	.LCFI6:
 253              		.cfi_def_cfa_offset 24
 254 0004 00AF     		add	r7, sp, #0
 255              	.LCFI7:
 256              		.cfi_def_cfa_register 7
 257 0006 7860     		str	r0, [r7, #4]
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 258              		.loc 1 365 21
 259 0008 0123     		movs	r3, #1
 260 000a FB73     		strb	r3, [r7, #15]
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Set RTC state */
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 12


 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 261              		.loc 1 371 15
 262 000c 7B68     		ldr	r3, [r7, #4]
 263 000e 0222     		movs	r2, #2
 264 0010 5A77     		strb	r2, [r3, #29]
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 265              		.loc 1 374 3
 266 0012 7B68     		ldr	r3, [r7, #4]
 267 0014 1B68     		ldr	r3, [r3]
 268 0016 CA22     		movs	r2, #202
 269 0018 5A62     		str	r2, [r3, #36]
 270 001a 7B68     		ldr	r3, [r7, #4]
 271 001c 1B68     		ldr	r3, [r3]
 272 001e 5322     		movs	r2, #83
 273 0020 5A62     		str	r2, [r3, #36]
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enter Initialization mode */
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 274              		.loc 1 377 12
 275 0022 7868     		ldr	r0, [r7, #4]
 276 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 277 0028 0346     		mov	r3, r0
 278 002a FB73     		strb	r3, [r7, #15]
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (status == HAL_OK)
 279              		.loc 1 379 6
 280 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 281 002e 002B     		cmp	r3, #0
 282 0030 39D1     		bne	.L11
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Reset RTC registers */
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->TR = 0x00000000U;
 283              		.loc 1 382 9
 284 0032 7B68     		ldr	r3, [r7, #4]
 285 0034 1B68     		ldr	r3, [r3]
 286              		.loc 1 382 24
 287 0036 0022     		movs	r2, #0
 288 0038 1A60     		str	r2, [r3]
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->DR = (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0);
 289              		.loc 1 383 9
 290 003a 7B68     		ldr	r3, [r7, #4]
 291 003c 1B68     		ldr	r3, [r3]
 292              		.loc 1 383 24
 293 003e 42F20112 		movw	r2, #8449
 294 0042 5A60     		str	r2, [r3, #4]
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR  &= 0x00000000U;
 295              		.loc 1 384 9
 296 0044 7B68     		ldr	r3, [r7, #4]
 297 0046 1B68     		ldr	r3, [r3]
 298              		.loc 1 384 19
 299 0048 9B68     		ldr	r3, [r3, #8]
 300              		.loc 1 384 9
 301 004a 7B68     		ldr	r3, [r7, #4]
 302 004c 1B68     		ldr	r3, [r3]
 303              		.loc 1 384 25
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 13


 304 004e 0022     		movs	r2, #0
 305 0050 9A60     		str	r2, [r3, #8]
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->WUTR = RTC_WUTR_WUT;
 306              		.loc 1 385 9
 307 0052 7B68     		ldr	r3, [r7, #4]
 308 0054 1B68     		ldr	r3, [r3]
 309              		.loc 1 385 26
 310 0056 4FF6FF72 		movw	r2, #65535
 311 005a 5A61     		str	r2, [r3, #20]
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU);
 312              		.loc 1 386 9
 313 005c 7B68     		ldr	r3, [r7, #4]
 314 005e 1B68     		ldr	r3, [r3]
 315              		.loc 1 386 26
 316 0060 1D4A     		ldr	r2, .L14
 317 0062 1A61     		str	r2, [r3, #16]
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CALIBR = 0x00000000U;
 318              		.loc 1 387 9
 319 0064 7B68     		ldr	r3, [r7, #4]
 320 0066 1B68     		ldr	r3, [r3]
 321              		.loc 1 387 28
 322 0068 0022     		movs	r2, #0
 323 006a 9A61     		str	r2, [r3, #24]
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMAR   = 0x00000000U;
 324              		.loc 1 388 9
 325 006c 7B68     		ldr	r3, [r7, #4]
 326 006e 1B68     		ldr	r3, [r3]
 327              		.loc 1 388 30
 328 0070 0022     		movs	r2, #0
 329 0072 DA61     		str	r2, [r3, #28]
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBR   = 0x00000000U;
 330              		.loc 1 389 9
 331 0074 7B68     		ldr	r3, [r7, #4]
 332 0076 1B68     		ldr	r3, [r3]
 333              		.loc 1 389 30
 334 0078 0022     		movs	r2, #0
 335 007a 1A62     		str	r2, [r3, #32]
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CALR     = 0x00000000U;
 336              		.loc 1 390 9
 337 007c 7B68     		ldr	r3, [r7, #4]
 338 007e 1B68     		ldr	r3, [r3]
 339              		.loc 1 390 30
 340 0080 0022     		movs	r2, #0
 341 0082 DA63     		str	r2, [r3, #60]
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->SHIFTR   = 0x00000000U;
 342              		.loc 1 391 9
 343 0084 7B68     		ldr	r3, [r7, #4]
 344 0086 1B68     		ldr	r3, [r3]
 345              		.loc 1 391 30
 346 0088 0022     		movs	r2, #0
 347 008a DA62     		str	r2, [r3, #44]
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = 0x00000000U;
 348              		.loc 1 392 9
 349 008c 7B68     		ldr	r3, [r7, #4]
 350 008e 1B68     		ldr	r3, [r3]
 351              		.loc 1 392 30
 352 0090 0022     		movs	r2, #0
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 14


 353 0092 5A64     		str	r2, [r3, #68]
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = 0x00000000U;
 354              		.loc 1 393 9
 355 0094 7B68     		ldr	r3, [r7, #4]
 356 0096 1B68     		ldr	r3, [r3]
 357              		.loc 1 393 30
 358 0098 0022     		movs	r2, #0
 359 009a 9A64     		str	r2, [r3, #72]
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Exit Initialization mode */
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 360              		.loc 1 396 14
 361 009c 7868     		ldr	r0, [r7, #4]
 362 009e FFF7FEFF 		bl	RTC_ExitInitMode
 363 00a2 0346     		mov	r3, r0
 364 00a4 FB73     		strb	r3, [r7, #15]
 365              	.L11:
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 366              		.loc 1 400 3
 367 00a6 7B68     		ldr	r3, [r7, #4]
 368 00a8 1B68     		ldr	r3, [r3]
 369 00aa FF22     		movs	r2, #255
 370 00ac 5A62     		str	r2, [r3, #36]
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (status == HAL_OK)
 371              		.loc 1 402 6
 372 00ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 373 00b0 002B     		cmp	r3, #0
 374 00b2 09D1     		bne	.L12
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->TAFCR = 0x00000000U;
 375              		.loc 1 405 9
 376 00b4 7B68     		ldr	r3, [r7, #4]
 377 00b6 1B68     		ldr	r3, [r3]
 378              		.loc 1 405 27
 379 00b8 0022     		movs	r2, #0
 380 00ba 1A64     		str	r2, [r3, #64]
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (hrtc->MspDeInitCallback == NULL)
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* DeInit the low level hardware: CLOCK, NVIC.*/
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->MspDeInitCallback(hrtc);
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #else /* USE_HAL_RTC_REGISTER_CALLBACKS */
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* De-Initialize RTC MSP */
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     HAL_RTC_MspDeInit(hrtc);
 381              		.loc 1 417 5
 382 00bc 7868     		ldr	r0, [r7, #4]
 383 00be FFF7FEFF 		bl	HAL_RTC_MspDeInit
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 15


 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_RESET;
 384              		.loc 1 420 17
 385 00c2 7B68     		ldr	r3, [r7, #4]
 386 00c4 0022     		movs	r2, #0
 387 00c6 5A77     		strb	r2, [r3, #29]
 388              	.L12:
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Release Lock */
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 389              		.loc 1 424 3
 390 00c8 7B68     		ldr	r3, [r7, #4]
 391 00ca 0022     		movs	r2, #0
 392 00cc 1A77     		strb	r2, [r3, #28]
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return status;
 393              		.loc 1 426 10
 394 00ce FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 395              		.loc 1 427 1
 396 00d0 1846     		mov	r0, r3
 397 00d2 1037     		adds	r7, r7, #16
 398              	.LCFI8:
 399              		.cfi_def_cfa_offset 8
 400 00d4 BD46     		mov	sp, r7
 401              	.LCFI9:
 402              		.cfi_def_cfa_register 13
 403              		@ sp needed
 404 00d6 80BD     		pop	{r7, pc}
 405              	.L15:
 406              		.align	2
 407              	.L14:
 408 00d8 FF007F00 		.word	8323327
 409              		.cfi_endproc
 410              	.LFE135:
 412              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
 413              		.align	1
 414              		.weak	HAL_RTC_MspInit
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 419              	HAL_RTC_MspInit:
 420              	.LFB136:
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Registers a User RTC Callback
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        Timestamp Event Callback ID
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      Wakeup Timer Event Callback ID
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 16


 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   HAL_RTC_TAMPER2_EVENT_CB_ID is not applicable to all devices.
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (pCallback == NULL)
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     return HAL_ERROR;
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process locked */
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (HAL_RTC_STATE_READY == hrtc->State)
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     switch (CallbackID)
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = pCallback;
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = pCallback;
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = pCallback;
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = pCallback;
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = pCallback;
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #if defined(RTC_TAMPER2_SUPPORT)
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = pCallback;
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #endif /* RTC_TAMPER2_SUPPORT */
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 17


 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       default :
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Return error status */
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         status =  HAL_ERROR;
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else if (HAL_RTC_STATE_RESET == hrtc->State)
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     switch (CallbackID)
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       default :
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Return error status */
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         status =  HAL_ERROR;
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Return error status */
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     status =  HAL_ERROR;
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Release Lock */
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return status;
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Unregisters an RTC Callback
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         RTC callback is redirected to the weak predefined callback
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        Timestamp Event Callback ID
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      Wakeup Timer Event Callback ID
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   HAL_RTC_TAMPER2_EVENT_CB_ID is not applicable to all devices.
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 18


 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process locked */
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (HAL_RTC_STATE_READY == hrtc->State)
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     switch (CallbackID)
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAE
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBE
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = HAL_RTCEx_TimeStampEventCallback;     /* Legacy weak TimeSta
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpT
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #if defined(RTC_TAMPER2_SUPPORT)
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = HAL_RTCEx_Tamper2EventCallback;         /* Legacy weak Tamper2
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #endif /* RTC_TAMPER2_SUPPORT */
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       default :
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Return error status */
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         status =  HAL_ERROR;
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else if (HAL_RTC_STATE_RESET == hrtc->State)
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     switch (CallbackID)
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 19


 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       default :
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Return error status */
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         status =  HAL_ERROR;
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         break;
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Return error status */
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     status =  HAL_ERROR;
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Release Lock */
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return status;
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 421              		.loc 1 642 1
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 8
 424              		@ frame_needed = 1, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426 0000 80B4     		push	{r7}
 427              	.LCFI10:
 428              		.cfi_def_cfa_offset 4
 429              		.cfi_offset 7, -4
 430 0002 83B0     		sub	sp, sp, #12
 431              	.LCFI11:
 432              		.cfi_def_cfa_offset 16
 433 0004 00AF     		add	r7, sp, #0
 434              	.LCFI12:
 435              		.cfi_def_cfa_register 7
 436 0006 7860     		str	r0, [r7, #4]
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   UNUSED(hrtc);
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****            the HAL_RTC_MspInit could be implemented in the user file
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    */
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 437              		.loc 1 649 1
 438 0008 00BF     		nop
 439 000a 0C37     		adds	r7, r7, #12
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 20


 440              	.LCFI13:
 441              		.cfi_def_cfa_offset 4
 442 000c BD46     		mov	sp, r7
 443              	.LCFI14:
 444              		.cfi_def_cfa_register 13
 445              		@ sp needed
 446 000e 5DF8047B 		ldr	r7, [sp], #4
 447              	.LCFI15:
 448              		.cfi_restore 7
 449              		.cfi_def_cfa_offset 0
 450 0012 7047     		bx	lr
 451              		.cfi_endproc
 452              	.LFE136:
 454              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 455              		.align	1
 456              		.weak	HAL_RTC_MspDeInit
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 461              	HAL_RTC_MspDeInit:
 462              	.LFB137:
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 463              		.loc 1 658 1
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 8
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468 0000 80B4     		push	{r7}
 469              	.LCFI16:
 470              		.cfi_def_cfa_offset 4
 471              		.cfi_offset 7, -4
 472 0002 83B0     		sub	sp, sp, #12
 473              	.LCFI17:
 474              		.cfi_def_cfa_offset 16
 475 0004 00AF     		add	r7, sp, #0
 476              	.LCFI18:
 477              		.cfi_def_cfa_register 7
 478 0006 7860     		str	r0, [r7, #4]
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   UNUSED(hrtc);
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****            the HAL_RTC_MspDeInit could be implemented in the user file
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    */
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 479              		.loc 1 665 1
 480 0008 00BF     		nop
 481 000a 0C37     		adds	r7, r7, #12
 482              	.LCFI19:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 21


 483              		.cfi_def_cfa_offset 4
 484 000c BD46     		mov	sp, r7
 485              	.LCFI20:
 486              		.cfi_def_cfa_register 13
 487              		@ sp needed
 488 000e 5DF8047B 		ldr	r7, [sp], #4
 489              	.LCFI21:
 490              		.cfi_restore 7
 491              		.cfi_def_cfa_offset 0
 492 0012 7047     		bx	lr
 493              		.cfi_endproc
 494              	.LFE137:
 496              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 497              		.align	1
 498              		.global	HAL_RTC_SetTime
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 503              	HAL_RTC_SetTime:
 504              	.LFB138:
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group2 RTC Time and Date functions
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief    RTC Time and Date functions
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   DayLightSaving and StoreOperation interfaces are deprecated.
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions.
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 505              		.loc 1 699 1
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 22


 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 90B5     		push	{r4, r7, lr}
 510              	.LCFI22:
 511              		.cfi_def_cfa_offset 12
 512              		.cfi_offset 4, -12
 513              		.cfi_offset 7, -8
 514              		.cfi_offset 14, -4
 515 0002 87B0     		sub	sp, sp, #28
 516              	.LCFI23:
 517              		.cfi_def_cfa_offset 40
 518 0004 00AF     		add	r7, sp, #0
 519              	.LCFI24:
 520              		.cfi_def_cfa_register 7
 521 0006 F860     		str	r0, [r7, #12]
 522 0008 B960     		str	r1, [r7, #8]
 523 000a 7A60     		str	r2, [r7, #4]
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U;
 524              		.loc 1 700 12
 525 000c 0023     		movs	r3, #0
 526 000e 7B61     		str	r3, [r7, #20]
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_StatusTypeDef status;
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 527              		.loc 1 709 3
 528 0010 FB68     		ldr	r3, [r7, #12]
 529 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 530 0014 012B     		cmp	r3, #1
 531 0016 01D1     		bne	.L19
 532              		.loc 1 709 3 is_stmt 0 discriminator 1
 533 0018 0223     		movs	r3, #2
 534              		.loc 1 709 3
 535 001a 87E0     		b	.L20
 536              	.L19:
 537              		.loc 1 709 3 discriminator 2
 538 001c FB68     		ldr	r3, [r7, #12]
 539 001e 0122     		movs	r2, #1
 540 0020 1A77     		strb	r2, [r3, #28]
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 541              		.loc 1 711 15 is_stmt 1
 542 0022 FB68     		ldr	r3, [r7, #12]
 543 0024 0222     		movs	r2, #2
 544 0026 5A77     		strb	r2, [r3, #29]
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 545              		.loc 1 713 6
 546 0028 7B68     		ldr	r3, [r7, #4]
 547 002a 002B     		cmp	r3, #0
 548 002c 26D1     		bne	.L21
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 23


 549              		.loc 1 715 14
 550 002e FB68     		ldr	r3, [r7, #12]
 551 0030 1B68     		ldr	r3, [r3]
 552              		.loc 1 715 24
 553 0032 9B68     		ldr	r3, [r3, #8]
 554              		.loc 1 715 29
 555 0034 03F04003 		and	r3, r3, #64
 556              		.loc 1 715 8
 557 0038 002B     		cmp	r3, #0
 558 003a 02D1     		bne	.L22
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sTime->TimeFormat = 0x00U;
 559              		.loc 1 722 25
 560 003c BB68     		ldr	r3, [r7, #8]
 561 003e 0022     		movs	r2, #0
 562 0040 DA70     		strb	r2, [r3, #3]
 563              	.L22:
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 564              		.loc 1 728 37
 565 0042 BB68     		ldr	r3, [r7, #8]
 566 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 567 0046 1846     		mov	r0, r3
 568 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 569 004c 0346     		mov	r3, r0
 570              		.loc 1 728 68 discriminator 1
 571 004e 1C04     		lsls	r4, r3, #16
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 572              		.loc 1 729 37
 573 0050 BB68     		ldr	r3, [r7, #8]
 574 0052 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 575 0054 1846     		mov	r0, r3
 576 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 577 005a 0346     		mov	r3, r0
 578              		.loc 1 729 68 discriminator 1
 579 005c 1B02     		lsls	r3, r3, #8
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 580              		.loc 1 728 87
 581 005e 1C43     		orrs	r4, r4, r3
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 582              		.loc 1 730 37
 583 0060 BB68     		ldr	r3, [r7, #8]
 584 0062 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 585 0064 1846     		mov	r0, r3
 586 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 587 006a 0346     		mov	r3, r0
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 588              		.loc 1 729 87
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 24


 589 006c 44EA0302 		orr	r2, r4, r3
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 590              		.loc 1 731 42
 591 0070 BB68     		ldr	r3, [r7, #8]
 592 0072 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 593              		.loc 1 731 68
 594 0074 9B05     		lsls	r3, r3, #22
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 595              		.loc 1 728 12
 596 0076 1343     		orrs	r3, r3, r2
 597 0078 7B61     		str	r3, [r7, #20]
 598 007a 18E0     		b	.L23
 599              	.L21:
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 600              		.loc 1 735 14
 601 007c FB68     		ldr	r3, [r7, #12]
 602 007e 1B68     		ldr	r3, [r3]
 603              		.loc 1 735 24
 604 0080 9B68     		ldr	r3, [r3, #8]
 605              		.loc 1 735 29
 606 0082 03F04003 		and	r3, r3, #64
 607              		.loc 1 735 8
 608 0086 002B     		cmp	r3, #0
 609 0088 02D1     		bne	.L24
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sTime->TimeFormat = 0x00U;
 610              		.loc 1 742 25
 611 008a BB68     		ldr	r3, [r7, #8]
 612 008c 0022     		movs	r2, #0
 613 008e DA70     		strb	r2, [r3, #3]
 614              	.L24:
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 615              		.loc 1 747 32
 616 0090 BB68     		ldr	r3, [r7, #8]
 617 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 618              		.loc 1 747 46
 619 0094 1A04     		lsls	r2, r3, #16
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 620              		.loc 1 748 32
 621 0096 BB68     		ldr	r3, [r7, #8]
 622 0098 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 623              		.loc 1 748 46
 624 009a 1B02     		lsls	r3, r3, #8
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 625              		.loc 1 747 65
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 25


 626 009c 1343     		orrs	r3, r3, r2
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sTime->Seconds)                       | \
 627              		.loc 1 749 32
 628 009e BA68     		ldr	r2, [r7, #8]
 629 00a0 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 630              		.loc 1 748 65
 631 00a2 1A43     		orrs	r2, r2, r3
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 632              		.loc 1 750 32
 633 00a4 BB68     		ldr	r3, [r7, #8]
 634 00a6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 635              		.loc 1 750 46
 636 00a8 9B05     		lsls	r3, r3, #22
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 637              		.loc 1 747 12
 638 00aa 1343     		orrs	r3, r3, r2
 639 00ac 7B61     		str	r3, [r7, #20]
 640              	.L23:
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 641              		.loc 1 754 3
 642 00ae FB68     		ldr	r3, [r7, #12]
 643 00b0 1B68     		ldr	r3, [r3]
 644 00b2 CA22     		movs	r2, #202
 645 00b4 5A62     		str	r2, [r3, #36]
 646 00b6 FB68     		ldr	r3, [r7, #12]
 647 00b8 1B68     		ldr	r3, [r3]
 648 00ba 5322     		movs	r2, #83
 649 00bc 5A62     		str	r2, [r3, #36]
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enter Initialization mode */
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 650              		.loc 1 757 12
 651 00be F868     		ldr	r0, [r7, #12]
 652 00c0 FFF7FEFF 		bl	RTC_EnterInitMode
 653 00c4 0346     		mov	r3, r0
 654 00c6 FB74     		strb	r3, [r7, #19]
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (status == HAL_OK)
 655              		.loc 1 759 6
 656 00c8 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 657 00ca 002B     		cmp	r3, #0
 658 00cc 20D1     		bne	.L25
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set the RTC_TR register */
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 659              		.loc 1 762 9
 660 00ce FB68     		ldr	r3, [r7, #12]
 661 00d0 1A68     		ldr	r2, [r3]
 662              		.loc 1 762 26
 663 00d2 7B69     		ldr	r3, [r7, #20]
 664 00d4 03F07F33 		and	r3, r3, #2139062143
 665 00d8 23F0FE43 		bic	r3, r3, #2130706432
 666              		.loc 1 762 24
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 26


 667 00dc 1360     		str	r3, [r2]
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 668              		.loc 1 765 9
 669 00de FB68     		ldr	r3, [r7, #12]
 670 00e0 1B68     		ldr	r3, [r3]
 671              		.loc 1 765 19
 672 00e2 9A68     		ldr	r2, [r3, #8]
 673              		.loc 1 765 9
 674 00e4 FB68     		ldr	r3, [r7, #12]
 675 00e6 1B68     		ldr	r3, [r3]
 676              		.loc 1 765 24
 677 00e8 22F48022 		bic	r2, r2, #262144
 678 00ec 9A60     		str	r2, [r3, #8]
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 679              		.loc 1 768 9
 680 00ee FB68     		ldr	r3, [r7, #12]
 681 00f0 1B68     		ldr	r3, [r3]
 682              		.loc 1 768 19
 683 00f2 9968     		ldr	r1, [r3, #8]
 684              		.loc 1 768 43
 685 00f4 BB68     		ldr	r3, [r7, #8]
 686 00f6 DA68     		ldr	r2, [r3, #12]
 687              		.loc 1 768 67
 688 00f8 BB68     		ldr	r3, [r7, #8]
 689 00fa 1B69     		ldr	r3, [r3, #16]
 690              		.loc 1 768 60
 691 00fc 1A43     		orrs	r2, r2, r3
 692              		.loc 1 768 9
 693 00fe FB68     		ldr	r3, [r7, #12]
 694 0100 1B68     		ldr	r3, [r3]
 695              		.loc 1 768 24
 696 0102 0A43     		orrs	r2, r2, r1
 697 0104 9A60     		str	r2, [r3, #8]
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Exit Initialization mode */
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 698              		.loc 1 771 14
 699 0106 F868     		ldr	r0, [r7, #12]
 700 0108 FFF7FEFF 		bl	RTC_ExitInitMode
 701 010c 0346     		mov	r3, r0
 702 010e FB74     		strb	r3, [r7, #19]
 703              	.L25:
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (status == HAL_OK)
 704              		.loc 1 774 6
 705 0110 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 706 0112 002B     		cmp	r3, #0
 707 0114 02D1     		bne	.L26
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 708              		.loc 1 776 17
 709 0116 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 27


 710 0118 0122     		movs	r2, #1
 711 011a 5A77     		strb	r2, [r3, #29]
 712              	.L26:
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 713              		.loc 1 780 3
 714 011c FB68     		ldr	r3, [r7, #12]
 715 011e 1B68     		ldr	r3, [r3]
 716 0120 FF22     		movs	r2, #255
 717 0122 5A62     		str	r2, [r3, #36]
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Unlocked */
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 718              		.loc 1 783 3
 719 0124 FB68     		ldr	r3, [r7, #12]
 720 0126 0022     		movs	r2, #0
 721 0128 1A77     		strb	r2, [r3, #28]
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return status;
 722              		.loc 1 785 10
 723 012a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 724              	.L20:
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 725              		.loc 1 786 1
 726 012c 1846     		mov	r0, r3
 727 012e 1C37     		adds	r7, r7, #28
 728              	.LCFI25:
 729              		.cfi_def_cfa_offset 12
 730 0130 BD46     		mov	sp, r7
 731              	.LCFI26:
 732              		.cfi_def_cfa_register 13
 733              		@ sp needed
 734 0132 90BD     		pop	{r4, r7, pc}
 735              		.cfi_endproc
 736              	.LFE138:
 738              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 739              		.align	1
 740              		.global	HAL_RTC_GetTime
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 745              	HAL_RTC_GetTime:
 746              	.LFB139:
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        returned) to convert SubSeconds value in second fraction ratio with
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 28


 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        time unit following generic formula:
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        Second fraction ratio * time_unit =
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           [(SecondFraction - SubSeconds) / (SecondFraction + 1)] * time_unit
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        (ie. SHFP=0) when PREDIV_S >= SS
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        values in the higher-order calendar shadow registers to ensure
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        consistency between the time and date values.
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        until current date is read to ensure consistency between the time and
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        date values.
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 747              		.loc 1 813 1
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 24
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 751 0000 80B5     		push	{r7, lr}
 752              	.LCFI27:
 753              		.cfi_def_cfa_offset 8
 754              		.cfi_offset 7, -8
 755              		.cfi_offset 14, -4
 756 0002 86B0     		sub	sp, sp, #24
 757              	.LCFI28:
 758              		.cfi_def_cfa_offset 32
 759 0004 00AF     		add	r7, sp, #0
 760              	.LCFI29:
 761              		.cfi_def_cfa_register 7
 762 0006 F860     		str	r0, [r7, #12]
 763 0008 B960     		str	r1, [r7, #8]
 764 000a 7A60     		str	r2, [r7, #4]
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U;
 765              		.loc 1 814 12
 766 000c 0023     		movs	r3, #0
 767 000e 7B61     		str	r3, [r7, #20]
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get subseconds value from the corresponding register */
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 768              		.loc 1 820 38
 769 0010 FB68     		ldr	r3, [r7, #12]
 770 0012 1B68     		ldr	r3, [r3]
 771              		.loc 1 820 48
 772 0014 9A6A     		ldr	r2, [r3, #40]
 773              		.loc 1 820 21
 774 0016 BB68     		ldr	r3, [r7, #8]
 775 0018 5A60     		str	r2, [r3, #4]
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 776              		.loc 1 823 42
 777 001a FB68     		ldr	r3, [r7, #12]
 778 001c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 29


 779              		.loc 1 823 52
 780 001e 1B69     		ldr	r3, [r3, #16]
 781              		.loc 1 823 27
 782 0020 C3F30E02 		ubfx	r2, r3, #0, #15
 783              		.loc 1 823 25
 784 0024 BB68     		ldr	r3, [r7, #8]
 785 0026 9A60     		str	r2, [r3, #8]
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get the TR register */
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 786              		.loc 1 826 27
 787 0028 FB68     		ldr	r3, [r7, #12]
 788 002a 1B68     		ldr	r3, [r3]
 789              		.loc 1 826 37
 790 002c 1B68     		ldr	r3, [r3]
 791              		.loc 1 826 10
 792 002e 03F07F33 		and	r3, r3, #2139062143
 793 0032 23F0FE43 		bic	r3, r3, #2130706432
 794 0036 7B61     		str	r3, [r7, #20]
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 795              		.loc 1 829 70
 796 0038 7B69     		ldr	r3, [r7, #20]
 797 003a 1B0C     		lsrs	r3, r3, #16
 798              		.loc 1 829 23
 799 003c DBB2     		uxtb	r3, r3
 800 003e 03F03F03 		and	r3, r3, #63
 801 0042 DAB2     		uxtb	r2, r3
 802              		.loc 1 829 21
 803 0044 BB68     		ldr	r3, [r7, #8]
 804 0046 1A70     		strb	r2, [r3]
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 805              		.loc 1 830 70
 806 0048 7B69     		ldr	r3, [r7, #20]
 807 004a 1B0A     		lsrs	r3, r3, #8
 808              		.loc 1 830 23
 809 004c DBB2     		uxtb	r3, r3
 810 004e 03F07F03 		and	r3, r3, #127
 811 0052 DAB2     		uxtb	r2, r3
 812              		.loc 1 830 21
 813 0054 BB68     		ldr	r3, [r7, #8]
 814 0056 5A70     		strb	r2, [r3, #1]
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 815              		.loc 1 831 23
 816 0058 7B69     		ldr	r3, [r7, #20]
 817 005a DBB2     		uxtb	r3, r3
 818 005c 03F07F03 		and	r3, r3, #127
 819 0060 DAB2     		uxtb	r2, r3
 820              		.loc 1 831 21
 821 0062 BB68     		ldr	r3, [r7, #8]
 822 0064 9A70     		strb	r2, [r3, #2]
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 823              		.loc 1 832 70
 824 0066 7B69     		ldr	r3, [r7, #20]
 825 0068 9B0D     		lsrs	r3, r3, #22
 826              		.loc 1 832 23
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 30


 827 006a DBB2     		uxtb	r3, r3
 828 006c 03F00103 		and	r3, r3, #1
 829 0070 DAB2     		uxtb	r2, r3
 830              		.loc 1 832 21
 831 0072 BB68     		ldr	r3, [r7, #8]
 832 0074 DA70     		strb	r2, [r3, #3]
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the input parameters format */
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 833              		.loc 1 835 6
 834 0076 7B68     		ldr	r3, [r7, #4]
 835 0078 002B     		cmp	r3, #0
 836 007a 1AD1     		bne	.L28
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 837              		.loc 1 838 29
 838 007c BB68     		ldr	r3, [r7, #8]
 839 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 840 0080 1846     		mov	r0, r3
 841 0082 FFF7FEFF 		bl	RTC_Bcd2ToByte
 842 0086 0346     		mov	r3, r0
 843 0088 1A46     		mov	r2, r3
 844              		.loc 1 838 18 discriminator 1
 845 008a BB68     		ldr	r3, [r7, #8]
 846 008c 1A70     		strb	r2, [r3]
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 847              		.loc 1 839 31
 848 008e BB68     		ldr	r3, [r7, #8]
 849 0090 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 850 0092 1846     		mov	r0, r3
 851 0094 FFF7FEFF 		bl	RTC_Bcd2ToByte
 852 0098 0346     		mov	r3, r0
 853 009a 1A46     		mov	r2, r3
 854              		.loc 1 839 20 discriminator 1
 855 009c BB68     		ldr	r3, [r7, #8]
 856 009e 5A70     		strb	r2, [r3, #1]
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 857              		.loc 1 840 31
 858 00a0 BB68     		ldr	r3, [r7, #8]
 859 00a2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 860 00a4 1846     		mov	r0, r3
 861 00a6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 862 00aa 0346     		mov	r3, r0
 863 00ac 1A46     		mov	r2, r3
 864              		.loc 1 840 20 discriminator 1
 865 00ae BB68     		ldr	r3, [r7, #8]
 866 00b0 9A70     		strb	r2, [r3, #2]
 867              	.L28:
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 868              		.loc 1 843 10
 869 00b2 0023     		movs	r3, #0
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 870              		.loc 1 844 1
 871 00b4 1846     		mov	r0, r3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 31


 872 00b6 1837     		adds	r7, r7, #24
 873              	.LCFI30:
 874              		.cfi_def_cfa_offset 8
 875 00b8 BD46     		mov	sp, r7
 876              	.LCFI31:
 877              		.cfi_def_cfa_register 13
 878              		@ sp needed
 879 00ba 80BD     		pop	{r7, pc}
 880              		.cfi_endproc
 881              	.LFE139:
 883              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 884              		.align	1
 885              		.global	HAL_RTC_SetDate
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 890              	HAL_RTC_SetDate:
 891              	.LFB140:
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 892              		.loc 1 858 1
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 24
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896 0000 90B5     		push	{r4, r7, lr}
 897              	.LCFI32:
 898              		.cfi_def_cfa_offset 12
 899              		.cfi_offset 4, -12
 900              		.cfi_offset 7, -8
 901              		.cfi_offset 14, -4
 902 0002 87B0     		sub	sp, sp, #28
 903              	.LCFI33:
 904              		.cfi_def_cfa_offset 40
 905 0004 00AF     		add	r7, sp, #0
 906              	.LCFI34:
 907              		.cfi_def_cfa_register 7
 908 0006 F860     		str	r0, [r7, #12]
 909 0008 B960     		str	r1, [r7, #8]
 910 000a 7A60     		str	r2, [r7, #4]
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t datetmpreg = 0U;
 911              		.loc 1 859 12
 912 000c 0023     		movs	r3, #0
 913 000e 7B61     		str	r3, [r7, #20]
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_StatusTypeDef status;
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 32


 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 914              		.loc 1 866 3
 915 0010 FB68     		ldr	r3, [r7, #12]
 916 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 917 0014 012B     		cmp	r3, #1
 918 0016 01D1     		bne	.L31
 919              		.loc 1 866 3 is_stmt 0 discriminator 1
 920 0018 0223     		movs	r3, #2
 921              		.loc 1 866 3
 922 001a 71E0     		b	.L32
 923              	.L31:
 924              		.loc 1 866 3 discriminator 2
 925 001c FB68     		ldr	r3, [r7, #12]
 926 001e 0122     		movs	r2, #1
 927 0020 1A77     		strb	r2, [r3, #28]
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 928              		.loc 1 868 15 is_stmt 1
 929 0022 FB68     		ldr	r3, [r7, #12]
 930 0024 0222     		movs	r2, #2
 931 0026 5A77     		strb	r2, [r3, #29]
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 932              		.loc 1 870 6
 933 0028 7B68     		ldr	r3, [r7, #4]
 934 002a 002B     		cmp	r3, #0
 935 002c 0ED1     		bne	.L33
 936              		.loc 1 870 44 discriminator 1
 937 002e BB68     		ldr	r3, [r7, #8]
 938 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 939              		.loc 1 870 52 discriminator 1
 940 0032 03F01003 		and	r3, r3, #16
 941              		.loc 1 870 34 discriminator 1
 942 0036 002B     		cmp	r3, #0
 943 0038 08D0     		beq	.L33
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 944              		.loc 1 872 36
 945 003a BB68     		ldr	r3, [r7, #8]
 946 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 947              		.loc 1 872 44
 948 003e 23F01003 		bic	r3, r3, #16
 949 0042 DBB2     		uxtb	r3, r3
 950              		.loc 1 872 20
 951 0044 0A33     		adds	r3, r3, #10
 952 0046 DAB2     		uxtb	r2, r3
 953              		.loc 1 872 18
 954 0048 BB68     		ldr	r3, [r7, #8]
 955 004a 5A70     		strb	r2, [r3, #1]
 956              	.L33:
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 33


 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 957              		.loc 1 877 6
 958 004c 7B68     		ldr	r3, [r7, #4]
 959 004e 002B     		cmp	r3, #0
 960 0050 1CD1     		bne	.L34
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 961              		.loc 1 883 30
 962 0052 BB68     		ldr	r3, [r7, #8]
 963 0054 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 964 0056 1846     		mov	r0, r3
 965 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 966 005c 0346     		mov	r3, r0
 967              		.loc 1 883 59 discriminator 1
 968 005e 1C04     		lsls	r4, r3, #16
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 969              		.loc 1 884 30
 970 0060 BB68     		ldr	r3, [r7, #8]
 971 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 972 0064 1846     		mov	r0, r3
 973 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 974 006a 0346     		mov	r3, r0
 975              		.loc 1 884 59 discriminator 1
 976 006c 1B02     		lsls	r3, r3, #8
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 977              		.loc 1 883 77
 978 006e 1C43     		orrs	r4, r4, r3
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 979              		.loc 1 885 30
 980 0070 BB68     		ldr	r3, [r7, #8]
 981 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 982 0074 1846     		mov	r0, r3
 983 0076 FFF7FEFF 		bl	RTC_ByteToBcd2
 984 007a 0346     		mov	r3, r0
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 985              		.loc 1 884 77
 986 007c 44EA0302 		orr	r2, r4, r3
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 987              		.loc 1 886 35
 988 0080 BB68     		ldr	r3, [r7, #8]
 989 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 990              		.loc 1 886 59
 991 0084 5B03     		lsls	r3, r3, #13
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 992              		.loc 1 883 16
 993 0086 1343     		orrs	r3, r3, r2
 994 0088 7B61     		str	r3, [r7, #20]
 995 008a 0EE0     		b	.L35
 996              	.L34:
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 34


 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 997              		.loc 1 894 36
 998 008c BB68     		ldr	r3, [r7, #8]
 999 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1000              		.loc 1 894 47
 1001 0090 1A04     		lsls	r2, r3, #16
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1002              		.loc 1 895 36
 1003 0092 BB68     		ldr	r3, [r7, #8]
 1004 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1005              		.loc 1 895 47
 1006 0096 1B02     		lsls	r3, r3, #8
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1007              		.loc 1 894 65
 1008 0098 1343     		orrs	r3, r3, r2
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ((uint32_t) sDate->Date)                      | \
 1009              		.loc 1 896 36
 1010 009a BA68     		ldr	r2, [r7, #8]
 1011 009c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1012              		.loc 1 895 65
 1013 009e 1A43     		orrs	r2, r2, r3
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 1014              		.loc 1 897 36
 1015 00a0 BB68     		ldr	r3, [r7, #8]
 1016 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1017              		.loc 1 897 47
 1018 00a4 5B03     		lsls	r3, r3, #13
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1019              		.loc 1 894 16
 1020 00a6 1343     		orrs	r3, r3, r2
 1021 00a8 7B61     		str	r3, [r7, #20]
 1022              	.L35:
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1023              		.loc 1 901 3
 1024 00aa FB68     		ldr	r3, [r7, #12]
 1025 00ac 1B68     		ldr	r3, [r3]
 1026 00ae CA22     		movs	r2, #202
 1027 00b0 5A62     		str	r2, [r3, #36]
 1028 00b2 FB68     		ldr	r3, [r7, #12]
 1029 00b4 1B68     		ldr	r3, [r3]
 1030 00b6 5322     		movs	r2, #83
 1031 00b8 5A62     		str	r2, [r3, #36]
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enter Initialization mode */
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 1032              		.loc 1 904 12
 1033 00ba F868     		ldr	r0, [r7, #12]
 1034 00bc FFF7FEFF 		bl	RTC_EnterInitMode
 1035 00c0 0346     		mov	r3, r0
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 35


 1036 00c2 FB74     		strb	r3, [r7, #19]
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (status == HAL_OK)
 1037              		.loc 1 906 6
 1038 00c4 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1039 00c6 002B     		cmp	r3, #0
 1040 00c8 0CD1     		bne	.L36
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set the RTC_DR register */
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 1041              		.loc 1 909 9
 1042 00ca FB68     		ldr	r3, [r7, #12]
 1043 00cc 1A68     		ldr	r2, [r3]
 1044              		.loc 1 909 26
 1045 00ce 7B69     		ldr	r3, [r7, #20]
 1046 00d0 23F07F43 		bic	r3, r3, #-16777216
 1047 00d4 23F0C003 		bic	r3, r3, #192
 1048              		.loc 1 909 24
 1049 00d8 5360     		str	r3, [r2, #4]
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Exit Initialization mode */
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 1050              		.loc 1 912 14
 1051 00da F868     		ldr	r0, [r7, #12]
 1052 00dc FFF7FEFF 		bl	RTC_ExitInitMode
 1053 00e0 0346     		mov	r3, r0
 1054 00e2 FB74     		strb	r3, [r7, #19]
 1055              	.L36:
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (status == HAL_OK)
 1056              		.loc 1 915 6
 1057 00e4 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1058 00e6 002B     		cmp	r3, #0
 1059 00e8 02D1     		bne	.L37
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 1060              		.loc 1 917 17
 1061 00ea FB68     		ldr	r3, [r7, #12]
 1062 00ec 0122     		movs	r2, #1
 1063 00ee 5A77     		strb	r2, [r3, #29]
 1064              	.L37:
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1065              		.loc 1 921 3
 1066 00f0 FB68     		ldr	r3, [r7, #12]
 1067 00f2 1B68     		ldr	r3, [r3]
 1068 00f4 FF22     		movs	r2, #255
 1069 00f6 5A62     		str	r2, [r3, #36]
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Unlocked */
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1070              		.loc 1 924 3
 1071 00f8 FB68     		ldr	r3, [r7, #12]
 1072 00fa 0022     		movs	r2, #0
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 36


 1073 00fc 1A77     		strb	r2, [r3, #28]
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return status;
 1074              		.loc 1 926 10
 1075 00fe FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1076              	.L32:
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 1077              		.loc 1 927 1
 1078 0100 1846     		mov	r0, r3
 1079 0102 1C37     		adds	r7, r7, #28
 1080              	.LCFI35:
 1081              		.cfi_def_cfa_offset 12
 1082 0104 BD46     		mov	sp, r7
 1083              	.LCFI36:
 1084              		.cfi_def_cfa_register 13
 1085              		@ sp needed
 1086 0106 90BD     		pop	{r4, r7, pc}
 1087              		.cfi_endproc
 1088              	.LFE140:
 1090              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1091              		.align	1
 1092              		.global	HAL_RTC_GetDate
 1093              		.syntax unified
 1094              		.thumb
 1095              		.thumb_func
 1097              	HAL_RTC_GetDate:
 1098              	.LFB141:
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Gets RTC current date.
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        values in the higher-order calendar shadow registers to ensure
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        consistency between the time and date values.
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        until current date is read to ensure consistency between the time and
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        date values.
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 1099              		.loc 1 947 1
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 24
 1102              		@ frame_needed = 1, uses_anonymous_args = 0
 1103 0000 80B5     		push	{r7, lr}
 1104              	.LCFI37:
 1105              		.cfi_def_cfa_offset 8
 1106              		.cfi_offset 7, -8
 1107              		.cfi_offset 14, -4
 1108 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 37


 1109              	.LCFI38:
 1110              		.cfi_def_cfa_offset 32
 1111 0004 00AF     		add	r7, sp, #0
 1112              	.LCFI39:
 1113              		.cfi_def_cfa_register 7
 1114 0006 F860     		str	r0, [r7, #12]
 1115 0008 B960     		str	r1, [r7, #8]
 1116 000a 7A60     		str	r2, [r7, #4]
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t datetmpreg = 0U;
 1117              		.loc 1 948 12
 1118 000c 0023     		movs	r3, #0
 1119 000e 7B61     		str	r3, [r7, #20]
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get the DR register */
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 1120              		.loc 1 954 31
 1121 0010 FB68     		ldr	r3, [r7, #12]
 1122 0012 1B68     		ldr	r3, [r3]
 1123              		.loc 1 954 41
 1124 0014 5B68     		ldr	r3, [r3, #4]
 1125              		.loc 1 954 14
 1126 0016 23F07F43 		bic	r3, r3, #-16777216
 1127 001a 23F0C003 		bic	r3, r3, #192
 1128 001e 7B61     		str	r3, [r7, #20]
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 1129              		.loc 1 957 69
 1130 0020 7B69     		ldr	r3, [r7, #20]
 1131 0022 1B0C     		lsrs	r3, r3, #16
 1132              		.loc 1 957 20
 1133 0024 DAB2     		uxtb	r2, r3
 1134              		.loc 1 957 18
 1135 0026 BB68     		ldr	r3, [r7, #8]
 1136 0028 DA70     		strb	r2, [r3, #3]
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 1137              		.loc 1 958 69
 1138 002a 7B69     		ldr	r3, [r7, #20]
 1139 002c 1B0A     		lsrs	r3, r3, #8
 1140              		.loc 1 958 20
 1141 002e DBB2     		uxtb	r3, r3
 1142 0030 03F01F03 		and	r3, r3, #31
 1143 0034 DAB2     		uxtb	r2, r3
 1144              		.loc 1 958 18
 1145 0036 BB68     		ldr	r3, [r7, #8]
 1146 0038 5A70     		strb	r2, [r3, #1]
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1147              		.loc 1 959 20
 1148 003a 7B69     		ldr	r3, [r7, #20]
 1149 003c DBB2     		uxtb	r3, r3
 1150 003e 03F03F03 		and	r3, r3, #63
 1151 0042 DAB2     		uxtb	r2, r3
 1152              		.loc 1 959 18
 1153 0044 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 38


 1154 0046 9A70     		strb	r2, [r3, #2]
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 1155              		.loc 1 960 69
 1156 0048 7B69     		ldr	r3, [r7, #20]
 1157 004a 5B0B     		lsrs	r3, r3, #13
 1158              		.loc 1 960 20
 1159 004c DBB2     		uxtb	r3, r3
 1160 004e 03F00703 		and	r3, r3, #7
 1161 0052 DAB2     		uxtb	r2, r3
 1162              		.loc 1 960 18
 1163 0054 BB68     		ldr	r3, [r7, #8]
 1164 0056 1A70     		strb	r2, [r3]
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the input parameters format */
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 1165              		.loc 1 963 6
 1166 0058 7B68     		ldr	r3, [r7, #4]
 1167 005a 002B     		cmp	r3, #0
 1168 005c 1AD1     		bne	.L39
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1169              		.loc 1 966 29
 1170 005e BB68     		ldr	r3, [r7, #8]
 1171 0060 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1172 0062 1846     		mov	r0, r3
 1173 0064 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1174 0068 0346     		mov	r3, r0
 1175 006a 1A46     		mov	r2, r3
 1176              		.loc 1 966 18 discriminator 1
 1177 006c BB68     		ldr	r3, [r7, #8]
 1178 006e DA70     		strb	r2, [r3, #3]
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1179              		.loc 1 967 29
 1180 0070 BB68     		ldr	r3, [r7, #8]
 1181 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1182 0074 1846     		mov	r0, r3
 1183 0076 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1184 007a 0346     		mov	r3, r0
 1185 007c 1A46     		mov	r2, r3
 1186              		.loc 1 967 18 discriminator 1
 1187 007e BB68     		ldr	r3, [r7, #8]
 1188 0080 5A70     		strb	r2, [r3, #1]
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 1189              		.loc 1 968 29
 1190 0082 BB68     		ldr	r3, [r7, #8]
 1191 0084 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1192 0086 1846     		mov	r0, r3
 1193 0088 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1194 008c 0346     		mov	r3, r0
 1195 008e 1A46     		mov	r2, r3
 1196              		.loc 1 968 18 discriminator 1
 1197 0090 BB68     		ldr	r3, [r7, #8]
 1198 0092 9A70     		strb	r2, [r3, #2]
 1199              	.L39:
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 39


 1200              		.loc 1 970 10
 1201 0094 0023     		movs	r3, #0
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 1202              		.loc 1 971 1
 1203 0096 1846     		mov	r0, r3
 1204 0098 1837     		adds	r7, r7, #24
 1205              	.LCFI40:
 1206              		.cfi_def_cfa_offset 8
 1207 009a BD46     		mov	sp, r7
 1208              	.LCFI41:
 1209              		.cfi_def_cfa_register 13
 1210              		@ sp needed
 1211 009c 80BD     		pop	{r7, pc}
 1212              		.cfi_endproc
 1213              	.LFE141:
 1215              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1216              		.align	1
 1217              		.global	HAL_RTC_SetAlarm
 1218              		.syntax unified
 1219              		.thumb
 1220              		.thumb_func
 1222              	HAL_RTC_SetAlarm:
 1223              	.LFB142:
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group3 RTC Alarm functions
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief    RTC Alarm functions
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 40


 1224              		.loc 1 1005 1
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 32
 1227              		@ frame_needed = 1, uses_anonymous_args = 0
 1228 0000 90B5     		push	{r4, r7, lr}
 1229              	.LCFI42:
 1230              		.cfi_def_cfa_offset 12
 1231              		.cfi_offset 4, -12
 1232              		.cfi_offset 7, -8
 1233              		.cfi_offset 14, -4
 1234 0002 89B0     		sub	sp, sp, #36
 1235              	.LCFI43:
 1236              		.cfi_def_cfa_offset 48
 1237 0004 00AF     		add	r7, sp, #0
 1238              	.LCFI44:
 1239              		.cfi_def_cfa_register 7
 1240 0006 F860     		str	r0, [r7, #12]
 1241 0008 B960     		str	r1, [r7, #8]
 1242 000a 7A60     		str	r2, [r7, #4]
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 1243              		.loc 1 1006 12
 1244 000c 0023     		movs	r3, #0
 1245 000e BB61     		str	r3, [r7, #24]
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U;
 1246              		.loc 1 1007 12
 1247 0010 0023     		movs	r3, #0
 1248 0012 FB61     		str	r3, [r7, #28]
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t subsecondtmpreg = 0U;
 1249              		.loc 1 1008 12
 1250 0014 0023     		movs	r3, #0
 1251 0016 7B61     		str	r3, [r7, #20]
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1252              		.loc 1 1019 3
 1253 0018 FB68     		ldr	r3, [r7, #12]
 1254 001a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1255 001c 012B     		cmp	r3, #1
 1256 001e 01D1     		bne	.L42
 1257              		.loc 1 1019 3 is_stmt 0 discriminator 1
 1258 0020 0223     		movs	r3, #2
 1259              		.loc 1 1019 3
 1260 0022 13E1     		b	.L43
 1261              	.L42:
 1262              		.loc 1 1019 3 discriminator 2
 1263 0024 FB68     		ldr	r3, [r7, #12]
 1264 0026 0122     		movs	r2, #1
 1265 0028 1A77     		strb	r2, [r3, #28]
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 41


1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state to BUSY */
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1266              		.loc 1 1022 15 is_stmt 1
 1267 002a FB68     		ldr	r3, [r7, #12]
 1268 002c 0222     		movs	r2, #2
 1269 002e 5A77     		strb	r2, [r3, #29]
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the data format (binary or BCD) and store the Alarm time and date
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****      configuration accordingly */
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 1270              		.loc 1 1026 6
 1271 0030 7B68     		ldr	r3, [r7, #4]
 1272 0032 002B     		cmp	r3, #0
 1273 0034 37D1     		bne	.L44
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1274              		.loc 1 1028 14
 1275 0036 FB68     		ldr	r3, [r7, #12]
 1276 0038 1B68     		ldr	r3, [r3]
 1277              		.loc 1 1028 24
 1278 003a 9B68     		ldr	r3, [r3, #8]
 1279              		.loc 1 1028 29
 1280 003c 03F04003 		and	r3, r3, #64
 1281              		.loc 1 1028 8
 1282 0040 002B     		cmp	r3, #0
 1283 0042 02D1     		bne	.L45
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1284              		.loc 1 1035 36
 1285 0044 BB68     		ldr	r3, [r7, #8]
 1286 0046 0022     		movs	r2, #0
 1287 0048 DA70     		strb	r2, [r3, #3]
 1288              	.L45:
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 1289              		.loc 1 1050 26
 1290 004a BB68     		ldr	r3, [r7, #8]
 1291 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1292 004e 1846     		mov	r0, r3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 42


 1293 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1294 0054 0346     		mov	r3, r0
 1295              		.loc 1 1050 68 discriminator 1
 1296 0056 1C04     		lsls	r4, r3, #16
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1297              		.loc 1 1051 26
 1298 0058 BB68     		ldr	r3, [r7, #8]
 1299 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1300 005c 1846     		mov	r0, r3
 1301 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1302 0062 0346     		mov	r3, r0
 1303              		.loc 1 1051 68 discriminator 1
 1304 0064 1B02     		lsls	r3, r3, #8
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1305              		.loc 1 1050 91
 1306 0066 1C43     		orrs	r4, r4, r3
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 1307              		.loc 1 1052 26
 1308 0068 BB68     		ldr	r3, [r7, #8]
 1309 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1310 006c 1846     		mov	r0, r3
 1311 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1312 0072 0346     		mov	r3, r0
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1313              		.loc 1 1051 91
 1314 0074 44EA0302 		orr	r2, r4, r3
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 1315              		.loc 1 1053 44
 1316 0078 BB68     		ldr	r3, [r7, #8]
 1317 007a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1318              		.loc 1 1053 68
 1319 007c 9B05     		lsls	r3, r3, #22
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 1320              		.loc 1 1052 91
 1321 007e 42EA0304 		orr	r4, r2, r3
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1322              		.loc 1 1054 26
 1323 0082 BB68     		ldr	r3, [r7, #8]
 1324 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1325 0088 1846     		mov	r0, r3
 1326 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1327 008e 0346     		mov	r3, r0
 1328              		.loc 1 1054 68 discriminator 1
 1329 0090 1B06     		lsls	r3, r3, #24
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 1330              		.loc 1 1053 91
 1331 0092 44EA0302 		orr	r2, r4, r3
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1332              		.loc 1 1055 32
 1333 0096 BB68     		ldr	r3, [r7, #8]
 1334 0098 DB69     		ldr	r3, [r3, #28]
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1335              		.loc 1 1054 91
 1336 009a 1A43     		orrs	r2, r2, r3
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1337              		.loc 1 1056 32
 1338 009c BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 43


 1339 009e 5B69     		ldr	r3, [r3, #20]
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1340              		.loc 1 1050 12
 1341 00a0 1343     		orrs	r3, r3, r2
 1342 00a2 FB61     		str	r3, [r7, #28]
 1343 00a4 23E0     		b	.L46
 1344              	.L44:
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1345              		.loc 1 1060 14
 1346 00a6 FB68     		ldr	r3, [r7, #12]
 1347 00a8 1B68     		ldr	r3, [r3]
 1348              		.loc 1 1060 24
 1349 00aa 9B68     		ldr	r3, [r3, #8]
 1350              		.loc 1 1060 29
 1351 00ac 03F04003 		and	r3, r3, #64
 1352              		.loc 1 1060 8
 1353 00b0 002B     		cmp	r3, #0
 1354 00b2 02D1     		bne	.L47
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1355              		.loc 1 1067 36
 1356 00b4 BB68     		ldr	r3, [r7, #8]
 1357 00b6 0022     		movs	r2, #0
 1358 00b8 DA70     		strb	r2, [r3, #3]
 1359              	.L47:
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 1360              		.loc 1 1083 44
 1361 00ba BB68     		ldr	r3, [r7, #8]
 1362 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1363              		.loc 1 1083 57
 1364 00be 1A04     		lsls	r2, r3, #16
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 1365              		.loc 1 1084 44
 1366 00c0 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 44


 1367 00c2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1368              		.loc 1 1084 57
 1369 00c4 1B02     		lsls	r3, r3, #8
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 1370              		.loc 1 1083 80
 1371 00c6 1343     		orrs	r3, r3, r2
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 1372              		.loc 1 1085 44
 1373 00c8 BA68     		ldr	r2, [r7, #8]
 1374 00ca 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 1375              		.loc 1 1084 80
 1376 00cc 1A43     		orrs	r2, r2, r3
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 1377              		.loc 1 1086 44
 1378 00ce BB68     		ldr	r3, [r7, #8]
 1379 00d0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1380              		.loc 1 1086 57
 1381 00d2 9B05     		lsls	r3, r3, #22
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 1382              		.loc 1 1085 80
 1383 00d4 1A43     		orrs	r2, r2, r3
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 1384              		.loc 1 1087 33
 1385 00d6 BB68     		ldr	r3, [r7, #8]
 1386 00d8 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1387              		.loc 1 1087 57
 1388 00dc 1B06     		lsls	r3, r3, #24
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 1389              		.loc 1 1086 80
 1390 00de 1A43     		orrs	r2, r2, r3
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 1391              		.loc 1 1088 33
 1392 00e0 BB68     		ldr	r3, [r7, #8]
 1393 00e2 DB69     		ldr	r3, [r3, #28]
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 1394              		.loc 1 1087 80
 1395 00e4 1A43     		orrs	r2, r2, r3
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmMask));
 1396              		.loc 1 1089 33
 1397 00e6 BB68     		ldr	r3, [r7, #8]
 1398 00e8 5B69     		ldr	r3, [r3, #20]
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 1399              		.loc 1 1083 12
 1400 00ea 1343     		orrs	r3, r3, r2
 1401 00ec FB61     		str	r3, [r7, #28]
 1402              	.L46:
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Store the Alarm subseconds configuration */
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 1403              		.loc 1 1093 60
 1404 00ee BB68     		ldr	r3, [r7, #8]
 1405 00f0 5A68     		ldr	r2, [r3, #4]
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                                (uint32_t)(sAlarm->AlarmSubSecondMask));
 1406              		.loc 1 1094 49
 1407 00f2 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 45


 1408 00f4 9B69     		ldr	r3, [r3, #24]
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                                (uint32_t)(sAlarm->AlarmSubSecondMask));
 1409              		.loc 1 1093 19
 1410 00f6 1343     		orrs	r3, r3, r2
 1411 00f8 7B61     		str	r3, [r7, #20]
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1412              		.loc 1 1097 3
 1413 00fa FB68     		ldr	r3, [r7, #12]
 1414 00fc 1B68     		ldr	r3, [r3]
 1415 00fe CA22     		movs	r2, #202
 1416 0100 5A62     		str	r2, [r3, #36]
 1417 0102 FB68     		ldr	r3, [r7, #12]
 1418 0104 1B68     		ldr	r3, [r3]
 1419 0106 5322     		movs	r2, #83
 1420 0108 5A62     		str	r2, [r3, #36]
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Configure the Alarm register */
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (sAlarm->Alarm == RTC_ALARM_A)
 1421              		.loc 1 1100 13
 1422 010a BB68     		ldr	r3, [r7, #8]
 1423 010c 5B6A     		ldr	r3, [r3, #36]
 1424              		.loc 1 1100 6
 1425 010e B3F5807F 		cmp	r3, #256
 1426 0112 48D1     		bne	.L48
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the Alarm A */
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1427              		.loc 1 1103 5
 1428 0114 FB68     		ldr	r3, [r7, #12]
 1429 0116 1B68     		ldr	r3, [r3]
 1430 0118 9A68     		ldr	r2, [r3, #8]
 1431 011a FB68     		ldr	r3, [r7, #12]
 1432 011c 1B68     		ldr	r3, [r3]
 1433 011e 22F48072 		bic	r2, r2, #256
 1434 0122 9A60     		str	r2, [r3, #8]
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* In case interrupt mode is used, the interrupt source must be disabled */
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1435              		.loc 1 1106 5
 1436 0124 FB68     		ldr	r3, [r7, #12]
 1437 0126 1B68     		ldr	r3, [r3]
 1438 0128 9A68     		ldr	r2, [r3, #8]
 1439 012a FB68     		ldr	r3, [r7, #12]
 1440 012c 1B68     		ldr	r3, [r3]
 1441 012e 22F48052 		bic	r2, r2, #4096
 1442 0132 9A60     		str	r2, [r3, #8]
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear the Alarm flag */
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1443              		.loc 1 1109 5
 1444 0134 FB68     		ldr	r3, [r7, #12]
 1445 0136 1B68     		ldr	r3, [r3]
 1446 0138 DB68     		ldr	r3, [r3, #12]
 1447 013a DAB2     		uxtb	r2, r3
 1448 013c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 46


 1449 013e 1B68     		ldr	r3, [r3]
 1450 0140 62F4C072 		orn	r2, r2, #384
 1451 0144 DA60     		str	r2, [r3, #12]
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1452              		.loc 1 1112 17
 1453 0146 FFF7FEFF 		bl	HAL_GetTick
 1454 014a B861     		str	r0, [r7, #24]
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 1455              		.loc 1 1115 11
 1456 014c 13E0     		b	.L49
 1457              	.L50:
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1458              		.loc 1 1117 12
 1459 014e FFF7FEFF 		bl	HAL_GetTick
 1460 0152 0246     		mov	r2, r0
 1461              		.loc 1 1117 26 discriminator 1
 1462 0154 BB69     		ldr	r3, [r7, #24]
 1463 0156 D31A     		subs	r3, r2, r3
 1464              		.loc 1 1117 10 discriminator 1
 1465 0158 B3F57A7F 		cmp	r3, #1000
 1466 015c 0BD9     		bls	.L49
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1467              		.loc 1 1120 9
 1468 015e FB68     		ldr	r3, [r7, #12]
 1469 0160 1B68     		ldr	r3, [r3]
 1470 0162 FF22     		movs	r2, #255
 1471 0164 5A62     		str	r2, [r3, #36]
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1472              		.loc 1 1122 21
 1473 0166 FB68     		ldr	r3, [r7, #12]
 1474 0168 0322     		movs	r2, #3
 1475 016a 5A77     		strb	r2, [r3, #29]
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1476              		.loc 1 1125 9
 1477 016c FB68     		ldr	r3, [r7, #12]
 1478 016e 0022     		movs	r2, #0
 1479 0170 1A77     		strb	r2, [r3, #28]
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1480              		.loc 1 1127 16
 1481 0172 0323     		movs	r3, #3
 1482 0174 6AE0     		b	.L43
 1483              	.L49:
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 1484              		.loc 1 1115 12
 1485 0176 FB68     		ldr	r3, [r7, #12]
 1486 0178 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 47


 1487 017a DB68     		ldr	r3, [r3, #12]
 1488 017c 03F00103 		and	r3, r3, #1
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 1489              		.loc 1 1115 60
 1490 0180 002B     		cmp	r3, #0
 1491 0182 E4D0     		beq	.L50
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1492              		.loc 1 1131 9
 1493 0184 FB68     		ldr	r3, [r7, #12]
 1494 0186 1B68     		ldr	r3, [r3]
 1495              		.loc 1 1131 28
 1496 0188 FA69     		ldr	r2, [r7, #28]
 1497 018a DA61     		str	r2, [r3, #28]
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm A Subseconds register */
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1498              		.loc 1 1133 9
 1499 018c FB68     		ldr	r3, [r7, #12]
 1500 018e 1B68     		ldr	r3, [r3]
 1501              		.loc 1 1133 30
 1502 0190 7A69     		ldr	r2, [r7, #20]
 1503 0192 5A64     		str	r2, [r3, #68]
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1504              		.loc 1 1135 5
 1505 0194 FB68     		ldr	r3, [r7, #12]
 1506 0196 1B68     		ldr	r3, [r3]
 1507 0198 9A68     		ldr	r2, [r3, #8]
 1508 019a FB68     		ldr	r3, [r7, #12]
 1509 019c 1B68     		ldr	r3, [r3]
 1510 019e 42F48072 		orr	r2, r2, #256
 1511 01a2 9A60     		str	r2, [r3, #8]
 1512 01a4 47E0     		b	.L51
 1513              	.L48:
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the Alarm B */
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1514              		.loc 1 1140 5
 1515 01a6 FB68     		ldr	r3, [r7, #12]
 1516 01a8 1B68     		ldr	r3, [r3]
 1517 01aa 9A68     		ldr	r2, [r3, #8]
 1518 01ac FB68     		ldr	r3, [r7, #12]
 1519 01ae 1B68     		ldr	r3, [r3]
 1520 01b0 22F40072 		bic	r2, r2, #512
 1521 01b4 9A60     		str	r2, [r3, #8]
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* In case interrupt mode is used, the interrupt source must be disabled */
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1522              		.loc 1 1143 5
 1523 01b6 FB68     		ldr	r3, [r7, #12]
 1524 01b8 1B68     		ldr	r3, [r3]
 1525 01ba 9A68     		ldr	r2, [r3, #8]
 1526 01bc FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 48


 1527 01be 1B68     		ldr	r3, [r3]
 1528 01c0 22F40052 		bic	r2, r2, #8192
 1529 01c4 9A60     		str	r2, [r3, #8]
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear the Alarm flag */
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1530              		.loc 1 1146 5
 1531 01c6 FB68     		ldr	r3, [r7, #12]
 1532 01c8 1B68     		ldr	r3, [r3]
 1533 01ca DB68     		ldr	r3, [r3, #12]
 1534 01cc DAB2     		uxtb	r2, r3
 1535 01ce FB68     		ldr	r3, [r7, #12]
 1536 01d0 1B68     		ldr	r3, [r3]
 1537 01d2 62F42072 		orn	r2, r2, #640
 1538 01d6 DA60     		str	r2, [r3, #12]
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1539              		.loc 1 1149 17
 1540 01d8 FFF7FEFF 		bl	HAL_GetTick
 1541 01dc B861     		str	r0, [r7, #24]
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 1542              		.loc 1 1152 11
 1543 01de 13E0     		b	.L52
 1544              	.L53:
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1545              		.loc 1 1154 12
 1546 01e0 FFF7FEFF 		bl	HAL_GetTick
 1547 01e4 0246     		mov	r2, r0
 1548              		.loc 1 1154 26 discriminator 1
 1549 01e6 BB69     		ldr	r3, [r7, #24]
 1550 01e8 D31A     		subs	r3, r2, r3
 1551              		.loc 1 1154 10 discriminator 1
 1552 01ea B3F57A7F 		cmp	r3, #1000
 1553 01ee 0BD9     		bls	.L52
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1554              		.loc 1 1157 9
 1555 01f0 FB68     		ldr	r3, [r7, #12]
 1556 01f2 1B68     		ldr	r3, [r3]
 1557 01f4 FF22     		movs	r2, #255
 1558 01f6 5A62     		str	r2, [r3, #36]
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1559              		.loc 1 1159 21
 1560 01f8 FB68     		ldr	r3, [r7, #12]
 1561 01fa 0322     		movs	r2, #3
 1562 01fc 5A77     		strb	r2, [r3, #29]
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1563              		.loc 1 1162 9
 1564 01fe FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 49


 1565 0200 0022     		movs	r2, #0
 1566 0202 1A77     		strb	r2, [r3, #28]
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1567              		.loc 1 1164 16
 1568 0204 0323     		movs	r3, #3
 1569 0206 21E0     		b	.L43
 1570              	.L52:
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 1571              		.loc 1 1152 12
 1572 0208 FB68     		ldr	r3, [r7, #12]
 1573 020a 1B68     		ldr	r3, [r3]
 1574 020c DB68     		ldr	r3, [r3, #12]
 1575 020e 03F00203 		and	r3, r3, #2
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 1576              		.loc 1 1152 60
 1577 0212 002B     		cmp	r3, #0
 1578 0214 E4D0     		beq	.L53
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1579              		.loc 1 1168 9
 1580 0216 FB68     		ldr	r3, [r7, #12]
 1581 0218 1B68     		ldr	r3, [r3]
 1582              		.loc 1 1168 28
 1583 021a FA69     		ldr	r2, [r7, #28]
 1584 021c 1A62     		str	r2, [r3, #32]
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm B Subseconds register */
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 1585              		.loc 1 1170 9
 1586 021e FB68     		ldr	r3, [r7, #12]
 1587 0220 1B68     		ldr	r3, [r3]
 1588              		.loc 1 1170 30
 1589 0222 7A69     		ldr	r2, [r7, #20]
 1590 0224 9A64     		str	r2, [r3, #72]
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 1591              		.loc 1 1172 5
 1592 0226 FB68     		ldr	r3, [r7, #12]
 1593 0228 1B68     		ldr	r3, [r3]
 1594 022a 9A68     		ldr	r2, [r3, #8]
 1595 022c FB68     		ldr	r3, [r7, #12]
 1596 022e 1B68     		ldr	r3, [r3]
 1597 0230 42F40072 		orr	r2, r2, #512
 1598 0234 9A60     		str	r2, [r3, #8]
 1599              	.L51:
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1600              		.loc 1 1176 3
 1601 0236 FB68     		ldr	r3, [r7, #12]
 1602 0238 1B68     		ldr	r3, [r3]
 1603 023a FF22     		movs	r2, #255
 1604 023c 5A62     		str	r2, [r3, #36]
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 50


1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state back to READY */
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 1605              		.loc 1 1179 15
 1606 023e FB68     		ldr	r3, [r7, #12]
 1607 0240 0122     		movs	r2, #1
 1608 0242 5A77     		strb	r2, [r3, #29]
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Unlocked */
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1609              		.loc 1 1182 3
 1610 0244 FB68     		ldr	r3, [r7, #12]
 1611 0246 0022     		movs	r2, #0
 1612 0248 1A77     		strb	r2, [r3, #28]
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 1613              		.loc 1 1184 10
 1614 024a 0023     		movs	r3, #0
 1615              	.L43:
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 1616              		.loc 1 1185 1
 1617 024c 1846     		mov	r0, r3
 1618 024e 2437     		adds	r7, r7, #36
 1619              	.LCFI45:
 1620              		.cfi_def_cfa_offset 12
 1621 0250 BD46     		mov	sp, r7
 1622              	.LCFI46:
 1623              		.cfi_def_cfa_register 13
 1624              		@ sp needed
 1625 0252 90BD     		pop	{r4, r7, pc}
 1626              		.cfi_endproc
 1627              	.LFE142:
 1629              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1630              		.align	1
 1631              		.global	HAL_RTC_SetAlarm_IT
 1632              		.syntax unified
 1633              		.thumb
 1634              		.thumb_func
 1636              	HAL_RTC_SetAlarm_IT:
 1637              	.LFB143:
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt.
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 1638              		.loc 1 1202 1
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 51


 1639              		.cfi_startproc
 1640              		@ args = 0, pretend = 0, frame = 32
 1641              		@ frame_needed = 1, uses_anonymous_args = 0
 1642 0000 90B5     		push	{r4, r7, lr}
 1643              	.LCFI47:
 1644              		.cfi_def_cfa_offset 12
 1645              		.cfi_offset 4, -12
 1646              		.cfi_offset 7, -8
 1647              		.cfi_offset 14, -4
 1648 0002 89B0     		sub	sp, sp, #36
 1649              	.LCFI48:
 1650              		.cfi_def_cfa_offset 48
 1651 0004 00AF     		add	r7, sp, #0
 1652              	.LCFI49:
 1653              		.cfi_def_cfa_register 7
 1654 0006 F860     		str	r0, [r7, #12]
 1655 0008 B960     		str	r1, [r7, #8]
 1656 000a 7A60     		str	r2, [r7, #4]
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 1657              		.loc 1 1203 69
 1658 000c 9B4B     		ldr	r3, .L67
 1659 000e 1B68     		ldr	r3, [r3]
 1660 0010 9B4A     		ldr	r2, .L67+4
 1661 0012 A2FB0323 		umull	r2, r3, r2, r3
 1662 0016 DB0A     		lsrs	r3, r3, #11
 1663              		.loc 1 1203 44
 1664 0018 4FF47A72 		mov	r2, #1000
 1665 001c 02FB03F3 		mul	r3, r2, r3
 1666              		.loc 1 1203 17
 1667 0020 7B61     		str	r3, [r7, #20]
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        uint32_t tmpreg = 0U;
 1668              		.loc 1 1204 17
 1669 0022 0023     		movs	r3, #0
 1670 0024 FB61     		str	r3, [r7, #28]
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        uint32_t subsecondtmpreg = 0U;
 1671              		.loc 1 1205 17
 1672 0026 0023     		movs	r3, #0
 1673 0028 BB61     		str	r3, [r7, #24]
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1674              		.loc 1 1216 3
 1675 002a FB68     		ldr	r3, [r7, #12]
 1676 002c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1677 002e 012B     		cmp	r3, #1
 1678 0030 01D1     		bne	.L55
 1679              		.loc 1 1216 3 is_stmt 0 discriminator 1
 1680 0032 0223     		movs	r3, #2
 1681              		.loc 1 1216 3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 52


 1682 0034 1EE1     		b	.L56
 1683              	.L55:
 1684              		.loc 1 1216 3 discriminator 2
 1685 0036 FB68     		ldr	r3, [r7, #12]
 1686 0038 0122     		movs	r2, #1
 1687 003a 1A77     		strb	r2, [r3, #28]
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state to BUSY */
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1688              		.loc 1 1219 15 is_stmt 1
 1689 003c FB68     		ldr	r3, [r7, #12]
 1690 003e 0222     		movs	r2, #2
 1691 0040 5A77     		strb	r2, [r3, #29]
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the data format (binary or BCD) and store the Alarm time and date
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****      configuration accordingly */
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 1692              		.loc 1 1223 6
 1693 0042 7B68     		ldr	r3, [r7, #4]
 1694 0044 002B     		cmp	r3, #0
 1695 0046 37D1     		bne	.L57
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1696              		.loc 1 1225 14
 1697 0048 FB68     		ldr	r3, [r7, #12]
 1698 004a 1B68     		ldr	r3, [r3]
 1699              		.loc 1 1225 24
 1700 004c 9B68     		ldr	r3, [r3, #8]
 1701              		.loc 1 1225 29
 1702 004e 03F04003 		and	r3, r3, #64
 1703              		.loc 1 1225 8
 1704 0052 002B     		cmp	r3, #0
 1705 0054 02D1     		bne	.L58
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1706              		.loc 1 1232 36
 1707 0056 BB68     		ldr	r3, [r7, #8]
 1708 0058 0022     		movs	r2, #0
 1709 005a DA70     		strb	r2, [r3, #3]
 1710              	.L58:
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 53


1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 1711              		.loc 1 1247 26
 1712 005c BB68     		ldr	r3, [r7, #8]
 1713 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1714 0060 1846     		mov	r0, r3
 1715 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1716 0066 0346     		mov	r3, r0
 1717              		.loc 1 1247 68 discriminator 1
 1718 0068 1C04     		lsls	r4, r3, #16
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1719              		.loc 1 1248 26
 1720 006a BB68     		ldr	r3, [r7, #8]
 1721 006c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1722 006e 1846     		mov	r0, r3
 1723 0070 FFF7FEFF 		bl	RTC_ByteToBcd2
 1724 0074 0346     		mov	r3, r0
 1725              		.loc 1 1248 68 discriminator 1
 1726 0076 1B02     		lsls	r3, r3, #8
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1727              		.loc 1 1247 91
 1728 0078 1C43     		orrs	r4, r4, r3
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 1729              		.loc 1 1249 26
 1730 007a BB68     		ldr	r3, [r7, #8]
 1731 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1732 007e 1846     		mov	r0, r3
 1733 0080 FFF7FEFF 		bl	RTC_ByteToBcd2
 1734 0084 0346     		mov	r3, r0
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1735              		.loc 1 1248 91
 1736 0086 44EA0302 		orr	r2, r4, r3
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 1737              		.loc 1 1250 44
 1738 008a BB68     		ldr	r3, [r7, #8]
 1739 008c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1740              		.loc 1 1250 68
 1741 008e 9B05     		lsls	r3, r3, #22
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 1742              		.loc 1 1249 91
 1743 0090 42EA0304 		orr	r4, r2, r3
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1744              		.loc 1 1251 26
 1745 0094 BB68     		ldr	r3, [r7, #8]
 1746 0096 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1747 009a 1846     		mov	r0, r3
 1748 009c FFF7FEFF 		bl	RTC_ByteToBcd2
 1749 00a0 0346     		mov	r3, r0
 1750              		.loc 1 1251 68 discriminator 1
 1751 00a2 1B06     		lsls	r3, r3, #24
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 1752              		.loc 1 1250 91
 1753 00a4 44EA0302 		orr	r2, r4, r3
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1754              		.loc 1 1252 32
 1755 00a8 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 54


 1756 00aa DB69     		ldr	r3, [r3, #28]
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1757              		.loc 1 1251 91
 1758 00ac 1A43     		orrs	r2, r2, r3
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1759              		.loc 1 1253 32
 1760 00ae BB68     		ldr	r3, [r7, #8]
 1761 00b0 5B69     		ldr	r3, [r3, #20]
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1762              		.loc 1 1247 12
 1763 00b2 1343     		orrs	r3, r3, r2
 1764 00b4 FB61     		str	r3, [r7, #28]
 1765 00b6 23E0     		b	.L59
 1766              	.L57:
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1767              		.loc 1 1257 14
 1768 00b8 FB68     		ldr	r3, [r7, #12]
 1769 00ba 1B68     		ldr	r3, [r3]
 1770              		.loc 1 1257 24
 1771 00bc 9B68     		ldr	r3, [r3, #8]
 1772              		.loc 1 1257 29
 1773 00be 03F04003 		and	r3, r3, #64
 1774              		.loc 1 1257 8
 1775 00c2 002B     		cmp	r3, #0
 1776 00c4 02D1     		bne	.L60
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1777              		.loc 1 1264 36
 1778 00c6 BB68     		ldr	r3, [r7, #8]
 1779 00c8 0022     		movs	r2, #0
 1780 00ca DA70     		strb	r2, [r3, #3]
 1781              	.L60:
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 1782              		.loc 1 1280 44
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 55


 1783 00cc BB68     		ldr	r3, [r7, #8]
 1784 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1785              		.loc 1 1280 57
 1786 00d0 1A04     		lsls	r2, r3, #16
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 1787              		.loc 1 1281 44
 1788 00d2 BB68     		ldr	r3, [r7, #8]
 1789 00d4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1790              		.loc 1 1281 57
 1791 00d6 1B02     		lsls	r3, r3, #8
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 1792              		.loc 1 1280 80
 1793 00d8 1343     		orrs	r3, r3, r2
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 1794              		.loc 1 1282 44
 1795 00da BA68     		ldr	r2, [r7, #8]
 1796 00dc 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 1797              		.loc 1 1281 80
 1798 00de 1A43     		orrs	r2, r2, r3
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 1799              		.loc 1 1283 44
 1800 00e0 BB68     		ldr	r3, [r7, #8]
 1801 00e2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1802              		.loc 1 1283 57
 1803 00e4 9B05     		lsls	r3, r3, #22
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 1804              		.loc 1 1282 80
 1805 00e6 1A43     		orrs	r2, r2, r3
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 1806              		.loc 1 1284 33
 1807 00e8 BB68     		ldr	r3, [r7, #8]
 1808 00ea 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1809              		.loc 1 1284 57
 1810 00ee 1B06     		lsls	r3, r3, #24
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 1811              		.loc 1 1283 80
 1812 00f0 1A43     		orrs	r2, r2, r3
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 1813              		.loc 1 1285 33
 1814 00f2 BB68     		ldr	r3, [r7, #8]
 1815 00f4 DB69     		ldr	r3, [r3, #28]
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 1816              		.loc 1 1284 80
 1817 00f6 1A43     		orrs	r2, r2, r3
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmMask));
 1818              		.loc 1 1286 33
 1819 00f8 BB68     		ldr	r3, [r7, #8]
 1820 00fa 5B69     		ldr	r3, [r3, #20]
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 1821              		.loc 1 1280 12
 1822 00fc 1343     		orrs	r3, r3, r2
 1823 00fe FB61     		str	r3, [r7, #28]
 1824              	.L59:
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Store the Alarm subseconds configuration */
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 56


1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 1825              		.loc 1 1290 60
 1826 0100 BB68     		ldr	r3, [r7, #8]
 1827 0102 5A68     		ldr	r2, [r3, #4]
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                                (uint32_t)(sAlarm->AlarmSubSecondMask));
 1828              		.loc 1 1291 49
 1829 0104 BB68     		ldr	r3, [r7, #8]
 1830 0106 9B69     		ldr	r3, [r3, #24]
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                                (uint32_t)(sAlarm->AlarmSubSecondMask));
 1831              		.loc 1 1290 19
 1832 0108 1343     		orrs	r3, r3, r2
 1833 010a BB61     		str	r3, [r7, #24]
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1834              		.loc 1 1294 3
 1835 010c FB68     		ldr	r3, [r7, #12]
 1836 010e 1B68     		ldr	r3, [r3]
 1837 0110 CA22     		movs	r2, #202
 1838 0112 5A62     		str	r2, [r3, #36]
 1839 0114 FB68     		ldr	r3, [r7, #12]
 1840 0116 1B68     		ldr	r3, [r3]
 1841 0118 5322     		movs	r2, #83
 1842 011a 5A62     		str	r2, [r3, #36]
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Configure the Alarm register */
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (sAlarm->Alarm == RTC_ALARM_A)
 1843              		.loc 1 1297 13
 1844 011c BB68     		ldr	r3, [r7, #8]
 1845 011e 5B6A     		ldr	r3, [r3, #36]
 1846              		.loc 1 1297 6
 1847 0120 B3F5807F 		cmp	r3, #256
 1848 0124 42D1     		bne	.L61
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the Alarm A */
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1849              		.loc 1 1300 5
 1850 0126 FB68     		ldr	r3, [r7, #12]
 1851 0128 1B68     		ldr	r3, [r3]
 1852 012a 9A68     		ldr	r2, [r3, #8]
 1853 012c FB68     		ldr	r3, [r7, #12]
 1854 012e 1B68     		ldr	r3, [r3]
 1855 0130 22F48072 		bic	r2, r2, #256
 1856 0134 9A60     		str	r2, [r3, #8]
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear the Alarm flag */
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1857              		.loc 1 1303 5
 1858 0136 FB68     		ldr	r3, [r7, #12]
 1859 0138 1B68     		ldr	r3, [r3]
 1860 013a DB68     		ldr	r3, [r3, #12]
 1861 013c DAB2     		uxtb	r2, r3
 1862 013e FB68     		ldr	r3, [r7, #12]
 1863 0140 1B68     		ldr	r3, [r3]
 1864 0142 62F4C072 		orn	r2, r2, #384
 1865 0146 DA60     		str	r2, [r3, #12]
 1866              	.L63:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 57


1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     do
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       count = count - 1U;
 1867              		.loc 1 1308 21
 1868 0148 7B69     		ldr	r3, [r7, #20]
 1869 014a 013B     		subs	r3, r3, #1
 1870              		.loc 1 1308 13
 1871 014c 7B61     		str	r3, [r7, #20]
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if (count == 0U)
 1872              		.loc 1 1309 17
 1873 014e 7B69     		ldr	r3, [r7, #20]
 1874              		.loc 1 1309 10
 1875 0150 002B     		cmp	r3, #0
 1876 0152 0BD1     		bne	.L62
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1877              		.loc 1 1312 9
 1878 0154 FB68     		ldr	r3, [r7, #12]
 1879 0156 1B68     		ldr	r3, [r3]
 1880 0158 FF22     		movs	r2, #255
 1881 015a 5A62     		str	r2, [r3, #36]
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1882              		.loc 1 1314 21
 1883 015c FB68     		ldr	r3, [r7, #12]
 1884 015e 0322     		movs	r2, #3
 1885 0160 5A77     		strb	r2, [r3, #29]
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1886              		.loc 1 1317 9
 1887 0162 FB68     		ldr	r3, [r7, #12]
 1888 0164 0022     		movs	r2, #0
 1889 0166 1A77     		strb	r2, [r3, #28]
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1890              		.loc 1 1319 16
 1891 0168 0323     		movs	r3, #3
 1892 016a 83E0     		b	.L56
 1893              	.L62:
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 1894              		.loc 1 1321 14
 1895 016c FB68     		ldr	r3, [r7, #12]
 1896 016e 1B68     		ldr	r3, [r3]
 1897 0170 DB68     		ldr	r3, [r3, #12]
 1898 0172 03F00103 		and	r3, r3, #1
 1899              		.loc 1 1321 62
 1900 0176 002B     		cmp	r3, #0
 1901 0178 E6D0     		beq	.L63
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1902              		.loc 1 1323 9
 1903 017a FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 58


 1904 017c 1B68     		ldr	r3, [r3]
 1905              		.loc 1 1323 28
 1906 017e FA69     		ldr	r2, [r7, #28]
 1907 0180 DA61     		str	r2, [r3, #28]
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm A Subseconds register */
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1908              		.loc 1 1325 9
 1909 0182 FB68     		ldr	r3, [r7, #12]
 1910 0184 1B68     		ldr	r3, [r3]
 1911              		.loc 1 1325 30
 1912 0186 BA69     		ldr	r2, [r7, #24]
 1913 0188 5A64     		str	r2, [r3, #68]
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1914              		.loc 1 1327 5
 1915 018a FB68     		ldr	r3, [r7, #12]
 1916 018c 1B68     		ldr	r3, [r3]
 1917 018e 9A68     		ldr	r2, [r3, #8]
 1918 0190 FB68     		ldr	r3, [r7, #12]
 1919 0192 1B68     		ldr	r3, [r3]
 1920 0194 42F48072 		orr	r2, r2, #256
 1921 0198 9A60     		str	r2, [r3, #8]
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 1922              		.loc 1 1329 5
 1923 019a FB68     		ldr	r3, [r7, #12]
 1924 019c 1B68     		ldr	r3, [r3]
 1925 019e 9A68     		ldr	r2, [r3, #8]
 1926 01a0 FB68     		ldr	r3, [r7, #12]
 1927 01a2 1B68     		ldr	r3, [r3]
 1928 01a4 42F48052 		orr	r2, r2, #4096
 1929 01a8 9A60     		str	r2, [r3, #8]
 1930 01aa 4CE0     		b	.L64
 1931              	.L61:
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the Alarm B */
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1932              		.loc 1 1334 5
 1933 01ac FB68     		ldr	r3, [r7, #12]
 1934 01ae 1B68     		ldr	r3, [r3]
 1935 01b0 9A68     		ldr	r2, [r3, #8]
 1936 01b2 FB68     		ldr	r3, [r7, #12]
 1937 01b4 1B68     		ldr	r3, [r3]
 1938 01b6 22F40072 		bic	r2, r2, #512
 1939 01ba 9A60     		str	r2, [r3, #8]
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear the Alarm flag */
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1940              		.loc 1 1337 5
 1941 01bc FB68     		ldr	r3, [r7, #12]
 1942 01be 1B68     		ldr	r3, [r3]
 1943 01c0 DB68     		ldr	r3, [r3, #12]
 1944 01c2 DAB2     		uxtb	r2, r3
 1945 01c4 FB68     		ldr	r3, [r7, #12]
 1946 01c6 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 59


 1947 01c8 62F42072 		orn	r2, r2, #640
 1948 01cc DA60     		str	r2, [r3, #12]
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Reload the counter */
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 1949              		.loc 1 1340 56
 1950 01ce 2B4B     		ldr	r3, .L67
 1951 01d0 1B68     		ldr	r3, [r3]
 1952 01d2 2B4A     		ldr	r2, .L67+4
 1953 01d4 A2FB0323 		umull	r2, r3, r2, r3
 1954 01d8 DB0A     		lsrs	r3, r3, #11
 1955              		.loc 1 1340 31
 1956 01da 4FF47A72 		mov	r2, #1000
 1957 01de 02FB03F3 		mul	r3, r2, r3
 1958              		.loc 1 1340 11
 1959 01e2 7B61     		str	r3, [r7, #20]
 1960              	.L66:
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     do
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       count = count - 1U;
 1961              		.loc 1 1345 21
 1962 01e4 7B69     		ldr	r3, [r7, #20]
 1963 01e6 013B     		subs	r3, r3, #1
 1964              		.loc 1 1345 13
 1965 01e8 7B61     		str	r3, [r7, #20]
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if (count == 0U)
 1966              		.loc 1 1346 17
 1967 01ea 7B69     		ldr	r3, [r7, #20]
 1968              		.loc 1 1346 10
 1969 01ec 002B     		cmp	r3, #0
 1970 01ee 0BD1     		bne	.L65
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1971              		.loc 1 1349 9
 1972 01f0 FB68     		ldr	r3, [r7, #12]
 1973 01f2 1B68     		ldr	r3, [r3]
 1974 01f4 FF22     		movs	r2, #255
 1975 01f6 5A62     		str	r2, [r3, #36]
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1976              		.loc 1 1351 21
 1977 01f8 FB68     		ldr	r3, [r7, #12]
 1978 01fa 0322     		movs	r2, #3
 1979 01fc 5A77     		strb	r2, [r3, #29]
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1980              		.loc 1 1354 9
 1981 01fe FB68     		ldr	r3, [r7, #12]
 1982 0200 0022     		movs	r2, #0
 1983 0202 1A77     		strb	r2, [r3, #28]
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1984              		.loc 1 1356 16
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 60


 1985 0204 0323     		movs	r3, #3
 1986 0206 35E0     		b	.L56
 1987              	.L65:
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 1988              		.loc 1 1358 14
 1989 0208 FB68     		ldr	r3, [r7, #12]
 1990 020a 1B68     		ldr	r3, [r3]
 1991 020c DB68     		ldr	r3, [r3, #12]
 1992 020e 03F00203 		and	r3, r3, #2
 1993              		.loc 1 1358 62
 1994 0212 002B     		cmp	r3, #0
 1995 0214 E6D0     		beq	.L66
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1996              		.loc 1 1360 9
 1997 0216 FB68     		ldr	r3, [r7, #12]
 1998 0218 1B68     		ldr	r3, [r3]
 1999              		.loc 1 1360 28
 2000 021a FA69     		ldr	r2, [r7, #28]
 2001 021c 1A62     		str	r2, [r3, #32]
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm B Subseconds register */
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 2002              		.loc 1 1362 9
 2003 021e FB68     		ldr	r3, [r7, #12]
 2004 0220 1B68     		ldr	r3, [r3]
 2005              		.loc 1 1362 30
 2006 0222 BA69     		ldr	r2, [r7, #24]
 2007 0224 9A64     		str	r2, [r3, #72]
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 2008              		.loc 1 1364 5
 2009 0226 FB68     		ldr	r3, [r7, #12]
 2010 0228 1B68     		ldr	r3, [r3]
 2011 022a 9A68     		ldr	r2, [r3, #8]
 2012 022c FB68     		ldr	r3, [r7, #12]
 2013 022e 1B68     		ldr	r3, [r3]
 2014 0230 42F40072 		orr	r2, r2, #512
 2015 0234 9A60     		str	r2, [r3, #8]
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 2016              		.loc 1 1366 5
 2017 0236 FB68     		ldr	r3, [r7, #12]
 2018 0238 1B68     		ldr	r3, [r3]
 2019 023a 9A68     		ldr	r2, [r3, #8]
 2020 023c FB68     		ldr	r3, [r7, #12]
 2021 023e 1B68     		ldr	r3, [r3]
 2022 0240 42F40052 		orr	r2, r2, #8192
 2023 0244 9A60     		str	r2, [r3, #8]
 2024              	.L64:
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 2025              		.loc 1 1370 3
 2026 0246 0F4B     		ldr	r3, .L67+8
 2027 0248 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 61


 2028 024a 0E4A     		ldr	r2, .L67+8
 2029 024c 43F40033 		orr	r3, r3, #131072
 2030 0250 1360     		str	r3, [r2]
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 2031              		.loc 1 1371 3
 2032 0252 0C4B     		ldr	r3, .L67+8
 2033 0254 9B68     		ldr	r3, [r3, #8]
 2034 0256 0B4A     		ldr	r2, .L67+8
 2035 0258 43F40033 		orr	r3, r3, #131072
 2036 025c 9360     		str	r3, [r2, #8]
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2037              		.loc 1 1374 3
 2038 025e FB68     		ldr	r3, [r7, #12]
 2039 0260 1B68     		ldr	r3, [r3]
 2040 0262 FF22     		movs	r2, #255
 2041 0264 5A62     		str	r2, [r3, #36]
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state back to READY */
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2042              		.loc 1 1377 15
 2043 0266 FB68     		ldr	r3, [r7, #12]
 2044 0268 0122     		movs	r2, #1
 2045 026a 5A77     		strb	r2, [r3, #29]
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Unlocked */
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 2046              		.loc 1 1380 3
 2047 026c FB68     		ldr	r3, [r7, #12]
 2048 026e 0022     		movs	r2, #0
 2049 0270 1A77     		strb	r2, [r3, #28]
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 2050              		.loc 1 1382 10
 2051 0272 0023     		movs	r3, #0
 2052              	.L56:
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2053              		.loc 1 1383 1
 2054 0274 1846     		mov	r0, r3
 2055 0276 2437     		adds	r7, r7, #36
 2056              	.LCFI50:
 2057              		.cfi_def_cfa_offset 12
 2058 0278 BD46     		mov	sp, r7
 2059              	.LCFI51:
 2060              		.cfi_def_cfa_register 13
 2061              		@ sp needed
 2062 027a 90BD     		pop	{r4, r7, pc}
 2063              	.L68:
 2064              		.align	2
 2065              	.L67:
 2066 027c 00000000 		.word	SystemCoreClock
 2067 0280 D34D6210 		.word	274877907
 2068 0284 003C0140 		.word	1073822720
 2069              		.cfi_endproc
 2070              	.LFE143:
 2072              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 62


 2073              		.align	1
 2074              		.global	HAL_RTC_DeactivateAlarm
 2075              		.syntax unified
 2076              		.thumb
 2077              		.thumb_func
 2079              	HAL_RTC_DeactivateAlarm:
 2080              	.LFB144:
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Deactivates the specified RTC Alarm.
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_ALARM_A: Alarm A
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_ALARM_B: Alarm B
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2081              		.loc 1 1396 1
 2082              		.cfi_startproc
 2083              		@ args = 0, pretend = 0, frame = 16
 2084              		@ frame_needed = 1, uses_anonymous_args = 0
 2085 0000 80B5     		push	{r7, lr}
 2086              	.LCFI52:
 2087              		.cfi_def_cfa_offset 8
 2088              		.cfi_offset 7, -8
 2089              		.cfi_offset 14, -4
 2090 0002 84B0     		sub	sp, sp, #16
 2091              	.LCFI53:
 2092              		.cfi_def_cfa_offset 24
 2093 0004 00AF     		add	r7, sp, #0
 2094              	.LCFI54:
 2095              		.cfi_def_cfa_register 7
 2096 0006 7860     		str	r0, [r7, #4]
 2097 0008 3960     		str	r1, [r7]
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 2098              		.loc 1 1397 12
 2099 000a 0023     		movs	r3, #0
 2100 000c FB60     		str	r3, [r7, #12]
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 2101              		.loc 1 1403 3
 2102 000e 7B68     		ldr	r3, [r7, #4]
 2103 0010 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2104 0012 012B     		cmp	r3, #1
 2105 0014 01D1     		bne	.L70
 2106              		.loc 1 1403 3 is_stmt 0 discriminator 1
 2107 0016 0223     		movs	r3, #2
 2108              		.loc 1 1403 3
 2109 0018 7BE0     		b	.L71
 2110              	.L70:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 63


 2111              		.loc 1 1403 3 discriminator 2
 2112 001a 7B68     		ldr	r3, [r7, #4]
 2113 001c 0122     		movs	r2, #1
 2114 001e 1A77     		strb	r2, [r3, #28]
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2115              		.loc 1 1405 15 is_stmt 1
 2116 0020 7B68     		ldr	r3, [r7, #4]
 2117 0022 0222     		movs	r2, #2
 2118 0024 5A77     		strb	r2, [r3, #29]
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2119              		.loc 1 1408 3
 2120 0026 7B68     		ldr	r3, [r7, #4]
 2121 0028 1B68     		ldr	r3, [r3]
 2122 002a CA22     		movs	r2, #202
 2123 002c 5A62     		str	r2, [r3, #36]
 2124 002e 7B68     		ldr	r3, [r7, #4]
 2125 0030 1B68     		ldr	r3, [r3]
 2126 0032 5322     		movs	r2, #83
 2127 0034 5A62     		str	r2, [r3, #36]
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Alarm == RTC_ALARM_A)
 2128              		.loc 1 1410 6
 2129 0036 3B68     		ldr	r3, [r7]
 2130 0038 B3F5807F 		cmp	r3, #256
 2131 003c 2FD1     		bne	.L72
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable Alarm A */
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2132              		.loc 1 1413 5
 2133 003e 7B68     		ldr	r3, [r7, #4]
 2134 0040 1B68     		ldr	r3, [r3]
 2135 0042 9A68     		ldr	r2, [r3, #8]
 2136 0044 7B68     		ldr	r3, [r7, #4]
 2137 0046 1B68     		ldr	r3, [r3]
 2138 0048 22F48072 		bic	r2, r2, #256
 2139 004c 9A60     		str	r2, [r3, #8]
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* In case interrupt mode is used, the interrupt source must be disabled */
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 2140              		.loc 1 1416 5
 2141 004e 7B68     		ldr	r3, [r7, #4]
 2142 0050 1B68     		ldr	r3, [r3]
 2143 0052 9A68     		ldr	r2, [r3, #8]
 2144 0054 7B68     		ldr	r3, [r7, #4]
 2145 0056 1B68     		ldr	r3, [r3]
 2146 0058 22F48052 		bic	r2, r2, #4096
 2147 005c 9A60     		str	r2, [r3, #8]
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2148              		.loc 1 1419 17
 2149 005e FFF7FEFF 		bl	HAL_GetTick
 2150 0062 F860     		str	r0, [r7, #12]
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 64


1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 2151              		.loc 1 1422 11
 2152 0064 13E0     		b	.L73
 2153              	.L74:
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 2154              		.loc 1 1424 12
 2155 0066 FFF7FEFF 		bl	HAL_GetTick
 2156 006a 0246     		mov	r2, r0
 2157              		.loc 1 1424 26 discriminator 1
 2158 006c FB68     		ldr	r3, [r7, #12]
 2159 006e D31A     		subs	r3, r2, r3
 2160              		.loc 1 1424 10 discriminator 1
 2161 0070 B3F57A7F 		cmp	r3, #1000
 2162 0074 0BD9     		bls	.L73
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2163              		.loc 1 1427 9
 2164 0076 7B68     		ldr	r3, [r7, #4]
 2165 0078 1B68     		ldr	r3, [r3]
 2166 007a FF22     		movs	r2, #255
 2167 007c 5A62     		str	r2, [r3, #36]
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2168              		.loc 1 1429 21
 2169 007e 7B68     		ldr	r3, [r7, #4]
 2170 0080 0322     		movs	r2, #3
 2171 0082 5A77     		strb	r2, [r3, #29]
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2172              		.loc 1 1432 9
 2173 0084 7B68     		ldr	r3, [r7, #4]
 2174 0086 0022     		movs	r2, #0
 2175 0088 1A77     		strb	r2, [r3, #28]
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2176              		.loc 1 1434 16
 2177 008a 0323     		movs	r3, #3
 2178 008c 41E0     		b	.L71
 2179              	.L73:
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 2180              		.loc 1 1422 12
 2181 008e 7B68     		ldr	r3, [r7, #4]
 2182 0090 1B68     		ldr	r3, [r3]
 2183 0092 DB68     		ldr	r3, [r3, #12]
 2184 0094 03F00103 		and	r3, r3, #1
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 2185              		.loc 1 1422 60
 2186 0098 002B     		cmp	r3, #0
 2187 009a E4D0     		beq	.L74
 2188 009c 2EE0     		b	.L75
 2189              	.L72:
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 65


1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable Alarm B */
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2190              		.loc 1 1441 5
 2191 009e 7B68     		ldr	r3, [r7, #4]
 2192 00a0 1B68     		ldr	r3, [r3]
 2193 00a2 9A68     		ldr	r2, [r3, #8]
 2194 00a4 7B68     		ldr	r3, [r7, #4]
 2195 00a6 1B68     		ldr	r3, [r3]
 2196 00a8 22F40072 		bic	r2, r2, #512
 2197 00ac 9A60     		str	r2, [r3, #8]
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* In case interrupt mode is used, the interrupt source must be disabled */
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 2198              		.loc 1 1444 5
 2199 00ae 7B68     		ldr	r3, [r7, #4]
 2200 00b0 1B68     		ldr	r3, [r3]
 2201 00b2 9A68     		ldr	r2, [r3, #8]
 2202 00b4 7B68     		ldr	r3, [r7, #4]
 2203 00b6 1B68     		ldr	r3, [r3]
 2204 00b8 22F40052 		bic	r2, r2, #8192
 2205 00bc 9A60     		str	r2, [r3, #8]
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2206              		.loc 1 1447 17
 2207 00be FFF7FEFF 		bl	HAL_GetTick
 2208 00c2 F860     		str	r0, [r7, #12]
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 2209              		.loc 1 1450 11
 2210 00c4 13E0     		b	.L76
 2211              	.L77:
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 2212              		.loc 1 1452 12
 2213 00c6 FFF7FEFF 		bl	HAL_GetTick
 2214 00ca 0246     		mov	r2, r0
 2215              		.loc 1 1452 26 discriminator 1
 2216 00cc FB68     		ldr	r3, [r7, #12]
 2217 00ce D31A     		subs	r3, r2, r3
 2218              		.loc 1 1452 10 discriminator 1
 2219 00d0 B3F57A7F 		cmp	r3, #1000
 2220 00d4 0BD9     		bls	.L76
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2221              		.loc 1 1455 9
 2222 00d6 7B68     		ldr	r3, [r7, #4]
 2223 00d8 1B68     		ldr	r3, [r3]
 2224 00da FF22     		movs	r2, #255
 2225 00dc 5A62     		str	r2, [r3, #36]
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 66


 2226              		.loc 1 1457 21
 2227 00de 7B68     		ldr	r3, [r7, #4]
 2228 00e0 0322     		movs	r2, #3
 2229 00e2 5A77     		strb	r2, [r3, #29]
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2230              		.loc 1 1460 9
 2231 00e4 7B68     		ldr	r3, [r7, #4]
 2232 00e6 0022     		movs	r2, #0
 2233 00e8 1A77     		strb	r2, [r3, #28]
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2234              		.loc 1 1462 16
 2235 00ea 0323     		movs	r3, #3
 2236 00ec 11E0     		b	.L71
 2237              	.L76:
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 2238              		.loc 1 1450 12
 2239 00ee 7B68     		ldr	r3, [r7, #4]
 2240 00f0 1B68     		ldr	r3, [r3]
 2241 00f2 DB68     		ldr	r3, [r3, #12]
 2242 00f4 03F00203 		and	r3, r3, #2
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 2243              		.loc 1 1450 60
 2244 00f8 002B     		cmp	r3, #0
 2245 00fa E4D0     		beq	.L77
 2246              	.L75:
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2247              		.loc 1 1468 3
 2248 00fc 7B68     		ldr	r3, [r7, #4]
 2249 00fe 1B68     		ldr	r3, [r3]
 2250 0100 FF22     		movs	r2, #255
 2251 0102 5A62     		str	r2, [r3, #36]
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2252              		.loc 1 1470 15
 2253 0104 7B68     		ldr	r3, [r7, #4]
 2254 0106 0122     		movs	r2, #1
 2255 0108 5A77     		strb	r2, [r3, #29]
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Unlocked */
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 2256              		.loc 1 1473 3
 2257 010a 7B68     		ldr	r3, [r7, #4]
 2258 010c 0022     		movs	r2, #0
 2259 010e 1A77     		strb	r2, [r3, #28]
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 2260              		.loc 1 1475 10
 2261 0110 0023     		movs	r3, #0
 2262              	.L71:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 67


1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2263              		.loc 1 1476 1
 2264 0112 1846     		mov	r0, r3
 2265 0114 1037     		adds	r7, r7, #16
 2266              	.LCFI55:
 2267              		.cfi_def_cfa_offset 8
 2268 0116 BD46     		mov	sp, r7
 2269              	.LCFI56:
 2270              		.cfi_def_cfa_register 13
 2271              		@ sp needed
 2272 0118 80BD     		pop	{r7, pc}
 2273              		.cfi_endproc
 2274              	.LFE144:
 2276              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2277              		.align	1
 2278              		.global	HAL_RTC_GetAlarm
 2279              		.syntax unified
 2280              		.thumb
 2281              		.thumb_func
 2283              	HAL_RTC_GetAlarm:
 2284              	.LFB145:
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_ALARM_A: Alarm A
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_ALARM_B: Alarm B
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2285              		.loc 1 1494 1
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 24
 2288              		@ frame_needed = 1, uses_anonymous_args = 0
 2289 0000 80B5     		push	{r7, lr}
 2290              	.LCFI57:
 2291              		.cfi_def_cfa_offset 8
 2292              		.cfi_offset 7, -8
 2293              		.cfi_offset 14, -4
 2294 0002 86B0     		sub	sp, sp, #24
 2295              	.LCFI58:
 2296              		.cfi_def_cfa_offset 32
 2297 0004 00AF     		add	r7, sp, #0
 2298              	.LCFI59:
 2299              		.cfi_def_cfa_register 7
 2300 0006 F860     		str	r0, [r7, #12]
 2301 0008 B960     		str	r1, [r7, #8]
 2302 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 68


 2303 000c 3B60     		str	r3, [r7]
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U;
 2304              		.loc 1 1495 12
 2305 000e 0023     		movs	r3, #0
 2306 0010 7B61     		str	r3, [r7, #20]
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t subsecondtmpreg = 0U;
 2307              		.loc 1 1496 12
 2308 0012 0023     		movs	r3, #0
 2309 0014 3B61     		str	r3, [r7, #16]
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Alarm == RTC_ALARM_A)
 2310              		.loc 1 1502 6
 2311 0016 7B68     		ldr	r3, [r7, #4]
 2312 0018 B3F5807F 		cmp	r3, #256
 2313 001c 0ED1     		bne	.L79
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2314              		.loc 1 1504 19
 2315 001e BB68     		ldr	r3, [r7, #8]
 2316 0020 4FF48072 		mov	r2, #256
 2317 0024 5A62     		str	r2, [r3, #36]
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2318              		.loc 1 1506 29
 2319 0026 FB68     		ldr	r3, [r7, #12]
 2320 0028 1B68     		ldr	r3, [r3]
 2321              		.loc 1 1506 12
 2322 002a DB69     		ldr	r3, [r3, #28]
 2323 002c 7B61     		str	r3, [r7, #20]
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 2324              		.loc 1 1507 39
 2325 002e FB68     		ldr	r3, [r7, #12]
 2326 0030 1B68     		ldr	r3, [r3]
 2327              		.loc 1 1507 49
 2328 0032 5B6C     		ldr	r3, [r3, #68]
 2329              		.loc 1 1507 21
 2330 0034 C3F30E03 		ubfx	r3, r3, #0, #15
 2331 0038 3B61     		str	r3, [r7, #16]
 2332 003a 0DE0     		b	.L80
 2333              	.L79:
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2334              		.loc 1 1511 19
 2335 003c BB68     		ldr	r3, [r7, #8]
 2336 003e 4FF40072 		mov	r2, #512
 2337 0042 5A62     		str	r2, [r3, #36]
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2338              		.loc 1 1513 29
 2339 0044 FB68     		ldr	r3, [r7, #12]
 2340 0046 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 69


 2341              		.loc 1 1513 12
 2342 0048 1B6A     		ldr	r3, [r3, #32]
 2343 004a 7B61     		str	r3, [r7, #20]
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2344              		.loc 1 1514 39
 2345 004c FB68     		ldr	r3, [r7, #12]
 2346 004e 1B68     		ldr	r3, [r3]
 2347              		.loc 1 1514 49
 2348 0050 9B6C     		ldr	r3, [r3, #72]
 2349              		.loc 1 1514 21
 2350 0052 C3F30E03 		ubfx	r3, r3, #0, #15
 2351 0056 3B61     		str	r3, [r7, #16]
 2352              	.L80:
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALR
 2353              		.loc 1 1518 90
 2354 0058 7B69     		ldr	r3, [r7, #20]
 2355 005a 1B0C     		lsrs	r3, r3, #16
 2356              		.loc 1 1518 34
 2357 005c DBB2     		uxtb	r3, r3
 2358 005e 03F03F03 		and	r3, r3, #63
 2359 0062 DAB2     		uxtb	r2, r3
 2360              		.loc 1 1518 32
 2361 0064 BB68     		ldr	r3, [r7, #8]
 2362 0066 1A70     		strb	r2, [r3]
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALR
 2363              		.loc 1 1519 90
 2364 0068 7B69     		ldr	r3, [r7, #20]
 2365 006a 1B0A     		lsrs	r3, r3, #8
 2366              		.loc 1 1519 34
 2367 006c DBB2     		uxtb	r3, r3
 2368 006e 03F07F03 		and	r3, r3, #127
 2369 0072 DAB2     		uxtb	r2, r3
 2370              		.loc 1 1519 32
 2371 0074 BB68     		ldr	r3, [r7, #8]
 2372 0076 5A70     		strb	r2, [r3, #1]
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 2373              		.loc 1 1520 34
 2374 0078 7B69     		ldr	r3, [r7, #20]
 2375 007a DBB2     		uxtb	r3, r3
 2376 007c 03F07F03 		and	r3, r3, #127
 2377 0080 DAB2     		uxtb	r2, r3
 2378              		.loc 1 1520 32
 2379 0082 BB68     		ldr	r3, [r7, #8]
 2380 0084 9A70     		strb	r2, [r3, #2]
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_
 2381              		.loc 1 1521 90
 2382 0086 7B69     		ldr	r3, [r7, #20]
 2383 0088 9B0D     		lsrs	r3, r3, #22
 2384              		.loc 1 1521 34
 2385 008a DBB2     		uxtb	r3, r3
 2386 008c 03F00103 		and	r3, r3, #1
 2387 0090 DAB2     		uxtb	r2, r3
 2388              		.loc 1 1521 32
 2389 0092 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 70


 2390 0094 DA70     		strb	r2, [r3, #3]
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2391              		.loc 1 1522 32
 2392 0096 BB68     		ldr	r3, [r7, #8]
 2393 0098 3A69     		ldr	r2, [r7, #16]
 2394 009a 5A60     		str	r2, [r3, #4]
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALR
 2395              		.loc 1 1523 90
 2396 009c 7B69     		ldr	r3, [r7, #20]
 2397 009e 1B0E     		lsrs	r3, r3, #24
 2398              		.loc 1 1523 34
 2399 00a0 DBB2     		uxtb	r3, r3
 2400 00a2 03F03F03 		and	r3, r3, #63
 2401 00a6 DAB2     		uxtb	r2, r3
 2402              		.loc 1 1523 32
 2403 00a8 BB68     		ldr	r3, [r7, #8]
 2404 00aa 83F82020 		strb	r2, [r3, #32]
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 2405              		.loc 1 1524 34
 2406 00ae 7B69     		ldr	r3, [r7, #20]
 2407 00b0 03F08042 		and	r2, r3, #1073741824
 2408              		.loc 1 1524 32
 2409 00b4 BB68     		ldr	r3, [r7, #8]
 2410 00b6 DA61     		str	r2, [r3, #28]
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 2411              		.loc 1 1525 34
 2412 00b8 7B69     		ldr	r3, [r7, #20]
 2413 00ba 03F08032 		and	r2, r3, #-2139062144
 2414              		.loc 1 1525 32
 2415 00be BB68     		ldr	r3, [r7, #8]
 2416 00c0 5A61     		str	r2, [r3, #20]
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 2417              		.loc 1 1527 6
 2418 00c2 3B68     		ldr	r3, [r7]
 2419 00c4 002B     		cmp	r3, #0
 2420 00c6 25D1     		bne	.L81
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2421              		.loc 1 1529 33
 2422 00c8 BB68     		ldr	r3, [r7, #8]
 2423 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2424 00cc 1846     		mov	r0, r3
 2425 00ce FFF7FEFF 		bl	RTC_Bcd2ToByte
 2426 00d2 0346     		mov	r3, r0
 2427 00d4 1A46     		mov	r2, r3
 2428              		.loc 1 1529 31 discriminator 1
 2429 00d6 BB68     		ldr	r3, [r7, #8]
 2430 00d8 1A70     		strb	r2, [r3]
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2431              		.loc 1 1530 33
 2432 00da BB68     		ldr	r3, [r7, #8]
 2433 00dc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2434 00de 1846     		mov	r0, r3
 2435 00e0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2436 00e4 0346     		mov	r3, r0
 2437 00e6 1A46     		mov	r2, r3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 71


 2438              		.loc 1 1530 31 discriminator 1
 2439 00e8 BB68     		ldr	r3, [r7, #8]
 2440 00ea 5A70     		strb	r2, [r3, #1]
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2441              		.loc 1 1531 33
 2442 00ec BB68     		ldr	r3, [r7, #8]
 2443 00ee 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2444 00f0 1846     		mov	r0, r3
 2445 00f2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2446 00f6 0346     		mov	r3, r0
 2447 00f8 1A46     		mov	r2, r3
 2448              		.loc 1 1531 31 discriminator 1
 2449 00fa BB68     		ldr	r3, [r7, #8]
 2450 00fc 9A70     		strb	r2, [r3, #2]
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2451              		.loc 1 1532 33
 2452 00fe BB68     		ldr	r3, [r7, #8]
 2453 0100 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2454 0104 1846     		mov	r0, r3
 2455 0106 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2456 010a 0346     		mov	r3, r0
 2457 010c 1A46     		mov	r2, r3
 2458              		.loc 1 1532 31 discriminator 1
 2459 010e BB68     		ldr	r3, [r7, #8]
 2460 0110 83F82020 		strb	r2, [r3, #32]
 2461              	.L81:
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 2462              		.loc 1 1535 10
 2463 0114 0023     		movs	r3, #0
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2464              		.loc 1 1536 1
 2465 0116 1846     		mov	r0, r3
 2466 0118 1837     		adds	r7, r7, #24
 2467              	.LCFI60:
 2468              		.cfi_def_cfa_offset 8
 2469 011a BD46     		mov	sp, r7
 2470              	.LCFI61:
 2471              		.cfi_def_cfa_register 13
 2472              		@ sp needed
 2473 011c 80BD     		pop	{r7, pc}
 2474              		.cfi_endproc
 2475              	.LFE145:
 2477              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 2478              		.align	1
 2479              		.global	HAL_RTC_AlarmIRQHandler
 2480              		.syntax unified
 2481              		.thumb
 2482              		.thumb_func
 2484              	HAL_RTC_AlarmIRQHandler:
 2485              	.LFB146:
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Handles Alarm interrupt request.
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 72


1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2486              		.loc 1 1545 1
 2487              		.cfi_startproc
 2488              		@ args = 0, pretend = 0, frame = 8
 2489              		@ frame_needed = 1, uses_anonymous_args = 0
 2490 0000 80B5     		push	{r7, lr}
 2491              	.LCFI62:
 2492              		.cfi_def_cfa_offset 8
 2493              		.cfi_offset 7, -8
 2494              		.cfi_offset 14, -4
 2495 0002 82B0     		sub	sp, sp, #8
 2496              	.LCFI63:
 2497              		.cfi_def_cfa_offset 16
 2498 0004 00AF     		add	r7, sp, #0
 2499              	.LCFI64:
 2500              		.cfi_def_cfa_register 7
 2501 0006 7860     		str	r0, [r7, #4]
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 2502              		.loc 1 1547 3
 2503 0008 1F4B     		ldr	r3, .L86
 2504 000a 4FF40032 		mov	r2, #131072
 2505 000e 5A61     		str	r2, [r3, #20]
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get the Alarm A interrupt source enable status */
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 2506              		.loc 1 1550 7
 2507 0010 7B68     		ldr	r3, [r7, #4]
 2508 0012 1B68     		ldr	r3, [r3]
 2509 0014 9B68     		ldr	r3, [r3, #8]
 2510 0016 03F48053 		and	r3, r3, #4096
 2511              		.loc 1 1550 6
 2512 001a 002B     		cmp	r3, #0
 2513 001c 12D0     		beq	.L84
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get the pending status of the Alarm A Interrupt */
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 2514              		.loc 1 1553 9
 2515 001e 7B68     		ldr	r3, [r7, #4]
 2516 0020 1B68     		ldr	r3, [r3]
 2517 0022 DB68     		ldr	r3, [r3, #12]
 2518 0024 03F48073 		and	r3, r3, #256
 2519              		.loc 1 1553 8
 2520 0028 002B     		cmp	r3, #0
 2521 002a 0BD0     		beq	.L84
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Clear the Alarm A interrupt pending bit */
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2522              		.loc 1 1556 7
 2523 002c 7B68     		ldr	r3, [r7, #4]
 2524 002e 1B68     		ldr	r3, [r3]
 2525 0030 DB68     		ldr	r3, [r3, #12]
 2526 0032 DAB2     		uxtb	r2, r3
 2527 0034 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 73


 2528 0036 1B68     		ldr	r3, [r3]
 2529 0038 62F4C072 		orn	r2, r2, #384
 2530 003c DA60     		str	r2, [r3, #12]
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Alarm A callback */
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #else
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2531              		.loc 1 1562 7
 2532 003e 7868     		ldr	r0, [r7, #4]
 2533 0040 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 2534              	.L84:
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get the Alarm B interrupt source enable status */
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 2535              		.loc 1 1568 7
 2536 0044 7B68     		ldr	r3, [r7, #4]
 2537 0046 1B68     		ldr	r3, [r3]
 2538 0048 9B68     		ldr	r3, [r3, #8]
 2539 004a 03F40053 		and	r3, r3, #8192
 2540              		.loc 1 1568 6
 2541 004e 002B     		cmp	r3, #0
 2542 0050 12D0     		beq	.L85
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get the pending status of the Alarm B Interrupt */
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 2543              		.loc 1 1571 9
 2544 0052 7B68     		ldr	r3, [r7, #4]
 2545 0054 1B68     		ldr	r3, [r3]
 2546 0056 DB68     		ldr	r3, [r3, #12]
 2547 0058 03F40073 		and	r3, r3, #512
 2548              		.loc 1 1571 8
 2549 005c 002B     		cmp	r3, #0
 2550 005e 0BD0     		beq	.L85
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Clear the Alarm B interrupt pending bit */
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 2551              		.loc 1 1574 7
 2552 0060 7B68     		ldr	r3, [r7, #4]
 2553 0062 1B68     		ldr	r3, [r3]
 2554 0064 DB68     		ldr	r3, [r3, #12]
 2555 0066 DAB2     		uxtb	r2, r3
 2556 0068 7B68     		ldr	r3, [r7, #4]
 2557 006a 1B68     		ldr	r3, [r3]
 2558 006c 62F42072 		orn	r2, r2, #640
 2559 0070 DA60     		str	r2, [r3, #12]
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Alarm B callback */
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->AlarmBEventCallback(hrtc);
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #else
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2560              		.loc 1 1580 7
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 74


 2561 0072 7868     		ldr	r0, [r7, #4]
 2562 0074 FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 2563              	.L85:
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state */
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2564              		.loc 1 1586 15
 2565 0078 7B68     		ldr	r3, [r7, #4]
 2566 007a 0122     		movs	r2, #1
 2567 007c 5A77     		strb	r2, [r3, #29]
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2568              		.loc 1 1587 1
 2569 007e 00BF     		nop
 2570 0080 0837     		adds	r7, r7, #8
 2571              	.LCFI65:
 2572              		.cfi_def_cfa_offset 8
 2573 0082 BD46     		mov	sp, r7
 2574              	.LCFI66:
 2575              		.cfi_def_cfa_register 13
 2576              		@ sp needed
 2577 0084 80BD     		pop	{r7, pc}
 2578              	.L87:
 2579 0086 00BF     		.align	2
 2580              	.L86:
 2581 0088 003C0140 		.word	1073822720
 2582              		.cfi_endproc
 2583              	.LFE146:
 2585              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 2586              		.align	1
 2587              		.weak	HAL_RTC_AlarmAEventCallback
 2588              		.syntax unified
 2589              		.thumb
 2590              		.thumb_func
 2592              	HAL_RTC_AlarmAEventCallback:
 2593              	.LFB147:
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Alarm A callback.
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2594              		.loc 1 1596 1
 2595              		.cfi_startproc
 2596              		@ args = 0, pretend = 0, frame = 8
 2597              		@ frame_needed = 1, uses_anonymous_args = 0
 2598              		@ link register save eliminated.
 2599 0000 80B4     		push	{r7}
 2600              	.LCFI67:
 2601              		.cfi_def_cfa_offset 4
 2602              		.cfi_offset 7, -4
 2603 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 75


 2604              	.LCFI68:
 2605              		.cfi_def_cfa_offset 16
 2606 0004 00AF     		add	r7, sp, #0
 2607              	.LCFI69:
 2608              		.cfi_def_cfa_register 7
 2609 0006 7860     		str	r0, [r7, #4]
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   UNUSED(hrtc);
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    */
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2610              		.loc 1 1603 1
 2611 0008 00BF     		nop
 2612 000a 0C37     		adds	r7, r7, #12
 2613              	.LCFI70:
 2614              		.cfi_def_cfa_offset 4
 2615 000c BD46     		mov	sp, r7
 2616              	.LCFI71:
 2617              		.cfi_def_cfa_register 13
 2618              		@ sp needed
 2619 000e 5DF8047B 		ldr	r7, [sp], #4
 2620              	.LCFI72:
 2621              		.cfi_restore 7
 2622              		.cfi_def_cfa_offset 0
 2623 0012 7047     		bx	lr
 2624              		.cfi_endproc
 2625              	.LFE147:
 2627              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 2628              		.align	1
 2629              		.global	HAL_RTC_PollForAlarmAEvent
 2630              		.syntax unified
 2631              		.thumb
 2632              		.thumb_func
 2634              	HAL_RTC_PollForAlarmAEvent:
 2635              	.LFB148:
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Handles Alarm A Polling request.
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2636              		.loc 1 1613 1
 2637              		.cfi_startproc
 2638              		@ args = 0, pretend = 0, frame = 16
 2639              		@ frame_needed = 1, uses_anonymous_args = 0
 2640 0000 80B5     		push	{r7, lr}
 2641              	.LCFI73:
 2642              		.cfi_def_cfa_offset 8
 2643              		.cfi_offset 7, -8
 2644              		.cfi_offset 14, -4
 2645 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 76


 2646              	.LCFI74:
 2647              		.cfi_def_cfa_offset 24
 2648 0004 00AF     		add	r7, sp, #0
 2649              	.LCFI75:
 2650              		.cfi_def_cfa_register 7
 2651 0006 7860     		str	r0, [r7, #4]
 2652 0008 3960     		str	r1, [r7]
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 2653              		.loc 1 1614 12
 2654 000a 0023     		movs	r3, #0
 2655 000c FB60     		str	r3, [r7, #12]
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get tick */
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   tickstart = HAL_GetTick();
 2656              		.loc 1 1617 15
 2657 000e FFF7FEFF 		bl	HAL_GetTick
 2658 0012 F860     		str	r0, [r7, #12]
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Wait till RTC ALRAF flag is set and if timeout is reached exit */
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == 0U)
 2659              		.loc 1 1620 9
 2660 0014 13E0     		b	.L91
 2661              	.L94:
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (Timeout != HAL_MAX_DELAY)
 2662              		.loc 1 1622 8
 2663 0016 3B68     		ldr	r3, [r7]
 2664 0018 B3F1FF3F 		cmp	r3, #-1
 2665 001c 0FD0     		beq	.L91
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 2666              		.loc 1 1624 10
 2667 001e 3B68     		ldr	r3, [r7]
 2668 0020 002B     		cmp	r3, #0
 2669 0022 07D0     		beq	.L92
 2670              		.loc 1 1624 32 discriminator 1
 2671 0024 FFF7FEFF 		bl	HAL_GetTick
 2672 0028 0246     		mov	r2, r0
 2673              		.loc 1 1624 46 discriminator 1
 2674 002a FB68     		ldr	r3, [r7, #12]
 2675 002c D31A     		subs	r3, r2, r3
 2676              		.loc 1 1624 27 discriminator 1
 2677 002e 3A68     		ldr	r2, [r7]
 2678 0030 9A42     		cmp	r2, r3
 2679 0032 04D2     		bcs	.L91
 2680              	.L92:
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2681              		.loc 1 1626 21
 2682 0034 7B68     		ldr	r3, [r7, #4]
 2683 0036 0322     		movs	r2, #3
 2684 0038 5A77     		strb	r2, [r3, #29]
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2685              		.loc 1 1627 16
 2686 003a 0323     		movs	r3, #3
 2687 003c 13E0     		b	.L93
 2688              	.L91:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 77


1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 2689              		.loc 1 1620 10
 2690 003e 7B68     		ldr	r3, [r7, #4]
 2691 0040 1B68     		ldr	r3, [r3]
 2692 0042 DB68     		ldr	r3, [r3, #12]
 2693 0044 03F48073 		and	r3, r3, #256
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 2694              		.loc 1 1620 57
 2695 0048 002B     		cmp	r3, #0
 2696 004a E4D0     		beq	.L94
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Clear the Alarm flag */
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2697              		.loc 1 1633 3
 2698 004c 7B68     		ldr	r3, [r7, #4]
 2699 004e 1B68     		ldr	r3, [r3]
 2700 0050 DB68     		ldr	r3, [r3, #12]
 2701 0052 DAB2     		uxtb	r2, r3
 2702 0054 7B68     		ldr	r3, [r7, #4]
 2703 0056 1B68     		ldr	r3, [r3]
 2704 0058 62F4C072 		orn	r2, r2, #384
 2705 005c DA60     		str	r2, [r3, #12]
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state */
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2706              		.loc 1 1636 15
 2707 005e 7B68     		ldr	r3, [r7, #4]
 2708 0060 0122     		movs	r2, #1
 2709 0062 5A77     		strb	r2, [r3, #29]
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 2710              		.loc 1 1638 10
 2711 0064 0023     		movs	r3, #0
 2712              	.L93:
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2713              		.loc 1 1639 1
 2714 0066 1846     		mov	r0, r3
 2715 0068 1037     		adds	r7, r7, #16
 2716              	.LCFI76:
 2717              		.cfi_def_cfa_offset 8
 2718 006a BD46     		mov	sp, r7
 2719              	.LCFI77:
 2720              		.cfi_def_cfa_register 13
 2721              		@ sp needed
 2722 006c 80BD     		pop	{r7, pc}
 2723              		.cfi_endproc
 2724              	.LFE148:
 2726              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 2727              		.align	1
 2728              		.global	HAL_RTC_WaitForSynchro
 2729              		.syntax unified
 2730              		.thumb
 2731              		.thumb_func
 2733              	HAL_RTC_WaitForSynchro:
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 78


 2734              	.LFB149:
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group4 Peripheral Control functions
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief    Peripheral Control functions
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     [..]
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     This subsection provides functions allowing to
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       (+) Manage RTC Summer or Winter time change
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         the software must first clear the RSF flag.
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2735              		.loc 1 1677 1
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 16
 2738              		@ frame_needed = 1, uses_anonymous_args = 0
 2739 0000 80B5     		push	{r7, lr}
 2740              	.LCFI78:
 2741              		.cfi_def_cfa_offset 8
 2742              		.cfi_offset 7, -8
 2743              		.cfi_offset 14, -4
 2744 0002 84B0     		sub	sp, sp, #16
 2745              	.LCFI79:
 2746              		.cfi_def_cfa_offset 24
 2747 0004 00AF     		add	r7, sp, #0
 2748              	.LCFI80:
 2749              		.cfi_def_cfa_register 7
 2750 0006 7860     		str	r0, [r7, #4]
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 2751              		.loc 1 1678 12
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 79


 2752 0008 0023     		movs	r3, #0
 2753 000a FB60     		str	r3, [r7, #12]
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 2754              		.loc 1 1681 7
 2755 000c 7B68     		ldr	r3, [r7, #4]
 2756 000e 1B68     		ldr	r3, [r3]
 2757              		.loc 1 1681 23
 2758 0010 0D4A     		ldr	r2, .L99
 2759 0012 DA60     		str	r2, [r3, #12]
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get tick */
1684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   tickstart = HAL_GetTick();
 2760              		.loc 1 1684 15
 2761 0014 FFF7FEFF 		bl	HAL_GetTick
 2762 0018 F860     		str	r0, [r7, #12]
1685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 2763              		.loc 1 1687 9
 2764 001a 09E0     		b	.L96
 2765              	.L98:
1688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 2766              		.loc 1 1689 10
 2767 001c FFF7FEFF 		bl	HAL_GetTick
 2768 0020 0246     		mov	r2, r0
 2769              		.loc 1 1689 24 discriminator 1
 2770 0022 FB68     		ldr	r3, [r7, #12]
 2771 0024 D31A     		subs	r3, r2, r3
 2772              		.loc 1 1689 8 discriminator 1
 2773 0026 B3F57A7F 		cmp	r3, #1000
 2774 002a 01D9     		bls	.L96
1690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       return HAL_TIMEOUT;
 2775              		.loc 1 1691 14
 2776 002c 0323     		movs	r3, #3
 2777 002e 07E0     		b	.L97
 2778              	.L96:
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 2779              		.loc 1 1687 15
 2780 0030 7B68     		ldr	r3, [r7, #4]
 2781 0032 1B68     		ldr	r3, [r3]
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 2782              		.loc 1 1687 25
 2783 0034 DB68     		ldr	r3, [r3, #12]
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 2784              		.loc 1 1687 31
 2785 0036 03F02003 		and	r3, r3, #32
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 2786              		.loc 1 1687 46
 2787 003a 002B     		cmp	r3, #0
 2788 003c EED0     		beq	.L98
1692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 80


1695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 2789              		.loc 1 1695 10
 2790 003e 0023     		movs	r3, #0
 2791              	.L97:
1696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2792              		.loc 1 1696 1
 2793 0040 1846     		mov	r0, r3
 2794 0042 1037     		adds	r7, r7, #16
 2795              	.LCFI81:
 2796              		.cfi_def_cfa_offset 8
 2797 0044 BD46     		mov	sp, r7
 2798              	.LCFI82:
 2799              		.cfi_def_cfa_register 13
 2800              		@ sp needed
 2801 0046 80BD     		pop	{r7, pc}
 2802              	.L100:
 2803              		.align	2
 2804              	.L99:
 2805 0048 5F3F0100 		.word	81759
 2806              		.cfi_endproc
 2807              	.LFE149:
 2809              		.section	.text.HAL_RTC_DST_Add1Hour,"ax",%progbits
 2810              		.align	1
 2811              		.global	HAL_RTC_DST_Add1Hour
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2816              	HAL_RTC_DST_Add1Hour:
 2817              	.LFB150:
1697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, adds one hour to the calendar in one
1700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         single operation without going through the initialization procedure.
1701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
1704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
1706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2818              		.loc 1 1706 1
 2819              		.cfi_startproc
 2820              		@ args = 0, pretend = 0, frame = 8
 2821              		@ frame_needed = 1, uses_anonymous_args = 0
 2822              		@ link register save eliminated.
 2823 0000 80B4     		push	{r7}
 2824              	.LCFI83:
 2825              		.cfi_def_cfa_offset 4
 2826              		.cfi_offset 7, -4
 2827 0002 83B0     		sub	sp, sp, #12
 2828              	.LCFI84:
 2829              		.cfi_def_cfa_offset 16
 2830 0004 00AF     		add	r7, sp, #0
 2831              	.LCFI85:
 2832              		.cfi_def_cfa_register 7
 2833 0006 7860     		str	r0, [r7, #4]
1707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2834              		.loc 1 1707 3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 81


 2835 0008 7B68     		ldr	r3, [r7, #4]
 2836 000a 1B68     		ldr	r3, [r3]
 2837 000c CA22     		movs	r2, #202
 2838 000e 5A62     		str	r2, [r3, #36]
 2839 0010 7B68     		ldr	r3, [r7, #4]
 2840 0012 1B68     		ldr	r3, [r3]
 2841 0014 5322     		movs	r2, #83
 2842 0016 5A62     		str	r2, [r3, #36]
1708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 2843              		.loc 1 1708 3
 2844 0018 7B68     		ldr	r3, [r7, #4]
 2845 001a 1B68     		ldr	r3, [r3]
 2846 001c 9A68     		ldr	r2, [r3, #8]
 2847 001e 7B68     		ldr	r3, [r7, #4]
 2848 0020 1B68     		ldr	r3, [r3]
 2849 0022 42F48032 		orr	r2, r2, #65536
 2850 0026 9A60     		str	r2, [r3, #8]
1709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2851              		.loc 1 1709 3
 2852 0028 7B68     		ldr	r3, [r7, #4]
 2853 002a 1B68     		ldr	r3, [r3]
 2854 002c FF22     		movs	r2, #255
 2855 002e 5A62     		str	r2, [r3, #36]
1710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2856              		.loc 1 1710 1
 2857 0030 00BF     		nop
 2858 0032 0C37     		adds	r7, r7, #12
 2859              	.LCFI86:
 2860              		.cfi_def_cfa_offset 4
 2861 0034 BD46     		mov	sp, r7
 2862              	.LCFI87:
 2863              		.cfi_def_cfa_register 13
 2864              		@ sp needed
 2865 0036 5DF8047B 		ldr	r7, [sp], #4
 2866              	.LCFI88:
 2867              		.cfi_restore 7
 2868              		.cfi_def_cfa_offset 0
 2869 003a 7047     		bx	lr
 2870              		.cfi_endproc
 2871              	.LFE150:
 2873              		.section	.text.HAL_RTC_DST_Sub1Hour,"ax",%progbits
 2874              		.align	1
 2875              		.global	HAL_RTC_DST_Sub1Hour
 2876              		.syntax unified
 2877              		.thumb
 2878              		.thumb_func
 2880              	HAL_RTC_DST_Sub1Hour:
 2881              	.LFB151:
1711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, subtracts one hour from the calendar in one
1714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         single operation without going through the initialization procedure.
1715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
1718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** void HAL_RTC_DST_Sub1Hour(RTC_HandleTypeDef *hrtc)
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 82


1720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2882              		.loc 1 1720 1
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 8
 2885              		@ frame_needed = 1, uses_anonymous_args = 0
 2886              		@ link register save eliminated.
 2887 0000 80B4     		push	{r7}
 2888              	.LCFI89:
 2889              		.cfi_def_cfa_offset 4
 2890              		.cfi_offset 7, -4
 2891 0002 83B0     		sub	sp, sp, #12
 2892              	.LCFI90:
 2893              		.cfi_def_cfa_offset 16
 2894 0004 00AF     		add	r7, sp, #0
 2895              	.LCFI91:
 2896              		.cfi_def_cfa_register 7
 2897 0006 7860     		str	r0, [r7, #4]
1721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2898              		.loc 1 1721 3
 2899 0008 7B68     		ldr	r3, [r7, #4]
 2900 000a 1B68     		ldr	r3, [r3]
 2901 000c CA22     		movs	r2, #202
 2902 000e 5A62     		str	r2, [r3, #36]
 2903 0010 7B68     		ldr	r3, [r7, #4]
 2904 0012 1B68     		ldr	r3, [r3]
 2905 0014 5322     		movs	r2, #83
 2906 0016 5A62     		str	r2, [r3, #36]
1722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   SET_BIT(hrtc->Instance->CR, RTC_CR_SUB1H);
 2907              		.loc 1 1722 3
 2908 0018 7B68     		ldr	r3, [r7, #4]
 2909 001a 1B68     		ldr	r3, [r3]
 2910 001c 9A68     		ldr	r2, [r3, #8]
 2911 001e 7B68     		ldr	r3, [r7, #4]
 2912 0020 1B68     		ldr	r3, [r3]
 2913 0022 42F40032 		orr	r2, r2, #131072
 2914 0026 9A60     		str	r2, [r3, #8]
1723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2915              		.loc 1 1723 3
 2916 0028 7B68     		ldr	r3, [r7, #4]
 2917 002a 1B68     		ldr	r3, [r3]
 2918 002c FF22     		movs	r2, #255
 2919 002e 5A62     		str	r2, [r3, #36]
1724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2920              		.loc 1 1724 1
 2921 0030 00BF     		nop
 2922 0032 0C37     		adds	r7, r7, #12
 2923              	.LCFI92:
 2924              		.cfi_def_cfa_offset 4
 2925 0034 BD46     		mov	sp, r7
 2926              	.LCFI93:
 2927              		.cfi_def_cfa_register 13
 2928              		@ sp needed
 2929 0036 5DF8047B 		ldr	r7, [sp], #4
 2930              	.LCFI94:
 2931              		.cfi_restore 7
 2932              		.cfi_def_cfa_offset 0
 2933 003a 7047     		bx	lr
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 83


 2934              		.cfi_endproc
 2935              	.LFE151:
 2937              		.section	.text.HAL_RTC_DST_SetStoreOperation,"ax",%progbits
 2938              		.align	1
 2939              		.global	HAL_RTC_DST_SetStoreOperation
 2940              		.syntax unified
 2941              		.thumb
 2942              		.thumb_func
 2944              	HAL_RTC_DST_SetStoreOperation:
 2945              	.LFB152:
1725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, sets the store operation bit.
1728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   It can be used by the software in order to memorize the DST status.
1729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
1732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** void HAL_RTC_DST_SetStoreOperation(RTC_HandleTypeDef *hrtc)
1734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2946              		.loc 1 1734 1
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 8
 2949              		@ frame_needed = 1, uses_anonymous_args = 0
 2950              		@ link register save eliminated.
 2951 0000 80B4     		push	{r7}
 2952              	.LCFI95:
 2953              		.cfi_def_cfa_offset 4
 2954              		.cfi_offset 7, -4
 2955 0002 83B0     		sub	sp, sp, #12
 2956              	.LCFI96:
 2957              		.cfi_def_cfa_offset 16
 2958 0004 00AF     		add	r7, sp, #0
 2959              	.LCFI97:
 2960              		.cfi_def_cfa_register 7
 2961 0006 7860     		str	r0, [r7, #4]
1735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2962              		.loc 1 1735 3
 2963 0008 7B68     		ldr	r3, [r7, #4]
 2964 000a 1B68     		ldr	r3, [r3]
 2965 000c CA22     		movs	r2, #202
 2966 000e 5A62     		str	r2, [r3, #36]
 2967 0010 7B68     		ldr	r3, [r7, #4]
 2968 0012 1B68     		ldr	r3, [r3]
 2969 0014 5322     		movs	r2, #83
 2970 0016 5A62     		str	r2, [r3, #36]
1736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   SET_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 2971              		.loc 1 1736 3
 2972 0018 7B68     		ldr	r3, [r7, #4]
 2973 001a 1B68     		ldr	r3, [r3]
 2974 001c 9A68     		ldr	r2, [r3, #8]
 2975 001e 7B68     		ldr	r3, [r7, #4]
 2976 0020 1B68     		ldr	r3, [r3]
 2977 0022 42F48022 		orr	r2, r2, #262144
 2978 0026 9A60     		str	r2, [r3, #8]
1737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2979              		.loc 1 1737 3
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 84


 2980 0028 7B68     		ldr	r3, [r7, #4]
 2981 002a 1B68     		ldr	r3, [r3]
 2982 002c FF22     		movs	r2, #255
 2983 002e 5A62     		str	r2, [r3, #36]
1738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2984              		.loc 1 1738 1
 2985 0030 00BF     		nop
 2986 0032 0C37     		adds	r7, r7, #12
 2987              	.LCFI98:
 2988              		.cfi_def_cfa_offset 4
 2989 0034 BD46     		mov	sp, r7
 2990              	.LCFI99:
 2991              		.cfi_def_cfa_register 13
 2992              		@ sp needed
 2993 0036 5DF8047B 		ldr	r7, [sp], #4
 2994              	.LCFI100:
 2995              		.cfi_restore 7
 2996              		.cfi_def_cfa_offset 0
 2997 003a 7047     		bx	lr
 2998              		.cfi_endproc
 2999              	.LFE152:
 3001              		.section	.text.HAL_RTC_DST_ClearStoreOperation,"ax",%progbits
 3002              		.align	1
 3003              		.global	HAL_RTC_DST_ClearStoreOperation
 3004              		.syntax unified
 3005              		.thumb
 3006              		.thumb_func
 3008              	HAL_RTC_DST_ClearStoreOperation:
 3009              	.LFB153:
1739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, clears the store operation bit.
1742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
1745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** void HAL_RTC_DST_ClearStoreOperation(RTC_HandleTypeDef *hrtc)
1747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3010              		.loc 1 1747 1
 3011              		.cfi_startproc
 3012              		@ args = 0, pretend = 0, frame = 8
 3013              		@ frame_needed = 1, uses_anonymous_args = 0
 3014              		@ link register save eliminated.
 3015 0000 80B4     		push	{r7}
 3016              	.LCFI101:
 3017              		.cfi_def_cfa_offset 4
 3018              		.cfi_offset 7, -4
 3019 0002 83B0     		sub	sp, sp, #12
 3020              	.LCFI102:
 3021              		.cfi_def_cfa_offset 16
 3022 0004 00AF     		add	r7, sp, #0
 3023              	.LCFI103:
 3024              		.cfi_def_cfa_register 7
 3025 0006 7860     		str	r0, [r7, #4]
1748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 3026              		.loc 1 1748 3
 3027 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 85


 3028 000a 1B68     		ldr	r3, [r3]
 3029 000c CA22     		movs	r2, #202
 3030 000e 5A62     		str	r2, [r3, #36]
 3031 0010 7B68     		ldr	r3, [r7, #4]
 3032 0012 1B68     		ldr	r3, [r3]
 3033 0014 5322     		movs	r2, #83
 3034 0016 5A62     		str	r2, [r3, #36]
1749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 3035              		.loc 1 1749 3
 3036 0018 7B68     		ldr	r3, [r7, #4]
 3037 001a 1B68     		ldr	r3, [r3]
 3038 001c 9A68     		ldr	r2, [r3, #8]
 3039 001e 7B68     		ldr	r3, [r7, #4]
 3040 0020 1B68     		ldr	r3, [r3]
 3041 0022 22F48022 		bic	r2, r2, #262144
 3042 0026 9A60     		str	r2, [r3, #8]
1750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 3043              		.loc 1 1750 3
 3044 0028 7B68     		ldr	r3, [r7, #4]
 3045 002a 1B68     		ldr	r3, [r3]
 3046 002c FF22     		movs	r2, #255
 3047 002e 5A62     		str	r2, [r3, #36]
1751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3048              		.loc 1 1751 1
 3049 0030 00BF     		nop
 3050 0032 0C37     		adds	r7, r7, #12
 3051              	.LCFI104:
 3052              		.cfi_def_cfa_offset 4
 3053 0034 BD46     		mov	sp, r7
 3054              	.LCFI105:
 3055              		.cfi_def_cfa_register 13
 3056              		@ sp needed
 3057 0036 5DF8047B 		ldr	r7, [sp], #4
 3058              	.LCFI106:
 3059              		.cfi_restore 7
 3060              		.cfi_def_cfa_offset 0
 3061 003a 7047     		bx	lr
 3062              		.cfi_endproc
 3063              	.LFE153:
 3065              		.section	.text.HAL_RTC_DST_ReadStoreOperation,"ax",%progbits
 3066              		.align	1
 3067              		.global	HAL_RTC_DST_ReadStoreOperation
 3068              		.syntax unified
 3069              		.thumb
 3070              		.thumb_func
 3072              	HAL_RTC_DST_ReadStoreOperation:
 3073              	.LFB154:
1752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, reads the store operation bit.
1755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval operation see RTC_StoreOperation_Definitions
1757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** uint32_t HAL_RTC_DST_ReadStoreOperation(RTC_HandleTypeDef *hrtc)
1759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3074              		.loc 1 1759 1
 3075              		.cfi_startproc
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 86


 3076              		@ args = 0, pretend = 0, frame = 8
 3077              		@ frame_needed = 1, uses_anonymous_args = 0
 3078              		@ link register save eliminated.
 3079 0000 80B4     		push	{r7}
 3080              	.LCFI107:
 3081              		.cfi_def_cfa_offset 4
 3082              		.cfi_offset 7, -4
 3083 0002 83B0     		sub	sp, sp, #12
 3084              	.LCFI108:
 3085              		.cfi_def_cfa_offset 16
 3086 0004 00AF     		add	r7, sp, #0
 3087              	.LCFI109:
 3088              		.cfi_def_cfa_register 7
 3089 0006 7860     		str	r0, [r7, #4]
1760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return READ_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 3090              		.loc 1 1760 10
 3091 0008 7B68     		ldr	r3, [r7, #4]
 3092 000a 1B68     		ldr	r3, [r3]
 3093 000c 9B68     		ldr	r3, [r3, #8]
 3094 000e 03F48023 		and	r3, r3, #262144
1761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3095              		.loc 1 1761 1
 3096 0012 1846     		mov	r0, r3
 3097 0014 0C37     		adds	r7, r7, #12
 3098              	.LCFI110:
 3099              		.cfi_def_cfa_offset 4
 3100 0016 BD46     		mov	sp, r7
 3101              	.LCFI111:
 3102              		.cfi_def_cfa_register 13
 3103              		@ sp needed
 3104 0018 5DF8047B 		ldr	r7, [sp], #4
 3105              	.LCFI112:
 3106              		.cfi_restore 7
 3107              		.cfi_def_cfa_offset 0
 3108 001c 7047     		bx	lr
 3109              		.cfi_endproc
 3110              	.LFE154:
 3112              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 3113              		.align	1
 3114              		.global	HAL_RTC_GetState
 3115              		.syntax unified
 3116              		.thumb
 3117              		.thumb_func
 3119              	HAL_RTC_GetState:
 3120              	.LFB155:
1762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
1765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group5 Peripheral State functions
1768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief    Peripheral State functions
1769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
1770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim
1771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
1772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 87


1774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     [..]
1775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     This subsection provides functions allowing to
1776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       (+) Get RTC state
1777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
1779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
1780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Returns the RTC state.
1783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL state
1786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc)
1788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3121              		.loc 1 1788 1
 3122              		.cfi_startproc
 3123              		@ args = 0, pretend = 0, frame = 8
 3124              		@ frame_needed = 1, uses_anonymous_args = 0
 3125              		@ link register save eliminated.
 3126 0000 80B4     		push	{r7}
 3127              	.LCFI113:
 3128              		.cfi_def_cfa_offset 4
 3129              		.cfi_offset 7, -4
 3130 0002 83B0     		sub	sp, sp, #12
 3131              	.LCFI114:
 3132              		.cfi_def_cfa_offset 16
 3133 0004 00AF     		add	r7, sp, #0
 3134              	.LCFI115:
 3135              		.cfi_def_cfa_register 7
 3136 0006 7860     		str	r0, [r7, #4]
1789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return hrtc->State;
 3137              		.loc 1 1789 14
 3138 0008 7B68     		ldr	r3, [r7, #4]
 3139 000a 5B7F     		ldrb	r3, [r3, #29]
 3140 000c DBB2     		uxtb	r3, r3
1790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3141              		.loc 1 1790 1
 3142 000e 1846     		mov	r0, r3
 3143 0010 0C37     		adds	r7, r7, #12
 3144              	.LCFI116:
 3145              		.cfi_def_cfa_offset 4
 3146 0012 BD46     		mov	sp, r7
 3147              	.LCFI117:
 3148              		.cfi_def_cfa_register 13
 3149              		@ sp needed
 3150 0014 5DF8047B 		ldr	r7, [sp], #4
 3151              	.LCFI118:
 3152              		.cfi_restore 7
 3153              		.cfi_def_cfa_offset 0
 3154 0018 7047     		bx	lr
 3155              		.cfi_endproc
 3156              	.LFE155:
 3158              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 3159              		.align	1
 3160              		.global	RTC_EnterInitMode
 3161              		.syntax unified
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 88


 3162              		.thumb
 3163              		.thumb_func
 3165              	RTC_EnterInitMode:
 3166              	.LFB156:
1791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
1794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
1799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @addtogroup RTC_Private_Functions
1802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
1803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
1814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3167              		.loc 1 1814 1
 3168              		.cfi_startproc
 3169              		@ args = 0, pretend = 0, frame = 16
 3170              		@ frame_needed = 1, uses_anonymous_args = 0
 3171 0000 80B5     		push	{r7, lr}
 3172              	.LCFI119:
 3173              		.cfi_def_cfa_offset 8
 3174              		.cfi_offset 7, -8
 3175              		.cfi_offset 14, -4
 3176 0002 84B0     		sub	sp, sp, #16
 3177              	.LCFI120:
 3178              		.cfi_def_cfa_offset 24
 3179 0004 00AF     		add	r7, sp, #0
 3180              	.LCFI121:
 3181              		.cfi_def_cfa_register 7
 3182 0006 7860     		str	r0, [r7, #4]
1815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 3183              		.loc 1 1815 12
 3184 0008 0023     		movs	r3, #0
 3185 000a BB60     		str	r3, [r7, #8]
1816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 3186              		.loc 1 1816 21
 3187 000c 0023     		movs	r3, #0
 3188 000e FB73     		strb	r3, [r7, #15]
1817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check that Initialization mode is not already set */
1819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 3189              		.loc 1 1819 7
 3190 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 89


 3191 0012 1B68     		ldr	r3, [r3]
 3192 0014 DB68     		ldr	r3, [r3, #12]
 3193 0016 03F04003 		and	r3, r3, #64
 3194              		.loc 1 1819 6
 3195 001a 002B     		cmp	r3, #0
 3196 001c 22D1     		bne	.L110
1820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set INIT bit to enter Initialization mode */
1822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 3197              		.loc 1 1822 5
 3198 001e 7B68     		ldr	r3, [r7, #4]
 3199 0020 1B68     		ldr	r3, [r3]
 3200 0022 DA68     		ldr	r2, [r3, #12]
 3201 0024 7B68     		ldr	r3, [r7, #4]
 3202 0026 1B68     		ldr	r3, [r3]
 3203 0028 42F08002 		orr	r2, r2, #128
 3204 002c DA60     		str	r2, [r3, #12]
1823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 3205              		.loc 1 1825 17
 3206 002e FFF7FEFF 		bl	HAL_GetTick
 3207 0032 B860     		str	r0, [r7, #8]
1826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if timeout is reached exit */
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 3208              		.loc 1 1828 11
 3209 0034 0CE0     		b	.L112
 3210              	.L113:
1829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 3211              		.loc 1 1830 12
 3212 0036 FFF7FEFF 		bl	HAL_GetTick
 3213 003a 0246     		mov	r2, r0
 3214              		.loc 1 1830 26 discriminator 1
 3215 003c BB68     		ldr	r3, [r7, #8]
 3216 003e D31A     		subs	r3, r2, r3
 3217              		.loc 1 1830 10 discriminator 1
 3218 0040 B3F57A7F 		cmp	r3, #1000
 3219 0044 04D9     		bls	.L112
1831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Set RTC state */
1833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 3220              		.loc 1 1833 21
 3221 0046 7B68     		ldr	r3, [r7, #4]
 3222 0048 0422     		movs	r2, #4
 3223 004a 5A77     		strb	r2, [r3, #29]
1834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         status = HAL_ERROR;
 3224              		.loc 1 1834 16
 3225 004c 0123     		movs	r3, #1
 3226 004e FB73     		strb	r3, [r7, #15]
 3227              	.L112:
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 3228              		.loc 1 1828 13
 3229 0050 7B68     		ldr	r3, [r7, #4]
 3230 0052 1B68     		ldr	r3, [r3]
 3231 0054 DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 90


 3232 0056 03F04003 		and	r3, r3, #64
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 3233              		.loc 1 1828 65
 3234 005a 002B     		cmp	r3, #0
 3235 005c 02D1     		bne	.L110
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 3236              		.loc 1 1828 65 is_stmt 0 discriminator 1
 3237 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3238 0060 012B     		cmp	r3, #1
 3239 0062 E8D1     		bne	.L113
 3240              	.L110:
1835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return status;
 3241              		.loc 1 1839 10 is_stmt 1
 3242 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3243              		.loc 1 1840 1
 3244 0066 1846     		mov	r0, r3
 3245 0068 1037     		adds	r7, r7, #16
 3246              	.LCFI122:
 3247              		.cfi_def_cfa_offset 8
 3248 006a BD46     		mov	sp, r7
 3249              	.LCFI123:
 3250              		.cfi_def_cfa_register 13
 3251              		@ sp needed
 3252 006c 80BD     		pop	{r7, pc}
 3253              		.cfi_endproc
 3254              	.LFE156:
 3256              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 3257              		.align	1
 3258              		.global	RTC_ExitInitMode
 3259              		.syntax unified
 3260              		.thumb
 3261              		.thumb_func
 3263              	RTC_ExitInitMode:
 3264              	.LFB157:
1841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Exits the RTC Initialization mode.
1844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
1849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3265              		.loc 1 1849 1
 3266              		.cfi_startproc
 3267              		@ args = 0, pretend = 0, frame = 16
 3268              		@ frame_needed = 1, uses_anonymous_args = 0
 3269 0000 80B5     		push	{r7, lr}
 3270              	.LCFI124:
 3271              		.cfi_def_cfa_offset 8
 3272              		.cfi_offset 7, -8
 3273              		.cfi_offset 14, -4
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 91


 3274 0002 84B0     		sub	sp, sp, #16
 3275              	.LCFI125:
 3276              		.cfi_def_cfa_offset 24
 3277 0004 00AF     		add	r7, sp, #0
 3278              	.LCFI126:
 3279              		.cfi_def_cfa_register 7
 3280 0006 7860     		str	r0, [r7, #4]
1850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 3281              		.loc 1 1850 21
 3282 0008 0023     		movs	r3, #0
 3283 000a FB73     		strb	r3, [r7, #15]
1851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Clear INIT bit to exit Initialization mode */
1853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 3284              		.loc 1 1853 3
 3285 000c 7B68     		ldr	r3, [r7, #4]
 3286 000e 1B68     		ldr	r3, [r3]
 3287 0010 DA68     		ldr	r2, [r3, #12]
 3288 0012 7B68     		ldr	r3, [r7, #4]
 3289 0014 1B68     		ldr	r3, [r3]
 3290 0016 22F08002 		bic	r2, r2, #128
 3291 001a DA60     		str	r2, [r3, #12]
1854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* If CR_BYPSHAD bit = 0, wait for synchro */
1856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 3292              		.loc 1 1856 7
 3293 001c 7B68     		ldr	r3, [r7, #4]
 3294 001e 1B68     		ldr	r3, [r3]
 3295 0020 9B68     		ldr	r3, [r3, #8]
 3296 0022 03F02003 		and	r3, r3, #32
 3297              		.loc 1 1856 6
 3298 0026 002B     		cmp	r3, #0
 3299 0028 0AD1     		bne	.L116
1857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 3300              		.loc 1 1858 9
 3301 002a 7868     		ldr	r0, [r7, #4]
 3302 002c FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 3303 0030 0346     		mov	r3, r0
 3304              		.loc 1 1858 8 discriminator 1
 3305 0032 002B     		cmp	r3, #0
 3306 0034 04D0     		beq	.L116
1859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Set RTC state */
1861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 3307              		.loc 1 1861 19
 3308 0036 7B68     		ldr	r3, [r7, #4]
 3309 0038 0422     		movs	r2, #4
 3310 003a 5A77     		strb	r2, [r3, #29]
1862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       status = HAL_ERROR;
 3311              		.loc 1 1862 14
 3312 003c 0123     		movs	r3, #1
 3313 003e FB73     		strb	r3, [r7, #15]
 3314              	.L116:
1863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 92


1866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return status;
 3315              		.loc 1 1866 10
 3316 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3317              		.loc 1 1867 1
 3318 0042 1846     		mov	r0, r3
 3319 0044 1037     		adds	r7, r7, #16
 3320              	.LCFI127:
 3321              		.cfi_def_cfa_offset 8
 3322 0046 BD46     		mov	sp, r7
 3323              	.LCFI128:
 3324              		.cfi_def_cfa_register 13
 3325              		@ sp needed
 3326 0048 80BD     		pop	{r7, pc}
 3327              		.cfi_endproc
 3328              	.LFE157:
 3330              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 3331              		.align	1
 3332              		.global	RTC_ByteToBcd2
 3333              		.syntax unified
 3334              		.thumb
 3335              		.thumb_func
 3337              	RTC_ByteToBcd2:
 3338              	.LFB158:
1868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Converts a 2-digit number from decimal to BCD format.
1871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  number decimal-formatted number (from 0 to 99) to be converted
1872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval Converted byte
1873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t number)
1875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3339              		.loc 1 1875 1
 3340              		.cfi_startproc
 3341              		@ args = 0, pretend = 0, frame = 16
 3342              		@ frame_needed = 1, uses_anonymous_args = 0
 3343              		@ link register save eliminated.
 3344 0000 80B4     		push	{r7}
 3345              	.LCFI129:
 3346              		.cfi_def_cfa_offset 4
 3347              		.cfi_offset 7, -4
 3348 0002 85B0     		sub	sp, sp, #20
 3349              	.LCFI130:
 3350              		.cfi_def_cfa_offset 24
 3351 0004 00AF     		add	r7, sp, #0
 3352              	.LCFI131:
 3353              		.cfi_def_cfa_register 7
 3354 0006 0346     		mov	r3, r0
 3355 0008 FB71     		strb	r3, [r7, #7]
1876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 3356              		.loc 1 1876 12
 3357 000a 0023     		movs	r3, #0
 3358 000c FB60     		str	r3, [r7, #12]
1877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   while (number >= 10U)
 3359              		.loc 1 1878 9
 3360 000e 05E0     		b	.L119
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 93


 3361              	.L120:
1879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     bcdhigh++;
 3362              		.loc 1 1880 12
 3363 0010 FB68     		ldr	r3, [r7, #12]
 3364 0012 0133     		adds	r3, r3, #1
 3365 0014 FB60     		str	r3, [r7, #12]
1881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     number -= 10U;
 3366              		.loc 1 1881 12
 3367 0016 FB79     		ldrb	r3, [r7, #7]
 3368 0018 0A3B     		subs	r3, r3, #10
 3369 001a FB71     		strb	r3, [r7, #7]
 3370              	.L119:
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 3371              		.loc 1 1878 17
 3372 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3373 001e 092B     		cmp	r3, #9
 3374 0020 F6D8     		bhi	.L120
1882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return ((uint8_t)(bcdhigh << 4U) | number);
 3375              		.loc 1 1884 11
 3376 0022 FB68     		ldr	r3, [r7, #12]
 3377 0024 DBB2     		uxtb	r3, r3
 3378 0026 1B01     		lsls	r3, r3, #4
 3379 0028 DAB2     		uxtb	r2, r3
 3380              		.loc 1 1884 36
 3381 002a FB79     		ldrb	r3, [r7, #7]
 3382 002c 1343     		orrs	r3, r3, r2
 3383 002e DBB2     		uxtb	r3, r3
1885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3384              		.loc 1 1885 1
 3385 0030 1846     		mov	r0, r3
 3386 0032 1437     		adds	r7, r7, #20
 3387              	.LCFI132:
 3388              		.cfi_def_cfa_offset 4
 3389 0034 BD46     		mov	sp, r7
 3390              	.LCFI133:
 3391              		.cfi_def_cfa_register 13
 3392              		@ sp needed
 3393 0036 5DF8047B 		ldr	r7, [sp], #4
 3394              	.LCFI134:
 3395              		.cfi_restore 7
 3396              		.cfi_def_cfa_offset 0
 3397 003a 7047     		bx	lr
 3398              		.cfi_endproc
 3399              	.LFE158:
 3401              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 3402              		.align	1
 3403              		.global	RTC_Bcd2ToByte
 3404              		.syntax unified
 3405              		.thumb
 3406              		.thumb_func
 3408              	RTC_Bcd2ToByte:
 3409              	.LFB159:
1886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 94


1888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Converts a 2-digit number from BCD to decimal format.
1889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  number BCD-formatted number (from 00 to 99) to be converted
1890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval Converted word
1891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t number)
1893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3410              		.loc 1 1893 1
 3411              		.cfi_startproc
 3412              		@ args = 0, pretend = 0, frame = 16
 3413              		@ frame_needed = 1, uses_anonymous_args = 0
 3414              		@ link register save eliminated.
 3415 0000 80B4     		push	{r7}
 3416              	.LCFI135:
 3417              		.cfi_def_cfa_offset 4
 3418              		.cfi_offset 7, -4
 3419 0002 85B0     		sub	sp, sp, #20
 3420              	.LCFI136:
 3421              		.cfi_def_cfa_offset 24
 3422 0004 00AF     		add	r7, sp, #0
 3423              	.LCFI137:
 3424              		.cfi_def_cfa_register 7
 3425 0006 0346     		mov	r3, r0
 3426 0008 FB71     		strb	r3, [r7, #7]
1894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tens = 0U;
 3427              		.loc 1 1894 12
 3428 000a 0023     		movs	r3, #0
 3429 000c FB60     		str	r3, [r7, #12]
1895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 3430              		.loc 1 1895 38
 3431 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3432 0010 1B09     		lsrs	r3, r3, #4
 3433 0012 DBB2     		uxtb	r3, r3
 3434 0014 1A46     		mov	r2, r3
 3435              		.loc 1 1895 8
 3436 0016 1346     		mov	r3, r2
 3437 0018 9B00     		lsls	r3, r3, #2
 3438 001a 1344     		add	r3, r3, r2
 3439 001c 5B00     		lsls	r3, r3, #1
 3440 001e FB60     		str	r3, [r7, #12]
1896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 3441              		.loc 1 1896 10
 3442 0020 FB68     		ldr	r3, [r7, #12]
 3443 0022 DAB2     		uxtb	r2, r3
 3444              		.loc 1 1896 45
 3445 0024 FB79     		ldrb	r3, [r7, #7]
 3446 0026 03F00F03 		and	r3, r3, #15
 3447 002a DBB2     		uxtb	r3, r3
 3448              		.loc 1 1896 10
 3449 002c 1344     		add	r3, r3, r2
 3450 002e DBB2     		uxtb	r3, r3
1897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3451              		.loc 1 1897 1
 3452 0030 1846     		mov	r0, r3
 3453 0032 1437     		adds	r7, r7, #20
 3454              	.LCFI138:
 3455              		.cfi_def_cfa_offset 4
 3456 0034 BD46     		mov	sp, r7
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 95


 3457              	.LCFI139:
 3458              		.cfi_def_cfa_register 13
 3459              		@ sp needed
 3460 0036 5DF8047B 		ldr	r7, [sp], #4
 3461              	.LCFI140:
 3462              		.cfi_restore 7
 3463              		.cfi_def_cfa_offset 0
 3464 003a 7047     		bx	lr
 3465              		.cfi_endproc
 3466              	.LFE159:
 3468              		.text
 3469              	.Letext0:
 3470              		.file 2 "C:/gcc_vsc/arm_gcc/14.2 rel1/arm-none-eabi/include/machine/_default_types.h"
 3471              		.file 3 "C:/gcc_vsc/arm_gcc/14.2 rel1/arm-none-eabi/include/sys/_stdint.h"
 3472              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 3473              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3474              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rtc.h"
 3475              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3476              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rtc_ex.h"
 3477              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 96


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hal_rtc.c
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:21     .text.HAL_RTC_Init:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:27     .text.HAL_RTC_Init:00000000 HAL_RTC_Init
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:419    .text.HAL_RTC_MspInit:00000000 HAL_RTC_MspInit
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3165   .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3263   .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:234    .text.HAL_RTC_DeInit:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:240    .text.HAL_RTC_DeInit:00000000 HAL_RTC_DeInit
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:461    .text.HAL_RTC_MspDeInit:00000000 HAL_RTC_MspDeInit
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:408    .text.HAL_RTC_DeInit:000000d8 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:413    .text.HAL_RTC_MspInit:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:455    .text.HAL_RTC_MspDeInit:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:497    .text.HAL_RTC_SetTime:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:503    .text.HAL_RTC_SetTime:00000000 HAL_RTC_SetTime
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3337   .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:739    .text.HAL_RTC_GetTime:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:745    .text.HAL_RTC_GetTime:00000000 HAL_RTC_GetTime
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3408   .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:884    .text.HAL_RTC_SetDate:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:890    .text.HAL_RTC_SetDate:00000000 HAL_RTC_SetDate
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:1091   .text.HAL_RTC_GetDate:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:1097   .text.HAL_RTC_GetDate:00000000 HAL_RTC_GetDate
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:1216   .text.HAL_RTC_SetAlarm:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:1222   .text.HAL_RTC_SetAlarm:00000000 HAL_RTC_SetAlarm
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:1630   .text.HAL_RTC_SetAlarm_IT:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:1636   .text.HAL_RTC_SetAlarm_IT:00000000 HAL_RTC_SetAlarm_IT
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2066   .text.HAL_RTC_SetAlarm_IT:0000027c $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2073   .text.HAL_RTC_DeactivateAlarm:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2079   .text.HAL_RTC_DeactivateAlarm:00000000 HAL_RTC_DeactivateAlarm
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2277   .text.HAL_RTC_GetAlarm:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2283   .text.HAL_RTC_GetAlarm:00000000 HAL_RTC_GetAlarm
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2478   .text.HAL_RTC_AlarmIRQHandler:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2484   .text.HAL_RTC_AlarmIRQHandler:00000000 HAL_RTC_AlarmIRQHandler
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2592   .text.HAL_RTC_AlarmAEventCallback:00000000 HAL_RTC_AlarmAEventCallback
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2581   .text.HAL_RTC_AlarmIRQHandler:00000088 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2586   .text.HAL_RTC_AlarmAEventCallback:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2628   .text.HAL_RTC_PollForAlarmAEvent:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2634   .text.HAL_RTC_PollForAlarmAEvent:00000000 HAL_RTC_PollForAlarmAEvent
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2727   .text.HAL_RTC_WaitForSynchro:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2733   .text.HAL_RTC_WaitForSynchro:00000000 HAL_RTC_WaitForSynchro
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2805   .text.HAL_RTC_WaitForSynchro:00000048 $d
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2810   .text.HAL_RTC_DST_Add1Hour:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2816   .text.HAL_RTC_DST_Add1Hour:00000000 HAL_RTC_DST_Add1Hour
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2874   .text.HAL_RTC_DST_Sub1Hour:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2880   .text.HAL_RTC_DST_Sub1Hour:00000000 HAL_RTC_DST_Sub1Hour
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2938   .text.HAL_RTC_DST_SetStoreOperation:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:2944   .text.HAL_RTC_DST_SetStoreOperation:00000000 HAL_RTC_DST_SetStoreOperation
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3002   .text.HAL_RTC_DST_ClearStoreOperation:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3008   .text.HAL_RTC_DST_ClearStoreOperation:00000000 HAL_RTC_DST_ClearStoreOperation
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3066   .text.HAL_RTC_DST_ReadStoreOperation:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3072   .text.HAL_RTC_DST_ReadStoreOperation:00000000 HAL_RTC_DST_ReadStoreOperation
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3113   .text.HAL_RTC_GetState:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3119   .text.HAL_RTC_GetState:00000000 HAL_RTC_GetState
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3159   .text.RTC_EnterInitMode:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3257   .text.RTC_ExitInitMode:00000000 $t
C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3331   .text.RTC_ByteToBcd2:00000000 $t
ARM GAS  C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s 			page 97


C:\Users\TGSPOC~1\AppData\Local\Temp\ccd6e5Nx.s:3402   .text.RTC_Bcd2ToByte:00000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
SystemCoreClock
HAL_RTCEx_AlarmBEventCallback
