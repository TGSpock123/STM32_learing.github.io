
qspi_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007c94  08007c94  00008c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007cf0  08007cf0  00008cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  08007cf4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a0c  24000014  08007d08  00009014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004a20  08007d08  00009a20  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ce72  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003dd7  00000000  00000000  00025eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001760  00000000  00000000  00029c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000011f9  00000000  00000000  0002b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039393  00000000  00000000  0002c5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cf9a  00000000  00000000  0006597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00167f91  00000000  00000000  00082916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ea8a7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000617c  00000000  00000000  001ea8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001f0a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007c7c 	.word	0x08007c7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	08007c7c 	.word	0x08007c7c

080002e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <MX_FREERTOS_Init+0x18>)
 80002e6:	2100      	movs	r1, #0
 80002e8:	4804      	ldr	r0, [pc, #16]	@ (80002fc <MX_FREERTOS_Init+0x1c>)
 80002ea:	f004 ff57 	bl	800519c <osThreadNew>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a03      	ldr	r2, [pc, #12]	@ (8000300 <MX_FREERTOS_Init+0x20>)
 80002f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	08007cb8 	.word	0x08007cb8
 80002fc:	08000305 	.word	0x08000305
 8000300:	24000030 	.word	0x24000030

08000304 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000312:	4804      	ldr	r0, [pc, #16]	@ (8000324 <StartDefaultTask+0x20>)
 8000314:	f001 fc64 	bl	8001be0 <HAL_GPIO_WritePin>
  LCD_INIT();
 8000318:	f000 fab6 	bl	8000888 <LCD_INIT>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800031c:	2001      	movs	r0, #1
 800031e:	f004 ffcf 	bl	80052c0 <osDelay>
 8000322:	e7fb      	b.n	800031c <StartDefaultTask+0x18>
 8000324:	58020800 	.word	0x58020800

08000328 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	@ 0x28
 800032c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800033e:	4b3d      	ldr	r3, [pc, #244]	@ (8000434 <MX_GPIO_Init+0x10c>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000344:	4a3b      	ldr	r2, [pc, #236]	@ (8000434 <MX_GPIO_Init+0x10c>)
 8000346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800034a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800034e:	4b39      	ldr	r3, [pc, #228]	@ (8000434 <MX_GPIO_Init+0x10c>)
 8000350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000358:	613b      	str	r3, [r7, #16]
 800035a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	4b35      	ldr	r3, [pc, #212]	@ (8000434 <MX_GPIO_Init+0x10c>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000362:	4a34      	ldr	r2, [pc, #208]	@ (8000434 <MX_GPIO_Init+0x10c>)
 8000364:	f043 0302 	orr.w	r3, r3, #2
 8000368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800036c:	4b31      	ldr	r3, [pc, #196]	@ (8000434 <MX_GPIO_Init+0x10c>)
 800036e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800037a:	4b2e      	ldr	r3, [pc, #184]	@ (8000434 <MX_GPIO_Init+0x10c>)
 800037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000380:	4a2c      	ldr	r2, [pc, #176]	@ (8000434 <MX_GPIO_Init+0x10c>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800038a:	4b2a      	ldr	r3, [pc, #168]	@ (8000434 <MX_GPIO_Init+0x10c>)
 800038c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000398:	4b26      	ldr	r3, [pc, #152]	@ (8000434 <MX_GPIO_Init+0x10c>)
 800039a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800039e:	4a25      	ldr	r2, [pc, #148]	@ (8000434 <MX_GPIO_Init+0x10c>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003a8:	4b22      	ldr	r3, [pc, #136]	@ (8000434 <MX_GPIO_Init+0x10c>)
 80003aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ae:	f003 0304 	and.w	r3, r3, #4
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, qspi_reset_Pin|qspi_dc_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2103      	movs	r1, #3
 80003ba:	481f      	ldr	r0, [pc, #124]	@ (8000438 <MX_GPIO_Init+0x110>)
 80003bc:	f001 fc10 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(qspi_leda_GPIO_Port, qspi_leda_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003c6:	481d      	ldr	r0, [pc, #116]	@ (800043c <MX_GPIO_Init+0x114>)
 80003c8:	f001 fc0a 	bl	8001be0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(led_GPIO_Port, led_GPIO_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2108      	movs	r1, #8
 80003d0:	481a      	ldr	r0, [pc, #104]	@ (800043c <MX_GPIO_Init+0x114>)
 80003d2:	f001 fc05 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = qspi_reset_Pin|qspi_dc_Pin;
 80003d6:	2303      	movs	r3, #3
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003de:	2301      	movs	r3, #1
 80003e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003e2:	2303      	movs	r3, #3
 80003e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4619      	mov	r1, r3
 80003ec:	4812      	ldr	r0, [pc, #72]	@ (8000438 <MX_GPIO_Init+0x110>)
 80003ee:	f001 fa47 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = qspi_leda_Pin;
 80003f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000400:	2301      	movs	r3, #1
 8000402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(qspi_leda_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	480c      	ldr	r0, [pc, #48]	@ (800043c <MX_GPIO_Init+0x114>)
 800040c:	f001 fa38 	bl	8001880 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = led_GPIO_Pin;
 8000410:	2308      	movs	r3, #8
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	2301      	movs	r3, #1
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000418:	2301      	movs	r3, #1
 800041a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800041c:	2301      	movs	r3, #1
 800041e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	4805      	ldr	r0, [pc, #20]	@ (800043c <MX_GPIO_Init+0x114>)
 8000428:	f001 fa2a 	bl	8001880 <HAL_GPIO_Init>
}
 800042c:	bf00      	nop
 800042e:	3728      	adds	r7, #40	@ 0x28
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	58024400 	.word	0x58024400
 8000438:	58020400 	.word	0x58020400
 800043c:	58021000 	.word	0x58021000

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000444:	f000 f8be 	bl	80005c4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000448:	f001 f85a 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044c:	f000 f80c 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000450:	f7ff ff6a 	bl	8000328 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000454:	f000 f8fa 	bl	800064c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000458:	f004 fe56 	bl	8005108 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800045c:	f7ff ff40 	bl	80002e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000460:	f004 fe76 	bl	8005150 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <main+0x24>

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b09e      	sub	sp, #120	@ 0x78
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000472:	224c      	movs	r2, #76	@ 0x4c
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f007 fbc6 	bl	8007c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	f107 030c 	add.w	r3, r7, #12
 8000480:	2220      	movs	r2, #32
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f007 fbbf 	bl	8007c08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800048a:	2002      	movs	r0, #2
 800048c:	f001 fbe8 	bl	8001c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	4b48      	ldr	r3, [pc, #288]	@ (80005b8 <SystemClock_Config+0x150>)
 8000496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000498:	4a47      	ldr	r2, [pc, #284]	@ (80005b8 <SystemClock_Config+0x150>)
 800049a:	f023 0301 	bic.w	r3, r3, #1
 800049e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004a0:	4b45      	ldr	r3, [pc, #276]	@ (80005b8 <SystemClock_Config+0x150>)
 80004a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	4b44      	ldr	r3, [pc, #272]	@ (80005bc <SystemClock_Config+0x154>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a43      	ldr	r2, [pc, #268]	@ (80005bc <SystemClock_Config+0x154>)
 80004b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b41      	ldr	r3, [pc, #260]	@ (80005bc <SystemClock_Config+0x154>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c2:	bf00      	nop
 80004c4:	4b3d      	ldr	r3, [pc, #244]	@ (80005bc <SystemClock_Config+0x154>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004d0:	d1f8      	bne.n	80004c4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b3b      	ldr	r3, [pc, #236]	@ (80005c0 <SystemClock_Config+0x158>)
 80004d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80004d8:	4a39      	ldr	r2, [pc, #228]	@ (80005c0 <SystemClock_Config+0x158>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80004e2:	4b37      	ldr	r3, [pc, #220]	@ (80005c0 <SystemClock_Config+0x158>)
 80004e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80004e8:	f003 0302 	and.w	r3, r3, #2
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004f0:	2300      	movs	r3, #0
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	4b31      	ldr	r3, [pc, #196]	@ (80005bc <SystemClock_Config+0x154>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a30      	ldr	r2, [pc, #192]	@ (80005bc <SystemClock_Config+0x154>)
 80004fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b2e      	ldr	r3, [pc, #184]	@ (80005bc <SystemClock_Config+0x154>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b2b      	ldr	r3, [pc, #172]	@ (80005b8 <SystemClock_Config+0x150>)
 800050c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800050e:	4a2a      	ldr	r2, [pc, #168]	@ (80005b8 <SystemClock_Config+0x150>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000516:	4b28      	ldr	r3, [pc, #160]	@ (80005b8 <SystemClock_Config+0x150>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000522:	bf00      	nop
 8000524:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <SystemClock_Config+0x154>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800052c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000530:	d1f8      	bne.n	8000524 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000532:	2301      	movs	r3, #1
 8000534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000536:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800053a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053c:	2302      	movs	r3, #2
 800053e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000540:	2302      	movs	r3, #2
 8000542:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000544:	2305      	movs	r3, #5
 8000546:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000548:	23c0      	movs	r3, #192	@ 0xc0
 800054a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800054c:	2302      	movs	r3, #2
 800054e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000550:	2302      	movs	r3, #2
 8000552:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000554:	2302      	movs	r3, #2
 8000556:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000558:	2308      	movs	r3, #8
 800055a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800055c:	2300      	movs	r3, #0
 800055e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000568:	4618      	mov	r0, r3
 800056a:	f001 ff3b 	bl	80023e4 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000574:	f000 f864 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	233f      	movs	r3, #63	@ 0x3f
 800057a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2303      	movs	r3, #3
 800057e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000584:	2308      	movs	r3, #8
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000588:	2340      	movs	r3, #64	@ 0x40
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800058c:	2340      	movs	r3, #64	@ 0x40
 800058e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000596:	2340      	movs	r3, #64	@ 0x40
 8000598:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2104      	movs	r1, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fb79 	bl	8002c98 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80005ac:	f000 f848 	bl	8000640 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3778      	adds	r7, #120	@ 0x78
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58000400 	.word	0x58000400
 80005bc:	58024800 	.word	0x58024800
 80005c0:	58024400 	.word	0x58024400

080005c4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005d6:	f001 f8db 	bl	8001790 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005da:	2301      	movs	r3, #1
 80005dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005de:	2300      	movs	r3, #0
 80005e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005e6:	231f      	movs	r3, #31
 80005e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80005ea:	2387      	movs	r3, #135	@ 0x87
 80005ec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80005f2:	2300      	movs	r3, #0
 80005f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80005fa:	2301      	movs	r3, #1
 80005fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000606:	463b      	mov	r3, r7
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f8f9 	bl	8001800 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800060e:	2004      	movs	r0, #4
 8000610:	f001 f8d6 	bl	80017c0 <HAL_MPU_Enable>

}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d101      	bne.n	8000632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800062e:	f000 ffa3 	bl	8001578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40001000 	.word	0x40001000

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <Error_Handler+0x8>

0800064c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_QUADSPI_Init+0x50>)
 8000652:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <MX_QUADSPI_Init+0x54>)
 8000654:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_QUADSPI_Init+0x50>)
 8000658:	22ff      	movs	r2, #255	@ 0xff
 800065a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_QUADSPI_Init+0x50>)
 800065e:	2201      	movs	r2, #1
 8000660:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_QUADSPI_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_QUADSPI_Init+0x50>)
 800066a:	2201      	movs	r2, #1
 800066c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_QUADSPI_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_QUADSPI_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_QUADSPI_Init+0x50>)
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_QUADSPI_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_QUADSPI_Init+0x50>)
 8000688:	f001 fb24 	bl	8001cd4 <HAL_QSPI_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000692:	f7ff ffd5 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000034 	.word	0x24000034
 80006a0:	52005000 	.word	0x52005000

080006a4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0bc      	sub	sp, #240	@ 0xf0
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	22c0      	movs	r2, #192	@ 0xc0
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 fa9f 	bl	8007c08 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a4f      	ldr	r2, [pc, #316]	@ (800080c <HAL_QSPI_MspInit+0x168>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	f040 8097 	bne.w	8000804 <HAL_QSPI_MspInit+0x160>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80006d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80006da:	f04f 0300 	mov.w	r3, #0
 80006de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80006e2:	2300      	movs	r3, #0
 80006e4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fe8c 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80006f6:	f7ff ffa3 	bl	8000640 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80006fa:	4b45      	ldr	r3, [pc, #276]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 80006fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000700:	4a43      	ldr	r2, [pc, #268]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800070a:	4b41      	ldr	r3, [pc, #260]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 800070c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071e:	4a3c      	ldr	r2, [pc, #240]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000728:	4b39      	ldr	r3, [pc, #228]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	4b36      	ldr	r3, [pc, #216]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073c:	4a34      	ldr	r2, [pc, #208]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000746:	4b32      	ldr	r3, [pc, #200]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000754:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075a:	4a2d      	ldr	r2, [pc, #180]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <HAL_QSPI_MspInit+0x16c>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000772:	2304      	movs	r3, #4
 8000774:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800078a:	2309      	movs	r3, #9
 800078c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000794:	4619      	mov	r1, r3
 8000796:	481f      	ldr	r0, [pc, #124]	@ (8000814 <HAL_QSPI_MspInit+0x170>)
 8000798:	f001 f872 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800079c:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80007a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80007b6:	230a      	movs	r3, #10
 80007b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80007c0:	4619      	mov	r1, r3
 80007c2:	4815      	ldr	r0, [pc, #84]	@ (8000818 <HAL_QSPI_MspInit+0x174>)
 80007c4:	f001 f85c 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007e2:	2309      	movs	r3, #9
 80007e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	@ (800081c <HAL_QSPI_MspInit+0x178>)
 80007f0:	f001 f846 	bl	8001880 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 7, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2107      	movs	r1, #7
 80007f8:	205c      	movs	r0, #92	@ 0x5c
 80007fa:	f000 ffa1 	bl	8001740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80007fe:	205c      	movs	r0, #92	@ 0x5c
 8000800:	f000 ffb8 	bl	8001774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000804:	bf00      	nop
 8000806:	37f0      	adds	r7, #240	@ 0xf0
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	52005000 	.word	0x52005000
 8000810:	58024400 	.word	0x58024400
 8000814:	58020400 	.word	0x58020400
 8000818:	58021000 	.word	0x58021000
 800081c:	58020800 	.word	0x58020800

08000820 <LCD_WR_REG>:
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"

void LCD_WR_REG(uint8_t reg)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
  LCD_DC_CMD();
 800082a:	2200      	movs	r2, #0
 800082c:	2102      	movs	r1, #2
 800082e:	4807      	ldr	r0, [pc, #28]	@ (800084c <LCD_WR_REG+0x2c>)
 8000830:	f001 f9d6 	bl	8001be0 <HAL_GPIO_WritePin>
  HAL_QSPI_Transmit(&hqspi, &reg, HAL_MAX_DELAY);
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	f04f 32ff 	mov.w	r2, #4294967295
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <LCD_WR_REG+0x30>)
 800083e:	f001 fc77 	bl	8002130 <HAL_QSPI_Transmit>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	58020400 	.word	0x58020400
 8000850:	24000034 	.word	0x24000034

08000854 <LCD_WR_DATA>:

void LCD_WR_DATA(uint8_t data)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  LCD_DC_DATA();
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	4807      	ldr	r0, [pc, #28]	@ (8000880 <LCD_WR_DATA+0x2c>)
 8000864:	f001 f9bc 	bl	8001be0 <HAL_GPIO_WritePin>
  HAL_QSPI_Transmit(&hqspi, &data, HAL_MAX_DELAY);
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	f04f 32ff 	mov.w	r2, #4294967295
 800086e:	4619      	mov	r1, r3
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <LCD_WR_DATA+0x30>)
 8000872:	f001 fc5d 	bl	8002130 <HAL_QSPI_Transmit>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58020400 	.word	0x58020400
 8000884:	24000034 	.word	0x24000034

08000888 <LCD_INIT>:

void LCD_INIT(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  LCD_WR_REG(0xF0);
 800088c:	20f0      	movs	r0, #240	@ 0xf0
 800088e:	f7ff ffc7 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x28);
 8000892:	2028      	movs	r0, #40	@ 0x28
 8000894:	f7ff ffde 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF2);
 8000898:	20f2      	movs	r0, #242	@ 0xf2
 800089a:	f7ff ffc1 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x28);
 800089e:	2028      	movs	r0, #40	@ 0x28
 80008a0:	f7ff ffd8 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x73);
 80008a4:	2073      	movs	r0, #115	@ 0x73
 80008a6:	f7ff ffbb 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xF0);
 80008aa:	20f0      	movs	r0, #240	@ 0xf0
 80008ac:	f7ff ffd2 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x7C);
 80008b0:	207c      	movs	r0, #124	@ 0x7c
 80008b2:	f7ff ffb5 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xD1);
 80008b6:	20d1      	movs	r0, #209	@ 0xd1
 80008b8:	f7ff ffcc 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x83);
 80008bc:	2083      	movs	r0, #131	@ 0x83
 80008be:	f7ff ffaf 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xE0);
 80008c2:	20e0      	movs	r0, #224	@ 0xe0
 80008c4:	f7ff ffc6 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x84);
 80008c8:	2084      	movs	r0, #132	@ 0x84
 80008ca:	f7ff ffa9 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x61);
 80008ce:	2061      	movs	r0, #97	@ 0x61
 80008d0:	f7ff ffc0 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF2);
 80008d4:	20f2      	movs	r0, #242	@ 0xf2
 80008d6:	f7ff ffa3 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x82);
 80008da:	2082      	movs	r0, #130	@ 0x82
 80008dc:	f7ff ffba 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF0);
 80008e0:	20f0      	movs	r0, #240	@ 0xf0
 80008e2:	f7ff ff9d 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ffb4 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF0);
 80008ec:	20f0      	movs	r0, #240	@ 0xf0
 80008ee:	f7ff ff97 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x01);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff ffae 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF1);
 80008f8:	20f1      	movs	r0, #241	@ 0xf1
 80008fa:	f7ff ff91 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x01);
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff ffa8 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB0);
 8000904:	20b0      	movs	r0, #176	@ 0xb0
 8000906:	f7ff ff8b 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x5E);
 800090a:	205e      	movs	r0, #94	@ 0x5e
 800090c:	f7ff ffa2 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB1);
 8000910:	20b1      	movs	r0, #177	@ 0xb1
 8000912:	f7ff ff85 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x55);
 8000916:	2055      	movs	r0, #85	@ 0x55
 8000918:	f7ff ff9c 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB2);
 800091c:	20b2      	movs	r0, #178	@ 0xb2
 800091e:	f7ff ff7f 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x24);
 8000922:	2024      	movs	r0, #36	@ 0x24
 8000924:	f7ff ff96 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB3);
 8000928:	20b3      	movs	r0, #179	@ 0xb3
 800092a:	f7ff ff79 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x01);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff ff90 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB4);
 8000934:	20b4      	movs	r0, #180	@ 0xb4
 8000936:	f7ff ff73 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x87);
 800093a:	2087      	movs	r0, #135	@ 0x87
 800093c:	f7ff ff8a 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB5);
 8000940:	20b5      	movs	r0, #181	@ 0xb5
 8000942:	f7ff ff6d 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x44);
 8000946:	2044      	movs	r0, #68	@ 0x44
 8000948:	f7ff ff84 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB6);
 800094c:	20b6      	movs	r0, #182	@ 0xb6
 800094e:	f7ff ff67 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x8B);
 8000952:	208b      	movs	r0, #139	@ 0x8b
 8000954:	f7ff ff7e 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB7);
 8000958:	20b7      	movs	r0, #183	@ 0xb7
 800095a:	f7ff ff61 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x40);
 800095e:	2040      	movs	r0, #64	@ 0x40
 8000960:	f7ff ff78 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB8);
 8000964:	20b8      	movs	r0, #184	@ 0xb8
 8000966:	f7ff ff5b 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x86);
 800096a:	2086      	movs	r0, #134	@ 0x86
 800096c:	f7ff ff72 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB9);
 8000970:	20b9      	movs	r0, #185	@ 0xb9
 8000972:	f7ff ff55 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x15);
 8000976:	2015      	movs	r0, #21
 8000978:	f7ff ff6c 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBA);
 800097c:	20ba      	movs	r0, #186	@ 0xba
 800097e:	f7ff ff4f 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff ff66 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBB);
 8000988:	20bb      	movs	r0, #187	@ 0xbb
 800098a:	f7ff ff49 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x08);
 800098e:	2008      	movs	r0, #8
 8000990:	f7ff ff60 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBC);
 8000994:	20bc      	movs	r0, #188	@ 0xbc
 8000996:	f7ff ff43 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x08);
 800099a:	2008      	movs	r0, #8
 800099c:	f7ff ff5a 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBD);
 80009a0:	20bd      	movs	r0, #189	@ 0xbd
 80009a2:	f7ff ff3d 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff ff54 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBE);
 80009ac:	20be      	movs	r0, #190	@ 0xbe
 80009ae:	f7ff ff37 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff4e 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBF);
 80009b8:	20bf      	movs	r0, #191	@ 0xbf
 80009ba:	f7ff ff31 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x07);
 80009be:	2007      	movs	r0, #7
 80009c0:	f7ff ff48 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC0);
 80009c4:	20c0      	movs	r0, #192	@ 0xc0
 80009c6:	f7ff ff2b 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x80);
 80009ca:	2080      	movs	r0, #128	@ 0x80
 80009cc:	f7ff ff42 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC1);
 80009d0:	20c1      	movs	r0, #193	@ 0xc1
 80009d2:	f7ff ff25 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x10);
 80009d6:	2010      	movs	r0, #16
 80009d8:	f7ff ff3c 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC2);
 80009dc:	20c2      	movs	r0, #194	@ 0xc2
 80009de:	f7ff ff1f 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x37);
 80009e2:	2037      	movs	r0, #55	@ 0x37
 80009e4:	f7ff ff36 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC3);
 80009e8:	20c3      	movs	r0, #195	@ 0xc3
 80009ea:	f7ff ff19 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x80);
 80009ee:	2080      	movs	r0, #128	@ 0x80
 80009f0:	f7ff ff30 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC4);
 80009f4:	20c4      	movs	r0, #196	@ 0xc4
 80009f6:	f7ff ff13 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x10);
 80009fa:	2010      	movs	r0, #16
 80009fc:	f7ff ff2a 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC5);
 8000a00:	20c5      	movs	r0, #197	@ 0xc5
 8000a02:	f7ff ff0d 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x37);
 8000a06:	2037      	movs	r0, #55	@ 0x37
 8000a08:	f7ff ff24 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC6);
 8000a0c:	20c6      	movs	r0, #198	@ 0xc6
 8000a0e:	f7ff ff07 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xA9);
 8000a12:	20a9      	movs	r0, #169	@ 0xa9
 8000a14:	f7ff ff1e 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC7);
 8000a18:	20c7      	movs	r0, #199	@ 0xc7
 8000a1a:	f7ff ff01 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x41);
 8000a1e:	2041      	movs	r0, #65	@ 0x41
 8000a20:	f7ff ff18 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC8);
 8000a24:	20c8      	movs	r0, #200	@ 0xc8
 8000a26:	f7ff fefb 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x01);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff12 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC9);
 8000a30:	20c9      	movs	r0, #201	@ 0xc9
 8000a32:	f7ff fef5 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xA9);
 8000a36:	20a9      	movs	r0, #169	@ 0xa9
 8000a38:	f7ff ff0c 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xCA);
 8000a3c:	20ca      	movs	r0, #202	@ 0xca
 8000a3e:	f7ff feef 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x41);
 8000a42:	2041      	movs	r0, #65	@ 0x41
 8000a44:	f7ff ff06 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xCB);
 8000a48:	20cb      	movs	r0, #203	@ 0xcb
 8000a4a:	f7ff fee9 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x01);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff ff00 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xCC);
 8000a54:	20cc      	movs	r0, #204	@ 0xcc
 8000a56:	f7ff fee3 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x7F);
 8000a5a:	207f      	movs	r0, #127	@ 0x7f
 8000a5c:	f7ff fefa 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xCD);
 8000a60:	20cd      	movs	r0, #205	@ 0xcd
 8000a62:	f7ff fedd 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x7F);
 8000a66:	207f      	movs	r0, #127	@ 0x7f
 8000a68:	f7ff fef4 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xCE);
 8000a6c:	20ce      	movs	r0, #206	@ 0xce
 8000a6e:	f7ff fed7 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xFF);
 8000a72:	20ff      	movs	r0, #255	@ 0xff
 8000a74:	f7ff feee 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD0);
 8000a78:	20d0      	movs	r0, #208	@ 0xd0
 8000a7a:	f7ff fed1 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x91);
 8000a7e:	2091      	movs	r0, #145	@ 0x91
 8000a80:	f7ff fee8 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD1);
 8000a84:	20d1      	movs	r0, #209	@ 0xd1
 8000a86:	f7ff fecb 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x68);
 8000a8a:	2068      	movs	r0, #104	@ 0x68
 8000a8c:	f7ff fee2 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD2);
 8000a90:	20d2      	movs	r0, #210	@ 0xd2
 8000a92:	f7ff fec5 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x68);
 8000a96:	2068      	movs	r0, #104	@ 0x68
 8000a98:	f7ff fedc 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF5);
 8000a9c:	20f5      	movs	r0, #245	@ 0xf5
 8000a9e:	f7ff febf 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fed6 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0xA5);
 8000aa8:	20a5      	movs	r0, #165	@ 0xa5
 8000aaa:	f7ff fed3 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xDD);
 8000aae:	20dd      	movs	r0, #221	@ 0xdd
 8000ab0:	f7ff feb6 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x40);
 8000ab4:	2040      	movs	r0, #64	@ 0x40
 8000ab6:	f7ff fecd 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xDE);
 8000aba:	20de      	movs	r0, #222	@ 0xde
 8000abc:	f7ff feb0 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x40);
 8000ac0:	2040      	movs	r0, #64	@ 0x40
 8000ac2:	f7ff fec7 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF1);
 8000ac6:	20f1      	movs	r0, #241	@ 0xf1
 8000ac8:	f7ff feaa 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x10);
 8000acc:	2010      	movs	r0, #16
 8000ace:	f7ff fec1 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF0);
 8000ad2:	20f0      	movs	r0, #240	@ 0xf0
 8000ad4:	f7ff fea4 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff febb 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF0);
 8000ade:	20f0      	movs	r0, #240	@ 0xf0
 8000ae0:	f7ff fe9e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f7ff feb5 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE0);
 8000aea:	20e0      	movs	r0, #224	@ 0xe0
 8000aec:	f7ff fe98 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xF0);
 8000af0:	20f0      	movs	r0, #240	@ 0xf0
 8000af2:	f7ff feaf 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x10);
 8000af6:	2010      	movs	r0, #16
 8000af8:	f7ff feac 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x18);
 8000afc:	2018      	movs	r0, #24
 8000afe:	f7ff fea9 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x0D);
 8000b02:	200d      	movs	r0, #13
 8000b04:	f7ff fea6 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x0C);
 8000b08:	200c      	movs	r0, #12
 8000b0a:	f7ff fea3 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x38);
 8000b0e:	2038      	movs	r0, #56	@ 0x38
 8000b10:	f7ff fea0 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x3E);
 8000b14:	203e      	movs	r0, #62	@ 0x3e
 8000b16:	f7ff fe9d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x44);
 8000b1a:	2044      	movs	r0, #68	@ 0x44
 8000b1c:	f7ff fe9a 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x51);
 8000b20:	2051      	movs	r0, #81	@ 0x51
 8000b22:	f7ff fe97 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x39);
 8000b26:	2039      	movs	r0, #57	@ 0x39
 8000b28:	f7ff fe94 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x15);
 8000b2c:	2015      	movs	r0, #21
 8000b2e:	f7ff fe91 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x15);
 8000b32:	2015      	movs	r0, #21
 8000b34:	f7ff fe8e 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x30);
 8000b38:	2030      	movs	r0, #48	@ 0x30
 8000b3a:	f7ff fe8b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x34);
 8000b3e:	2034      	movs	r0, #52	@ 0x34
 8000b40:	f7ff fe88 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE1);
 8000b44:	20e1      	movs	r0, #225	@ 0xe1
 8000b46:	f7ff fe6b 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xF0);
 8000b4a:	20f0      	movs	r0, #240	@ 0xf0
 8000b4c:	f7ff fe82 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x0F);
 8000b50:	200f      	movs	r0, #15
 8000b52:	f7ff fe7f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x17);
 8000b56:	2017      	movs	r0, #23
 8000b58:	f7ff fe7c 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x0D);
 8000b5c:	200d      	movs	r0, #13
 8000b5e:	f7ff fe79 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x0B);
 8000b62:	200b      	movs	r0, #11
 8000b64:	f7ff fe76 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x07);
 8000b68:	2007      	movs	r0, #7
 8000b6a:	f7ff fe73 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x3E);
 8000b6e:	203e      	movs	r0, #62	@ 0x3e
 8000b70:	f7ff fe70 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x33);
 8000b74:	2033      	movs	r0, #51	@ 0x33
 8000b76:	f7ff fe6d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x51);
 8000b7a:	2051      	movs	r0, #81	@ 0x51
 8000b7c:	f7ff fe6a 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x39);
 8000b80:	2039      	movs	r0, #57	@ 0x39
 8000b82:	f7ff fe67 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x15);
 8000b86:	2015      	movs	r0, #21
 8000b88:	f7ff fe64 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x15);
 8000b8c:	2015      	movs	r0, #21
 8000b8e:	f7ff fe61 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x30);
 8000b92:	2030      	movs	r0, #48	@ 0x30
 8000b94:	f7ff fe5e 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_DATA(0x34);
 8000b98:	2034      	movs	r0, #52	@ 0x34
 8000b9a:	f7ff fe5b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF0);
 8000b9e:	20f0      	movs	r0, #240	@ 0xf0
 8000ba0:	f7ff fe3e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x10);
 8000ba4:	2010      	movs	r0, #16
 8000ba6:	f7ff fe55 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF3);
 8000baa:	20f3      	movs	r0, #243	@ 0xf3
 8000bac:	f7ff fe38 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x10);
 8000bb0:	2010      	movs	r0, #16
 8000bb2:	f7ff fe4f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE0);
 8000bb6:	20e0      	movs	r0, #224	@ 0xe0
 8000bb8:	f7ff fe32 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x08);
 8000bbc:	2008      	movs	r0, #8
 8000bbe:	f7ff fe49 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE1);
 8000bc2:	20e1      	movs	r0, #225	@ 0xe1
 8000bc4:	f7ff fe2c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fe43 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE2);
 8000bce:	20e2      	movs	r0, #226	@ 0xe2
 8000bd0:	f7ff fe26 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fe3d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE3);
 8000bda:	20e3      	movs	r0, #227	@ 0xe3
 8000bdc:	f7ff fe20 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fe37 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE4);
 8000be6:	20e4      	movs	r0, #228	@ 0xe4
 8000be8:	f7ff fe1a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xE0);
 8000bec:	20e0      	movs	r0, #224	@ 0xe0
 8000bee:	f7ff fe31 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE5);
 8000bf2:	20e5      	movs	r0, #229	@ 0xe5
 8000bf4:	f7ff fe14 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x06);
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f7ff fe2b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE6);
 8000bfe:	20e6      	movs	r0, #230	@ 0xe6
 8000c00:	f7ff fe0e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x21);
 8000c04:	2021      	movs	r0, #33	@ 0x21
 8000c06:	f7ff fe25 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE7);
 8000c0a:	20e7      	movs	r0, #231	@ 0xe7
 8000c0c:	f7ff fe08 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x03);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f7ff fe1f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE8);
 8000c16:	20e8      	movs	r0, #232	@ 0xe8
 8000c18:	f7ff fe02 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x05);
 8000c1c:	2005      	movs	r0, #5
 8000c1e:	f7ff fe19 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xE9);
 8000c22:	20e9      	movs	r0, #233	@ 0xe9
 8000c24:	f7ff fdfc 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff fe13 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xEA);
 8000c2e:	20ea      	movs	r0, #234	@ 0xea
 8000c30:	f7ff fdf6 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xE9);
 8000c34:	20e9      	movs	r0, #233	@ 0xe9
 8000c36:	f7ff fe0d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xEB);
 8000c3a:	20eb      	movs	r0, #235	@ 0xeb
 8000c3c:	f7ff fdf0 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff fe07 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xEC);
 8000c46:	20ec      	movs	r0, #236	@ 0xec
 8000c48:	f7ff fdea 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fe01 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xED);
 8000c52:	20ed      	movs	r0, #237	@ 0xed
 8000c54:	f7ff fde4 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x14);
 8000c58:	2014      	movs	r0, #20
 8000c5a:	f7ff fdfb 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xEE);
 8000c5e:	20ee      	movs	r0, #238	@ 0xee
 8000c60:	f7ff fdde 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xFF);
 8000c64:	20ff      	movs	r0, #255	@ 0xff
 8000c66:	f7ff fdf5 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xEF);
 8000c6a:	20ef      	movs	r0, #239	@ 0xef
 8000c6c:	f7ff fdd8 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fdef 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF8);
 8000c76:	20f8      	movs	r0, #248	@ 0xf8
 8000c78:	f7ff fdd2 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xFF);
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	f7ff fde9 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF9);
 8000c82:	20f9      	movs	r0, #249	@ 0xf9
 8000c84:	f7ff fdcc 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fde3 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xFA);
 8000c8e:	20fa      	movs	r0, #250	@ 0xfa
 8000c90:	f7ff fdc6 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff fddd 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xFB);
 8000c9a:	20fb      	movs	r0, #251	@ 0xfb
 8000c9c:	f7ff fdc0 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x30);
 8000ca0:	2030      	movs	r0, #48	@ 0x30
 8000ca2:	f7ff fdd7 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xFC);
 8000ca6:	20fc      	movs	r0, #252	@ 0xfc
 8000ca8:	f7ff fdba 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fdd1 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xFD);
 8000cb2:	20fd      	movs	r0, #253	@ 0xfd
 8000cb4:	f7ff fdb4 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fdcb 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xFE);
 8000cbe:	20fe      	movs	r0, #254	@ 0xfe
 8000cc0:	f7ff fdae 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fdc5 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xFF);
 8000cca:	20ff      	movs	r0, #255	@ 0xff
 8000ccc:	f7ff fda8 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fdbf 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x60);
 8000cd6:	2060      	movs	r0, #96	@ 0x60
 8000cd8:	f7ff fda2 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x40);
 8000cdc:	2040      	movs	r0, #64	@ 0x40
 8000cde:	f7ff fdb9 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x61);
 8000ce2:	2061      	movs	r0, #97	@ 0x61
 8000ce4:	f7ff fd9c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x05);
 8000ce8:	2005      	movs	r0, #5
 8000cea:	f7ff fdb3 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x62);
 8000cee:	2062      	movs	r0, #98	@ 0x62
 8000cf0:	f7ff fd96 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fdad 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x63);
 8000cfa:	2063      	movs	r0, #99	@ 0x63
 8000cfc:	f7ff fd90 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x42);
 8000d00:	2042      	movs	r0, #66	@ 0x42
 8000d02:	f7ff fda7 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x64);
 8000d06:	2064      	movs	r0, #100	@ 0x64
 8000d08:	f7ff fd8a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xDA);
 8000d0c:	20da      	movs	r0, #218	@ 0xda
 8000d0e:	f7ff fda1 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x65);
 8000d12:	2065      	movs	r0, #101	@ 0x65
 8000d14:	f7ff fd84 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fd9b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x66);
 8000d1e:	2066      	movs	r0, #102	@ 0x66
 8000d20:	f7ff fd7e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fd95 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x67);
 8000d2a:	2067      	movs	r0, #103	@ 0x67
 8000d2c:	f7ff fd78 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fd8f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x68);
 8000d36:	2068      	movs	r0, #104	@ 0x68
 8000d38:	f7ff fd72 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fd89 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x69);
 8000d42:	2069      	movs	r0, #105	@ 0x69
 8000d44:	f7ff fd6c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff fd83 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x6A);
 8000d4e:	206a      	movs	r0, #106	@ 0x6a
 8000d50:	f7ff fd66 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff fd7d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x6B);
 8000d5a:	206b      	movs	r0, #107	@ 0x6b
 8000d5c:	f7ff fd60 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fd77 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x70);
 8000d66:	2070      	movs	r0, #112	@ 0x70
 8000d68:	f7ff fd5a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x40);
 8000d6c:	2040      	movs	r0, #64	@ 0x40
 8000d6e:	f7ff fd71 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x71);
 8000d72:	2071      	movs	r0, #113	@ 0x71
 8000d74:	f7ff fd54 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f7ff fd6b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x72);
 8000d7e:	2072      	movs	r0, #114	@ 0x72
 8000d80:	f7ff fd4e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff fd65 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x73);
 8000d8a:	2073      	movs	r0, #115	@ 0x73
 8000d8c:	f7ff fd48 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x42);
 8000d90:	2042      	movs	r0, #66	@ 0x42
 8000d92:	f7ff fd5f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x74);
 8000d96:	2074      	movs	r0, #116	@ 0x74
 8000d98:	f7ff fd42 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xD9);
 8000d9c:	20d9      	movs	r0, #217	@ 0xd9
 8000d9e:	f7ff fd59 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x75);
 8000da2:	2075      	movs	r0, #117	@ 0x75
 8000da4:	f7ff fd3c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fd53 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x76);
 8000dae:	2076      	movs	r0, #118	@ 0x76
 8000db0:	f7ff fd36 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fd4d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x77);
 8000dba:	2077      	movs	r0, #119	@ 0x77
 8000dbc:	f7ff fd30 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fd47 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x78);
 8000dc6:	2078      	movs	r0, #120	@ 0x78
 8000dc8:	f7ff fd2a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fd41 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x79);
 8000dd2:	2079      	movs	r0, #121	@ 0x79
 8000dd4:	f7ff fd24 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fd3b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x7A);
 8000dde:	207a      	movs	r0, #122	@ 0x7a
 8000de0:	f7ff fd1e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fd35 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x7B);
 8000dea:	207b      	movs	r0, #123	@ 0x7b
 8000dec:	f7ff fd18 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fd2f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x80);
 8000df6:	2080      	movs	r0, #128	@ 0x80
 8000df8:	f7ff fd12 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x48);
 8000dfc:	2048      	movs	r0, #72	@ 0x48
 8000dfe:	f7ff fd29 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x81);
 8000e02:	2081      	movs	r0, #129	@ 0x81
 8000e04:	f7ff fd0c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fd23 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x82);
 8000e0e:	2082      	movs	r0, #130	@ 0x82
 8000e10:	f7ff fd06 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x07);
 8000e14:	2007      	movs	r0, #7
 8000e16:	f7ff fd1d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x83);
 8000e1a:	2083      	movs	r0, #131	@ 0x83
 8000e1c:	f7ff fd00 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff fd17 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x84);
 8000e26:	2084      	movs	r0, #132	@ 0x84
 8000e28:	f7ff fcfa 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xD7);
 8000e2c:	20d7      	movs	r0, #215	@ 0xd7
 8000e2e:	f7ff fd11 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x85);
 8000e32:	2085      	movs	r0, #133	@ 0x85
 8000e34:	f7ff fcf4 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 8000e38:	2004      	movs	r0, #4
 8000e3a:	f7ff fd0b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x86);
 8000e3e:	2086      	movs	r0, #134	@ 0x86
 8000e40:	f7ff fcee 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fd05 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x87);
 8000e4a:	2087      	movs	r0, #135	@ 0x87
 8000e4c:	f7ff fce8 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fcff 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x88);
 8000e56:	2088      	movs	r0, #136	@ 0x88
 8000e58:	f7ff fce2 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x48);
 8000e5c:	2048      	movs	r0, #72	@ 0x48
 8000e5e:	f7ff fcf9 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x89);
 8000e62:	2089      	movs	r0, #137	@ 0x89
 8000e64:	f7ff fcdc 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fcf3 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x8A);
 8000e6e:	208a      	movs	r0, #138	@ 0x8a
 8000e70:	f7ff fcd6 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x09);
 8000e74:	2009      	movs	r0, #9
 8000e76:	f7ff fced 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x8B);
 8000e7a:	208b      	movs	r0, #139	@ 0x8b
 8000e7c:	f7ff fcd0 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8000e80:	2002      	movs	r0, #2
 8000e82:	f7ff fce7 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x8C);
 8000e86:	208c      	movs	r0, #140	@ 0x8c
 8000e88:	f7ff fcca 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xD9);
 8000e8c:	20d9      	movs	r0, #217	@ 0xd9
 8000e8e:	f7ff fce1 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x8D);
 8000e92:	208d      	movs	r0, #141	@ 0x8d
 8000e94:	f7ff fcc4 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff fcdb 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x8E);
 8000e9e:	208e      	movs	r0, #142	@ 0x8e
 8000ea0:	f7ff fcbe 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fcd5 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x8F);
 8000eaa:	208f      	movs	r0, #143	@ 0x8f
 8000eac:	f7ff fcb8 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fccf 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x90);
 8000eb6:	2090      	movs	r0, #144	@ 0x90
 8000eb8:	f7ff fcb2 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x48);
 8000ebc:	2048      	movs	r0, #72	@ 0x48
 8000ebe:	f7ff fcc9 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x91);
 8000ec2:	2091      	movs	r0, #145	@ 0x91
 8000ec4:	f7ff fcac 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff fcc3 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x92);
 8000ece:	2092      	movs	r0, #146	@ 0x92
 8000ed0:	f7ff fca6 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x0B);
 8000ed4:	200b      	movs	r0, #11
 8000ed6:	f7ff fcbd 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x93);
 8000eda:	2093      	movs	r0, #147	@ 0x93
 8000edc:	f7ff fca0 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f7ff fcb7 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x94);
 8000ee6:	2094      	movs	r0, #148	@ 0x94
 8000ee8:	f7ff fc9a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xDB);
 8000eec:	20db      	movs	r0, #219	@ 0xdb
 8000eee:	f7ff fcb1 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x95);
 8000ef2:	2095      	movs	r0, #149	@ 0x95
 8000ef4:	f7ff fc94 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 8000ef8:	2004      	movs	r0, #4
 8000efa:	f7ff fcab 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x96);
 8000efe:	2096      	movs	r0, #150	@ 0x96
 8000f00:	f7ff fc8e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fca5 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x97);
 8000f0a:	2097      	movs	r0, #151	@ 0x97
 8000f0c:	f7ff fc88 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fc9f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x98);
 8000f16:	2098      	movs	r0, #152	@ 0x98
 8000f18:	f7ff fc82 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x48);
 8000f1c:	2048      	movs	r0, #72	@ 0x48
 8000f1e:	f7ff fc99 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x99);
 8000f22:	2099      	movs	r0, #153	@ 0x99
 8000f24:	f7ff fc7c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fc93 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x9A);
 8000f2e:	209a      	movs	r0, #154	@ 0x9a
 8000f30:	f7ff fc76 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x0D);
 8000f34:	200d      	movs	r0, #13
 8000f36:	f7ff fc8d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x9B);
 8000f3a:	209b      	movs	r0, #155	@ 0x9b
 8000f3c:	f7ff fc70 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff fc87 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x9C);
 8000f46:	209c      	movs	r0, #156	@ 0x9c
 8000f48:	f7ff fc6a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xDD);
 8000f4c:	20dd      	movs	r0, #221	@ 0xdd
 8000f4e:	f7ff fc81 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x9D);
 8000f52:	209d      	movs	r0, #157	@ 0x9d
 8000f54:	f7ff fc64 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 8000f58:	2004      	movs	r0, #4
 8000f5a:	f7ff fc7b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x9E);
 8000f5e:	209e      	movs	r0, #158	@ 0x9e
 8000f60:	f7ff fc5e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fc75 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x9F);
 8000f6a:	209f      	movs	r0, #159	@ 0x9f
 8000f6c:	f7ff fc58 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fc6f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA0);
 8000f76:	20a0      	movs	r0, #160	@ 0xa0
 8000f78:	f7ff fc52 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x48);
 8000f7c:	2048      	movs	r0, #72	@ 0x48
 8000f7e:	f7ff fc69 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA1);
 8000f82:	20a1      	movs	r0, #161	@ 0xa1
 8000f84:	f7ff fc4c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff fc63 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA2);
 8000f8e:	20a2      	movs	r0, #162	@ 0xa2
 8000f90:	f7ff fc46 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x06);
 8000f94:	2006      	movs	r0, #6
 8000f96:	f7ff fc5d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA3);
 8000f9a:	20a3      	movs	r0, #163	@ 0xa3
 8000f9c:	f7ff fc40 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f7ff fc57 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA4);
 8000fa6:	20a4      	movs	r0, #164	@ 0xa4
 8000fa8:	f7ff fc3a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xD6);
 8000fac:	20d6      	movs	r0, #214	@ 0xd6
 8000fae:	f7ff fc51 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA5);
 8000fb2:	20a5      	movs	r0, #165	@ 0xa5
 8000fb4:	f7ff fc34 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f7ff fc4b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA6);
 8000fbe:	20a6      	movs	r0, #166	@ 0xa6
 8000fc0:	f7ff fc2e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fc45 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA7);
 8000fca:	20a7      	movs	r0, #167	@ 0xa7
 8000fcc:	f7ff fc28 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fc3f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA8);
 8000fd6:	20a8      	movs	r0, #168	@ 0xa8
 8000fd8:	f7ff fc22 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x48);
 8000fdc:	2048      	movs	r0, #72	@ 0x48
 8000fde:	f7ff fc39 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xA9);
 8000fe2:	20a9      	movs	r0, #169	@ 0xa9
 8000fe4:	f7ff fc1c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fc33 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xAA);
 8000fee:	20aa      	movs	r0, #170	@ 0xaa
 8000ff0:	f7ff fc16 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x08);
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f7ff fc2d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xAB);
 8000ffa:	20ab      	movs	r0, #171	@ 0xab
 8000ffc:	f7ff fc10 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fc27 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xAC);
 8001006:	20ac      	movs	r0, #172	@ 0xac
 8001008:	f7ff fc0a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xD8);
 800100c:	20d8      	movs	r0, #216	@ 0xd8
 800100e:	f7ff fc21 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xAD);
 8001012:	20ad      	movs	r0, #173	@ 0xad
 8001014:	f7ff fc04 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 8001018:	2004      	movs	r0, #4
 800101a:	f7ff fc1b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xAE);
 800101e:	20ae      	movs	r0, #174	@ 0xae
 8001020:	f7ff fbfe 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc15 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xAF);
 800102a:	20af      	movs	r0, #175	@ 0xaf
 800102c:	f7ff fbf8 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fc0f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB0);
 8001036:	20b0      	movs	r0, #176	@ 0xb0
 8001038:	f7ff fbf2 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x48);
 800103c:	2048      	movs	r0, #72	@ 0x48
 800103e:	f7ff fc09 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB1);
 8001042:	20b1      	movs	r0, #177	@ 0xb1
 8001044:	f7ff fbec 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fc03 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB2);
 800104e:	20b2      	movs	r0, #178	@ 0xb2
 8001050:	f7ff fbe6 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x0A);
 8001054:	200a      	movs	r0, #10
 8001056:	f7ff fbfd 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB3);
 800105a:	20b3      	movs	r0, #179	@ 0xb3
 800105c:	f7ff fbe0 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff fbf7 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB4);
 8001066:	20b4      	movs	r0, #180	@ 0xb4
 8001068:	f7ff fbda 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xDA);
 800106c:	20da      	movs	r0, #218	@ 0xda
 800106e:	f7ff fbf1 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB5);
 8001072:	20b5      	movs	r0, #181	@ 0xb5
 8001074:	f7ff fbd4 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 8001078:	2004      	movs	r0, #4
 800107a:	f7ff fbeb 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB6);
 800107e:	20b6      	movs	r0, #182	@ 0xb6
 8001080:	f7ff fbce 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff fbe5 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB7);
 800108a:	20b7      	movs	r0, #183	@ 0xb7
 800108c:	f7ff fbc8 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fbdf 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB8);
 8001096:	20b8      	movs	r0, #184	@ 0xb8
 8001098:	f7ff fbc2 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x48);
 800109c:	2048      	movs	r0, #72	@ 0x48
 800109e:	f7ff fbd9 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xB9);
 80010a2:	20b9      	movs	r0, #185	@ 0xb9
 80010a4:	f7ff fbbc 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fbd3 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBA);
 80010ae:	20ba      	movs	r0, #186	@ 0xba
 80010b0:	f7ff fbb6 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x0C);
 80010b4:	200c      	movs	r0, #12
 80010b6:	f7ff fbcd 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBB);
 80010ba:	20bb      	movs	r0, #187	@ 0xbb
 80010bc:	f7ff fbb0 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x02);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff fbc7 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBC);
 80010c6:	20bc      	movs	r0, #188	@ 0xbc
 80010c8:	f7ff fbaa 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xDC);
 80010cc:	20dc      	movs	r0, #220	@ 0xdc
 80010ce:	f7ff fbc1 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBD);
 80010d2:	20bd      	movs	r0, #189	@ 0xbd
 80010d4:	f7ff fba4 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x04);
 80010d8:	2004      	movs	r0, #4
 80010da:	f7ff fbbb 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBE);
 80010de:	20be      	movs	r0, #190	@ 0xbe
 80010e0:	f7ff fb9e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fbb5 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xBF);
 80010ea:	20bf      	movs	r0, #191	@ 0xbf
 80010ec:	f7ff fb98 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fbaf 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC0);
 80010f6:	20c0      	movs	r0, #192	@ 0xc0
 80010f8:	f7ff fb92 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x10);
 80010fc:	2010      	movs	r0, #16
 80010fe:	f7ff fba9 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC1);
 8001102:	20c1      	movs	r0, #193	@ 0xc1
 8001104:	f7ff fb8c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x47);
 8001108:	2047      	movs	r0, #71	@ 0x47
 800110a:	f7ff fba3 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC2);
 800110e:	20c2      	movs	r0, #194	@ 0xc2
 8001110:	f7ff fb86 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x56);
 8001114:	2056      	movs	r0, #86	@ 0x56
 8001116:	f7ff fb9d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC3);
 800111a:	20c3      	movs	r0, #195	@ 0xc3
 800111c:	f7ff fb80 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x65);
 8001120:	2065      	movs	r0, #101	@ 0x65
 8001122:	f7ff fb97 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC4);
 8001126:	20c4      	movs	r0, #196	@ 0xc4
 8001128:	f7ff fb7a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x74);
 800112c:	2074      	movs	r0, #116	@ 0x74
 800112e:	f7ff fb91 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC5);
 8001132:	20c5      	movs	r0, #197	@ 0xc5
 8001134:	f7ff fb74 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x88);
 8001138:	2088      	movs	r0, #136	@ 0x88
 800113a:	f7ff fb8b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC6);
 800113e:	20c6      	movs	r0, #198	@ 0xc6
 8001140:	f7ff fb6e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x99);
 8001144:	2099      	movs	r0, #153	@ 0x99
 8001146:	f7ff fb85 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC7);
 800114a:	20c7      	movs	r0, #199	@ 0xc7
 800114c:	f7ff fb68 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x01);
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff fb7f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC8);
 8001156:	20c8      	movs	r0, #200	@ 0xc8
 8001158:	f7ff fb62 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xBB);
 800115c:	20bb      	movs	r0, #187	@ 0xbb
 800115e:	f7ff fb79 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xC9);
 8001162:	20c9      	movs	r0, #201	@ 0xc9
 8001164:	f7ff fb5c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xAA);
 8001168:	20aa      	movs	r0, #170	@ 0xaa
 800116a:	f7ff fb73 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD0);
 800116e:	20d0      	movs	r0, #208	@ 0xd0
 8001170:	f7ff fb56 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x10);
 8001174:	2010      	movs	r0, #16
 8001176:	f7ff fb6d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD1);
 800117a:	20d1      	movs	r0, #209	@ 0xd1
 800117c:	f7ff fb50 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x47);
 8001180:	2047      	movs	r0, #71	@ 0x47
 8001182:	f7ff fb67 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD2);
 8001186:	20d2      	movs	r0, #210	@ 0xd2
 8001188:	f7ff fb4a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x56);
 800118c:	2056      	movs	r0, #86	@ 0x56
 800118e:	f7ff fb61 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD3);
 8001192:	20d3      	movs	r0, #211	@ 0xd3
 8001194:	f7ff fb44 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x65);
 8001198:	2065      	movs	r0, #101	@ 0x65
 800119a:	f7ff fb5b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD4);
 800119e:	20d4      	movs	r0, #212	@ 0xd4
 80011a0:	f7ff fb3e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x74);
 80011a4:	2074      	movs	r0, #116	@ 0x74
 80011a6:	f7ff fb55 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD5);
 80011aa:	20d5      	movs	r0, #213	@ 0xd5
 80011ac:	f7ff fb38 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x88);
 80011b0:	2088      	movs	r0, #136	@ 0x88
 80011b2:	f7ff fb4f 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD6);
 80011b6:	20d6      	movs	r0, #214	@ 0xd6
 80011b8:	f7ff fb32 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x99);
 80011bc:	2099      	movs	r0, #153	@ 0x99
 80011be:	f7ff fb49 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD7);
 80011c2:	20d7      	movs	r0, #215	@ 0xd7
 80011c4:	f7ff fb2c 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x01);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fb43 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD8);
 80011ce:	20d8      	movs	r0, #216	@ 0xd8
 80011d0:	f7ff fb26 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xBB);
 80011d4:	20bb      	movs	r0, #187	@ 0xbb
 80011d6:	f7ff fb3d 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xD9);
 80011da:	20d9      	movs	r0, #217	@ 0xd9
 80011dc:	f7ff fb20 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0xAA);
 80011e0:	20aa      	movs	r0, #170	@ 0xaa
 80011e2:	f7ff fb37 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF3);
 80011e6:	20f3      	movs	r0, #243	@ 0xf3
 80011e8:	f7ff fb1a 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x01);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fb31 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0xF0);
 80011f2:	20f0      	movs	r0, #240	@ 0xf0
 80011f4:	f7ff fb14 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fb2b 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x3A);
 80011fe:	203a      	movs	r0, #58	@ 0x3a
 8001200:	f7ff fb0e 	bl	8000820 <LCD_WR_REG>
  LCD_WR_DATA(0x55);   //   5 565  6 666
 8001204:	2055      	movs	r0, #85	@ 0x55
 8001206:	f7ff fb25 	bl	8000854 <LCD_WR_DATA>
  LCD_WR_REG(0x21);
 800120a:	2021      	movs	r0, #33	@ 0x21
 800120c:	f7ff fb08 	bl	8000820 <LCD_WR_REG>
  LCD_WR_REG(0x11);
 8001210:	2011      	movs	r0, #17
 8001212:	f7ff fb05 	bl	8000820 <LCD_WR_REG>
  vTaskDelay(120);
 8001216:	2078      	movs	r0, #120	@ 0x78
 8001218:	f004 fff6 	bl	8006208 <vTaskDelay>
  LCD_WR_REG(0x29);
 800121c:	2029      	movs	r0, #41	@ 0x29
 800121e:	f7ff faff 	bl	8000820 <LCD_WR_REG>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_MspInit+0x38>)
 8001230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001234:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <HAL_MspInit+0x38>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_MspInit+0x38>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	210f      	movs	r1, #15
 8001250:	f06f 0001 	mvn.w	r0, #1
 8001254:	f000 fa74 	bl	8001740 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	58024400 	.word	0x58024400

08001264 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b090      	sub	sp, #64	@ 0x40
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	d827      	bhi.n	80012c2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001272:	2200      	movs	r2, #0
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	2036      	movs	r0, #54	@ 0x36
 8001278:	f000 fa62 	bl	8001740 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800127c:	2036      	movs	r0, #54	@ 0x36
 800127e:	f000 fa79 	bl	8001774 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001282:	4a29      	ldr	r2, [pc, #164]	@ (8001328 <HAL_InitTick+0xc4>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <HAL_InitTick+0xc8>)
 800128a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800128e:	4a27      	ldr	r2, [pc, #156]	@ (800132c <HAL_InitTick+0xc8>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001298:	4b24      	ldr	r3, [pc, #144]	@ (800132c <HAL_InitTick+0xc8>)
 800129a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012a6:	f107 0210 	add.w	r2, r7, #16
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 f867 	bl	8003384 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <HAL_InitTick+0x6a>
 80012c0:	e001      	b.n	80012c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e02b      	b.n	800131e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012c6:	f002 f847 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 80012ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80012cc:	e004      	b.n	80012d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012ce:	f002 f843 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 80012d2:	4603      	mov	r3, r0
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012da:	4a15      	ldr	r2, [pc, #84]	@ (8001330 <HAL_InitTick+0xcc>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	0c9b      	lsrs	r3, r3, #18
 80012e2:	3b01      	subs	r3, #1
 80012e4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <HAL_InitTick+0xd0>)
 80012e8:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <HAL_InitTick+0xd4>)
 80012ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_InitTick+0xd0>)
 80012ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <HAL_InitTick+0xd0>)
 80012f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <HAL_InitTick+0xd0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_InitTick+0xd0>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001306:	480b      	ldr	r0, [pc, #44]	@ (8001334 <HAL_InitTick+0xd0>)
 8001308:	f003 fbec 	bl	8004ae4 <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d104      	bne.n	800131c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001312:	4808      	ldr	r0, [pc, #32]	@ (8001334 <HAL_InitTick+0xd0>)
 8001314:	f003 fc48 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
 8001318:	4603      	mov	r3, r0
 800131a:	e000      	b.n	800131e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	3740      	adds	r7, #64	@ 0x40
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	24000008 	.word	0x24000008
 800132c:	58024400 	.word	0x58024400
 8001330:	431bde83 	.word	0x431bde83
 8001334:	24000080 	.word	0x24000080
 8001338:	40001000 	.word	0x40001000

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <MemManage_Handler+0x4>

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <UsageFault_Handler+0x4>

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <TIM6_DAC_IRQHandler+0x10>)
 800137a:	f003 fc8d 	bl	8004c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24000080 	.word	0x24000080

08001388 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <QUADSPI_IRQHandler+0x10>)
 800138e:	f000 fd15 	bl	8001dbc <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	24000034 	.word	0x24000034

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013a0:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <SystemInit+0xe4>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	4a36      	ldr	r2, [pc, #216]	@ (8001480 <SystemInit+0xe4>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013b0:	4b34      	ldr	r3, [pc, #208]	@ (8001484 <SystemInit+0xe8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	2b06      	cmp	r3, #6
 80013ba:	d807      	bhi.n	80013cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013bc:	4b31      	ldr	r3, [pc, #196]	@ (8001484 <SystemInit+0xe8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 030f 	bic.w	r3, r3, #15
 80013c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <SystemInit+0xe8>)
 80013c6:	f043 0307 	orr.w	r3, r3, #7
 80013ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001488 <SystemInit+0xec>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001488 <SystemInit+0xec>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <SystemInit+0xec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013de:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <SystemInit+0xec>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4929      	ldr	r1, [pc, #164]	@ (8001488 <SystemInit+0xec>)
 80013e4:	4b29      	ldr	r3, [pc, #164]	@ (800148c <SystemInit+0xf0>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <SystemInit+0xe8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <SystemInit+0xe8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 030f 	bic.w	r3, r3, #15
 80013fe:	4a21      	ldr	r2, [pc, #132]	@ (8001484 <SystemInit+0xe8>)
 8001400:	f043 0307 	orr.w	r3, r3, #7
 8001404:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <SystemInit+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <SystemInit+0xec>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <SystemInit+0xec>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <SystemInit+0xec>)
 800141a:	4a1d      	ldr	r2, [pc, #116]	@ (8001490 <SystemInit+0xf4>)
 800141c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <SystemInit+0xec>)
 8001420:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <SystemInit+0xf8>)
 8001422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <SystemInit+0xec>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <SystemInit+0xfc>)
 8001428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <SystemInit+0xec>)
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <SystemInit+0xec>)
 8001432:	4a19      	ldr	r2, [pc, #100]	@ (8001498 <SystemInit+0xfc>)
 8001434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <SystemInit+0xec>)
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <SystemInit+0xec>)
 800143e:	4a16      	ldr	r2, [pc, #88]	@ (8001498 <SystemInit+0xfc>)
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <SystemInit+0xec>)
 8001444:	2200      	movs	r2, #0
 8001446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <SystemInit+0xec>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0e      	ldr	r2, [pc, #56]	@ (8001488 <SystemInit+0xec>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <SystemInit+0xec>)
 8001456:	2200      	movs	r2, #0
 8001458:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <SystemInit+0x100>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <SystemInit+0x104>)
 8001460:	4013      	ands	r3, r2
 8001462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001466:	d202      	bcs.n	800146e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <SystemInit+0x108>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <SystemInit+0x10c>)
 8001470:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001474:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00
 8001484:	52002000 	.word	0x52002000
 8001488:	58024400 	.word	0x58024400
 800148c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001490:	02020200 	.word	0x02020200
 8001494:	01ff0000 	.word	0x01ff0000
 8001498:	01010280 	.word	0x01010280
 800149c:	5c001000 	.word	0x5c001000
 80014a0:	ffff0000 	.word	0xffff0000
 80014a4:	51008108 	.word	0x51008108
 80014a8:	52004000 	.word	0x52004000

080014ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b0:	f7ff ff74 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	@ (80014ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	@ (80014f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f006 fb9d 	bl	8007c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014de:	f7fe ffaf 	bl	8000440 <main>
  bx  lr
 80014e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014ec:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80014f0:	08007cf4 	.word	0x08007cf4
  ldr r2, =_sbss
 80014f4:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80014f8:	24004a20 	.word	0x24004a20

080014fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC3_IRQHandler>
	...

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f000 f90f 	bl	800172a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800150c:	f001 fd7a 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_Init+0x68>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	4913      	ldr	r1, [pc, #76]	@ (800156c <HAL_Init+0x6c>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800152a:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <HAL_Init+0x68>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_Init+0x6c>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <HAL_Init+0x70>)
 8001542:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001544:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_Init+0x74>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154a:	200f      	movs	r0, #15
 800154c:	f7ff fe8a 	bl	8001264 <HAL_InitTick>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e002      	b.n	8001560 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800155a:	f7ff fe65 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58024400 	.word	0x58024400
 800156c:	08007cdc 	.word	0x08007cdc
 8001570:	24000004 	.word	0x24000004
 8001574:	24000000 	.word	0x24000000

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2400000c 	.word	0x2400000c
 800159c:	240000cc 	.word	0x240000cc

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	240000cc 	.word	0x240000cc

080015b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <HAL_GetREVID+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0c1b      	lsrs	r3, r3, #16
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	5c001000 	.word	0x5c001000

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	@ (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	@ (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	@ (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	@ 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff4c 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174e:	f7ff ff63 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001752:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	6978      	ldr	r0, [r7, #20]
 800175a:	f7ff ffb3 	bl	80016c4 <NVIC_EncodePriority>
 800175e:	4602      	mov	r2, r0
 8001760:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff82 	bl	8001670 <__NVIC_SetPriority>
}
 800176c:	bf00      	nop
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff56 	bl	8001634 <__NVIC_EnableIRQ>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001794:	f3bf 8f5f 	dmb	sy
}
 8001798:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <HAL_MPU_Disable+0x28>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <HAL_MPU_Disable+0x28>)
 80017a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_MPU_Disable+0x2c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	e000ed90 	.word	0xe000ed90

080017c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_MPU_Enable+0x38>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_MPU_Enable+0x3c>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_MPU_Enable+0x3c>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017dc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017de:	f3bf 8f4f 	dsb	sy
}
 80017e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017e4:	f3bf 8f6f 	isb	sy
}
 80017e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed90 	.word	0xe000ed90
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	785a      	ldrb	r2, [r3, #1]
 800180c:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <HAL_MPU_ConfigRegion+0x7c>)
 800180e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <HAL_MPU_ConfigRegion+0x7c>)
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	4a19      	ldr	r2, [pc, #100]	@ (800187c <HAL_MPU_ConfigRegion+0x7c>)
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800181c:	4a17      	ldr	r2, [pc, #92]	@ (800187c <HAL_MPU_ConfigRegion+0x7c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7b1b      	ldrb	r3, [r3, #12]
 8001828:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7adb      	ldrb	r3, [r3, #11]
 800182e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7a9b      	ldrb	r3, [r3, #10]
 8001836:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001838:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7b5b      	ldrb	r3, [r3, #13]
 800183e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001840:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7b9b      	ldrb	r3, [r3, #14]
 8001846:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001848:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7bdb      	ldrb	r3, [r3, #15]
 800184e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001850:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7a5b      	ldrb	r3, [r3, #9]
 8001856:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001858:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7a1b      	ldrb	r3, [r3, #8]
 800185e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001860:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800186a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800186c:	6113      	str	r3, [r2, #16]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed90 	.word	0xe000ed90

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800188e:	4b89      	ldr	r3, [pc, #548]	@ (8001ab4 <HAL_GPIO_Init+0x234>)
 8001890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001892:	e194      	b.n	8001bbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8186 	beq.w	8001bb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d005      	beq.n	80018c4 <HAL_GPIO_Init+0x44>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f003 0201 	and.w	r2, r3, #1
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b03      	cmp	r3, #3
 8001930:	d017      	beq.n	8001962 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d123      	bne.n	80019b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0203 	and.w	r2, r3, #3
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80e0 	beq.w	8001bb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <HAL_GPIO_Init+0x238>)
 80019fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019fe:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab8 <HAL_GPIO_Init+0x238>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a08:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab8 <HAL_GPIO_Init+0x238>)
 8001a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a16:	4a29      	ldr	r2, [pc, #164]	@ (8001abc <HAL_GPIO_Init+0x23c>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a20      	ldr	r2, [pc, #128]	@ (8001ac0 <HAL_GPIO_Init+0x240>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d052      	beq.n	8001ae8 <HAL_GPIO_Init+0x268>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac4 <HAL_GPIO_Init+0x244>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d031      	beq.n	8001aae <HAL_GPIO_Init+0x22e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_GPIO_Init+0x248>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d02b      	beq.n	8001aaa <HAL_GPIO_Init+0x22a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <HAL_GPIO_Init+0x24c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad0 <HAL_GPIO_Init+0x250>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x222>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <HAL_GPIO_Init+0x254>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x21e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad8 <HAL_GPIO_Init+0x258>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x21a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a19      	ldr	r2, [pc, #100]	@ (8001adc <HAL_GPIO_Init+0x25c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x216>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ae0 <HAL_GPIO_Init+0x260>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x212>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <HAL_GPIO_Init+0x264>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x20e>
 8001a8a:	2309      	movs	r3, #9
 8001a8c:	e02d      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a8e:	230a      	movs	r3, #10
 8001a90:	e02b      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a92:	2308      	movs	r3, #8
 8001a94:	e029      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a96:	2307      	movs	r3, #7
 8001a98:	e027      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a9a:	2306      	movs	r3, #6
 8001a9c:	e025      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	e023      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e021      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e01f      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e01d      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e01b      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001ab2:	bf00      	nop
 8001ab4:	58000080 	.word	0x58000080
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58000400 	.word	0x58000400
 8001ac0:	58020000 	.word	0x58020000
 8001ac4:	58020400 	.word	0x58020400
 8001ac8:	58020800 	.word	0x58020800
 8001acc:	58020c00 	.word	0x58020c00
 8001ad0:	58021000 	.word	0x58021000
 8001ad4:	58021400 	.word	0x58021400
 8001ad8:	58021800 	.word	0x58021800
 8001adc:	58021c00 	.word	0x58021c00
 8001ae0:	58022000 	.word	0x58022000
 8001ae4:	58022400 	.word	0x58022400
 8001ae8:	2300      	movs	r3, #0
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afa:	4938      	ldr	r1, [pc, #224]	@ (8001bdc <HAL_GPIO_Init+0x35c>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f47f ae63 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	3724      	adds	r7, #36	@ 0x24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	58000400 	.word	0x58000400

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e017      	b.n	8001c54 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d004      	beq.n	8001c3a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2280      	movs	r2, #128	@ 0x80
 8001c34:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00c      	b.n	8001c54 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00a      	beq.n	8001c8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01f      	b.n	8001cc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e01d      	b.n	8001cc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	490f      	ldr	r1, [pc, #60]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c9a:	f7ff fc81 	bl	80015a0 <HAL_GetTick>
 8001c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ca0:	e009      	b.n	8001cb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ca2:	f7ff fc7d 	bl	80015a0 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cb0:	d901      	bls.n	8001cb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e007      	b.n	8001cc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	58024800 	.word	0x58024800

08001cd4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff fc60 	bl	80015a0 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e05f      	b.n	8001dac <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7fe fcd3 	bl	80006a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001cfe:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 faf6 	bl	80022f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	021a      	lsls	r2, r3, #8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fb21 	bl	8002376 <QSPI_WaitFlagStateUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001d38:	7afb      	ldrb	r3, [r7, #11]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d135      	bne.n	8001daa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <HAL_QSPI_Init+0xe0>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6852      	ldr	r2, [r2, #4]
 8001d4c:	0611      	lsls	r1, r2, #24
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68d2      	ldr	r2, [r2, #12]
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	69d2      	ldr	r2, [r2, #28]
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6a12      	ldr	r2, [r2, #32]
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_QSPI_Init+0xe4>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6912      	ldr	r2, [r2, #16]
 8001d76:	0411      	lsls	r1, r2, #16
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6952      	ldr	r2, [r2, #20]
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6992      	ldr	r2, [r2, #24]
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8001daa:	7afb      	ldrb	r3, [r7, #11]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	00ffff2f 	.word	0x00ffff2f
 8001db8:	ffe0f8fe 	.word	0xffe0f8fe

08001dbc <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d064      	beq.n	8001ea8 <HAL_QSPI_IRQHandler+0xec>
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d05f      	beq.n	8001ea8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3320      	adds	r3, #32
 8001dee:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b12      	cmp	r3, #18
 8001dfa:	d125      	bne.n	8001e48 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001dfc:	e01c      	b.n	8001e38 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00f      	beq.n	8001e26 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1e:	1e5a      	subs	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e24:	e008      	b.n	8001e38 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e34:	601a      	str	r2, [r3, #0]
          break;
 8001e36:	e033      	b.n	8001ea0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1db      	bne.n	8001dfe <HAL_QSPI_IRQHandler+0x42>
 8001e46:	e02b      	b.n	8001ea0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b22      	cmp	r3, #34	@ 0x22
 8001e52:	d125      	bne.n	8001ea0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001e54:	e01d      	b.n	8001e92 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	7812      	ldrb	r2, [r2, #0]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e78:	1e5a      	subs	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e7e:	e008      	b.n	8001e92 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e8e:	601a      	str	r2, [r3, #0]
          break;
 8001e90:	e006      	b.n	8001ea0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1da      	bne.n	8001e56 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fa09 	bl	80022b8 <HAL_QSPI_FifoThresholdCallback>
 8001ea6:	e13c      	b.n	8002122 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80b0 	beq.w	8002014 <HAL_QSPI_IRQHandler+0x258>
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80aa 	beq.w	8002014 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b12      	cmp	r3, #18
 8001ee2:	d120      	bne.n	8001f26 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d011      	beq.n	8001f16 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0204 	bic.w	r2, r2, #4
 8001f00:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f9c0 	bl	80022a4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001f24:	e0fa      	b.n	800211c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b22      	cmp	r3, #34	@ 0x22
 8001f30:	d143      	bne.n	8001fba <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d012      	beq.n	8001f66 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	e021      	b.n	8001faa <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3320      	adds	r3, #32
 8001f6c:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8001f6e:	e013      	b.n	8001f98 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d017      	beq.n	8001fa8 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	7812      	ldrb	r2, [r2, #0]
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f92:	1e5a      	subs	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1e4      	bne.n	8001f70 <HAL_QSPI_IRQHandler+0x1b4>
 8001fa6:	e000      	b.n	8001faa <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8001fa8:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f96c 	bl	8002290 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001fb8:	e0b0      	b.n	800211c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f954 	bl	800227c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001fd4:	e0a2      	b.n	800211c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	f040 809c 	bne.w	800211c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8001ff2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f92f 	bl	8002268 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800200a:	e087      	b.n	800211c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f921 	bl	8002254 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002012:	e083      	b.n	800211c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01f      	beq.n	800205e <HAL_QSPI_IRQHandler+0x2a2>
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01a      	beq.n	800205e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2208      	movs	r2, #8
 800202e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 800204c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f938 	bl	80022cc <HAL_QSPI_StatusMatchCallback>
 800205c:	e061      	b.n	8002122 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d047      	beq.n	80020f8 <HAL_QSPI_IRQHandler+0x33c>
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d042      	beq.n	80020f8 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002088:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d021      	beq.n	80020e8 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0204 	bic.w	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_QSPI_IRQHandler+0x370>)
 80020ba:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fda6 	bl	8001c12 <HAL_MDMA_Abort_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d029      	beq.n	8002120 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f8b7 	bl	8002254 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80020e6:	e01b      	b.n	8002120 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f8af 	bl	8002254 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80020f6:	e013      	b.n	8002120 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00f      	beq.n	8002122 <HAL_QSPI_IRQHandler+0x366>
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2210      	movs	r2, #16
 8002112:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f8e3 	bl	80022e0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800211a:	e002      	b.n	8002122 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800211c:	bf00      	nop
 800211e:	e000      	b.n	8002122 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002120:	bf00      	nop
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	08002311 	.word	0x08002311

08002130 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	@ 0x28
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff fa2e 	bl	80015a0 <HAL_GetTick>
 8002144:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3320      	adds	r3, #32
 800214c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_QSPI_Transmit+0x2e>
 800215a:	2302      	movs	r3, #2
 800215c:	e076      	b.n	800224c <HAL_QSPI_Transmit+0x11c>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d165      	bne.n	800223e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d056      	beq.n	800222c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2212      	movs	r2, #18
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80021b2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80021b4:	e01b      	b.n	80021ee <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2201      	movs	r2, #1
 80021be:	2104      	movs	r1, #4
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f8d8 	bl	8002376 <QSPI_WaitFlagStateUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d113      	bne.n	80021f8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1df      	bne.n	80021b6 <HAL_QSPI_Transmit+0x86>
 80021f6:	e000      	b.n	80021fa <HAL_QSPI_Transmit+0xca>
          break;
 80021f8:	bf00      	nop
      }

      if (status == HAL_OK)
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d110      	bne.n	8002222 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2201      	movs	r2, #1
 8002208:	2102      	movs	r1, #2
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f8b3 	bl	8002376 <QSPI_WaitFlagStateUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002214:	7ffb      	ldrb	r3, [r7, #31]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800222a:	e00a      	b.n	8002242 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	f043 0208 	orr.w	r2, r3, #8
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	77fb      	strb	r3, [r7, #31]
 800223c:	e001      	b.n	8002242 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800224a:	7ffb      	ldrb	r3, [r7, #31]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b08      	cmp	r3, #8
 8002334:	d114      	bne.n	8002360 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2202      	movs	r2, #2
 800233c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800234c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0202 	orr.w	r2, r2, #2
 800235c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800235e:	e006      	b.n	800236e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff ff73 	bl	8002254 <HAL_QSPI_ErrorCallback>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002386:	e01a      	b.n	80023be <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238e:	d016      	beq.n	80023be <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002390:	f7ff f906 	bl	80015a0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	429a      	cmp	r2, r3
 800239e:	d302      	bcc.n	80023a6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10b      	bne.n	80023be <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2204      	movs	r2, #4
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d1d6      	bne.n	8002388 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	@ 0x30
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f000 bc48 	b.w	8002c88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8088 	beq.w	8002516 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002406:	4b99      	ldr	r3, [pc, #612]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002410:	4b96      	ldr	r3, [pc, #600]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002418:	2b10      	cmp	r3, #16
 800241a:	d007      	beq.n	800242c <HAL_RCC_OscConfig+0x48>
 800241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241e:	2b18      	cmp	r3, #24
 8002420:	d111      	bne.n	8002446 <HAL_RCC_OscConfig+0x62>
 8002422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	4b8f      	ldr	r3, [pc, #572]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d06d      	beq.n	8002514 <HAL_RCC_OscConfig+0x130>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d169      	bne.n	8002514 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	f000 bc21 	b.w	8002c88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x7a>
 8002450:	4b86      	ldr	r3, [pc, #536]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a85      	ldr	r2, [pc, #532]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e02e      	b.n	80024bc <HAL_RCC_OscConfig+0xd8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x9c>
 8002466:	4b81      	ldr	r3, [pc, #516]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a80      	ldr	r2, [pc, #512]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 800246c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b7e      	ldr	r3, [pc, #504]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7d      	ldr	r2, [pc, #500]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002478:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e01d      	b.n	80024bc <HAL_RCC_OscConfig+0xd8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0xc0>
 800248a:	4b78      	ldr	r3, [pc, #480]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a77      	ldr	r2, [pc, #476]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a74      	ldr	r2, [pc, #464]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0xd8>
 80024a4:	4b71      	ldr	r3, [pc, #452]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a70      	ldr	r2, [pc, #448]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b6e      	ldr	r3, [pc, #440]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6d      	ldr	r2, [pc, #436]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7ff f86c 	bl	80015a0 <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7ff f868 	bl	80015a0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	@ 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e3d4      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024de:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0xe8>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7ff f858 	bl	80015a0 <HAL_GetTick>
 80024f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff f854 	bl	80015a0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	@ 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e3c0      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002506:	4b59      	ldr	r3, [pc, #356]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x110>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80ca 	beq.w	80026b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002524:	4b51      	ldr	r3, [pc, #324]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800252c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800252e:	4b4f      	ldr	r3, [pc, #316]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_RCC_OscConfig+0x166>
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	2b18      	cmp	r3, #24
 800253e:	d156      	bne.n	80025ee <HAL_RCC_OscConfig+0x20a>
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d151      	bne.n	80025ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254a:	4b48      	ldr	r3, [pc, #288]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x17e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e392      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002562:	4b42      	ldr	r3, [pc, #264]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0219 	bic.w	r2, r3, #25
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	493f      	ldr	r1, [pc, #252]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7ff f814 	bl	80015a0 <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257c:	f7ff f810 	bl	80015a0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e37c      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800258e:	4b37      	ldr	r3, [pc, #220]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	f7ff f80d 	bl	80015b8 <HAL_GetREVID>
 800259e:	4603      	mov	r3, r0
 80025a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d817      	bhi.n	80025d8 <HAL_RCC_OscConfig+0x1f4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b40      	cmp	r3, #64	@ 0x40
 80025ae:	d108      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1de>
 80025b0:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025b8:	4a2c      	ldr	r2, [pc, #176]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80025ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c0:	e07a      	b.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	031b      	lsls	r3, r3, #12
 80025d0:	4926      	ldr	r1, [pc, #152]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d6:	e06f      	b.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	4b24      	ldr	r3, [pc, #144]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	4921      	ldr	r1, [pc, #132]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ec:	e064      	b.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d047      	beq.n	8002686 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025f6:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0219 	bic.w	r2, r3, #25
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	491a      	ldr	r1, [pc, #104]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe ffca 	bl	80015a0 <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe ffc6 	bl	80015a0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e332      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002622:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	f7fe ffc3 	bl	80015b8 <HAL_GetREVID>
 8002632:	4603      	mov	r3, r0
 8002634:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002638:	4293      	cmp	r3, r2
 800263a:	d819      	bhi.n	8002670 <HAL_RCC_OscConfig+0x28c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	d108      	bne.n	8002656 <HAL_RCC_OscConfig+0x272>
 8002644:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800264c:	4a07      	ldr	r2, [pc, #28]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 800264e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002652:	6053      	str	r3, [r2, #4]
 8002654:	e030      	b.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	031b      	lsls	r3, r3, #12
 8002664:	4901      	ldr	r1, [pc, #4]	@ (800266c <HAL_RCC_OscConfig+0x288>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
 800266a:	e025      	b.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
 800266c:	58024400 	.word	0x58024400
 8002670:	4b9a      	ldr	r3, [pc, #616]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	4997      	ldr	r1, [pc, #604]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
 8002684:	e018      	b.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b95      	ldr	r3, [pc, #596]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a94      	ldr	r2, [pc, #592]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe ff85 	bl	80015a0 <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe ff81 	bl	80015a0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e2ed      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026ac:	4b8b      	ldr	r3, [pc, #556]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f0      	bne.n	800269a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a9 	beq.w	8002818 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c6:	4b85      	ldr	r3, [pc, #532]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d0:	4b82      	ldr	r3, [pc, #520]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d007      	beq.n	80026ec <HAL_RCC_OscConfig+0x308>
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b18      	cmp	r3, #24
 80026e0:	d13a      	bne.n	8002758 <HAL_RCC_OscConfig+0x374>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d135      	bne.n	8002758 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ec:	4b7b      	ldr	r3, [pc, #492]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_OscConfig+0x320>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b80      	cmp	r3, #128	@ 0x80
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e2c1      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002704:	f7fe ff58 	bl	80015b8 <HAL_GetREVID>
 8002708:	4603      	mov	r3, r0
 800270a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800270e:	4293      	cmp	r3, r2
 8002710:	d817      	bhi.n	8002742 <HAL_RCC_OscConfig+0x35e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	2b20      	cmp	r3, #32
 8002718:	d108      	bne.n	800272c <HAL_RCC_OscConfig+0x348>
 800271a:	4b70      	ldr	r3, [pc, #448]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002722:	4a6e      	ldr	r2, [pc, #440]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002728:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800272a:	e075      	b.n	8002818 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800272c:	4b6b      	ldr	r3, [pc, #428]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	069b      	lsls	r3, r3, #26
 800273a:	4968      	ldr	r1, [pc, #416]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002740:	e06a      	b.n	8002818 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002742:	4b66      	ldr	r3, [pc, #408]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	061b      	lsls	r3, r3, #24
 8002750:	4962      	ldr	r1, [pc, #392]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002756:	e05f      	b.n	8002818 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d042      	beq.n	80027e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002760:	4b5e      	ldr	r3, [pc, #376]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a5d      	ldr	r2, [pc, #372]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800276a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe ff18 	bl	80015a0 <HAL_GetTick>
 8002770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002774:	f7fe ff14 	bl	80015a0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e280      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002786:	4b55      	ldr	r3, [pc, #340]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002792:	f7fe ff11 	bl	80015b8 <HAL_GetREVID>
 8002796:	4603      	mov	r3, r0
 8002798:	f241 0203 	movw	r2, #4099	@ 0x1003
 800279c:	4293      	cmp	r3, r2
 800279e:	d817      	bhi.n	80027d0 <HAL_RCC_OscConfig+0x3ec>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d108      	bne.n	80027ba <HAL_RCC_OscConfig+0x3d6>
 80027a8:	4b4c      	ldr	r3, [pc, #304]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027b0:	4a4a      	ldr	r2, [pc, #296]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027b6:	6053      	str	r3, [r2, #4]
 80027b8:	e02e      	b.n	8002818 <HAL_RCC_OscConfig+0x434>
 80027ba:	4b48      	ldr	r3, [pc, #288]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	069b      	lsls	r3, r3, #26
 80027c8:	4944      	ldr	r1, [pc, #272]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
 80027ce:	e023      	b.n	8002818 <HAL_RCC_OscConfig+0x434>
 80027d0:	4b42      	ldr	r3, [pc, #264]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	493f      	ldr	r1, [pc, #252]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
 80027e4:	e018      	b.n	8002818 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027e6:	4b3d      	ldr	r3, [pc, #244]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a3c      	ldr	r2, [pc, #240]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fed5 	bl	80015a0 <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027fa:	f7fe fed1 	bl	80015a0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e23d      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800280c:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d036      	beq.n	8002892 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d019      	beq.n	8002860 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282c:	4b2b      	ldr	r3, [pc, #172]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002830:	4a2a      	ldr	r2, [pc, #168]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe feb2 	bl	80015a0 <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe feae 	bl	80015a0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e21a      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002852:	4b22      	ldr	r3, [pc, #136]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x45c>
 800285e:	e018      	b.n	8002892 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002860:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002864:	4a1d      	ldr	r2, [pc, #116]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe fe98 	bl	80015a0 <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe fe94 	bl	80015a0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e200      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002886:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 8002888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d039      	beq.n	8002912 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01c      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a0c      	ldr	r2, [pc, #48]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fe75 	bl	80015a0 <HAL_GetTick>
 80028b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ba:	f7fe fe71 	bl	80015a0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1dd      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x4d6>
 80028d8:	e01b      	b.n	8002912 <HAL_RCC_OscConfig+0x52e>
 80028da:	bf00      	nop
 80028dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e0:	4b9b      	ldr	r3, [pc, #620]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a9a      	ldr	r2, [pc, #616]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80028e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ec:	f7fe fe58 	bl	80015a0 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f4:	f7fe fe54 	bl	80015a0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1c0      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002906:	4b92      	ldr	r3, [pc, #584]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8081 	beq.w	8002a22 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002920:	4b8c      	ldr	r3, [pc, #560]	@ (8002b54 <HAL_RCC_OscConfig+0x770>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a8b      	ldr	r2, [pc, #556]	@ (8002b54 <HAL_RCC_OscConfig+0x770>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800292c:	f7fe fe38 	bl	80015a0 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe fe34 	bl	80015a0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1a0      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002946:	4b83      	ldr	r3, [pc, #524]	@ (8002b54 <HAL_RCC_OscConfig+0x770>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x584>
 800295a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	@ 0x70
 8002966:	e02d      	b.n	80029c4 <HAL_RCC_OscConfig+0x5e0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10c      	bne.n	800298a <HAL_RCC_OscConfig+0x5a6>
 8002970:	4b77      	ldr	r3, [pc, #476]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	4a76      	ldr	r2, [pc, #472]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6713      	str	r3, [r2, #112]	@ 0x70
 800297c:	4b74      	ldr	r3, [pc, #464]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	4a73      	ldr	r2, [pc, #460]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6713      	str	r3, [r2, #112]	@ 0x70
 8002988:	e01c      	b.n	80029c4 <HAL_RCC_OscConfig+0x5e0>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x5c8>
 8002992:	4b6f      	ldr	r3, [pc, #444]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002996:	4a6e      	ldr	r2, [pc, #440]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6713      	str	r3, [r2, #112]	@ 0x70
 800299e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	4a6b      	ldr	r2, [pc, #428]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0x5e0>
 80029ac:	4b68      	ldr	r3, [pc, #416]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b0:	4a67      	ldr	r2, [pc, #412]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b8:	4b65      	ldr	r3, [pc, #404]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	4a64      	ldr	r2, [pc, #400]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80029be:	f023 0304 	bic.w	r3, r3, #4
 80029c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe fde8 	bl	80015a0 <HAL_GetTick>
 80029d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe fde4 	bl	80015a0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e14e      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ea:	4b59      	ldr	r3, [pc, #356]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ee      	beq.n	80029d4 <HAL_RCC_OscConfig+0x5f0>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fdd2 	bl	80015a0 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe fdce 	bl	80015a0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e138      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a16:	4b4e      	ldr	r3, [pc, #312]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ee      	bne.n	8002a00 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 812d 	beq.w	8002c86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a2c:	4b48      	ldr	r3, [pc, #288]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a34:	2b18      	cmp	r3, #24
 8002a36:	f000 80bd 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	f040 809e 	bne.w	8002b80 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a44:	4b42      	ldr	r3, [pc, #264]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a41      	ldr	r2, [pc, #260]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fda6 	bl	80015a0 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe fda2 	bl	80015a0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e10e      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a6a:	4b39      	ldr	r3, [pc, #228]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a76:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a7a:	4b37      	ldr	r3, [pc, #220]	@ (8002b58 <HAL_RCC_OscConfig+0x774>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	4931      	ldr	r1, [pc, #196]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	3b01      	subs	r3, #1
 8002a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	025b      	lsls	r3, r3, #9
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ac0:	4923      	ldr	r1, [pc, #140]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ac6:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	4a21      	ldr	r2, [pc, #132]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad6:	4b21      	ldr	r3, [pc, #132]	@ (8002b5c <HAL_RCC_OscConfig+0x778>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ade:	00d2      	lsls	r2, r2, #3
 8002ae0:	491b      	ldr	r1, [pc, #108]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	f023 020c 	bic.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	4917      	ldr	r1, [pc, #92]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002af8:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	f023 0202 	bic.w	r2, r3, #2
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	4912      	ldr	r1, [pc, #72]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0e:	4a10      	ldr	r2, [pc, #64]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b22:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b2e:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3a:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a04      	ldr	r2, [pc, #16]	@ (8002b50 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fd2b 	bl	80015a0 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b4c:	e011      	b.n	8002b72 <HAL_RCC_OscConfig+0x78e>
 8002b4e:	bf00      	nop
 8002b50:	58024400 	.word	0x58024400
 8002b54:	58024800 	.word	0x58024800
 8002b58:	fffffc0c 	.word	0xfffffc0c
 8002b5c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fd1e 	bl	80015a0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e08a      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x77c>
 8002b7e:	e082      	b.n	8002c86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b43      	ldr	r3, [pc, #268]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a42      	ldr	r2, [pc, #264]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002b86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fd08 	bl	80015a0 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fd04 	bl	80015a0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e070      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x7b0>
 8002bb2:	e068      	b.n	8002c86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bb4:	4b36      	ldr	r3, [pc, #216]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bba:	4b35      	ldr	r3, [pc, #212]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d031      	beq.n	8002c2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f003 0203 	and.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d12a      	bne.n	8002c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d122      	bne.n	8002c2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d11a      	bne.n	8002c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0a5b      	lsrs	r3, r3, #9
 8002bfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d111      	bne.n	8002c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d108      	bne.n	8002c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0e1b      	lsrs	r3, r3, #24
 8002c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e02b      	b.n	8002c88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c30:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d01f      	beq.n	8002c86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	4a11      	ldr	r2, [pc, #68]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c52:	f7fe fca5 	bl	80015a0 <HAL_GetTick>
 8002c56:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c58:	bf00      	nop
 8002c5a:	f7fe fca1 	bl	80015a0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d0f9      	beq.n	8002c5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <HAL_RCC_OscConfig+0x8b0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c72:	00d2      	lsls	r2, r2, #3
 8002c74:	4906      	ldr	r1, [pc, #24]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c7a:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <HAL_RCC_OscConfig+0x8ac>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3730      	adds	r7, #48	@ 0x30
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	58024400 	.word	0x58024400
 8002c94:	ffff0007 	.word	0xffff0007

08002c98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e19c      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b8a      	ldr	r3, [pc, #552]	@ (8002ed8 <HAL_RCC_ClockConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d910      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b87      	ldr	r3, [pc, #540]	@ (8002ed8 <HAL_RCC_ClockConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 020f 	bic.w	r2, r3, #15
 8002cc2:	4985      	ldr	r1, [pc, #532]	@ (8002ed8 <HAL_RCC_ClockConfig+0x240>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b83      	ldr	r3, [pc, #524]	@ (8002ed8 <HAL_RCC_ClockConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e184      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	4b7b      	ldr	r3, [pc, #492]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d908      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cf8:	4b78      	ldr	r3, [pc, #480]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	4975      	ldr	r1, [pc, #468]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d010      	beq.n	8002d38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	4b70      	ldr	r3, [pc, #448]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d908      	bls.n	8002d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d26:	4b6d      	ldr	r3, [pc, #436]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	496a      	ldr	r1, [pc, #424]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d010      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699a      	ldr	r2, [r3, #24]
 8002d48:	4b64      	ldr	r3, [pc, #400]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d908      	bls.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d54:	4b61      	ldr	r3, [pc, #388]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	495e      	ldr	r1, [pc, #376]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	4b59      	ldr	r3, [pc, #356]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d908      	bls.n	8002d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d82:	4b56      	ldr	r3, [pc, #344]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4953      	ldr	r1, [pc, #332]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	4b4d      	ldr	r3, [pc, #308]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d908      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b4a      	ldr	r3, [pc, #296]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f023 020f 	bic.w	r2, r3, #15
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4947      	ldr	r1, [pc, #284]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d055      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dce:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	4940      	ldr	r1, [pc, #256]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de8:	4b3c      	ldr	r3, [pc, #240]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d121      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0f6      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e00:	4b36      	ldr	r3, [pc, #216]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d115      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0ea      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e18:	4b30      	ldr	r3, [pc, #192]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0de      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e28:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0d6      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e38:	4b28      	ldr	r3, [pc, #160]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f023 0207 	bic.w	r2, r3, #7
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4925      	ldr	r1, [pc, #148]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4a:	f7fe fba9 	bl	80015a0 <HAL_GetTick>
 8002e4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e52:	f7fe fba5 	bl	80015a0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0be      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e68:	4b1c      	ldr	r3, [pc, #112]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d1eb      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d208      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f023 020f 	bic.w	r2, r3, #15
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	490e      	ldr	r1, [pc, #56]	@ (8002edc <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_RCC_ClockConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d214      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <HAL_RCC_ClockConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	4906      	ldr	r1, [pc, #24]	@ (8002ed8 <HAL_RCC_ClockConfig+0x240>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <HAL_RCC_ClockConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e086      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x34e>
 8002ed8:	52002000 	.word	0x52002000
 8002edc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d208      	bcs.n	8002f0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002efc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	4939      	ldr	r1, [pc, #228]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d010      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d208      	bcs.n	8002f3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f2a:	4b31      	ldr	r3, [pc, #196]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	492e      	ldr	r1, [pc, #184]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d010      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d208      	bcs.n	8002f6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f58:	4b25      	ldr	r3, [pc, #148]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4922      	ldr	r1, [pc, #136]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d010      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d208      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4917      	ldr	r1, [pc, #92]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f98:	f000 f834 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	4912      	ldr	r1, [pc, #72]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <HAL_RCC_ClockConfig+0x358>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff4 <HAL_RCC_ClockConfig+0x35c>)
 8002fc0:	5cd3      	ldrb	r3, [r2, r3]
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <HAL_RCC_ClockConfig+0x360>)
 8002fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <HAL_RCC_ClockConfig+0x364>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <HAL_RCC_ClockConfig+0x368>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe f942 	bl	8001264 <HAL_InitTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	08007cdc 	.word	0x08007cdc
 8002ff8:	24000004 	.word	0x24000004
 8002ffc:	24000000 	.word	0x24000000
 8003000:	24000008 	.word	0x24000008

08003004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300a:	4bb3      	ldr	r3, [pc, #716]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003012:	2b18      	cmp	r3, #24
 8003014:	f200 8155 	bhi.w	80032c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003018:	a201      	add	r2, pc, #4	@ (adr r2, 8003020 <HAL_RCC_GetSysClockFreq+0x1c>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003085 	.word	0x08003085
 8003024:	080032c3 	.word	0x080032c3
 8003028:	080032c3 	.word	0x080032c3
 800302c:	080032c3 	.word	0x080032c3
 8003030:	080032c3 	.word	0x080032c3
 8003034:	080032c3 	.word	0x080032c3
 8003038:	080032c3 	.word	0x080032c3
 800303c:	080032c3 	.word	0x080032c3
 8003040:	080030ab 	.word	0x080030ab
 8003044:	080032c3 	.word	0x080032c3
 8003048:	080032c3 	.word	0x080032c3
 800304c:	080032c3 	.word	0x080032c3
 8003050:	080032c3 	.word	0x080032c3
 8003054:	080032c3 	.word	0x080032c3
 8003058:	080032c3 	.word	0x080032c3
 800305c:	080032c3 	.word	0x080032c3
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080032c3 	.word	0x080032c3
 8003068:	080032c3 	.word	0x080032c3
 800306c:	080032c3 	.word	0x080032c3
 8003070:	080032c3 	.word	0x080032c3
 8003074:	080032c3 	.word	0x080032c3
 8003078:	080032c3 	.word	0x080032c3
 800307c:	080032c3 	.word	0x080032c3
 8003080:	080030b7 	.word	0x080030b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003084:	4b94      	ldr	r3, [pc, #592]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003090:	4b91      	ldr	r3, [pc, #580]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	4a90      	ldr	r2, [pc, #576]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030a2:	e111      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030a4:	4b8d      	ldr	r3, [pc, #564]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030a6:	61bb      	str	r3, [r7, #24]
      break;
 80030a8:	e10e      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030aa:	4b8d      	ldr	r3, [pc, #564]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030ac:	61bb      	str	r3, [r7, #24]
      break;
 80030ae:	e10b      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030b0:	4b8c      	ldr	r3, [pc, #560]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030b2:	61bb      	str	r3, [r7, #24]
      break;
 80030b4:	e108      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030b6:	4b88      	ldr	r3, [pc, #544]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030c0:	4b85      	ldr	r3, [pc, #532]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030cc:	4b82      	ldr	r3, [pc, #520]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030d6:	4b80      	ldr	r3, [pc, #512]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030da:	08db      	lsrs	r3, r3, #3
 80030dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80e1 	beq.w	80032bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	f000 8083 	beq.w	8003208 <HAL_RCC_GetSysClockFreq+0x204>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b02      	cmp	r3, #2
 8003106:	f200 80a1 	bhi.w	800324c <HAL_RCC_GetSysClockFreq+0x248>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x114>
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d056      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003116:	e099      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003118:	4b6f      	ldr	r3, [pc, #444]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d02d      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003124:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	08db      	lsrs	r3, r3, #3
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	4a6b      	ldr	r2, [pc, #428]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314e:	4b62      	ldr	r3, [pc, #392]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003162:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800316e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800317e:	e087      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800318e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003192:	4b51      	ldr	r3, [pc, #324]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031c2:	e065      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d6:	4b40      	ldr	r3, [pc, #256]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003206:	e043      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321a:	4b2f      	ldr	r3, [pc, #188]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322a:	ed97 6a02 	vldr	s12, [r7, #8]
 800322e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800323e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800324a:	e021      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325e:	4b1e      	ldr	r3, [pc, #120]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003272:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800328e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003290:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	0a5b      	lsrs	r3, r3, #9
 8003296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800329a:	3301      	adds	r3, #1
 800329c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032b4:	ee17 3a90 	vmov	r3, s15
 80032b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032ba:	e005      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]
      break;
 80032c0:	e002      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032c2:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032c4:	61bb      	str	r3, [r7, #24]
      break;
 80032c6:	bf00      	nop
  }

  return sysclockfreq;
 80032c8:	69bb      	ldr	r3, [r7, #24]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3724      	adds	r7, #36	@ 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	58024400 	.word	0x58024400
 80032dc:	03d09000 	.word	0x03d09000
 80032e0:	003d0900 	.word	0x003d0900
 80032e4:	017d7840 	.word	0x017d7840
 80032e8:	46000000 	.word	0x46000000
 80032ec:	4c742400 	.word	0x4c742400
 80032f0:	4a742400 	.word	0x4a742400
 80032f4:	4bbebc20 	.word	0x4bbebc20

080032f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032fe:	f7ff fe81 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8003302:	4602      	mov	r2, r0
 8003304:	4b10      	ldr	r3, [pc, #64]	@ (8003348 <HAL_RCC_GetHCLKFreq+0x50>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	490f      	ldr	r1, [pc, #60]	@ (800334c <HAL_RCC_GetHCLKFreq+0x54>)
 8003310:	5ccb      	ldrb	r3, [r1, r3]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800331c:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <HAL_RCC_GetHCLKFreq+0x50>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	4a09      	ldr	r2, [pc, #36]	@ (800334c <HAL_RCC_GetHCLKFreq+0x54>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a07      	ldr	r2, [pc, #28]	@ (8003350 <HAL_RCC_GetHCLKFreq+0x58>)
 8003334:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003336:	4a07      	ldr	r2, [pc, #28]	@ (8003354 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800333c:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <HAL_RCC_GetHCLKFreq+0x58>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024400 	.word	0x58024400
 800334c:	08007cdc 	.word	0x08007cdc
 8003350:	24000004 	.word	0x24000004
 8003354:	24000000 	.word	0x24000000

08003358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800335c:	f7ff ffcc 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4904      	ldr	r1, [pc, #16]	@ (8003380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	58024400 	.word	0x58024400
 8003380:	08007cdc 	.word	0x08007cdc

08003384 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223f      	movs	r2, #63	@ 0x3f
 8003392:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003394:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0207 	and.w	r2, r3, #7
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80033a0:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80033ac:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80033b8:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80033c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80033dc:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033e8:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <HAL_RCC_GetClockConfig+0x80>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	601a      	str	r2, [r3, #0]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	58024400 	.word	0x58024400
 8003404:	52002000 	.word	0x52002000

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b0ca      	sub	sp, #296	@ 0x128
 800340e:	af00      	add	r7, sp, #0
 8003410:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003414:	2300      	movs	r3, #0
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800341a:	2300      	movs	r3, #0
 800341c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800342c:	2500      	movs	r5, #0
 800342e:	ea54 0305 	orrs.w	r3, r4, r5
 8003432:	d049      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800343a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800343e:	d02f      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003440:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003444:	d828      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003446:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800344a:	d01a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800344c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003450:	d822      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345a:	d007      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800345c:	e01c      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345e:	4bb8      	ldr	r3, [pc, #736]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	4ab7      	ldr	r2, [pc, #732]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800346a:	e01a      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003470:	3308      	adds	r3, #8
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f001 f9d1 	bl	800481c <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003480:	e00f      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003486:	3328      	adds	r3, #40	@ 0x28
 8003488:	2102      	movs	r1, #2
 800348a:	4618      	mov	r0, r3
 800348c:	f001 fa78 	bl	8004980 <RCCEx_PLL3_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003496:	e004      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800349e:	e000      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034aa:	4ba5      	ldr	r3, [pc, #660]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034b8:	4aa1      	ldr	r2, [pc, #644]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ba:	430b      	orrs	r3, r1
 80034bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80034be:	e003      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80034d4:	f04f 0900 	mov.w	r9, #0
 80034d8:	ea58 0309 	orrs.w	r3, r8, r9
 80034dc:	d047      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d82a      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034e8:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003505 	.word	0x08003505
 80034f4:	08003513 	.word	0x08003513
 80034f8:	08003529 	.word	0x08003529
 80034fc:	08003547 	.word	0x08003547
 8003500:	08003547 	.word	0x08003547
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003504:	4b8e      	ldr	r3, [pc, #568]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	4a8d      	ldr	r2, [pc, #564]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800350a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800350e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003510:	e01a      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003516:	3308      	adds	r3, #8
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f97e 	bl	800481c <RCCEx_PLL2_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003526:	e00f      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352c:	3328      	adds	r3, #40	@ 0x28
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fa25 	bl	8004980 <RCCEx_PLL3_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800353c:	e004      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003550:	4b7b      	ldr	r3, [pc, #492]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003554:	f023 0107 	bic.w	r1, r3, #7
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	4a78      	ldr	r2, [pc, #480]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003560:	430b      	orrs	r3, r1
 8003562:	6513      	str	r3, [r2, #80]	@ 0x50
 8003564:	e003      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800356a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800357a:	f04f 0b00 	mov.w	fp, #0
 800357e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003582:	d04c      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800358e:	d030      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003594:	d829      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003596:	2bc0      	cmp	r3, #192	@ 0xc0
 8003598:	d02d      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800359a:	2bc0      	cmp	r3, #192	@ 0xc0
 800359c:	d825      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800359e:	2b80      	cmp	r3, #128	@ 0x80
 80035a0:	d018      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80035a2:	2b80      	cmp	r3, #128	@ 0x80
 80035a4:	d821      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80035aa:	2b40      	cmp	r3, #64	@ 0x40
 80035ac:	d007      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80035ae:	e01c      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b0:	4b63      	ldr	r3, [pc, #396]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	4a62      	ldr	r2, [pc, #392]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035bc:	e01c      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	3308      	adds	r3, #8
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 f928 	bl	800481c <RCCEx_PLL2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035d2:	e011      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	3328      	adds	r3, #40	@ 0x28
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 f9cf 	bl	8004980 <RCCEx_PLL3_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035e8:	e006      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003600:	4b4f      	ldr	r3, [pc, #316]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003604:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	4a4c      	ldr	r2, [pc, #304]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003610:	430b      	orrs	r3, r1
 8003612:	6513      	str	r3, [r2, #80]	@ 0x50
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800361a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800362a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800362e:	2300      	movs	r3, #0
 8003630:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003634:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003638:	460b      	mov	r3, r1
 800363a:	4313      	orrs	r3, r2
 800363c:	d053      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003642:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003646:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800364a:	d035      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800364c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003650:	d82e      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003652:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003656:	d031      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003658:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800365c:	d828      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800365e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003662:	d01a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003668:	d822      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800366e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003672:	d007      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003674:	e01c      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003676:	4b32      	ldr	r3, [pc, #200]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	4a31      	ldr	r2, [pc, #196]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800367c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003680:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003682:	e01c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003688:	3308      	adds	r3, #8
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f001 f8c5 	bl	800481c <RCCEx_PLL2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003698:	e011      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369e:	3328      	adds	r3, #40	@ 0x28
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f96c 	bl	8004980 <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ae:	e006      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b6:	e002      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10b      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6593      	str	r3, [r2, #88]	@ 0x58
 80036dc:	e003      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80036f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003700:	460b      	mov	r3, r1
 8003702:	4313      	orrs	r3, r2
 8003704:	d056      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800370e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003712:	d038      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003714:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003718:	d831      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800371a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800371e:	d034      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003720:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003724:	d82b      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003726:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800372a:	d01d      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800372c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003730:	d825      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800373c:	e01f      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800373e:	bf00      	nop
 8003740:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003744:	4ba2      	ldr	r3, [pc, #648]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	4aa1      	ldr	r2, [pc, #644]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800374a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800374e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003750:	e01c      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	3308      	adds	r3, #8
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f001 f85e 	bl	800481c <RCCEx_PLL2_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003766:	e011      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376c:	3328      	adds	r3, #40	@ 0x28
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f001 f905 	bl	8004980 <RCCEx_PLL3_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800377c:	e006      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003784:	e002      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800378a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10b      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003794:	4b8e      	ldr	r3, [pc, #568]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003798:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037a4:	4a8a      	ldr	r2, [pc, #552]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037aa:	e003      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80037c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80037ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d03a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037da:	2b30      	cmp	r3, #48	@ 0x30
 80037dc:	d01f      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80037de:	2b30      	cmp	r3, #48	@ 0x30
 80037e0:	d819      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d00c      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d815      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d019      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d111      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f2:	4b77      	ldr	r3, [pc, #476]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	4a76      	ldr	r2, [pc, #472]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037fe:	e011      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003804:	3308      	adds	r3, #8
 8003806:	2102      	movs	r1, #2
 8003808:	4618      	mov	r0, r3
 800380a:	f001 f807 	bl	800481c <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800382c:	4b68      	ldr	r3, [pc, #416]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003830:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383a:	4a65      	ldr	r2, [pc, #404]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383c:	430b      	orrs	r3, r1
 800383e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003840:	e003      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003856:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003860:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003864:	460b      	mov	r3, r1
 8003866:	4313      	orrs	r3, r2
 8003868:	d051      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003874:	d035      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003876:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800387a:	d82e      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800387c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003880:	d031      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003882:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003886:	d828      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800388c:	d01a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003892:	d822      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389c:	d007      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800389e:	e01c      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a0:	4b4b      	ldr	r3, [pc, #300]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	4a4a      	ldr	r2, [pc, #296]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038ac:	e01c      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	3308      	adds	r3, #8
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 ffb0 	bl	800481c <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038c2:	e011      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	3328      	adds	r3, #40	@ 0x28
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 f857 	bl	8004980 <RCCEx_PLL3_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80038e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038f0:	4b37      	ldr	r3, [pc, #220]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fe:	4a34      	ldr	r2, [pc, #208]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003900:	430b      	orrs	r3, r1
 8003902:	6513      	str	r3, [r2, #80]	@ 0x50
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800390e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800391a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003924:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003928:	460b      	mov	r3, r1
 800392a:	4313      	orrs	r3, r2
 800392c:	d056      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003938:	d033      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800393a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800393e:	d82c      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003940:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003944:	d02f      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003946:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800394a:	d826      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800394c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003950:	d02b      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003952:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003956:	d820      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800395c:	d012      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800395e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003962:	d81a      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d022      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d115      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003972:	3308      	adds	r3, #8
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f000 ff50 	bl	800481c <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003982:	e015      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	3328      	adds	r3, #40	@ 0x28
 800398a:	2101      	movs	r1, #1
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fff7 	bl	8004980 <RCCEx_PLL3_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003998:	e00a      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a0:	e006      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039a2:	bf00      	nop
 80039a4:	e004      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039a6:	bf00      	nop
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c6:	4a02      	ldr	r2, [pc, #8]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80039cc:	e006      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039ce:	bf00      	nop
 80039d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80039e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4313      	orrs	r3, r2
 80039fa:	d055      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a08:	d033      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a0e:	d82c      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d02f      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1a:	d826      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a20:	d02b      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a26:	d820      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a2c:	d012      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a32:	d81a      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d022      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a3c:	d115      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a42:	3308      	adds	r3, #8
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fee8 	bl	800481c <RCCEx_PLL2_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a52:	e015      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a58:	3328      	adds	r3, #40	@ 0x28
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 ff8f 	bl	8004980 <RCCEx_PLL3_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a68:	e00a      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a70:	e006      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a72:	bf00      	nop
 8003a74:	e004      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a88:	4ba3      	ldr	r3, [pc, #652]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a98:	4a9f      	ldr	r2, [pc, #636]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003abe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d037      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ad2:	d00e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ad8:	d816      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d018      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003ade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ae2:	d111      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	4a8b      	ldr	r2, [pc, #556]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003af0:	e00f      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	3308      	adds	r3, #8
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fe8e 	bl	800481c <RCCEx_PLL2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b06:	e004      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	4a7b      	ldr	r2, [pc, #492]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4313      	orrs	r3, r2
 8003b56:	d039      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d81c      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003b62:	a201      	add	r2, pc, #4	@ (adr r2, 8003b68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003ba5 	.word	0x08003ba5
 8003b6c:	08003b79 	.word	0x08003b79
 8003b70:	08003b87 	.word	0x08003b87
 8003b74:	08003ba5 	.word	0x08003ba5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b78:	4b67      	ldr	r3, [pc, #412]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	4a66      	ldr	r2, [pc, #408]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b84:	e00f      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fe44 	bl	800481c <RCCEx_PLL2_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b9a:	e004      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bae:	4b5a      	ldr	r3, [pc, #360]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb2:	f023 0103 	bic.w	r1, r3, #3
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbc:	4a56      	ldr	r2, [pc, #344]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bc2:	e003      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003be2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003be6:	460b      	mov	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f000 809f 	beq.w	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bee:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfa:	f7fd fcd1 	bl	80015a0 <HAL_GetTick>
 8003bfe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c02:	e00b      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fd fccc 	bl	80015a0 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b64      	cmp	r3, #100	@ 0x64
 8003c12:	d903      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c1a:	e005      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ed      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d179      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c30:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c3c:	4053      	eors	r3, r2
 8003c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d015      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c46:	4b34      	ldr	r3, [pc, #208]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c52:	4b31      	ldr	r3, [pc, #196]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	4a30      	ldr	r2, [pc, #192]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a2d      	ldr	r2, [pc, #180]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7e:	d118      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fd fc8e 	bl	80015a0 <HAL_GetTick>
 8003c84:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c88:	e00d      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fd fc89 	bl	80015a0 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d903      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ca4:	e005      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0eb      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d129      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cca:	d10e      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cdc:	091a      	lsrs	r2, r3, #4
 8003cde:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6113      	str	r3, [r2, #16]
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003cea:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cf4:	6113      	str	r3, [r2, #16]
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d06:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0c:	e00e      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003d16:	e009      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	58024800 	.word	0x58024800
 8003d20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f002 0301 	and.w	r3, r2, #1
 8003d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f000 8089 	beq.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d54:	2b28      	cmp	r3, #40	@ 0x28
 8003d56:	d86b      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d58:	a201      	add	r2, pc, #4	@ (adr r2, 8003d60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003e39 	.word	0x08003e39
 8003d64:	08003e31 	.word	0x08003e31
 8003d68:	08003e31 	.word	0x08003e31
 8003d6c:	08003e31 	.word	0x08003e31
 8003d70:	08003e31 	.word	0x08003e31
 8003d74:	08003e31 	.word	0x08003e31
 8003d78:	08003e31 	.word	0x08003e31
 8003d7c:	08003e31 	.word	0x08003e31
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003e31 	.word	0x08003e31
 8003d88:	08003e31 	.word	0x08003e31
 8003d8c:	08003e31 	.word	0x08003e31
 8003d90:	08003e31 	.word	0x08003e31
 8003d94:	08003e31 	.word	0x08003e31
 8003d98:	08003e31 	.word	0x08003e31
 8003d9c:	08003e31 	.word	0x08003e31
 8003da0:	08003e1b 	.word	0x08003e1b
 8003da4:	08003e31 	.word	0x08003e31
 8003da8:	08003e31 	.word	0x08003e31
 8003dac:	08003e31 	.word	0x08003e31
 8003db0:	08003e31 	.word	0x08003e31
 8003db4:	08003e31 	.word	0x08003e31
 8003db8:	08003e31 	.word	0x08003e31
 8003dbc:	08003e31 	.word	0x08003e31
 8003dc0:	08003e39 	.word	0x08003e39
 8003dc4:	08003e31 	.word	0x08003e31
 8003dc8:	08003e31 	.word	0x08003e31
 8003dcc:	08003e31 	.word	0x08003e31
 8003dd0:	08003e31 	.word	0x08003e31
 8003dd4:	08003e31 	.word	0x08003e31
 8003dd8:	08003e31 	.word	0x08003e31
 8003ddc:	08003e31 	.word	0x08003e31
 8003de0:	08003e39 	.word	0x08003e39
 8003de4:	08003e31 	.word	0x08003e31
 8003de8:	08003e31 	.word	0x08003e31
 8003dec:	08003e31 	.word	0x08003e31
 8003df0:	08003e31 	.word	0x08003e31
 8003df4:	08003e31 	.word	0x08003e31
 8003df8:	08003e31 	.word	0x08003e31
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003e39 	.word	0x08003e39
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	3308      	adds	r3, #8
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fd05 	bl	800481c <RCCEx_PLL2_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e18:	e00f      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	3328      	adds	r3, #40	@ 0x28
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fdac 	bl	8004980 <RCCEx_PLL3_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e2e:	e004      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e36:	e000      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e42:	4bbf      	ldr	r3, [pc, #764]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e50:	4abb      	ldr	r2, [pc, #748]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f002 0302 	and.w	r3, r2, #2
 8003e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d041      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d824      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003edd 	.word	0x08003edd
 8003e94:	08003ea9 	.word	0x08003ea9
 8003e98:	08003ebf 	.word	0x08003ebf
 8003e9c:	08003edd 	.word	0x08003edd
 8003ea0:	08003edd 	.word	0x08003edd
 8003ea4:	08003edd 	.word	0x08003edd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	3308      	adds	r3, #8
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fcb3 	bl	800481c <RCCEx_PLL2_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ebc:	e00f      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec2:	3328      	adds	r3, #40	@ 0x28
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fd5a 	bl	8004980 <RCCEx_PLL3_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ed2:	e004      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eda:	e000      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ee6:	4b96      	ldr	r3, [pc, #600]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eea:	f023 0107 	bic.w	r1, r3, #7
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef4:	4a92      	ldr	r2, [pc, #584]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003efa:	e003      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f002 0304 	and.w	r3, r2, #4
 8003f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	d044      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d825      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f30:	a201      	add	r2, pc, #4	@ (adr r2, 8003f38 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f85 	.word	0x08003f85
 8003f3c:	08003f51 	.word	0x08003f51
 8003f40:	08003f67 	.word	0x08003f67
 8003f44:	08003f85 	.word	0x08003f85
 8003f48:	08003f85 	.word	0x08003f85
 8003f4c:	08003f85 	.word	0x08003f85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	3308      	adds	r3, #8
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fc5f 	bl	800481c <RCCEx_PLL2_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f64:	e00f      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	3328      	adds	r3, #40	@ 0x28
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fd06 	bl	8004980 <RCCEx_PLL3_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f7a:	e004      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f92:	f023 0107 	bic.w	r1, r3, #7
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f9e:	4a68      	ldr	r2, [pc, #416]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f002 0320 	and.w	r3, r2, #32
 8003fba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	d055      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fda:	d033      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fe0:	d82c      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe6:	d02f      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fec:	d826      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ff2:	d02b      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ff4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ff8:	d820      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ffe:	d012      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004004:	d81a      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d022      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800400a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800400e:	d115      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	3308      	adds	r3, #8
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fbff 	bl	800481c <RCCEx_PLL2_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004024:	e015      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	3328      	adds	r3, #40	@ 0x28
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fca6 	bl	8004980 <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800403a:	e00a      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004042:	e006      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004044:	bf00      	nop
 8004046:	e004      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004048:	bf00      	nop
 800404a:	e002      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800405a:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800405c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	4a35      	ldr	r2, [pc, #212]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800406c:	430b      	orrs	r3, r1
 800406e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004070:	e003      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004090:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d058      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040a6:	d033      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80040a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040ac:	d82c      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b2:	d02f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b8:	d826      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040be:	d02b      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80040c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040c4:	d820      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ca:	d012      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80040cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040d0:	d81a      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d022      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040da:	d115      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	3308      	adds	r3, #8
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fb99 	bl	800481c <RCCEx_PLL2_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040f0:	e015      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	3328      	adds	r3, #40	@ 0x28
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fc40 	bl	8004980 <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004106:	e00a      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410e:	e006      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004110:	bf00      	nop
 8004112:	e004      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004114:	bf00      	nop
 8004116:	e002      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004118:	bf00      	nop
 800411a:	e000      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800411c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10e      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004126:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004132:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004136:	4a02      	ldr	r2, [pc, #8]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004138:	430b      	orrs	r3, r1
 800413a:	6593      	str	r3, [r2, #88]	@ 0x58
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800413e:	bf00      	nop
 8004140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004162:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	d055      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004174:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004178:	d033      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800417a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800417e:	d82c      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004184:	d02f      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800418a:	d826      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800418c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004190:	d02b      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004192:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004196:	d820      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800419c:	d012      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800419e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041a2:	d81a      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d022      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ac:	d115      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b2:	3308      	adds	r3, #8
 80041b4:	2100      	movs	r1, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fb30 	bl	800481c <RCCEx_PLL2_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041c2:	e015      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c8:	3328      	adds	r3, #40	@ 0x28
 80041ca:	2102      	movs	r1, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fbd7 	bl	8004980 <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041d8:	e00a      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041e2:	bf00      	nop
 80041e4:	e004      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10b      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041f8:	4ba1      	ldr	r3, [pc, #644]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004204:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004208:	4a9d      	ldr	r2, [pc, #628]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800420a:	430b      	orrs	r3, r1
 800420c:	6593      	str	r3, [r2, #88]	@ 0x58
 800420e:	e003      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f002 0308 	and.w	r3, r2, #8
 8004224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004228:	2300      	movs	r3, #0
 800422a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800422e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004232:	460b      	mov	r3, r1
 8004234:	4313      	orrs	r3, r2
 8004236:	d01e      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004244:	d10c      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	3328      	adds	r3, #40	@ 0x28
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fb96 	bl	8004980 <RCCEx_PLL3_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004260:	4b87      	ldr	r3, [pc, #540]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004264:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004270:	4a83      	ldr	r2, [pc, #524]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004272:	430b      	orrs	r3, r1
 8004274:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f002 0310 	and.w	r3, r2, #16
 8004282:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800428c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d01e      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800429e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a2:	d10c      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	3328      	adds	r3, #40	@ 0x28
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fb67 	bl	8004980 <RCCEx_PLL3_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042be:	4b70      	ldr	r3, [pc, #448]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80042e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042ee:	460b      	mov	r3, r1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d03e      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004300:	d022      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004306:	d81b      	bhi.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004310:	d00b      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004312:	e015      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004318:	3308      	adds	r3, #8
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fa7d 	bl	800481c <RCCEx_PLL2_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004328:	e00f      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432e:	3328      	adds	r3, #40	@ 0x28
 8004330:	2102      	movs	r1, #2
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb24 	bl	8004980 <RCCEx_PLL3_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800433e:	e004      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004352:	4b4b      	ldr	r3, [pc, #300]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004356:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004362:	4a47      	ldr	r2, [pc, #284]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004364:	430b      	orrs	r3, r1
 8004366:	6593      	str	r3, [r2, #88]	@ 0x58
 8004368:	e003      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800437e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004380:	2300      	movs	r3, #0
 8004382:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004384:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004388:	460b      	mov	r3, r1
 800438a:	4313      	orrs	r3, r2
 800438c:	d03b      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800439a:	d01f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800439c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043a0:	d818      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80043a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043a6:	d003      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80043a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ac:	d007      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80043ae:	e011      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b0:	4b33      	ldr	r3, [pc, #204]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	4a32      	ldr	r2, [pc, #200]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	3328      	adds	r3, #40	@ 0x28
 80043c4:	2101      	movs	r1, #1
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fada 	bl	8004980 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80043d2:	e004      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80043dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043e6:	4b26      	ldr	r3, [pc, #152]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	4a22      	ldr	r2, [pc, #136]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80043fc:	e003      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004412:	673b      	str	r3, [r7, #112]	@ 0x70
 8004414:	2300      	movs	r3, #0
 8004416:	677b      	str	r3, [r7, #116]	@ 0x74
 8004418:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800441c:	460b      	mov	r3, r1
 800441e:	4313      	orrs	r3, r2
 8004420:	d034      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004430:	d007      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004432:	e011      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	4a11      	ldr	r2, [pc, #68]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004440:	e00e      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004446:	3308      	adds	r3, #8
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f9e6 	bl	800481c <RCCEx_PLL2_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004456:	e003      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800445e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004476:	4a02      	ldr	r2, [pc, #8]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004478:	430b      	orrs	r3, r1
 800447a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800447c:	e006      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800447e:	bf00      	nop
 8004480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800449a:	2300      	movs	r3, #0
 800449c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800449e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d00c      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ac:	3328      	adds	r3, #40	@ 0x28
 80044ae:	2102      	movs	r1, #2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fa65 	bl	8004980 <RCCEx_PLL3_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80044ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80044d0:	2300      	movs	r3, #0
 80044d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80044d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d038      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ea:	d018      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80044ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044f0:	d811      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f6:	d014      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80044f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fc:	d80b      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d011      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004506:	d106      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004508:	4bc3      	ldr	r3, [pc, #780]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	4ac2      	ldr	r2, [pc, #776]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004514:	e008      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800451c:	e004      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800451e:	bf00      	nop
 8004520:	e002      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004530:	4bb9      	ldr	r3, [pc, #740]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004534:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004540:	4ab5      	ldr	r2, [pc, #724]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004542:	430b      	orrs	r3, r1
 8004544:	6553      	str	r3, [r2, #84]	@ 0x54
 8004546:	e003      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800454c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800455c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800455e:	2300      	movs	r3, #0
 8004560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004562:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800456c:	4baa      	ldr	r3, [pc, #680]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457a:	4aa7      	ldr	r2, [pc, #668]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457c:	430b      	orrs	r3, r1
 800457e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800458c:	653b      	str	r3, [r7, #80]	@ 0x50
 800458e:	2300      	movs	r3, #0
 8004590:	657b      	str	r3, [r7, #84]	@ 0x54
 8004592:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004596:	460b      	mov	r3, r1
 8004598:	4313      	orrs	r3, r2
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800459c:	4b9e      	ldr	r3, [pc, #632]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80045ac:	4a9a      	ldr	r2, [pc, #616]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ae:	430b      	orrs	r3, r1
 80045b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80045be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c0:	2300      	movs	r3, #0
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ce:	4b92      	ldr	r3, [pc, #584]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045dc:	4a8e      	ldr	r2, [pc, #568]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80045ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80045f0:	2300      	movs	r3, #0
 80045f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d00e      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045fe:	4b86      	ldr	r3, [pc, #536]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	4a85      	ldr	r2, [pc, #532]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004604:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004608:	6113      	str	r3, [r2, #16]
 800460a:	4b83      	ldr	r3, [pc, #524]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460c:	6919      	ldr	r1, [r3, #16]
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004616:	4a80      	ldr	r2, [pc, #512]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004618:	430b      	orrs	r3, r1
 800461a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004628:	63bb      	str	r3, [r7, #56]	@ 0x38
 800462a:	2300      	movs	r3, #0
 800462c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800462e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004632:	460b      	mov	r3, r1
 8004634:	4313      	orrs	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004638:	4b77      	ldr	r3, [pc, #476]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800463a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004646:	4a74      	ldr	r2, [pc, #464]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004648:	430b      	orrs	r3, r1
 800464a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004658:	633b      	str	r3, [r7, #48]	@ 0x30
 800465a:	2300      	movs	r3, #0
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
 800465e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004668:	4b6b      	ldr	r3, [pc, #428]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004678:	4a67      	ldr	r2, [pc, #412]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800467a:	430b      	orrs	r3, r1
 800467c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	2100      	movs	r1, #0
 8004688:	62b9      	str	r1, [r7, #40]	@ 0x28
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004690:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004694:	460b      	mov	r3, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	d011      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	3308      	adds	r3, #8
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f8ba 	bl	800481c <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	2100      	movs	r1, #0
 80046c8:	6239      	str	r1, [r7, #32]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d011      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046de:	3308      	adds	r3, #8
 80046e0:	2101      	movs	r1, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f89a 	bl	800481c <RCCEx_PLL2_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	2100      	movs	r1, #0
 8004708:	61b9      	str	r1, [r7, #24]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d011      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	3308      	adds	r3, #8
 8004720:	2102      	movs	r1, #2
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f87a 	bl	800481c <RCCEx_PLL2_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	2100      	movs	r1, #0
 8004748:	6139      	str	r1, [r7, #16]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	3328      	adds	r3, #40	@ 0x28
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f90c 	bl	8004980 <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	2100      	movs	r1, #0
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004794:	460b      	mov	r3, r1
 8004796:	4313      	orrs	r3, r2
 8004798:	d011      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479e:	3328      	adds	r3, #40	@ 0x28
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f8ec 	bl	8004980 <RCCEx_PLL3_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	2100      	movs	r1, #0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80047d4:	460b      	mov	r3, r1
 80047d6:	4313      	orrs	r3, r2
 80047d8:	d011      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	3328      	adds	r3, #40	@ 0x28
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f8cc 	bl	8004980 <RCCEx_PLL3_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80047fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e000      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
}
 800480c:	4618      	mov	r0, r3
 800480e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004812:	46bd      	mov	sp, r7
 8004814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004818:	58024400 	.word	0x58024400

0800481c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800482a:	4b53      	ldr	r3, [pc, #332]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b03      	cmp	r3, #3
 8004834:	d101      	bne.n	800483a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e099      	b.n	800496e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800483a:	4b4f      	ldr	r3, [pc, #316]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a4e      	ldr	r2, [pc, #312]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004840:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004846:	f7fc feab 	bl	80015a0 <HAL_GetTick>
 800484a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800484c:	e008      	b.n	8004860 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800484e:	f7fc fea7 	bl	80015a0 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e086      	b.n	800496e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004860:	4b45      	ldr	r3, [pc, #276]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800486c:	4b42      	ldr	r3, [pc, #264]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	493f      	ldr	r1, [pc, #252]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	3b01      	subs	r3, #1
 8004886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	3b01      	subs	r3, #1
 8004890:	025b      	lsls	r3, r3, #9
 8004892:	b29b      	uxth	r3, r3
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	3b01      	subs	r3, #1
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048b0:	4931      	ldr	r1, [pc, #196]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048b6:	4b30      	ldr	r3, [pc, #192]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	492d      	ldr	r1, [pc, #180]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	f023 0220 	bic.w	r2, r3, #32
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	4928      	ldr	r1, [pc, #160]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048da:	4b27      	ldr	r3, [pc, #156]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	4a26      	ldr	r2, [pc, #152]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048e0:	f023 0310 	bic.w	r3, r3, #16
 80048e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048e6:	4b24      	ldr	r3, [pc, #144]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048ea:	4b24      	ldr	r3, [pc, #144]	@ (800497c <RCCEx_PLL2_Config+0x160>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	69d2      	ldr	r2, [r2, #28]
 80048f2:	00d2      	lsls	r2, r2, #3
 80048f4:	4920      	ldr	r1, [pc, #128]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004900:	f043 0310 	orr.w	r3, r3, #16
 8004904:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800490c:	4b1a      	ldr	r3, [pc, #104]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	4a19      	ldr	r2, [pc, #100]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004912:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004916:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004918:	e00f      	b.n	800493a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d106      	bne.n	800492e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004920:	4b15      	ldr	r3, [pc, #84]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	4a14      	ldr	r2, [pc, #80]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800492a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800492c:	e005      	b.n	800493a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800492e:	4b12      	ldr	r3, [pc, #72]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	4a11      	ldr	r2, [pc, #68]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004934:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004938:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800493a:	4b0f      	ldr	r3, [pc, #60]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a0e      	ldr	r2, [pc, #56]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004940:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004946:	f7fc fe2b 	bl	80015a0 <HAL_GetTick>
 800494a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800494c:	e008      	b.n	8004960 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800494e:	f7fc fe27 	bl	80015a0 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e006      	b.n	800496e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004960:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <RCCEx_PLL2_Config+0x15c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
 800497c:	ffff0007 	.word	0xffff0007

08004980 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800498e:	4b53      	ldr	r3, [pc, #332]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d101      	bne.n	800499e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e099      	b.n	8004ad2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800499e:	4b4f      	ldr	r3, [pc, #316]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a4e      	ldr	r2, [pc, #312]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 80049a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049aa:	f7fc fdf9 	bl	80015a0 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049b2:	f7fc fdf5 	bl	80015a0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e086      	b.n	8004ad2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049c4:	4b45      	ldr	r3, [pc, #276]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049d0:	4b42      	ldr	r3, [pc, #264]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	051b      	lsls	r3, r3, #20
 80049de:	493f      	ldr	r1, [pc, #252]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	025b      	lsls	r3, r3, #9
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a14:	4931      	ldr	r1, [pc, #196]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a1a:	4b30      	ldr	r3, [pc, #192]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	492d      	ldr	r1, [pc, #180]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	4928      	ldr	r1, [pc, #160]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a3e:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a4a:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <RCCEx_PLL3_Config+0x160>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	69d2      	ldr	r2, [r2, #28]
 8004a56:	00d2      	lsls	r2, r2, #3
 8004a58:	4920      	ldr	r1, [pc, #128]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a70:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	4a19      	ldr	r2, [pc, #100]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a7c:	e00f      	b.n	8004a9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a84:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	4a14      	ldr	r2, [pc, #80]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a90:	e005      	b.n	8004a9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a92:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	4a11      	ldr	r2, [pc, #68]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004a98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fc fd79 	bl	80015a0 <HAL_GetTick>
 8004aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ab2:	f7fc fd75 	bl	80015a0 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e006      	b.n	8004ad2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ac4:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <RCCEx_PLL3_Config+0x15c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	ffff0007 	.word	0xffff0007

08004ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e049      	b.n	8004b8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f841 	bl	8004b92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f000 f9e8 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d001      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e054      	b.n	8004c6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	@ (8004c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bea:	d01d      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a22      	ldr	r2, [pc, #136]	@ (8004c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a21      	ldr	r2, [pc, #132]	@ (8004c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1f      	ldr	r2, [pc, #124]	@ (8004c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c88 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1c      	ldr	r2, [pc, #112]	@ (8004c8c <HAL_TIM_Base_Start_IT+0xe4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1b      	ldr	r2, [pc, #108]	@ (8004c90 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d115      	bne.n	8004c54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <HAL_TIM_Base_Start_IT+0xec>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d015      	beq.n	8004c66 <HAL_TIM_Base_Start_IT+0xbe>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c40:	d011      	beq.n	8004c66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c52:	e008      	b.n	8004c66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e000      	b.n	8004c68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40010400 	.word	0x40010400
 8004c8c:	40001800 	.word	0x40001800
 8004c90:	40014000 	.word	0x40014000
 8004c94:	00010007 	.word	0x00010007

08004c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d020      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0202 	mvn.w	r2, #2
 8004ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8e9 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8db 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f8ec 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d020      	beq.n	8004d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0204 	mvn.w	r2, #4
 8004d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8c3 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f8b5 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f8c6 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d020      	beq.n	8004d94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01b      	beq.n	8004d94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0208 	mvn.w	r2, #8
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2204      	movs	r2, #4
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f89d 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f88f 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f8a0 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d020      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01b      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0210 	mvn.w	r2, #16
 8004db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2208      	movs	r2, #8
 8004db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f877 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f869 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f87a 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00c      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0201 	mvn.w	r2, #1
 8004dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fb fc0c 	bl	800061c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00c      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f913 	bl	8005058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00c      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d007      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f90b 	bl	800506c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00c      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f834 	bl	8004ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00c      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0220 	mvn.w	r2, #32
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f8d3 	bl	8005044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a46      	ldr	r2, [pc, #280]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f16:	d00f      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a43      	ldr	r2, [pc, #268]	@ (8005028 <TIM_Base_SetConfig+0x130>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a42      	ldr	r2, [pc, #264]	@ (800502c <TIM_Base_SetConfig+0x134>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a41      	ldr	r2, [pc, #260]	@ (8005030 <TIM_Base_SetConfig+0x138>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a40      	ldr	r2, [pc, #256]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d108      	bne.n	8004f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01f      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f58:	d01b      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a32      	ldr	r2, [pc, #200]	@ (8005028 <TIM_Base_SetConfig+0x130>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d017      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a31      	ldr	r2, [pc, #196]	@ (800502c <TIM_Base_SetConfig+0x134>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a30      	ldr	r2, [pc, #192]	@ (8005030 <TIM_Base_SetConfig+0x138>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2f      	ldr	r2, [pc, #188]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005038 <TIM_Base_SetConfig+0x140>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2d      	ldr	r2, [pc, #180]	@ (800503c <TIM_Base_SetConfig+0x144>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005040 <TIM_Base_SetConfig+0x148>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d108      	bne.n	8004fa4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a16      	ldr	r2, [pc, #88]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00f      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a17      	ldr	r2, [pc, #92]	@ (8005038 <TIM_Base_SetConfig+0x140>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a16      	ldr	r2, [pc, #88]	@ (800503c <TIM_Base_SetConfig+0x144>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a15      	ldr	r2, [pc, #84]	@ (8005040 <TIM_Base_SetConfig+0x148>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d103      	bne.n	8004ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]
  }
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40010400 	.word	0x40010400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800

08005044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <__NVIC_SetPriority>:
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	6039      	str	r1, [r7, #0]
 800508a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800508c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005090:	2b00      	cmp	r3, #0
 8005092:	db0a      	blt.n	80050aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	490c      	ldr	r1, [pc, #48]	@ (80050cc <__NVIC_SetPriority+0x4c>)
 800509a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800509e:	0112      	lsls	r2, r2, #4
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80050a8:	e00a      	b.n	80050c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4908      	ldr	r1, [pc, #32]	@ (80050d0 <__NVIC_SetPriority+0x50>)
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3b04      	subs	r3, #4
 80050b8:	0112      	lsls	r2, r2, #4
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	440b      	add	r3, r1
 80050be:	761a      	strb	r2, [r3, #24]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	e000e100 	.word	0xe000e100
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <SysTick_Handler+0x1c>)
 80050da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050dc:	f001 fd18 	bl	8006b10 <xTaskGetSchedulerState>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d001      	beq.n	80050ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050e6:	f002 fb0f 	bl	8007708 <xPortSysTickHandler>
  }
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	e000e010 	.word	0xe000e010

080050f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050f8:	2100      	movs	r1, #0
 80050fa:	f06f 0004 	mvn.w	r0, #4
 80050fe:	f7ff ffbf 	bl	8005080 <__NVIC_SetPriority>
#endif
}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	603b      	str	r3, [r7, #0]
  return(result);
 8005114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800511a:	f06f 0305 	mvn.w	r3, #5
 800511e:	607b      	str	r3, [r7, #4]
 8005120:	e00c      	b.n	800513c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005122:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <osKernelInitialize+0x44>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d105      	bne.n	8005136 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800512a:	4b08      	ldr	r3, [pc, #32]	@ (800514c <osKernelInitialize+0x44>)
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005130:	2300      	movs	r3, #0
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e002      	b.n	800513c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800513c:	687b      	ldr	r3, [r7, #4]
}
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	240000d0 	.word	0x240000d0

08005150 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005156:	f3ef 8305 	mrs	r3, IPSR
 800515a:	603b      	str	r3, [r7, #0]
  return(result);
 800515c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005162:	f06f 0305 	mvn.w	r3, #5
 8005166:	607b      	str	r3, [r7, #4]
 8005168:	e010      	b.n	800518c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800516a:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <osKernelStart+0x48>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d109      	bne.n	8005186 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005172:	f7ff ffbf 	bl	80050f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005176:	4b08      	ldr	r3, [pc, #32]	@ (8005198 <osKernelStart+0x48>)
 8005178:	2202      	movs	r2, #2
 800517a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800517c:	f001 f87a 	bl	8006274 <vTaskStartScheduler>
      stat = osOK;
 8005180:	2300      	movs	r3, #0
 8005182:	607b      	str	r3, [r7, #4]
 8005184:	e002      	b.n	800518c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005186:	f04f 33ff 	mov.w	r3, #4294967295
 800518a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800518c:	687b      	ldr	r3, [r7, #4]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	240000d0 	.word	0x240000d0

0800519c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b08e      	sub	sp, #56	@ 0x38
 80051a0:	af04      	add	r7, sp, #16
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ac:	f3ef 8305 	mrs	r3, IPSR
 80051b0:	617b      	str	r3, [r7, #20]
  return(result);
 80051b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d17e      	bne.n	80052b6 <osThreadNew+0x11a>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d07b      	beq.n	80052b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051be:	2380      	movs	r3, #128	@ 0x80
 80051c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051c2:	2318      	movs	r3, #24
 80051c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295
 80051ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d045      	beq.n	8005262 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <osThreadNew+0x48>
        name = attr->name;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <osThreadNew+0x6e>
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b38      	cmp	r3, #56	@ 0x38
 80051fc:	d805      	bhi.n	800520a <osThreadNew+0x6e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <osThreadNew+0x72>
        return (NULL);
 800520a:	2300      	movs	r3, #0
 800520c:	e054      	b.n	80052b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00e      	beq.n	8005244 <osThreadNew+0xa8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b5b      	cmp	r3, #91	@ 0x5b
 800522c:	d90a      	bls.n	8005244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <osThreadNew+0xa8>
        mem = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e010      	b.n	8005266 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10c      	bne.n	8005266 <osThreadNew+0xca>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d108      	bne.n	8005266 <osThreadNew+0xca>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <osThreadNew+0xca>
          mem = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	e001      	b.n	8005266 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d110      	bne.n	800528e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005274:	9202      	str	r2, [sp, #8]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6a3a      	ldr	r2, [r7, #32]
 8005280:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fe1a 	bl	8005ebc <xTaskCreateStatic>
 8005288:	4603      	mov	r3, r0
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	e013      	b.n	80052b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d110      	bne.n	80052b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	b29a      	uxth	r2, r3
 8005298:	f107 0310 	add.w	r3, r7, #16
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fe68 	bl	8005f7c <xTaskCreate>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d001      	beq.n	80052b6 <osThreadNew+0x11a>
            hTask = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052b6:	693b      	ldr	r3, [r7, #16]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3728      	adds	r7, #40	@ 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c8:	f3ef 8305 	mrs	r3, IPSR
 80052cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <osDelay+0x1c>
    stat = osErrorISR;
 80052d4:	f06f 0305 	mvn.w	r3, #5
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e007      	b.n	80052ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 ff8e 	bl	8006208 <vTaskDelay>
    }
  }

  return (stat);
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <vApplicationGetIdleTaskMemory+0x2c>)
 8005308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a06      	ldr	r2, [pc, #24]	@ (8005328 <vApplicationGetIdleTaskMemory+0x30>)
 800530e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2280      	movs	r2, #128	@ 0x80
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	240000d4 	.word	0x240000d4
 8005328:	24000130 	.word	0x24000130

0800532c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4a07      	ldr	r2, [pc, #28]	@ (8005358 <vApplicationGetTimerTaskMemory+0x2c>)
 800533c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a06      	ldr	r2, [pc, #24]	@ (800535c <vApplicationGetTimerTaskMemory+0x30>)
 8005342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800534a:	601a      	str	r2, [r3, #0]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	24000330 	.word	0x24000330
 800535c:	2400038c 	.word	0x2400038c

08005360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f103 0208 	add.w	r2, r3, #8
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f04f 32ff 	mov.w	r2, #4294967295
 8005378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f103 0208 	add.w	r2, r3, #8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f103 0208 	add.w	r2, r3, #8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d103      	bne.n	8005422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e00c      	b.n	800543c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3308      	adds	r3, #8
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e002      	b.n	8005430 <vListInsert+0x2e>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d2f6      	bcs.n	800542a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6892      	ldr	r2, [r2, #8]
 800548a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6852      	ldr	r2, [r2, #4]
 8005494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d103      	bne.n	80054a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	1e5a      	subs	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054f4:	f002 f878 	bl	80075e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	441a      	add	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	3b01      	subs	r3, #1
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	441a      	add	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	22ff      	movs	r2, #255	@ 0xff
 8005538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	22ff      	movs	r2, #255	@ 0xff
 8005540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d114      	bne.n	8005574 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01a      	beq.n	8005588 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3310      	adds	r3, #16
 8005556:	4618      	mov	r0, r3
 8005558:	f001 f91a 	bl	8006790 <xTaskRemoveFromEventList>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d012      	beq.n	8005588 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <xQueueGenericReset+0xd0>)
 8005564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	e009      	b.n	8005588 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3310      	adds	r3, #16
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fef1 	bl	8005360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3324      	adds	r3, #36	@ 0x24
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff feec 	bl	8005360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005588:	f002 f860 	bl	800764c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800558c:	2301      	movs	r3, #1
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08e      	sub	sp, #56	@ 0x38
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <xQueueGenericCreateStatic+0x56>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <xQueueGenericCreateStatic+0x5a>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <xQueueGenericCreateStatic+0x5c>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	623b      	str	r3, [r7, #32]
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	e7fd      	b.n	8005610 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <xQueueGenericCreateStatic+0x84>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <xQueueGenericCreateStatic+0x88>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <xQueueGenericCreateStatic+0x8a>
 8005624:	2300      	movs	r3, #0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	61fb      	str	r3, [r7, #28]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005642:	2350      	movs	r3, #80	@ 0x50
 8005644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b50      	cmp	r3, #80	@ 0x50
 800564a:	d00b      	beq.n	8005664 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	61bb      	str	r3, [r7, #24]
}
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005664:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005678:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f805 	bl	8005696 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800568c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800568e:	4618      	mov	r0, r3
 8005690:	3730      	adds	r7, #48	@ 0x30
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d103      	bne.n	80056b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e002      	b.n	80056b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056c4:	2101      	movs	r1, #1
 80056c6:	69b8      	ldr	r0, [r7, #24]
 80056c8:	f7ff fefe 	bl	80054c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	@ 0x38
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <xQueueGenericSend+0x34>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <xQueueGenericSend+0x42>
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <xQueueGenericSend+0x46>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericSend+0x48>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <xQueueGenericSend+0x64>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d103      	bne.n	800574e <xQueueGenericSend+0x72>
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <xQueueGenericSend+0x76>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <xQueueGenericSend+0x78>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <xQueueGenericSend+0x94>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	623b      	str	r3, [r7, #32]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005770:	f001 f9ce 	bl	8006b10 <xTaskGetSchedulerState>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <xQueueGenericSend+0xa4>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <xQueueGenericSend+0xa8>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <xQueueGenericSend+0xaa>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	61fb      	str	r3, [r7, #28]
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	e7fd      	b.n	800579e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a2:	f001 ff21 	bl	80075e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <xQueueGenericSend+0xdc>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d129      	bne.n	800580c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057be:	f000 fa0f 	bl	8005be0 <prvCopyDataToQueue>
 80057c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	3324      	adds	r3, #36	@ 0x24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 ffdd 	bl	8006790 <xTaskRemoveFromEventList>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d013      	beq.n	8005804 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057dc:	4b3f      	ldr	r3, [pc, #252]	@ (80058dc <xQueueGenericSend+0x200>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	e00a      	b.n	8005804 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057f4:	4b39      	ldr	r3, [pc, #228]	@ (80058dc <xQueueGenericSend+0x200>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005804:	f001 ff22 	bl	800764c <vPortExitCritical>
				return pdPASS;
 8005808:	2301      	movs	r3, #1
 800580a:	e063      	b.n	80058d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005812:	f001 ff1b 	bl	800764c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005816:	2300      	movs	r3, #0
 8005818:	e05c      	b.n	80058d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800581a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	4618      	mov	r0, r3
 8005826:	f001 f817 	bl	8006858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800582e:	f001 ff0d 	bl	800764c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005832:	f000 fd87 	bl	8006344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005836:	f001 fed7 	bl	80075e8 <vPortEnterCritical>
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005840:	b25b      	sxtb	r3, r3
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d103      	bne.n	8005850 <xQueueGenericSend+0x174>
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005856:	b25b      	sxtb	r3, r3
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d103      	bne.n	8005866 <xQueueGenericSend+0x18a>
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005866:	f001 fef1 	bl	800764c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800586a:	1d3a      	adds	r2, r7, #4
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f001 f806 	bl	8006884 <xTaskCheckForTimeOut>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d124      	bne.n	80058c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800587e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005880:	f000 faa6 	bl	8005dd0 <prvIsQueueFull>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d018      	beq.n	80058bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	3310      	adds	r3, #16
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f000 ff2a 	bl	80066ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800589a:	f000 fa31 	bl	8005d00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800589e:	f000 fd5f 	bl	8006360 <xTaskResumeAll>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f47f af7c 	bne.w	80057a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80058aa:	4b0c      	ldr	r3, [pc, #48]	@ (80058dc <xQueueGenericSend+0x200>)
 80058ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	e772      	b.n	80057a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058be:	f000 fa1f 	bl	8005d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058c2:	f000 fd4d 	bl	8006360 <xTaskResumeAll>
 80058c6:	e76c      	b.n	80057a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ca:	f000 fa19 	bl	8005d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ce:	f000 fd47 	bl	8006360 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3738      	adds	r7, #56	@ 0x38
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b090      	sub	sp, #64	@ 0x40
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <xQueueGenericSendFromISR+0x3e>
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <xQueueGenericSendFromISR+0x42>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueGenericSendFromISR+0x44>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	e7fd      	b.n	800593c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d103      	bne.n	800594e <xQueueGenericSendFromISR+0x6e>
 8005946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <xQueueGenericSendFromISR+0x72>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericSendFromISR+0x74>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005970:	f001 ff1a 	bl	80077a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005974:	f3ef 8211 	mrs	r2, BASEPRI
 8005978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	61fa      	str	r2, [r7, #28]
 800598a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800598c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800598e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <xQueueGenericSendFromISR+0xc2>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d12f      	bne.n	8005a02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059b8:	f000 f912 	bl	8005be0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d112      	bne.n	80059ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d0:	3324      	adds	r3, #36	@ 0x24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fedc 	bl	8006790 <xTaskRemoveFromEventList>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00e      	beq.n	80059fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e007      	b.n	80059fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80059f0:	3301      	adds	r3, #1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	b25a      	sxtb	r2, r3
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059fc:	2301      	movs	r3, #1
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005a00:	e001      	b.n	8005a06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3740      	adds	r7, #64	@ 0x40
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	@ 0x30
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10b      	bne.n	8005a4e <xQueueReceive+0x32>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	623b      	str	r3, [r7, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	e7fd      	b.n	8005a4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <xQueueReceive+0x40>
 8005a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <xQueueReceive+0x44>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <xQueueReceive+0x46>
 8005a60:	2300      	movs	r3, #0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <xQueueReceive+0x62>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	61fb      	str	r3, [r7, #28]
}
 8005a78:	bf00      	nop
 8005a7a:	bf00      	nop
 8005a7c:	e7fd      	b.n	8005a7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a7e:	f001 f847 	bl	8006b10 <xTaskGetSchedulerState>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <xQueueReceive+0x72>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <xQueueReceive+0x76>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <xQueueReceive+0x78>
 8005a92:	2300      	movs	r3, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <xQueueReceive+0x94>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	61bb      	str	r3, [r7, #24]
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ab0:	f001 fd9a 	bl	80075e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01f      	beq.n	8005b00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ac4:	f000 f8f6 	bl	8005cb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	1e5a      	subs	r2, r3, #1
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00f      	beq.n	8005af8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	3310      	adds	r3, #16
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fe57 	bl	8006790 <xTaskRemoveFromEventList>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8005bdc <xQueueReceive+0x1c0>)
 8005aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005af8:	f001 fda8 	bl	800764c <vPortExitCritical>
				return pdPASS;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e069      	b.n	8005bd4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b06:	f001 fda1 	bl	800764c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e062      	b.n	8005bd4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b14:	f107 0310 	add.w	r3, r7, #16
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fe9d 	bl	8006858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b22:	f001 fd93 	bl	800764c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b26:	f000 fc0d 	bl	8006344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b2a:	f001 fd5d 	bl	80075e8 <vPortEnterCritical>
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d103      	bne.n	8005b44 <xQueueReceive+0x128>
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d103      	bne.n	8005b5a <xQueueReceive+0x13e>
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b5a:	f001 fd77 	bl	800764c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b5e:	1d3a      	adds	r2, r7, #4
 8005b60:	f107 0310 	add.w	r3, r7, #16
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fe8c 	bl	8006884 <xTaskCheckForTimeOut>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d123      	bne.n	8005bba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b74:	f000 f916 	bl	8005da4 <prvIsQueueEmpty>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d017      	beq.n	8005bae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	3324      	adds	r3, #36	@ 0x24
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4611      	mov	r1, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fdb0 	bl	80066ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b8e:	f000 f8b7 	bl	8005d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b92:	f000 fbe5 	bl	8006360 <xTaskResumeAll>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d189      	bne.n	8005ab0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <xQueueReceive+0x1c0>)
 8005b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	e780      	b.n	8005ab0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bb0:	f000 f8a6 	bl	8005d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bb4:	f000 fbd4 	bl	8006360 <xTaskResumeAll>
 8005bb8:	e77a      	b.n	8005ab0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bbc:	f000 f8a0 	bl	8005d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bc0:	f000 fbce 	bl	8006360 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bc6:	f000 f8ed 	bl	8005da4 <prvIsQueueEmpty>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f43f af6f 	beq.w	8005ab0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3730      	adds	r7, #48	@ 0x30
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10d      	bne.n	8005c1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d14d      	bne.n	8005ca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 ff9e 	bl	8006b4c <xTaskPriorityDisinherit>
 8005c10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	e043      	b.n	8005ca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d119      	bne.n	8005c54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6858      	ldr	r0, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	f002 f818 	bl	8007c60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c38:	441a      	add	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d32b      	bcc.n	8005ca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	e026      	b.n	8005ca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68d8      	ldr	r0, [r3, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	f001 fffe 	bl	8007c60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6c:	425b      	negs	r3, r3
 8005c6e:	441a      	add	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d207      	bcs.n	8005c90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c88:	425b      	negs	r3, r3
 8005c8a:	441a      	add	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d105      	bne.n	8005ca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005caa:	697b      	ldr	r3, [r7, #20]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d018      	beq.n	8005cf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	441a      	add	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d303      	bcc.n	8005ce8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68d9      	ldr	r1, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6838      	ldr	r0, [r7, #0]
 8005cf4:	f001 ffb4 	bl	8007c60 <memcpy>
	}
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d08:	f001 fc6e 	bl	80075e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d14:	e011      	b.n	8005d3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d012      	beq.n	8005d44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3324      	adds	r3, #36	@ 0x24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fd34 	bl	8006790 <xTaskRemoveFromEventList>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d2e:	f000 fe0d 	bl	800694c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dce9      	bgt.n	8005d16 <prvUnlockQueue+0x16>
 8005d42:	e000      	b.n	8005d46 <prvUnlockQueue+0x46>
					break;
 8005d44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	22ff      	movs	r2, #255	@ 0xff
 8005d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d4e:	f001 fc7d 	bl	800764c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d52:	f001 fc49 	bl	80075e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d5e:	e011      	b.n	8005d84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d012      	beq.n	8005d8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3310      	adds	r3, #16
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fd0f 	bl	8006790 <xTaskRemoveFromEventList>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d78:	f000 fde8 	bl	800694c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d7c:	7bbb      	ldrb	r3, [r7, #14]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	dce9      	bgt.n	8005d60 <prvUnlockQueue+0x60>
 8005d8c:	e000      	b.n	8005d90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	22ff      	movs	r2, #255	@ 0xff
 8005d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d98:	f001 fc58 	bl	800764c <vPortExitCritical>
}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dac:	f001 fc1c 	bl	80075e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e001      	b.n	8005dc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dc2:	f001 fc43 	bl	800764c <vPortExitCritical>

	return xReturn;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dd8:	f001 fc06 	bl	80075e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d102      	bne.n	8005dee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005de8:	2301      	movs	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e001      	b.n	8005df2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005df2:	f001 fc2b 	bl	800764c <vPortExitCritical>

	return xReturn;
 8005df6:	68fb      	ldr	r3, [r7, #12]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e014      	b.n	8005e3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e10:	4a0f      	ldr	r2, [pc, #60]	@ (8005e50 <vQueueAddToRegistry+0x50>)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10b      	bne.n	8005e34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e1c:	490c      	ldr	r1, [pc, #48]	@ (8005e50 <vQueueAddToRegistry+0x50>)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e26:	4a0a      	ldr	r2, [pc, #40]	@ (8005e50 <vQueueAddToRegistry+0x50>)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e32:	e006      	b.n	8005e42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b07      	cmp	r3, #7
 8005e3e:	d9e7      	bls.n	8005e10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	2400078c 	.word	0x2400078c

08005e54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e64:	f001 fbc0 	bl	80075e8 <vPortEnterCritical>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e6e:	b25b      	sxtb	r3, r3
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d103      	bne.n	8005e7e <vQueueWaitForMessageRestricted+0x2a>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e84:	b25b      	sxtb	r3, r3
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d103      	bne.n	8005e94 <vQueueWaitForMessageRestricted+0x40>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e94:	f001 fbda 	bl	800764c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	3324      	adds	r3, #36	@ 0x24
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fc45 	bl	8006738 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eae:	6978      	ldr	r0, [r7, #20]
 8005eb0:	f7ff ff26 	bl	8005d00 <prvUnlockQueue>
	}
 8005eb4:	bf00      	nop
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08e      	sub	sp, #56	@ 0x38
 8005ec0:	af04      	add	r7, sp, #16
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	623b      	str	r3, [r7, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
 8005ee6:	e7fd      	b.n	8005ee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	61fb      	str	r3, [r7, #28]
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	e7fd      	b.n	8005f02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f06:	235c      	movs	r3, #92	@ 0x5c
 8005f08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f0e:	d00b      	beq.n	8005f28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	61bb      	str	r3, [r7, #24]
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	e7fd      	b.n	8005f24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01e      	beq.n	8005f6e <xTaskCreateStatic+0xb2>
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01b      	beq.n	8005f6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9303      	str	r3, [sp, #12]
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	9302      	str	r3, [sp, #8]
 8005f50:	f107 0314 	add.w	r3, r7, #20
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f850 	bl	8006006 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f68:	f000 f8de 	bl	8006128 <prvAddNewTaskToReadyList>
 8005f6c:	e001      	b.n	8005f72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f72:	697b      	ldr	r3, [r7, #20]
	}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3728      	adds	r7, #40	@ 0x28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	@ 0x30
 8005f80:	af04      	add	r7, sp, #16
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fc4b 	bl	800782c <pvPortMalloc>
 8005f96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00e      	beq.n	8005fbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f9e:	205c      	movs	r0, #92	@ 0x5c
 8005fa0:	f001 fc44 	bl	800782c <pvPortMalloc>
 8005fa4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fb2:	e005      	b.n	8005fc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fb4:	6978      	ldr	r0, [r7, #20]
 8005fb6:	f001 fd07 	bl	80079c8 <vPortFree>
 8005fba:	e001      	b.n	8005fc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d017      	beq.n	8005ff6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9303      	str	r3, [sp, #12]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	9302      	str	r3, [sp, #8]
 8005fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f80e 	bl	8006006 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fea:	69f8      	ldr	r0, [r7, #28]
 8005fec:	f000 f89c 	bl	8006128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	e002      	b.n	8005ffc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
	}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b088      	sub	sp, #32
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	461a      	mov	r2, r3
 800601e:	21a5      	movs	r1, #165	@ 0xa5
 8006020:	f001 fdf2 	bl	8007c08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800602e:	440b      	add	r3, r1
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f023 0307 	bic.w	r3, r3, #7
 800603c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	617b      	str	r3, [r7, #20]
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	e7fd      	b.n	800605c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01f      	beq.n	80060a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	e012      	b.n	8006092 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	7819      	ldrb	r1, [r3, #0]
 8006074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	3334      	adds	r3, #52	@ 0x34
 800607c:	460a      	mov	r2, r1
 800607e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3301      	adds	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2b0f      	cmp	r3, #15
 8006096:	d9e9      	bls.n	800606c <prvInitialiseNewTask+0x66>
 8006098:	e000      	b.n	800609c <prvInitialiseNewTask+0x96>
			{
				break;
 800609a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060a4:	e003      	b.n	80060ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	2b37      	cmp	r3, #55	@ 0x37
 80060b2:	d901      	bls.n	80060b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060b4:	2337      	movs	r3, #55	@ 0x37
 80060b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	2200      	movs	r2, #0
 80060c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff f966 	bl	80053a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d6:	3318      	adds	r3, #24
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff f961 	bl	80053a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	2200      	movs	r2, #0
 80060f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	68f9      	ldr	r1, [r7, #12]
 8006106:	69b8      	ldr	r0, [r7, #24]
 8006108:	f001 f93e 	bl	8007388 <pxPortInitialiseStack>
 800610c:	4602      	mov	r2, r0
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800611c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800611e:	bf00      	nop
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006130:	f001 fa5a 	bl	80075e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006134:	4b2d      	ldr	r3, [pc, #180]	@ (80061ec <prvAddNewTaskToReadyList+0xc4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	4a2c      	ldr	r2, [pc, #176]	@ (80061ec <prvAddNewTaskToReadyList+0xc4>)
 800613c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800613e:	4b2c      	ldr	r3, [pc, #176]	@ (80061f0 <prvAddNewTaskToReadyList+0xc8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006146:	4a2a      	ldr	r2, [pc, #168]	@ (80061f0 <prvAddNewTaskToReadyList+0xc8>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800614c:	4b27      	ldr	r3, [pc, #156]	@ (80061ec <prvAddNewTaskToReadyList+0xc4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d110      	bne.n	8006176 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006154:	f000 fc1e 	bl	8006994 <prvInitialiseTaskLists>
 8006158:	e00d      	b.n	8006176 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800615a:	4b26      	ldr	r3, [pc, #152]	@ (80061f4 <prvAddNewTaskToReadyList+0xcc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006162:	4b23      	ldr	r3, [pc, #140]	@ (80061f0 <prvAddNewTaskToReadyList+0xc8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	429a      	cmp	r2, r3
 800616e:	d802      	bhi.n	8006176 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006170:	4a1f      	ldr	r2, [pc, #124]	@ (80061f0 <prvAddNewTaskToReadyList+0xc8>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006176:	4b20      	ldr	r3, [pc, #128]	@ (80061f8 <prvAddNewTaskToReadyList+0xd0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	4a1e      	ldr	r2, [pc, #120]	@ (80061f8 <prvAddNewTaskToReadyList+0xd0>)
 800617e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006180:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <prvAddNewTaskToReadyList+0xd0>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618c:	4b1b      	ldr	r3, [pc, #108]	@ (80061fc <prvAddNewTaskToReadyList+0xd4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d903      	bls.n	800619c <prvAddNewTaskToReadyList+0x74>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	4a18      	ldr	r2, [pc, #96]	@ (80061fc <prvAddNewTaskToReadyList+0xd4>)
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4a15      	ldr	r2, [pc, #84]	@ (8006200 <prvAddNewTaskToReadyList+0xd8>)
 80061aa:	441a      	add	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7ff f901 	bl	80053ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061b8:	f001 fa48 	bl	800764c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061bc:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <prvAddNewTaskToReadyList+0xcc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00e      	beq.n	80061e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061c4:	4b0a      	ldr	r3, [pc, #40]	@ (80061f0 <prvAddNewTaskToReadyList+0xc8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d207      	bcs.n	80061e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006204 <prvAddNewTaskToReadyList+0xdc>)
 80061d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	24000ca0 	.word	0x24000ca0
 80061f0:	240007cc 	.word	0x240007cc
 80061f4:	24000cac 	.word	0x24000cac
 80061f8:	24000cbc 	.word	0x24000cbc
 80061fc:	24000ca8 	.word	0x24000ca8
 8006200:	240007d0 	.word	0x240007d0
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800621a:	4b14      	ldr	r3, [pc, #80]	@ (800626c <vTaskDelay+0x64>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <vTaskDelay+0x32>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60bb      	str	r3, [r7, #8]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800623a:	f000 f883 	bl	8006344 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800623e:	2100      	movs	r1, #0
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fcf3 	bl	8006c2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006246:	f000 f88b 	bl	8006360 <xTaskResumeAll>
 800624a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006252:	4b07      	ldr	r3, [pc, #28]	@ (8006270 <vTaskDelay+0x68>)
 8006254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	24000cc8 	.word	0x24000cc8
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	@ 0x28
 8006278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006282:	463a      	mov	r2, r7
 8006284:	1d39      	adds	r1, r7, #4
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff f834 	bl	80052f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	9202      	str	r2, [sp, #8]
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	2300      	movs	r3, #0
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	2300      	movs	r3, #0
 80062a0:	460a      	mov	r2, r1
 80062a2:	4922      	ldr	r1, [pc, #136]	@ (800632c <vTaskStartScheduler+0xb8>)
 80062a4:	4822      	ldr	r0, [pc, #136]	@ (8006330 <vTaskStartScheduler+0xbc>)
 80062a6:	f7ff fe09 	bl	8005ebc <xTaskCreateStatic>
 80062aa:	4603      	mov	r3, r0
 80062ac:	4a21      	ldr	r2, [pc, #132]	@ (8006334 <vTaskStartScheduler+0xc0>)
 80062ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062b0:	4b20      	ldr	r3, [pc, #128]	@ (8006334 <vTaskStartScheduler+0xc0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062b8:	2301      	movs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e001      	b.n	80062c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d102      	bne.n	80062ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062c8:	f000 fd04 	bl	8006cd4 <xTimerCreateTimerTask>
 80062cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d116      	bne.n	8006302 <vTaskStartScheduler+0x8e>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	613b      	str	r3, [r7, #16]
}
 80062e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062e8:	4b13      	ldr	r3, [pc, #76]	@ (8006338 <vTaskStartScheduler+0xc4>)
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062f0:	4b12      	ldr	r3, [pc, #72]	@ (800633c <vTaskStartScheduler+0xc8>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062f6:	4b12      	ldr	r3, [pc, #72]	@ (8006340 <vTaskStartScheduler+0xcc>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062fc:	f001 f8d0 	bl	80074a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006300:	e00f      	b.n	8006322 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d10b      	bne.n	8006322 <vTaskStartScheduler+0xae>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	60fb      	str	r3, [r7, #12]
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	e7fd      	b.n	800631e <vTaskStartScheduler+0xaa>
}
 8006322:	bf00      	nop
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	08007ca0 	.word	0x08007ca0
 8006330:	08006965 	.word	0x08006965
 8006334:	24000cc4 	.word	0x24000cc4
 8006338:	24000cc0 	.word	0x24000cc0
 800633c:	24000cac 	.word	0x24000cac
 8006340:	24000ca4 	.word	0x24000ca4

08006344 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006348:	4b04      	ldr	r3, [pc, #16]	@ (800635c <vTaskSuspendAll+0x18>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	4a03      	ldr	r2, [pc, #12]	@ (800635c <vTaskSuspendAll+0x18>)
 8006350:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006352:	bf00      	nop
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	24000cc8 	.word	0x24000cc8

08006360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800636e:	4b42      	ldr	r3, [pc, #264]	@ (8006478 <xTaskResumeAll+0x118>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <xTaskResumeAll+0x2e>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	603b      	str	r3, [r7, #0]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800638e:	f001 f92b 	bl	80075e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006392:	4b39      	ldr	r3, [pc, #228]	@ (8006478 <xTaskResumeAll+0x118>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3b01      	subs	r3, #1
 8006398:	4a37      	ldr	r2, [pc, #220]	@ (8006478 <xTaskResumeAll+0x118>)
 800639a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639c:	4b36      	ldr	r3, [pc, #216]	@ (8006478 <xTaskResumeAll+0x118>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d162      	bne.n	800646a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063a4:	4b35      	ldr	r3, [pc, #212]	@ (800647c <xTaskResumeAll+0x11c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d05e      	beq.n	800646a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ac:	e02f      	b.n	800640e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ae:	4b34      	ldr	r3, [pc, #208]	@ (8006480 <xTaskResumeAll+0x120>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3318      	adds	r3, #24
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff f85a 	bl	8005474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff f855 	bl	8005474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006484 <xTaskResumeAll+0x124>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d903      	bls.n	80063de <xTaskResumeAll+0x7e>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	4a2a      	ldr	r2, [pc, #168]	@ (8006484 <xTaskResumeAll+0x124>)
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4a27      	ldr	r2, [pc, #156]	@ (8006488 <xTaskResumeAll+0x128>)
 80063ec:	441a      	add	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fe ffe0 	bl	80053ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fe:	4b23      	ldr	r3, [pc, #140]	@ (800648c <xTaskResumeAll+0x12c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006408:	4b21      	ldr	r3, [pc, #132]	@ (8006490 <xTaskResumeAll+0x130>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800640e:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <xTaskResumeAll+0x120>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1cb      	bne.n	80063ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800641c:	f000 fb58 	bl	8006ad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006420:	4b1c      	ldr	r3, [pc, #112]	@ (8006494 <xTaskResumeAll+0x134>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800642c:	f000 f846 	bl	80064bc <xTaskIncrementTick>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006436:	4b16      	ldr	r3, [pc, #88]	@ (8006490 <xTaskResumeAll+0x130>)
 8006438:	2201      	movs	r2, #1
 800643a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3b01      	subs	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f1      	bne.n	800642c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006448:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <xTaskResumeAll+0x134>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800644e:	4b10      	ldr	r3, [pc, #64]	@ (8006490 <xTaskResumeAll+0x130>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006456:	2301      	movs	r3, #1
 8006458:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800645a:	4b0f      	ldr	r3, [pc, #60]	@ (8006498 <xTaskResumeAll+0x138>)
 800645c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800646a:	f001 f8ef 	bl	800764c <vPortExitCritical>

	return xAlreadyYielded;
 800646e:	68bb      	ldr	r3, [r7, #8]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	24000cc8 	.word	0x24000cc8
 800647c:	24000ca0 	.word	0x24000ca0
 8006480:	24000c60 	.word	0x24000c60
 8006484:	24000ca8 	.word	0x24000ca8
 8006488:	240007d0 	.word	0x240007d0
 800648c:	240007cc 	.word	0x240007cc
 8006490:	24000cb4 	.word	0x24000cb4
 8006494:	24000cb0 	.word	0x24000cb0
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064a2:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <xTaskGetTickCount+0x1c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064a8:	687b      	ldr	r3, [r7, #4]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	24000ca4 	.word	0x24000ca4

080064bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006604 <xTaskIncrementTick+0x148>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 8090 	bne.w	80065f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006608 <xTaskIncrementTick+0x14c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064d8:	4a4b      	ldr	r2, [pc, #300]	@ (8006608 <xTaskIncrementTick+0x14c>)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d121      	bne.n	8006528 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80064e4:	4b49      	ldr	r3, [pc, #292]	@ (800660c <xTaskIncrementTick+0x150>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <xTaskIncrementTick+0x4a>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	603b      	str	r3, [r7, #0]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <xTaskIncrementTick+0x46>
 8006506:	4b41      	ldr	r3, [pc, #260]	@ (800660c <xTaskIncrementTick+0x150>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	4b40      	ldr	r3, [pc, #256]	@ (8006610 <xTaskIncrementTick+0x154>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3e      	ldr	r2, [pc, #248]	@ (800660c <xTaskIncrementTick+0x150>)
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	4a3e      	ldr	r2, [pc, #248]	@ (8006610 <xTaskIncrementTick+0x154>)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	4b3e      	ldr	r3, [pc, #248]	@ (8006614 <xTaskIncrementTick+0x158>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3301      	adds	r3, #1
 8006520:	4a3c      	ldr	r2, [pc, #240]	@ (8006614 <xTaskIncrementTick+0x158>)
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	f000 fad4 	bl	8006ad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006528:	4b3b      	ldr	r3, [pc, #236]	@ (8006618 <xTaskIncrementTick+0x15c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	429a      	cmp	r2, r3
 8006530:	d349      	bcc.n	80065c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006532:	4b36      	ldr	r3, [pc, #216]	@ (800660c <xTaskIncrementTick+0x150>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653c:	4b36      	ldr	r3, [pc, #216]	@ (8006618 <xTaskIncrementTick+0x15c>)
 800653e:	f04f 32ff 	mov.w	r2, #4294967295
 8006542:	601a      	str	r2, [r3, #0]
					break;
 8006544:	e03f      	b.n	80065c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006546:	4b31      	ldr	r3, [pc, #196]	@ (800660c <xTaskIncrementTick+0x150>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d203      	bcs.n	8006566 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800655e:	4a2e      	ldr	r2, [pc, #184]	@ (8006618 <xTaskIncrementTick+0x15c>)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006564:	e02f      	b.n	80065c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	3304      	adds	r3, #4
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe ff82 	bl	8005474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	3318      	adds	r3, #24
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe ff79 	bl	8005474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006586:	4b25      	ldr	r3, [pc, #148]	@ (800661c <xTaskIncrementTick+0x160>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d903      	bls.n	8006596 <xTaskIncrementTick+0xda>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	4a22      	ldr	r2, [pc, #136]	@ (800661c <xTaskIncrementTick+0x160>)
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006620 <xTaskIncrementTick+0x164>)
 80065a4:	441a      	add	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f7fe ff04 	bl	80053ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006624 <xTaskIncrementTick+0x168>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065bc:	429a      	cmp	r2, r3
 80065be:	d3b8      	bcc.n	8006532 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065c0:	2301      	movs	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065c4:	e7b5      	b.n	8006532 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065c6:	4b17      	ldr	r3, [pc, #92]	@ (8006624 <xTaskIncrementTick+0x168>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065cc:	4914      	ldr	r1, [pc, #80]	@ (8006620 <xTaskIncrementTick+0x164>)
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d901      	bls.n	80065e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80065de:	2301      	movs	r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065e2:	4b11      	ldr	r3, [pc, #68]	@ (8006628 <xTaskIncrementTick+0x16c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80065ea:	2301      	movs	r3, #1
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e004      	b.n	80065fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065f0:	4b0e      	ldr	r3, [pc, #56]	@ (800662c <xTaskIncrementTick+0x170>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	4a0d      	ldr	r2, [pc, #52]	@ (800662c <xTaskIncrementTick+0x170>)
 80065f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065fa:	697b      	ldr	r3, [r7, #20]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	24000cc8 	.word	0x24000cc8
 8006608:	24000ca4 	.word	0x24000ca4
 800660c:	24000c58 	.word	0x24000c58
 8006610:	24000c5c 	.word	0x24000c5c
 8006614:	24000cb8 	.word	0x24000cb8
 8006618:	24000cc0 	.word	0x24000cc0
 800661c:	24000ca8 	.word	0x24000ca8
 8006620:	240007d0 	.word	0x240007d0
 8006624:	240007cc 	.word	0x240007cc
 8006628:	24000cb4 	.word	0x24000cb4
 800662c:	24000cb0 	.word	0x24000cb0

08006630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006636:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <vTaskSwitchContext+0xa8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800663e:	4b27      	ldr	r3, [pc, #156]	@ (80066dc <vTaskSwitchContext+0xac>)
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006644:	e042      	b.n	80066cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006646:	4b25      	ldr	r3, [pc, #148]	@ (80066dc <vTaskSwitchContext+0xac>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664c:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <vTaskSwitchContext+0xb0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e011      	b.n	8006678 <vTaskSwitchContext+0x48>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <vTaskSwitchContext+0x42>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	607b      	str	r3, [r7, #4]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <vTaskSwitchContext+0x3e>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3b01      	subs	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	491a      	ldr	r1, [pc, #104]	@ (80066e4 <vTaskSwitchContext+0xb4>)
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0e3      	beq.n	8006654 <vTaskSwitchContext+0x24>
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4a13      	ldr	r2, [pc, #76]	@ (80066e4 <vTaskSwitchContext+0xb4>)
 8006698:	4413      	add	r3, r2
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3308      	adds	r3, #8
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d104      	bne.n	80066bc <vTaskSwitchContext+0x8c>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	605a      	str	r2, [r3, #4]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	4a09      	ldr	r2, [pc, #36]	@ (80066e8 <vTaskSwitchContext+0xb8>)
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	4a06      	ldr	r2, [pc, #24]	@ (80066e0 <vTaskSwitchContext+0xb0>)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6013      	str	r3, [r2, #0]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	24000cc8 	.word	0x24000cc8
 80066dc:	24000cb4 	.word	0x24000cb4
 80066e0:	24000ca8 	.word	0x24000ca8
 80066e4:	240007d0 	.word	0x240007d0
 80066e8:	240007cc 	.word	0x240007cc

080066ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	60fb      	str	r3, [r7, #12]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006714:	4b07      	ldr	r3, [pc, #28]	@ (8006734 <vTaskPlaceOnEventList+0x48>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3318      	adds	r3, #24
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fe fe70 	bl	8005402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006722:	2101      	movs	r1, #1
 8006724:	6838      	ldr	r0, [r7, #0]
 8006726:	f000 fa81 	bl	8006c2c <prvAddCurrentTaskToDelayedList>
}
 800672a:	bf00      	nop
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	240007cc 	.word	0x240007cc

08006738 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	617b      	str	r3, [r7, #20]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006762:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <vTaskPlaceOnEventListRestricted+0x54>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3318      	adds	r3, #24
 8006768:	4619      	mov	r1, r3
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7fe fe25 	bl	80053ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	68b8      	ldr	r0, [r7, #8]
 8006780:	f000 fa54 	bl	8006c2c <prvAddCurrentTaskToDelayedList>
	}
 8006784:	bf00      	nop
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	240007cc 	.word	0x240007cc

08006790 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10b      	bne.n	80067be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	60fb      	str	r3, [r7, #12]
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	e7fd      	b.n	80067ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	3318      	adds	r3, #24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fe56 	bl	8005474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006840 <xTaskRemoveFromEventList+0xb0>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d11d      	bne.n	800680c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fe fe4d 	bl	8005474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067de:	4b19      	ldr	r3, [pc, #100]	@ (8006844 <xTaskRemoveFromEventList+0xb4>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d903      	bls.n	80067ee <xTaskRemoveFromEventList+0x5e>
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ea:	4a16      	ldr	r2, [pc, #88]	@ (8006844 <xTaskRemoveFromEventList+0xb4>)
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4a13      	ldr	r2, [pc, #76]	@ (8006848 <xTaskRemoveFromEventList+0xb8>)
 80067fc:	441a      	add	r2, r3
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f7fe fdd8 	bl	80053ba <vListInsertEnd>
 800680a:	e005      	b.n	8006818 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	3318      	adds	r3, #24
 8006810:	4619      	mov	r1, r3
 8006812:	480e      	ldr	r0, [pc, #56]	@ (800684c <xTaskRemoveFromEventList+0xbc>)
 8006814:	f7fe fdd1 	bl	80053ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800681c:	4b0c      	ldr	r3, [pc, #48]	@ (8006850 <xTaskRemoveFromEventList+0xc0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006822:	429a      	cmp	r2, r3
 8006824:	d905      	bls.n	8006832 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006826:	2301      	movs	r3, #1
 8006828:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800682a:	4b0a      	ldr	r3, [pc, #40]	@ (8006854 <xTaskRemoveFromEventList+0xc4>)
 800682c:	2201      	movs	r2, #1
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e001      	b.n	8006836 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006836:	697b      	ldr	r3, [r7, #20]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	24000cc8 	.word	0x24000cc8
 8006844:	24000ca8 	.word	0x24000ca8
 8006848:	240007d0 	.word	0x240007d0
 800684c:	24000c60 	.word	0x24000c60
 8006850:	240007cc 	.word	0x240007cc
 8006854:	24000cb4 	.word	0x24000cb4

08006858 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006860:	4b06      	ldr	r3, [pc, #24]	@ (800687c <vTaskInternalSetTimeOutState+0x24>)
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <vTaskInternalSetTimeOutState+0x28>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	605a      	str	r2, [r3, #4]
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	24000cb8 	.word	0x24000cb8
 8006880:	24000ca4 	.word	0x24000ca4

08006884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	613b      	str	r3, [r7, #16]
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60fb      	str	r3, [r7, #12]
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	e7fd      	b.n	80068c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80068ca:	f000 fe8d 	bl	80075e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006944 <xTaskCheckForTimeOut+0xc0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d102      	bne.n	80068ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e023      	b.n	8006936 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b15      	ldr	r3, [pc, #84]	@ (8006948 <xTaskCheckForTimeOut+0xc4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d007      	beq.n	800690a <xTaskCheckForTimeOut+0x86>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	429a      	cmp	r2, r3
 8006902:	d302      	bcc.n	800690a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e015      	b.n	8006936 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	429a      	cmp	r2, r3
 8006912:	d20b      	bcs.n	800692c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff ff99 	bl	8006858 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006926:	2300      	movs	r3, #0
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	e004      	b.n	8006936 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006932:	2301      	movs	r3, #1
 8006934:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006936:	f000 fe89 	bl	800764c <vPortExitCritical>

	return xReturn;
 800693a:	69fb      	ldr	r3, [r7, #28]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	24000ca4 	.word	0x24000ca4
 8006948:	24000cb8 	.word	0x24000cb8

0800694c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006950:	4b03      	ldr	r3, [pc, #12]	@ (8006960 <vTaskMissedYield+0x14>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	24000cb4 	.word	0x24000cb4

08006964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800696c:	f000 f852 	bl	8006a14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006970:	4b06      	ldr	r3, [pc, #24]	@ (800698c <prvIdleTask+0x28>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d9f9      	bls.n	800696c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006978:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <prvIdleTask+0x2c>)
 800697a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006988:	e7f0      	b.n	800696c <prvIdleTask+0x8>
 800698a:	bf00      	nop
 800698c:	240007d0 	.word	0x240007d0
 8006990:	e000ed04 	.word	0xe000ed04

08006994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
 800699e:	e00c      	b.n	80069ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4a12      	ldr	r2, [pc, #72]	@ (80069f4 <prvInitialiseTaskLists+0x60>)
 80069ac:	4413      	add	r3, r2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fcd6 	bl	8005360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3301      	adds	r3, #1
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b37      	cmp	r3, #55	@ 0x37
 80069be:	d9ef      	bls.n	80069a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069c0:	480d      	ldr	r0, [pc, #52]	@ (80069f8 <prvInitialiseTaskLists+0x64>)
 80069c2:	f7fe fccd 	bl	8005360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069c6:	480d      	ldr	r0, [pc, #52]	@ (80069fc <prvInitialiseTaskLists+0x68>)
 80069c8:	f7fe fcca 	bl	8005360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069cc:	480c      	ldr	r0, [pc, #48]	@ (8006a00 <prvInitialiseTaskLists+0x6c>)
 80069ce:	f7fe fcc7 	bl	8005360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069d2:	480c      	ldr	r0, [pc, #48]	@ (8006a04 <prvInitialiseTaskLists+0x70>)
 80069d4:	f7fe fcc4 	bl	8005360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069d8:	480b      	ldr	r0, [pc, #44]	@ (8006a08 <prvInitialiseTaskLists+0x74>)
 80069da:	f7fe fcc1 	bl	8005360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069de:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <prvInitialiseTaskLists+0x78>)
 80069e0:	4a05      	ldr	r2, [pc, #20]	@ (80069f8 <prvInitialiseTaskLists+0x64>)
 80069e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006a10 <prvInitialiseTaskLists+0x7c>)
 80069e6:	4a05      	ldr	r2, [pc, #20]	@ (80069fc <prvInitialiseTaskLists+0x68>)
 80069e8:	601a      	str	r2, [r3, #0]
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	240007d0 	.word	0x240007d0
 80069f8:	24000c30 	.word	0x24000c30
 80069fc:	24000c44 	.word	0x24000c44
 8006a00:	24000c60 	.word	0x24000c60
 8006a04:	24000c74 	.word	0x24000c74
 8006a08:	24000c8c 	.word	0x24000c8c
 8006a0c:	24000c58 	.word	0x24000c58
 8006a10:	24000c5c 	.word	0x24000c5c

08006a14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a1a:	e019      	b.n	8006a50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a1c:	f000 fde4 	bl	80075e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a20:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <prvCheckTasksWaitingTermination+0x50>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fd21 	bl	8005474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a32:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <prvCheckTasksWaitingTermination+0x54>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	4a0b      	ldr	r2, [pc, #44]	@ (8006a68 <prvCheckTasksWaitingTermination+0x54>)
 8006a3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <prvCheckTasksWaitingTermination+0x58>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	4a0a      	ldr	r2, [pc, #40]	@ (8006a6c <prvCheckTasksWaitingTermination+0x58>)
 8006a44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a46:	f000 fe01 	bl	800764c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f810 	bl	8006a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a50:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <prvCheckTasksWaitingTermination+0x58>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e1      	bne.n	8006a1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	24000c74 	.word	0x24000c74
 8006a68:	24000ca0 	.word	0x24000ca0
 8006a6c:	24000c88 	.word	0x24000c88

08006a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d108      	bne.n	8006a94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 ff9e 	bl	80079c8 <vPortFree>
				vPortFree( pxTCB );
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 ff9b 	bl	80079c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a92:	e019      	b.n	8006ac8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d103      	bne.n	8006aa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 ff92 	bl	80079c8 <vPortFree>
	}
 8006aa4:	e010      	b.n	8006ac8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d00b      	beq.n	8006ac8 <prvDeleteTCB+0x58>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	60fb      	str	r3, [r7, #12]
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	e7fd      	b.n	8006ac4 <prvDeleteTCB+0x54>
	}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <prvResetNextTaskUnblockTime+0x38>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b0c <prvResetNextTaskUnblockTime+0x3c>)
 8006ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ae8:	e008      	b.n	8006afc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aea:	4b07      	ldr	r3, [pc, #28]	@ (8006b08 <prvResetNextTaskUnblockTime+0x38>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4a04      	ldr	r2, [pc, #16]	@ (8006b0c <prvResetNextTaskUnblockTime+0x3c>)
 8006afa:	6013      	str	r3, [r2, #0]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	24000c58 	.word	0x24000c58
 8006b0c:	24000cc0 	.word	0x24000cc0

08006b10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b16:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <xTaskGetSchedulerState+0x34>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	e008      	b.n	8006b36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b24:	4b08      	ldr	r3, [pc, #32]	@ (8006b48 <xTaskGetSchedulerState+0x38>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	e001      	b.n	8006b36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b32:	2300      	movs	r3, #0
 8006b34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b36:	687b      	ldr	r3, [r7, #4]
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	24000cac 	.word	0x24000cac
 8006b48:	24000cc8 	.word	0x24000cc8

08006b4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d058      	beq.n	8006c14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b62:	4b2f      	ldr	r3, [pc, #188]	@ (8006c20 <xTaskPriorityDisinherit+0xd4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d00b      	beq.n	8006b84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	60fb      	str	r3, [r7, #12]
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10b      	bne.n	8006ba4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60bb      	str	r3, [r7, #8]
}
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	e7fd      	b.n	8006ba0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba8:	1e5a      	subs	r2, r3, #1
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d02c      	beq.n	8006c14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d128      	bne.n	8006c14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fc54 	bl	8005474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c24 <xTaskPriorityDisinherit+0xd8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d903      	bls.n	8006bf4 <xTaskPriorityDisinherit+0xa8>
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8006c24 <xTaskPriorityDisinherit+0xd8>)
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4a09      	ldr	r2, [pc, #36]	@ (8006c28 <xTaskPriorityDisinherit+0xdc>)
 8006c02:	441a      	add	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fe fbd5 	bl	80053ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c10:	2301      	movs	r3, #1
 8006c12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c14:	697b      	ldr	r3, [r7, #20]
	}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	240007cc 	.word	0x240007cc
 8006c24:	24000ca8 	.word	0x24000ca8
 8006c28:	240007d0 	.word	0x240007d0

08006c2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c36:	4b21      	ldr	r3, [pc, #132]	@ (8006cbc <prvAddCurrentTaskToDelayedList+0x90>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c3c:	4b20      	ldr	r3, [pc, #128]	@ (8006cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fc16 	bl	8005474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d10a      	bne.n	8006c66 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c56:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4819      	ldr	r0, [pc, #100]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c60:	f7fe fbab 	bl	80053ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c64:	e026      	b.n	8006cb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c6e:	4b14      	ldr	r3, [pc, #80]	@ (8006cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d209      	bcs.n	8006c92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7e:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe fbb9 	bl	8005402 <vListInsert>
}
 8006c90:	e010      	b.n	8006cb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c92:	4b0e      	ldr	r3, [pc, #56]	@ (8006ccc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f7fe fbaf 	bl	8005402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d202      	bcs.n	8006cb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cae:	4a08      	ldr	r2, [pc, #32]	@ (8006cd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6013      	str	r3, [r2, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	24000ca4 	.word	0x24000ca4
 8006cc0:	240007cc 	.word	0x240007cc
 8006cc4:	24000c8c 	.word	0x24000c8c
 8006cc8:	24000c5c 	.word	0x24000c5c
 8006ccc:	24000c58 	.word	0x24000c58
 8006cd0:	24000cc0 	.word	0x24000cc0

08006cd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	@ 0x28
 8006cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cde:	f000 fb13 	bl	8007308 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <xTimerCreateTimerTask+0x84>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d021      	beq.n	8006d2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cf2:	1d3a      	adds	r2, r7, #4
 8006cf4:	f107 0108 	add.w	r1, r7, #8
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe fb15 	bl	800532c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	9202      	str	r2, [sp, #8]
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	2300      	movs	r3, #0
 8006d12:	460a      	mov	r2, r1
 8006d14:	4911      	ldr	r1, [pc, #68]	@ (8006d5c <xTimerCreateTimerTask+0x88>)
 8006d16:	4812      	ldr	r0, [pc, #72]	@ (8006d60 <xTimerCreateTimerTask+0x8c>)
 8006d18:	f7ff f8d0 	bl	8005ebc <xTaskCreateStatic>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	4a11      	ldr	r2, [pc, #68]	@ (8006d64 <xTimerCreateTimerTask+0x90>)
 8006d20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d22:	4b10      	ldr	r3, [pc, #64]	@ (8006d64 <xTimerCreateTimerTask+0x90>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	613b      	str	r3, [r7, #16]
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	e7fd      	b.n	8006d48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d4c:	697b      	ldr	r3, [r7, #20]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	24000cfc 	.word	0x24000cfc
 8006d5c:	08007ca8 	.word	0x08007ca8
 8006d60:	08006ea1 	.word	0x08006ea1
 8006d64:	24000d00 	.word	0x24000d00

08006d68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	@ 0x28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <xTimerGenericCommand+0x30>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	623b      	str	r3, [r7, #32]
}
 8006d92:	bf00      	nop
 8006d94:	bf00      	nop
 8006d96:	e7fd      	b.n	8006d94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d98:	4b19      	ldr	r3, [pc, #100]	@ (8006e00 <xTimerGenericCommand+0x98>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02a      	beq.n	8006df6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	dc18      	bgt.n	8006de4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006db2:	f7ff fead 	bl	8006b10 <xTaskGetSchedulerState>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d109      	bne.n	8006dd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dbc:	4b10      	ldr	r3, [pc, #64]	@ (8006e00 <xTimerGenericCommand+0x98>)
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	f107 0110 	add.w	r1, r7, #16
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc8:	f7fe fc88 	bl	80056dc <xQueueGenericSend>
 8006dcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006dce:	e012      	b.n	8006df6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <xTimerGenericCommand+0x98>)
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	f107 0110 	add.w	r1, r7, #16
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f7fe fc7e 	bl	80056dc <xQueueGenericSend>
 8006de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006de2:	e008      	b.n	8006df6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006de4:	4b06      	ldr	r3, [pc, #24]	@ (8006e00 <xTimerGenericCommand+0x98>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	f107 0110 	add.w	r1, r7, #16
 8006dec:	2300      	movs	r3, #0
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	f7fe fd76 	bl	80058e0 <xQueueGenericSendFromISR>
 8006df4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3728      	adds	r7, #40	@ 0x28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	24000cfc 	.word	0x24000cfc

08006e04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0e:	4b23      	ldr	r3, [pc, #140]	@ (8006e9c <prvProcessExpiredTimer+0x98>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe fb29 	bl	8005474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d023      	beq.n	8006e78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	18d1      	adds	r1, r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	6978      	ldr	r0, [r7, #20]
 8006e3e:	f000 f8d5 	bl	8006fec <prvInsertTimerInActiveList>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d020      	beq.n	8006e8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	2100      	movs	r1, #0
 8006e52:	6978      	ldr	r0, [r7, #20]
 8006e54:	f7ff ff88 	bl	8006d68 <xTimerGenericCommand>
 8006e58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d114      	bne.n	8006e8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	60fb      	str	r3, [r7, #12]
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e7e:	f023 0301 	bic.w	r3, r3, #1
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	4798      	blx	r3
}
 8006e92:	bf00      	nop
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	24000cf4 	.word	0x24000cf4

08006ea0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ea8:	f107 0308 	add.w	r3, r7, #8
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f859 	bl	8006f64 <prvGetNextExpireTime>
 8006eb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f805 	bl	8006ec8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ebe:	f000 f8d7 	bl	8007070 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ec2:	bf00      	nop
 8006ec4:	e7f0      	b.n	8006ea8 <prvTimerTask+0x8>
	...

08006ec8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ed2:	f7ff fa37 	bl	8006344 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ed6:	f107 0308 	add.w	r3, r7, #8
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f866 	bl	8006fac <prvSampleTimeNow>
 8006ee0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d130      	bne.n	8006f4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <prvProcessTimerOrBlockTask+0x3c>
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d806      	bhi.n	8006f04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ef6:	f7ff fa33 	bl	8006360 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff ff81 	bl	8006e04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f02:	e024      	b.n	8006f4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f0a:	4b13      	ldr	r3, [pc, #76]	@ (8006f58 <prvProcessTimerOrBlockTask+0x90>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <prvProcessTimerOrBlockTask+0x50>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <prvProcessTimerOrBlockTask+0x52>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f5c <prvProcessTimerOrBlockTask+0x94>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f7fe ff93 	bl	8005e54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f2e:	f7ff fa17 	bl	8006360 <xTaskResumeAll>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f38:	4b09      	ldr	r3, [pc, #36]	@ (8006f60 <prvProcessTimerOrBlockTask+0x98>)
 8006f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	f3bf 8f6f 	isb	sy
}
 8006f48:	e001      	b.n	8006f4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f4a:	f7ff fa09 	bl	8006360 <xTaskResumeAll>
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	24000cf8 	.word	0x24000cf8
 8006f5c:	24000cfc 	.word	0x24000cfc
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa8 <prvGetNextExpireTime+0x44>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <prvGetNextExpireTime+0x16>
 8006f76:	2201      	movs	r2, #1
 8006f78:	e000      	b.n	8006f7c <prvGetNextExpireTime+0x18>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d105      	bne.n	8006f94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f88:	4b07      	ldr	r3, [pc, #28]	@ (8006fa8 <prvGetNextExpireTime+0x44>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	e001      	b.n	8006f98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f98:	68fb      	ldr	r3, [r7, #12]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	24000cf4 	.word	0x24000cf4

08006fac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fb4:	f7ff fa72 	bl	800649c <xTaskGetTickCount>
 8006fb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fba:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe8 <prvSampleTimeNow+0x3c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d205      	bcs.n	8006fd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fc4:	f000 f93a 	bl	800723c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e002      	b.n	8006fd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fd6:	4a04      	ldr	r2, [pc, #16]	@ (8006fe8 <prvSampleTimeNow+0x3c>)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	24000d04 	.word	0x24000d04

08006fec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d812      	bhi.n	8007038 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	429a      	cmp	r2, r3
 800701e:	d302      	bcc.n	8007026 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e01b      	b.n	800705e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007026:	4b10      	ldr	r3, [pc, #64]	@ (8007068 <prvInsertTimerInActiveList+0x7c>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f7fe f9e6 	bl	8005402 <vListInsert>
 8007036:	e012      	b.n	800705e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d206      	bcs.n	800704e <prvInsertTimerInActiveList+0x62>
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d302      	bcc.n	800704e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007048:	2301      	movs	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e007      	b.n	800705e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800704e:	4b07      	ldr	r3, [pc, #28]	@ (800706c <prvInsertTimerInActiveList+0x80>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3304      	adds	r3, #4
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f7fe f9d2 	bl	8005402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800705e:	697b      	ldr	r3, [r7, #20]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	24000cf8 	.word	0x24000cf8
 800706c:	24000cf4 	.word	0x24000cf4

08007070 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08e      	sub	sp, #56	@ 0x38
 8007074:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007076:	e0ce      	b.n	8007216 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	da19      	bge.n	80070b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800707e:	1d3b      	adds	r3, r7, #4
 8007080:	3304      	adds	r3, #4
 8007082:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	61fb      	str	r3, [r7, #28]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070a8:	6850      	ldr	r0, [r2, #4]
 80070aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ac:	6892      	ldr	r2, [r2, #8]
 80070ae:	4611      	mov	r1, r2
 80070b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f2c0 80ae 	blt.w	8007216 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe f9d2 	bl	8005474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070d0:	463b      	mov	r3, r7
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff ff6a 	bl	8006fac <prvSampleTimeNow>
 80070d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b09      	cmp	r3, #9
 80070de:	f200 8097 	bhi.w	8007210 <prvProcessReceivedCommands+0x1a0>
 80070e2:	a201      	add	r2, pc, #4	@ (adr r2, 80070e8 <prvProcessReceivedCommands+0x78>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	08007111 	.word	0x08007111
 80070ec:	08007111 	.word	0x08007111
 80070f0:	08007111 	.word	0x08007111
 80070f4:	08007187 	.word	0x08007187
 80070f8:	0800719b 	.word	0x0800719b
 80070fc:	080071e7 	.word	0x080071e7
 8007100:	08007111 	.word	0x08007111
 8007104:	08007111 	.word	0x08007111
 8007108:	08007187 	.word	0x08007187
 800710c:	0800719b 	.word	0x0800719b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007116:	f043 0301 	orr.w	r3, r3, #1
 800711a:	b2da      	uxtb	r2, r3
 800711c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	18d1      	adds	r1, r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800712e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007130:	f7ff ff5c 	bl	8006fec <prvInsertTimerInActiveList>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d06c      	beq.n	8007214 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800713a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007140:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d061      	beq.n	8007214 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	441a      	add	r2, r3
 8007158:	2300      	movs	r3, #0
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	2300      	movs	r3, #0
 800715e:	2100      	movs	r1, #0
 8007160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007162:	f7ff fe01 	bl	8006d68 <xTimerGenericCommand>
 8007166:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d152      	bne.n	8007214 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	61bb      	str	r3, [r7, #24]
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	e7fd      	b.n	8007182 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	b2da      	uxtb	r2, r3
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007198:	e03d      	b.n	8007216 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	617b      	str	r3, [r7, #20]
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	e7fd      	b.n	80071ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	18d1      	adds	r1, r2, r3
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071e0:	f7ff ff04 	bl	8006fec <prvInsertTimerInActiveList>
					break;
 80071e4:	e017      	b.n	8007216 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80071f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071f6:	f000 fbe7 	bl	80079c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071fa:	e00c      	b.n	8007216 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800720e:	e002      	b.n	8007216 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007210:	bf00      	nop
 8007212:	e000      	b.n	8007216 <prvProcessReceivedCommands+0x1a6>
					break;
 8007214:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007216:	4b08      	ldr	r3, [pc, #32]	@ (8007238 <prvProcessReceivedCommands+0x1c8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	1d39      	adds	r1, r7, #4
 800721c:	2200      	movs	r2, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fbfc 	bl	8005a1c <xQueueReceive>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	f47f af26 	bne.w	8007078 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	3730      	adds	r7, #48	@ 0x30
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	24000cfc 	.word	0x24000cfc

0800723c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007242:	e049      	b.n	80072d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007244:	4b2e      	ldr	r3, [pc, #184]	@ (8007300 <prvSwitchTimerLists+0xc4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724e:	4b2c      	ldr	r3, [pc, #176]	@ (8007300 <prvSwitchTimerLists+0xc4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3304      	adds	r3, #4
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe f909 	bl	8005474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d02f      	beq.n	80072d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4413      	add	r3, r2
 8007280:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	d90e      	bls.n	80072a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007296:	4b1a      	ldr	r3, [pc, #104]	@ (8007300 <prvSwitchTimerLists+0xc4>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7fe f8ae 	bl	8005402 <vListInsert>
 80072a6:	e017      	b.n	80072d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072a8:	2300      	movs	r3, #0
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2300      	movs	r3, #0
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	2100      	movs	r1, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff fd58 	bl	8006d68 <xTimerGenericCommand>
 80072b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10b      	bne.n	80072d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	603b      	str	r3, [r7, #0]
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	e7fd      	b.n	80072d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072d8:	4b09      	ldr	r3, [pc, #36]	@ (8007300 <prvSwitchTimerLists+0xc4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1b0      	bne.n	8007244 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072e2:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <prvSwitchTimerLists+0xc4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072e8:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <prvSwitchTimerLists+0xc8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a04      	ldr	r2, [pc, #16]	@ (8007300 <prvSwitchTimerLists+0xc4>)
 80072ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072f0:	4a04      	ldr	r2, [pc, #16]	@ (8007304 <prvSwitchTimerLists+0xc8>)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	6013      	str	r3, [r2, #0]
}
 80072f6:	bf00      	nop
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	24000cf4 	.word	0x24000cf4
 8007304:	24000cf8 	.word	0x24000cf8

08007308 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800730e:	f000 f96b 	bl	80075e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007312:	4b15      	ldr	r3, [pc, #84]	@ (8007368 <prvCheckForValidListAndQueue+0x60>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d120      	bne.n	800735c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800731a:	4814      	ldr	r0, [pc, #80]	@ (800736c <prvCheckForValidListAndQueue+0x64>)
 800731c:	f7fe f820 	bl	8005360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007320:	4813      	ldr	r0, [pc, #76]	@ (8007370 <prvCheckForValidListAndQueue+0x68>)
 8007322:	f7fe f81d 	bl	8005360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007326:	4b13      	ldr	r3, [pc, #76]	@ (8007374 <prvCheckForValidListAndQueue+0x6c>)
 8007328:	4a10      	ldr	r2, [pc, #64]	@ (800736c <prvCheckForValidListAndQueue+0x64>)
 800732a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800732c:	4b12      	ldr	r3, [pc, #72]	@ (8007378 <prvCheckForValidListAndQueue+0x70>)
 800732e:	4a10      	ldr	r2, [pc, #64]	@ (8007370 <prvCheckForValidListAndQueue+0x68>)
 8007330:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	4b11      	ldr	r3, [pc, #68]	@ (800737c <prvCheckForValidListAndQueue+0x74>)
 8007338:	4a11      	ldr	r2, [pc, #68]	@ (8007380 <prvCheckForValidListAndQueue+0x78>)
 800733a:	2110      	movs	r1, #16
 800733c:	200a      	movs	r0, #10
 800733e:	f7fe f92d 	bl	800559c <xQueueGenericCreateStatic>
 8007342:	4603      	mov	r3, r0
 8007344:	4a08      	ldr	r2, [pc, #32]	@ (8007368 <prvCheckForValidListAndQueue+0x60>)
 8007346:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007348:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <prvCheckForValidListAndQueue+0x60>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007350:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <prvCheckForValidListAndQueue+0x60>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	490b      	ldr	r1, [pc, #44]	@ (8007384 <prvCheckForValidListAndQueue+0x7c>)
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fd52 	bl	8005e00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800735c:	f000 f976 	bl	800764c <vPortExitCritical>
}
 8007360:	bf00      	nop
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	24000cfc 	.word	0x24000cfc
 800736c:	24000ccc 	.word	0x24000ccc
 8007370:	24000ce0 	.word	0x24000ce0
 8007374:	24000cf4 	.word	0x24000cf4
 8007378:	24000cf8 	.word	0x24000cf8
 800737c:	24000da8 	.word	0x24000da8
 8007380:	24000d08 	.word	0x24000d08
 8007384:	08007cb0 	.word	0x08007cb0

08007388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3b04      	subs	r3, #4
 8007398:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3b04      	subs	r3, #4
 80073a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f023 0201 	bic.w	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3b04      	subs	r3, #4
 80073b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073b8:	4a0c      	ldr	r2, [pc, #48]	@ (80073ec <pxPortInitialiseStack+0x64>)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3b14      	subs	r3, #20
 80073c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b04      	subs	r3, #4
 80073ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f06f 0202 	mvn.w	r2, #2
 80073d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3b20      	subs	r3, #32
 80073dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	080073f1 	.word	0x080073f1

080073f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073fa:	4b13      	ldr	r3, [pc, #76]	@ (8007448 <prvTaskExitError+0x58>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d00b      	beq.n	800741c <prvTaskExitError+0x2c>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	60fb      	str	r3, [r7, #12]
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <prvTaskExitError+0x28>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	60bb      	str	r3, [r7, #8]
}
 800742e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007430:	bf00      	nop
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0fc      	beq.n	8007432 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	24000010 	.word	0x24000010
 800744c:	00000000 	.word	0x00000000

08007450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007450:	4b07      	ldr	r3, [pc, #28]	@ (8007470 <pxCurrentTCBConst2>)
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	6808      	ldr	r0, [r1, #0]
 8007456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745a:	f380 8809 	msr	PSP, r0
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f380 8811 	msr	BASEPRI, r0
 800746a:	4770      	bx	lr
 800746c:	f3af 8000 	nop.w

08007470 <pxCurrentTCBConst2>:
 8007470:	240007cc 	.word	0x240007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007478:	4808      	ldr	r0, [pc, #32]	@ (800749c <prvPortStartFirstTask+0x24>)
 800747a:	6800      	ldr	r0, [r0, #0]
 800747c:	6800      	ldr	r0, [r0, #0]
 800747e:	f380 8808 	msr	MSP, r0
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8814 	msr	CONTROL, r0
 800748a:	b662      	cpsie	i
 800748c:	b661      	cpsie	f
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	df00      	svc	0
 8007498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800749a:	bf00      	nop
 800749c:	e000ed08 	.word	0xe000ed08

080074a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074a6:	4b47      	ldr	r3, [pc, #284]	@ (80075c4 <xPortStartScheduler+0x124>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a47      	ldr	r2, [pc, #284]	@ (80075c8 <xPortStartScheduler+0x128>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10b      	bne.n	80074c8 <xPortStartScheduler+0x28>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	613b      	str	r3, [r7, #16]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074c8:	4b3e      	ldr	r3, [pc, #248]	@ (80075c4 <xPortStartScheduler+0x124>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a3f      	ldr	r2, [pc, #252]	@ (80075cc <xPortStartScheduler+0x12c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10b      	bne.n	80074ea <xPortStartScheduler+0x4a>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	60fb      	str	r3, [r7, #12]
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	e7fd      	b.n	80074e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ea:	4b39      	ldr	r3, [pc, #228]	@ (80075d0 <xPortStartScheduler+0x130>)
 80074ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	22ff      	movs	r2, #255	@ 0xff
 80074fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800750c:	b2da      	uxtb	r2, r3
 800750e:	4b31      	ldr	r3, [pc, #196]	@ (80075d4 <xPortStartScheduler+0x134>)
 8007510:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007512:	4b31      	ldr	r3, [pc, #196]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007514:	2207      	movs	r2, #7
 8007516:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007518:	e009      	b.n	800752e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800751a:	4b2f      	ldr	r3, [pc, #188]	@ (80075d8 <xPortStartScheduler+0x138>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3b01      	subs	r3, #1
 8007520:	4a2d      	ldr	r2, [pc, #180]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007522:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007536:	2b80      	cmp	r3, #128	@ 0x80
 8007538:	d0ef      	beq.n	800751a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800753a:	4b27      	ldr	r3, [pc, #156]	@ (80075d8 <xPortStartScheduler+0x138>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1c3 0307 	rsb	r3, r3, #7
 8007542:	2b04      	cmp	r3, #4
 8007544:	d00b      	beq.n	800755e <xPortStartScheduler+0xbe>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60bb      	str	r3, [r7, #8]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800755e:	4b1e      	ldr	r3, [pc, #120]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	4a1c      	ldr	r2, [pc, #112]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007568:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <xPortStartScheduler+0x138>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007570:	4a19      	ldr	r2, [pc, #100]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	b2da      	uxtb	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800757c:	4b17      	ldr	r3, [pc, #92]	@ (80075dc <xPortStartScheduler+0x13c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a16      	ldr	r2, [pc, #88]	@ (80075dc <xPortStartScheduler+0x13c>)
 8007582:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007588:	4b14      	ldr	r3, [pc, #80]	@ (80075dc <xPortStartScheduler+0x13c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a13      	ldr	r2, [pc, #76]	@ (80075dc <xPortStartScheduler+0x13c>)
 800758e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007594:	f000 f8da 	bl	800774c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007598:	4b11      	ldr	r3, [pc, #68]	@ (80075e0 <xPortStartScheduler+0x140>)
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800759e:	f000 f8f9 	bl	8007794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075a2:	4b10      	ldr	r3, [pc, #64]	@ (80075e4 <xPortStartScheduler+0x144>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a0f      	ldr	r2, [pc, #60]	@ (80075e4 <xPortStartScheduler+0x144>)
 80075a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80075ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075ae:	f7ff ff63 	bl	8007478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075b2:	f7ff f83d 	bl	8006630 <vTaskSwitchContext>
	prvTaskExitError();
 80075b6:	f7ff ff1b 	bl	80073f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	e000ed00 	.word	0xe000ed00
 80075c8:	410fc271 	.word	0x410fc271
 80075cc:	410fc270 	.word	0x410fc270
 80075d0:	e000e400 	.word	0xe000e400
 80075d4:	24000df8 	.word	0x24000df8
 80075d8:	24000dfc 	.word	0x24000dfc
 80075dc:	e000ed20 	.word	0xe000ed20
 80075e0:	24000010 	.word	0x24000010
 80075e4:	e000ef34 	.word	0xe000ef34

080075e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007602:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <vPortEnterCritical+0x5c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	4a0e      	ldr	r2, [pc, #56]	@ (8007644 <vPortEnterCritical+0x5c>)
 800760a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800760c:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <vPortEnterCritical+0x5c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d110      	bne.n	8007636 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007614:	4b0c      	ldr	r3, [pc, #48]	@ (8007648 <vPortEnterCritical+0x60>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <vPortEnterCritical+0x4e>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	603b      	str	r3, [r7, #0]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <vPortEnterCritical+0x4a>
	}
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	24000010 	.word	0x24000010
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007652:	4b12      	ldr	r3, [pc, #72]	@ (800769c <vPortExitCritical+0x50>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <vPortExitCritical+0x26>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	607b      	str	r3, [r7, #4]
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	e7fd      	b.n	800766e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007672:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <vPortExitCritical+0x50>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3b01      	subs	r3, #1
 8007678:	4a08      	ldr	r2, [pc, #32]	@ (800769c <vPortExitCritical+0x50>)
 800767a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800767c:	4b07      	ldr	r3, [pc, #28]	@ (800769c <vPortExitCritical+0x50>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d105      	bne.n	8007690 <vPortExitCritical+0x44>
 8007684:	2300      	movs	r3, #0
 8007686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f383 8811 	msr	BASEPRI, r3
}
 800768e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	24000010 	.word	0x24000010

080076a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076a0:	f3ef 8009 	mrs	r0, PSP
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4b15      	ldr	r3, [pc, #84]	@ (8007700 <pxCurrentTCBConst>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	f01e 0f10 	tst.w	lr, #16
 80076b0:	bf08      	it	eq
 80076b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	6010      	str	r0, [r2, #0]
 80076bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076c4:	f380 8811 	msr	BASEPRI, r0
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f7fe ffae 	bl	8006630 <vTaskSwitchContext>
 80076d4:	f04f 0000 	mov.w	r0, #0
 80076d8:	f380 8811 	msr	BASEPRI, r0
 80076dc:	bc09      	pop	{r0, r3}
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	6808      	ldr	r0, [r1, #0]
 80076e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e6:	f01e 0f10 	tst.w	lr, #16
 80076ea:	bf08      	it	eq
 80076ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076f0:	f380 8809 	msr	PSP, r0
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w

08007700 <pxCurrentTCBConst>:
 8007700:	240007cc 	.word	0x240007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop

08007708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	607b      	str	r3, [r7, #4]
}
 8007720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007722:	f7fe fecb 	bl	80064bc <xTaskIncrementTick>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800772c:	4b06      	ldr	r3, [pc, #24]	@ (8007748 <xPortSysTickHandler+0x40>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	2300      	movs	r3, #0
 8007736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f383 8811 	msr	BASEPRI, r3
}
 800773e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007750:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <vPortSetupTimerInterrupt+0x34>)
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007756:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <vPortSetupTimerInterrupt+0x38>)
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800775c:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <vPortSetupTimerInterrupt+0x3c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a0a      	ldr	r2, [pc, #40]	@ (800778c <vPortSetupTimerInterrupt+0x40>)
 8007762:	fba2 2303 	umull	r2, r3, r2, r3
 8007766:	099b      	lsrs	r3, r3, #6
 8007768:	4a09      	ldr	r2, [pc, #36]	@ (8007790 <vPortSetupTimerInterrupt+0x44>)
 800776a:	3b01      	subs	r3, #1
 800776c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800776e:	4b04      	ldr	r3, [pc, #16]	@ (8007780 <vPortSetupTimerInterrupt+0x34>)
 8007770:	2207      	movs	r2, #7
 8007772:	601a      	str	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	e000e010 	.word	0xe000e010
 8007784:	e000e018 	.word	0xe000e018
 8007788:	24000000 	.word	0x24000000
 800778c:	10624dd3 	.word	0x10624dd3
 8007790:	e000e014 	.word	0xe000e014

08007794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007794:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077a4 <vPortEnableVFP+0x10>
 8007798:	6801      	ldr	r1, [r0, #0]
 800779a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800779e:	6001      	str	r1, [r0, #0]
 80077a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077a2:	bf00      	nop
 80077a4:	e000ed88 	.word	0xe000ed88

080077a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077ae:	f3ef 8305 	mrs	r3, IPSR
 80077b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b0f      	cmp	r3, #15
 80077b8:	d915      	bls.n	80077e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077ba:	4a18      	ldr	r2, [pc, #96]	@ (800781c <vPortValidateInterruptPriority+0x74>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077c4:	4b16      	ldr	r3, [pc, #88]	@ (8007820 <vPortValidateInterruptPriority+0x78>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	7afa      	ldrb	r2, [r7, #11]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d20b      	bcs.n	80077e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	607b      	str	r3, [r7, #4]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <vPortValidateInterruptPriority+0x7c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <vPortValidateInterruptPriority+0x80>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d90b      	bls.n	800780e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	603b      	str	r3, [r7, #0]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <vPortValidateInterruptPriority+0x62>
	}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	e000e3f0 	.word	0xe000e3f0
 8007820:	24000df8 	.word	0x24000df8
 8007824:	e000ed0c 	.word	0xe000ed0c
 8007828:	24000dfc 	.word	0x24000dfc

0800782c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007838:	f7fe fd84 	bl	8006344 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800783c:	4b5c      	ldr	r3, [pc, #368]	@ (80079b0 <pvPortMalloc+0x184>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007844:	f000 f924 	bl	8007a90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007848:	4b5a      	ldr	r3, [pc, #360]	@ (80079b4 <pvPortMalloc+0x188>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4013      	ands	r3, r2
 8007850:	2b00      	cmp	r3, #0
 8007852:	f040 8095 	bne.w	8007980 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01e      	beq.n	800789a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800785c:	2208      	movs	r2, #8
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4413      	add	r3, r2
 8007862:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b00      	cmp	r3, #0
 800786c:	d015      	beq.n	800789a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f023 0307 	bic.w	r3, r3, #7
 8007874:	3308      	adds	r3, #8
 8007876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <pvPortMalloc+0x6e>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	617b      	str	r3, [r7, #20]
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	e7fd      	b.n	8007896 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d06f      	beq.n	8007980 <pvPortMalloc+0x154>
 80078a0:	4b45      	ldr	r3, [pc, #276]	@ (80079b8 <pvPortMalloc+0x18c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d86a      	bhi.n	8007980 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078aa:	4b44      	ldr	r3, [pc, #272]	@ (80079bc <pvPortMalloc+0x190>)
 80078ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078ae:	4b43      	ldr	r3, [pc, #268]	@ (80079bc <pvPortMalloc+0x190>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078b4:	e004      	b.n	80078c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d903      	bls.n	80078d2 <pvPortMalloc+0xa6>
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f1      	bne.n	80078b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078d2:	4b37      	ldr	r3, [pc, #220]	@ (80079b0 <pvPortMalloc+0x184>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078d8:	429a      	cmp	r2, r3
 80078da:	d051      	beq.n	8007980 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2208      	movs	r2, #8
 80078e2:	4413      	add	r3, r2
 80078e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	1ad2      	subs	r2, r2, r3
 80078f6:	2308      	movs	r3, #8
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d920      	bls.n	8007940 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <pvPortMalloc+0xfc>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	613b      	str	r3, [r7, #16]
}
 8007922:	bf00      	nop
 8007924:	bf00      	nop
 8007926:	e7fd      	b.n	8007924 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800793a:	69b8      	ldr	r0, [r7, #24]
 800793c:	f000 f90a 	bl	8007b54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007940:	4b1d      	ldr	r3, [pc, #116]	@ (80079b8 <pvPortMalloc+0x18c>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	4a1b      	ldr	r2, [pc, #108]	@ (80079b8 <pvPortMalloc+0x18c>)
 800794c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800794e:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <pvPortMalloc+0x18c>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	4b1b      	ldr	r3, [pc, #108]	@ (80079c0 <pvPortMalloc+0x194>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d203      	bcs.n	8007962 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800795a:	4b17      	ldr	r3, [pc, #92]	@ (80079b8 <pvPortMalloc+0x18c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a18      	ldr	r2, [pc, #96]	@ (80079c0 <pvPortMalloc+0x194>)
 8007960:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	4b13      	ldr	r3, [pc, #76]	@ (80079b4 <pvPortMalloc+0x188>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	431a      	orrs	r2, r3
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007976:	4b13      	ldr	r3, [pc, #76]	@ (80079c4 <pvPortMalloc+0x198>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	4a11      	ldr	r2, [pc, #68]	@ (80079c4 <pvPortMalloc+0x198>)
 800797e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007980:	f7fe fcee 	bl	8006360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <pvPortMalloc+0x17a>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	e7fd      	b.n	80079a2 <pvPortMalloc+0x176>
	return pvReturn;
 80079a6:	69fb      	ldr	r3, [r7, #28]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3728      	adds	r7, #40	@ 0x28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	24004a08 	.word	0x24004a08
 80079b4:	24004a1c 	.word	0x24004a1c
 80079b8:	24004a0c 	.word	0x24004a0c
 80079bc:	24004a00 	.word	0x24004a00
 80079c0:	24004a10 	.word	0x24004a10
 80079c4:	24004a14 	.word	0x24004a14

080079c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d04f      	beq.n	8007a7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079da:	2308      	movs	r3, #8
 80079dc:	425b      	negs	r3, r3
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4413      	add	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4b25      	ldr	r3, [pc, #148]	@ (8007a84 <vPortFree+0xbc>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10b      	bne.n	8007a0e <vPortFree+0x46>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60fb      	str	r3, [r7, #12]
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	e7fd      	b.n	8007a0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <vPortFree+0x66>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	60bb      	str	r3, [r7, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	4b14      	ldr	r3, [pc, #80]	@ (8007a84 <vPortFree+0xbc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01e      	beq.n	8007a7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11a      	bne.n	8007a7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	4b0e      	ldr	r3, [pc, #56]	@ (8007a84 <vPortFree+0xbc>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	401a      	ands	r2, r3
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a54:	f7fe fc76 	bl	8006344 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <vPortFree+0xc0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4413      	add	r3, r2
 8007a62:	4a09      	ldr	r2, [pc, #36]	@ (8007a88 <vPortFree+0xc0>)
 8007a64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a66:	6938      	ldr	r0, [r7, #16]
 8007a68:	f000 f874 	bl	8007b54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a6c:	4b07      	ldr	r3, [pc, #28]	@ (8007a8c <vPortFree+0xc4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	4a06      	ldr	r2, [pc, #24]	@ (8007a8c <vPortFree+0xc4>)
 8007a74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a76:	f7fe fc73 	bl	8006360 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a7a:	bf00      	nop
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	24004a1c 	.word	0x24004a1c
 8007a88:	24004a0c 	.word	0x24004a0c
 8007a8c:	24004a18 	.word	0x24004a18

08007a90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007a9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a9c:	4b27      	ldr	r3, [pc, #156]	@ (8007b3c <prvHeapInit+0xac>)
 8007a9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00c      	beq.n	8007ac4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3307      	adds	r3, #7
 8007aae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0307 	bic.w	r3, r3, #7
 8007ab6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	4a1f      	ldr	r2, [pc, #124]	@ (8007b3c <prvHeapInit+0xac>)
 8007ac0:	4413      	add	r3, r2
 8007ac2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b40 <prvHeapInit+0xb0>)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ace:	4b1c      	ldr	r3, [pc, #112]	@ (8007b40 <prvHeapInit+0xb0>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	4413      	add	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007adc:	2208      	movs	r2, #8
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1a9b      	subs	r3, r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4a15      	ldr	r2, [pc, #84]	@ (8007b44 <prvHeapInit+0xb4>)
 8007af0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007af2:	4b14      	ldr	r3, [pc, #80]	@ (8007b44 <prvHeapInit+0xb4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007afa:	4b12      	ldr	r3, [pc, #72]	@ (8007b44 <prvHeapInit+0xb4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	1ad2      	subs	r2, r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b10:	4b0c      	ldr	r3, [pc, #48]	@ (8007b44 <prvHeapInit+0xb4>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b48 <prvHeapInit+0xb8>)
 8007b1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	4a09      	ldr	r2, [pc, #36]	@ (8007b4c <prvHeapInit+0xbc>)
 8007b26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b28:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <prvHeapInit+0xc0>)
 8007b2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b2e:	601a      	str	r2, [r3, #0]
}
 8007b30:	bf00      	nop
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	24000e00 	.word	0x24000e00
 8007b40:	24004a00 	.word	0x24004a00
 8007b44:	24004a08 	.word	0x24004a08
 8007b48:	24004a10 	.word	0x24004a10
 8007b4c:	24004a0c 	.word	0x24004a0c
 8007b50:	24004a1c 	.word	0x24004a1c

08007b54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b5c:	4b28      	ldr	r3, [pc, #160]	@ (8007c00 <prvInsertBlockIntoFreeList+0xac>)
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e002      	b.n	8007b68 <prvInsertBlockIntoFreeList+0x14>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d8f7      	bhi.n	8007b62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d108      	bne.n	8007b96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	441a      	add	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d118      	bne.n	8007bdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4b15      	ldr	r3, [pc, #84]	@ (8007c04 <prvInsertBlockIntoFreeList+0xb0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d00d      	beq.n	8007bd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e008      	b.n	8007be4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007c04 <prvInsertBlockIntoFreeList+0xb0>)
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e003      	b.n	8007be4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d002      	beq.n	8007bf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	24004a00 	.word	0x24004a00
 8007c04:	24004a08 	.word	0x24004a08

08007c08 <memset>:
 8007c08:	4402      	add	r2, r0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d100      	bne.n	8007c12 <memset+0xa>
 8007c10:	4770      	bx	lr
 8007c12:	f803 1b01 	strb.w	r1, [r3], #1
 8007c16:	e7f9      	b.n	8007c0c <memset+0x4>

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c50 <__libc_init_array+0x38>)
 8007c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8007c54 <__libc_init_array+0x3c>)
 8007c1e:	1b64      	subs	r4, r4, r5
 8007c20:	10a4      	asrs	r4, r4, #2
 8007c22:	2600      	movs	r6, #0
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	4d0b      	ldr	r5, [pc, #44]	@ (8007c58 <__libc_init_array+0x40>)
 8007c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c5c <__libc_init_array+0x44>)
 8007c2c:	f000 f826 	bl	8007c7c <_init>
 8007c30:	1b64      	subs	r4, r4, r5
 8007c32:	10a4      	asrs	r4, r4, #2
 8007c34:	2600      	movs	r6, #0
 8007c36:	42a6      	cmp	r6, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c40:	4798      	blx	r3
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4a:	4798      	blx	r3
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	08007cec 	.word	0x08007cec
 8007c54:	08007cec 	.word	0x08007cec
 8007c58:	08007cec 	.word	0x08007cec
 8007c5c:	08007cf0 	.word	0x08007cf0

08007c60 <memcpy>:
 8007c60:	440a      	add	r2, r1
 8007c62:	4291      	cmp	r1, r2
 8007c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c68:	d100      	bne.n	8007c6c <memcpy+0xc>
 8007c6a:	4770      	bx	lr
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c76:	4291      	cmp	r1, r2
 8007c78:	d1f9      	bne.n	8007c6e <memcpy+0xe>
 8007c7a:	bd10      	pop	{r4, pc}

08007c7c <_init>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr

08007c88 <_fini>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr
