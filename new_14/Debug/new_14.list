
new_14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf8  08003bf8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bf8  08003bf8  00004bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c00  08003c00  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c00  08003c00  00004c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003c08  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000005c  08003c64  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08003c64  0000525c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dccf  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b3  00000000  00000000  00012d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00014f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c1  00000000  00000000  00015ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d0f  00000000  00000000  00016561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6bd  00000000  00000000  0002d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e30e  00000000  00000000  0003c92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cac3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b0  00000000  00000000  000cac80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ce530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b74 	.word	0x08003b74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003b74 	.word	0x08003b74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <MX_GPIO_Init+0x4c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a0f      	ldr	r2, [pc, #60]	@ (80005cc <MX_GPIO_Init+0x4c>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <MX_GPIO_Init+0x4c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_GPIO_Init+0x4c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a08      	ldr	r2, [pc, #32]	@ (80005cc <MX_GPIO_Init+0x4c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_GPIO_Init+0x4c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b099      	sub	sp, #100	@ 0x64
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fa89 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f833 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ffcf 	bl	8000580 <MX_GPIO_Init>
  MX_TIM4_Init();
 80005e2:	f000 f969 	bl	80008b8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 f9dd 	bl	80009a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80005ea:	4811      	ldr	r0, [pc, #68]	@ (8000630 <main+0x60>)
 80005ec:	f001 fae4 	bl	8001bb8 <HAL_TIM_Base_Start_IT>
  char message[] = "Hello, world ", buffer[80];
 80005f0:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <main+0x64>)
 80005f2:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80005f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f8:	c407      	stmia	r4!, {r0, r1, r2}
 80005fa:	8023      	strh	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //count = __HAL_TIM_GET_COUNTER(&htim4);
    sprintf (buffer, "%s%d time now. ", message, count);
 80005fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <main+0x68>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000604:	4638      	mov	r0, r7
 8000606:	490d      	ldr	r1, [pc, #52]	@ (800063c <main+0x6c>)
 8000608:	f002 fe14 	bl	8003234 <siprintf>
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, strlen(buffer));
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fde6 	bl	80001e0 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4808      	ldr	r0, [pc, #32]	@ (8000640 <main+0x70>)
 800061e:	f001 ff05 	bl	800242c <HAL_UART_Transmit_IT>
    HAL_Delay(500 - 1);
 8000622:	f240 10f3 	movw	r0, #499	@ 0x1f3
 8000626:	f000 fad3 	bl	8000bd0 <HAL_Delay>
    sprintf (buffer, "%s%d time now. ", message, count);
 800062a:	bf00      	nop
 800062c:	e7e6      	b.n	80005fc <main+0x2c>
 800062e:	bf00      	nop
 8000630:	20000080 	.word	0x20000080
 8000634:	08003b9c 	.word	0x08003b9c
 8000638:	20000078 	.word	0x20000078
 800063c:	08003b8c 	.word	0x08003b8c
 8000640:	200000c8 	.word	0x200000c8

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fe0e 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006b4:	230c      	movs	r3, #12
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b8:	2360      	movs	r3, #96	@ 0x60
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fdcd 	bl	8001268 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f81e 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f82f 	bl	8001758 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f808 	bl	8000714 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	@ 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <HAL_TIM_PeriodElapsedCallback>:
#include "redefine.h"

extern int count;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if (htim == &htim4)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d104      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    count ++;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	4a05      	ldr	r2, [pc, #20]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000738:	6013      	str	r3, [r2, #0]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000080 	.word	0x20000080
 800074c:	20000078 	.word	0x20000078

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <NMI_Handler+0x4>

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <MemManage_Handler+0x4>

080007b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f6:	f000 f9cb 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <TIM4_IRQHandler+0x10>)
 8000806:	f001 fa39 	bl	8001c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000080 	.word	0x20000080

08000814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000818:	4802      	ldr	r0, [pc, #8]	@ (8000824 <USART2_IRQHandler+0x10>)
 800081a:	f001 fe3d 	bl	8002498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000c8 	.word	0x200000c8

08000828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000830:	4a14      	ldr	r2, [pc, #80]	@ (8000884 <_sbrk+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <_sbrk+0x60>)
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <_sbrk+0x64>)
 8000846:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <_sbrk+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d207      	bcs.n	8000868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000858:	f002 fd14 	bl	8003284 <__errno>
 800085c:	4603      	mov	r3, r0
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	e009      	b.n	800087c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086e:	4b07      	ldr	r3, [pc, #28]	@ (800088c <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	4a05      	ldr	r2, [pc, #20]	@ (800088c <_sbrk+0x64>)
 8000878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20020000 	.word	0x20020000
 8000888:	00000400 	.word	0x00000400
 800088c:	2000007c 	.word	0x2000007c
 8000890:	20000260 	.word	0x20000260

08000894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <SystemInit+0x20>)
 800089a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800089e:	4a05      	ldr	r2, [pc, #20]	@ (80008b4 <SystemInit+0x20>)
 80008a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_TIM4_Init+0x94>)
 80008d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <MX_TIM4_Init+0x98>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_TIM4_Init+0x94>)
 80008dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_TIM4_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80008e8:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_TIM4_Init+0x94>)
 80008ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_TIM4_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_TIM4_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008fc:	4813      	ldr	r0, [pc, #76]	@ (800094c <MX_TIM4_Init+0x94>)
 80008fe:	f001 f90b 	bl	8001b18 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000908:	f7ff ff04 	bl	8000714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_TIM4_Init+0x94>)
 800091a:	f001 fa9f 	bl	8001e5c <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000924:	f7ff fef6 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_TIM4_Init+0x94>)
 8000936:	f001 fca7 	bl	8002288 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000940:	f7ff fee8 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000080 	.word	0x20000080
 8000950:	40000800 	.word	0x40000800

08000954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <HAL_TIM_Base_MspInit+0x48>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d115      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_TIM_Base_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <HAL_TIM_Base_MspInit+0x4c>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_TIM_Base_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	201e      	movs	r0, #30
 8000988:	f000 fa21 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800098c:	201e      	movs	r0, #30
 800098e:	f000 fa3a 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40000800 	.word	0x40000800
 80009a0:	40023800 	.word	0x40023800

080009a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <MX_USART2_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009dc:	f001 fcd6 	bl	800238c <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f7ff fe95 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000c8 	.word	0x200000c8
 80009f4:	40004400 	.word	0x40004400

080009f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <HAL_UART_MspInit+0x94>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d133      	bne.n	8000a82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a14      	ldr	r2, [pc, #80]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a52:	230c      	movs	r3, #12
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <HAL_UART_MspInit+0x9c>)
 8000a6e:	f000 fa77 	bl	8000f60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2026      	movs	r0, #38	@ 0x26
 8000a78:	f000 f9a9 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7c:	2026      	movs	r0, #38	@ 0x26
 8000a7e:	f000 f9c2 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9c:	f7ff fefa 	bl	8000894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f002 fbe3 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd81 	bl	80005d0 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000adc:	08003c08 	.word	0x08003c08
  ldr r2, =_sbss
 8000ae0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ae4:	2000025c 	.word	0x2000025c

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f94f 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	200f      	movs	r0, #15
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe16 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f967 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f000 f92f 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000110 	.word	0x20000110

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000110 	.word	0x20000110

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	@ (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	@ (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	@ 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	@ 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff3e 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff31 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff feb6 	bl	8000bb8 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d008      	beq.n	8000e6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e052      	b.n	8000f12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0216 	bic.w	r2, r2, #22
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d103      	bne.n	8000e9c <HAL_DMA_Abort+0x62>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d007      	beq.n	8000eac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0208 	bic.w	r2, r2, #8
 8000eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ebc:	e013      	b.n	8000ee6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ebe:	f7ff fe7b 	bl	8000bb8 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d90c      	bls.n	8000ee6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2220      	movs	r2, #32
 8000ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e015      	b.n	8000f12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1e4      	bne.n	8000ebe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ef8:	223f      	movs	r2, #63	@ 0x3f
 8000efa:	409a      	lsls	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d004      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e00c      	b.n	8000f52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e159      	b.n	8001230 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8148 	bne.w	800122a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80a2 	beq.w	800122a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b57      	ldr	r3, [pc, #348]	@ (8001248 <HAL_GPIO_Init+0x2e8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a56      	ldr	r2, [pc, #344]	@ (8001248 <HAL_GPIO_Init+0x2e8>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b54      	ldr	r3, [pc, #336]	@ (8001248 <HAL_GPIO_Init+0x2e8>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a52      	ldr	r2, [pc, #328]	@ (800124c <HAL_GPIO_Init+0x2ec>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a49      	ldr	r2, [pc, #292]	@ (8001250 <HAL_GPIO_Init+0x2f0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x202>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a48      	ldr	r2, [pc, #288]	@ (8001254 <HAL_GPIO_Init+0x2f4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x1fe>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a47      	ldr	r2, [pc, #284]	@ (8001258 <HAL_GPIO_Init+0x2f8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x1fa>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a46      	ldr	r2, [pc, #280]	@ (800125c <HAL_GPIO_Init+0x2fc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x1f6>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a45      	ldr	r2, [pc, #276]	@ (8001260 <HAL_GPIO_Init+0x300>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x1f2>
 800114e:	2304      	movs	r3, #4
 8001150:	e008      	b.n	8001164 <HAL_GPIO_Init+0x204>
 8001152:	2307      	movs	r3, #7
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x204>
 8001156:	2303      	movs	r3, #3
 8001158:	e004      	b.n	8001164 <HAL_GPIO_Init+0x204>
 800115a:	2302      	movs	r3, #2
 800115c:	e002      	b.n	8001164 <HAL_GPIO_Init+0x204>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x204>
 8001162:	2300      	movs	r3, #0
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	4093      	lsls	r3, r2
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001174:	4935      	ldr	r1, [pc, #212]	@ (800124c <HAL_GPIO_Init+0x2ec>)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	4b38      	ldr	r3, [pc, #224]	@ (8001264 <HAL_GPIO_Init+0x304>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001264 <HAL_GPIO_Init+0x304>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <HAL_GPIO_Init+0x304>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d0:	4a24      	ldr	r2, [pc, #144]	@ (8001264 <HAL_GPIO_Init+0x304>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d6:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_GPIO_Init+0x304>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001264 <HAL_GPIO_Init+0x304>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_GPIO_Init+0x304>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001224:	4a0f      	ldr	r2, [pc, #60]	@ (8001264 <HAL_GPIO_Init+0x304>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	f67f aea2 	bls.w	8000f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40013800 	.word	0x40013800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e267      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d075      	beq.n	8001372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	4b88      	ldr	r3, [pc, #544]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b04      	cmp	r3, #4
 8001290:	d00c      	beq.n	80012ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001292:	4b85      	ldr	r3, [pc, #532]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129a:	2b08      	cmp	r3, #8
 800129c:	d112      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129e:	4b82      	ldr	r3, [pc, #520]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012aa:	d10b      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	4b7e      	ldr	r3, [pc, #504]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d05b      	beq.n	8001370 <HAL_RCC_OscConfig+0x108>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d157      	bne.n	8001370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e242      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012cc:	d106      	bne.n	80012dc <HAL_RCC_OscConfig+0x74>
 80012ce:	4b76      	ldr	r3, [pc, #472]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a75      	ldr	r2, [pc, #468]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e01d      	b.n	8001318 <HAL_RCC_OscConfig+0xb0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x98>
 80012e6:	4b70      	ldr	r3, [pc, #448]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a6f      	ldr	r2, [pc, #444]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b6d      	ldr	r3, [pc, #436]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6c      	ldr	r2, [pc, #432]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_RCC_OscConfig+0xb0>
 8001300:	4b69      	ldr	r3, [pc, #420]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a68      	ldr	r2, [pc, #416]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b66      	ldr	r3, [pc, #408]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a65      	ldr	r2, [pc, #404]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fc4a 	bl	8000bb8 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fc46 	bl	8000bb8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e207      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b5b      	ldr	r3, [pc, #364]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0xc0>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc36 	bl	8000bb8 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc32 	bl	8000bb8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1f3      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0xe8>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d063      	beq.n	8001446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	4b4a      	ldr	r3, [pc, #296]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138a:	4b47      	ldr	r3, [pc, #284]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001392:	2b08      	cmp	r3, #8
 8001394:	d11c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b44      	ldr	r3, [pc, #272]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <HAL_RCC_OscConfig+0x152>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1c7      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4b3b      	ldr	r3, [pc, #236]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4937      	ldr	r1, [pc, #220]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	e03a      	b.n	8001446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d8:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <HAL_RCC_OscConfig+0x244>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013de:	f7ff fbeb 	bl	8000bb8 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff fbe7 	bl	8000bb8 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1a8      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4925      	ldr	r1, [pc, #148]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
 8001418:	e015      	b.n	8001446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141a:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <HAL_RCC_OscConfig+0x244>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fbca 	bl	8000bb8 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001428:	f7ff fbc6 	bl	8000bb8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e187      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d036      	beq.n	80014c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d016      	beq.n	8001488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_RCC_OscConfig+0x248>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001460:	f7ff fbaa 	bl	8000bb8 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fba6 	bl	8000bb8 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e167      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_RCC_OscConfig+0x240>)
 800147c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x200>
 8001486:	e01b      	b.n	80014c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_RCC_OscConfig+0x248>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb93 	bl	8000bb8 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001494:	e00e      	b.n	80014b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001496:	f7ff fb8f 	bl	8000bb8 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d907      	bls.n	80014b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e150      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
 80014a8:	40023800 	.word	0x40023800
 80014ac:	42470000 	.word	0x42470000
 80014b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b88      	ldr	r3, [pc, #544]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ea      	bne.n	8001496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 8097 	beq.w	80015fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b81      	ldr	r3, [pc, #516]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b7d      	ldr	r3, [pc, #500]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	4a7c      	ldr	r2, [pc, #496]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ee:	4b7a      	ldr	r3, [pc, #488]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b77      	ldr	r3, [pc, #476]	@ (80016dc <HAL_RCC_OscConfig+0x474>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d118      	bne.n	800153c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150a:	4b74      	ldr	r3, [pc, #464]	@ (80016dc <HAL_RCC_OscConfig+0x474>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a73      	ldr	r2, [pc, #460]	@ (80016dc <HAL_RCC_OscConfig+0x474>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb4f 	bl	8000bb8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7ff fb4b 	bl	8000bb8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e10c      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	4b6a      	ldr	r3, [pc, #424]	@ (80016dc <HAL_RCC_OscConfig+0x474>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x2ea>
 8001544:	4b64      	ldr	r3, [pc, #400]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001548:	4a63      	ldr	r2, [pc, #396]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001550:	e01c      	b.n	800158c <HAL_RCC_OscConfig+0x324>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b05      	cmp	r3, #5
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x30c>
 800155a:	4b5f      	ldr	r3, [pc, #380]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155e:	4a5e      	ldr	r2, [pc, #376]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6713      	str	r3, [r2, #112]	@ 0x70
 8001566:	4b5c      	ldr	r3, [pc, #368]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156a:	4a5b      	ldr	r2, [pc, #364]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6713      	str	r3, [r2, #112]	@ 0x70
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0x324>
 8001574:	4b58      	ldr	r3, [pc, #352]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001578:	4a57      	ldr	r2, [pc, #348]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001580:	4b55      	ldr	r3, [pc, #340]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001584:	4a54      	ldr	r2, [pc, #336]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001586:	f023 0304 	bic.w	r3, r3, #4
 800158a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d015      	beq.n	80015c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fb10 	bl	8000bb8 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff fb0c 	bl	8000bb8 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0cb      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b2:	4b49      	ldr	r3, [pc, #292]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0ee      	beq.n	800159c <HAL_RCC_OscConfig+0x334>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff fafa 	bl	8000bb8 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c6:	e00a      	b.n	80015de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c8:	f7ff faf6 	bl	8000bb8 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0b5      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015de:	4b3e      	ldr	r3, [pc, #248]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ee      	bne.n	80015c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f0:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	4a38      	ldr	r2, [pc, #224]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80a1 	beq.w	8001748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001606:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b08      	cmp	r3, #8
 8001610:	d05c      	beq.n	80016cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d141      	bne.n	800169e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <HAL_RCC_OscConfig+0x478>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff faca 	bl	8000bb8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fac6 	bl	8000bb8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e087      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	4b27      	ldr	r3, [pc, #156]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69da      	ldr	r2, [r3, #28]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	019b      	lsls	r3, r3, #6
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	3b01      	subs	r3, #1
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001668:	061b      	lsls	r3, r3, #24
 800166a:	491b      	ldr	r1, [pc, #108]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_RCC_OscConfig+0x478>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fa9f 	bl	8000bb8 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fa9b 	bl	8000bb8 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e05c      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x416>
 800169c:	e054      	b.n	8001748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <HAL_RCC_OscConfig+0x478>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fa88 	bl	8000bb8 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fa84 	bl	8000bb8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e045      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_RCC_OscConfig+0x470>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x444>
 80016ca:	e03d      	b.n	8001748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e038      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000
 80016e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <HAL_RCC_OscConfig+0x4ec>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d028      	beq.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d121      	bne.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d11a      	bne.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800171a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171c:	4293      	cmp	r3, r2
 800171e:	d111      	bne.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	3b01      	subs	r3, #1
 800172e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0cc      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800176c:	4b68      	ldr	r3, [pc, #416]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d90c      	bls.n	8001794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b65      	ldr	r3, [pc, #404]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b63      	ldr	r3, [pc, #396]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0b8      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ac:	4b59      	ldr	r3, [pc, #356]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a58      	ldr	r2, [pc, #352]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c4:	4b53      	ldr	r3, [pc, #332]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a52      	ldr	r2, [pc, #328]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d0:	4b50      	ldr	r3, [pc, #320]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	494d      	ldr	r1, [pc, #308]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d044      	beq.n	8001878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d119      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e07f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d003      	beq.n	8001816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	2b03      	cmp	r3, #3
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001816:	4b3f      	ldr	r3, [pc, #252]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001826:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e067      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001836:	4b37      	ldr	r3, [pc, #220]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f023 0203 	bic.w	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4934      	ldr	r1, [pc, #208]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7ff f9b6 	bl	8000bb8 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	e00a      	b.n	8001866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001850:	f7ff f9b2 	bl	8000bb8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e04f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 020c 	and.w	r2, r3, #12
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	429a      	cmp	r2, r3
 8001876:	d1eb      	bne.n	8001850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001878:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d20c      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e032      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4916      	ldr	r1, [pc, #88]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ca:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	490e      	ldr	r1, [pc, #56]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018de:	f000 f821 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	490a      	ldr	r1, [pc, #40]	@ (8001918 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	4a09      	ldr	r2, [pc, #36]	@ (800191c <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f916 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00
 8001914:	40023800 	.word	0x40023800
 8001918:	08003bac 	.word	0x08003bac
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001928:	b090      	sub	sp, #64	@ 0x40
 800192a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001930:	2300      	movs	r3, #0
 8001932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193c:	4b59      	ldr	r3, [pc, #356]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d00d      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x40>
 8001948:	2b08      	cmp	r3, #8
 800194a:	f200 80a1 	bhi.w	8001a90 <HAL_RCC_GetSysClockFreq+0x16c>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x34>
 8001952:	2b04      	cmp	r3, #4
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x3a>
 8001956:	e09b      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 800195a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800195c:	e09b      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195e:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x188>)
 8001960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001962:	e098      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001964:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800196c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196e:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d028      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	2200      	movs	r2, #0
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	627a      	str	r2, [r7, #36]	@ 0x24
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800198c:	2100      	movs	r1, #0
 800198e:	4b47      	ldr	r3, [pc, #284]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x188>)
 8001990:	fb03 f201 	mul.w	r2, r3, r1
 8001994:	2300      	movs	r3, #0
 8001996:	fb00 f303 	mul.w	r3, r0, r3
 800199a:	4413      	add	r3, r2
 800199c:	4a43      	ldr	r2, [pc, #268]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x188>)
 800199e:	fba0 1202 	umull	r1, r2, r0, r2
 80019a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019a4:	460a      	mov	r2, r1
 80019a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019aa:	4413      	add	r3, r2
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b0:	2200      	movs	r2, #0
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	61fa      	str	r2, [r7, #28]
 80019b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019be:	f7fe fc67 	bl	8000290 <__aeabi_uldivmod>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4613      	mov	r3, r2
 80019c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ca:	e053      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019cc:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	2200      	movs	r2, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	617a      	str	r2, [r7, #20]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019de:	f04f 0b00 	mov.w	fp, #0
 80019e2:	4652      	mov	r2, sl
 80019e4:	465b      	mov	r3, fp
 80019e6:	f04f 0000 	mov.w	r0, #0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	0159      	lsls	r1, r3, #5
 80019f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f4:	0150      	lsls	r0, r2, #5
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ebb2 080a 	subs.w	r8, r2, sl
 80019fe:	eb63 090b 	sbc.w	r9, r3, fp
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a16:	ebb2 0408 	subs.w	r4, r2, r8
 8001a1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	00eb      	lsls	r3, r5, #3
 8001a28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a2c:	00e2      	lsls	r2, r4, #3
 8001a2e:	4614      	mov	r4, r2
 8001a30:	461d      	mov	r5, r3
 8001a32:	eb14 030a 	adds.w	r3, r4, sl
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	eb45 030b 	adc.w	r3, r5, fp
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	028b      	lsls	r3, r1, #10
 8001a4e:	4621      	mov	r1, r4
 8001a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a54:	4621      	mov	r1, r4
 8001a56:	028a      	lsls	r2, r1, #10
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	60fa      	str	r2, [r7, #12]
 8001a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a68:	f7fe fc12 	bl	8000290 <__aeabi_uldivmod>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4613      	mov	r3, r2
 8001a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001a84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3740      	adds	r7, #64	@ 0x40
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	017d7840 	.word	0x017d7840

08001ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff0 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0a9b      	lsrs	r3, r3, #10
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	@ (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	08003bbc 	.word	0x08003bbc

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001af4:	f7ff ffdc 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	0b5b      	lsrs	r3, r3, #13
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4903      	ldr	r1, [pc, #12]	@ (8001b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	08003bbc 	.word	0x08003bbc

08001b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e041      	b.n	8001bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe ff08 	bl	8000954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f000 fa70 	bl	800203c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d001      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e044      	b.n	8001c5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d018      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfa:	d013      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <HAL_TIM_Base_Start_IT+0xb4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00e      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d111      	bne.n	8001c48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d010      	beq.n	8001c58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	e007      	b.n	8001c58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40014000 	.word	0x40014000

08001c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0202 	mvn.w	r2, #2
 8001cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f999 	bl	8001ffe <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f98b 	bl	8001fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f99c 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d020      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0204 	mvn.w	r2, #4
 8001cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f973 	bl	8001ffe <HAL_TIM_IC_CaptureCallback>
 8001d18:	e005      	b.n	8001d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f965 	bl	8001fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f976 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d020      	beq.n	8001d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01b      	beq.n	8001d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0208 	mvn.w	r2, #8
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f94d 	bl	8001ffe <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f93f 	bl	8001fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f950 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d020      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01b      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0210 	mvn.w	r2, #16
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f927 	bl	8001ffe <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f919 	bl	8001fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f92a 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0201 	mvn.w	r2, #1
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fc9c 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fab6 	bl	8002378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8fb 	bl	8002026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0220 	mvn.w	r2, #32
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fa88 	bl	8002364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_TIM_ConfigClockSource+0x1c>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e0b4      	b.n	8001fe2 <HAL_TIM_ConfigClockSource+0x186>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eb0:	d03e      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0xd4>
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eb6:	f200 8087 	bhi.w	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ebe:	f000 8086 	beq.w	8001fce <HAL_TIM_ConfigClockSource+0x172>
 8001ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ec6:	d87f      	bhi.n	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec8:	2b70      	cmp	r3, #112	@ 0x70
 8001eca:	d01a      	beq.n	8001f02 <HAL_TIM_ConfigClockSource+0xa6>
 8001ecc:	2b70      	cmp	r3, #112	@ 0x70
 8001ece:	d87b      	bhi.n	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed0:	2b60      	cmp	r3, #96	@ 0x60
 8001ed2:	d050      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x11a>
 8001ed4:	2b60      	cmp	r3, #96	@ 0x60
 8001ed6:	d877      	bhi.n	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed8:	2b50      	cmp	r3, #80	@ 0x50
 8001eda:	d03c      	beq.n	8001f56 <HAL_TIM_ConfigClockSource+0xfa>
 8001edc:	2b50      	cmp	r3, #80	@ 0x50
 8001ede:	d873      	bhi.n	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee0:	2b40      	cmp	r3, #64	@ 0x40
 8001ee2:	d058      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0x13a>
 8001ee4:	2b40      	cmp	r3, #64	@ 0x40
 8001ee6:	d86f      	bhi.n	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee8:	2b30      	cmp	r3, #48	@ 0x30
 8001eea:	d064      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8001eec:	2b30      	cmp	r3, #48	@ 0x30
 8001eee:	d86b      	bhi.n	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d060      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d867      	bhi.n	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d05c      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d05a      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8001f00:	e062      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f12:	f000 f999 	bl	8002248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001f24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	609a      	str	r2, [r3, #8]
      break;
 8001f2e:	e04f      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f40:	f000 f982 	bl	8002248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f52:	609a      	str	r2, [r3, #8]
      break;
 8001f54:	e03c      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f62:	461a      	mov	r2, r3
 8001f64:	f000 f8f6 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2150      	movs	r1, #80	@ 0x50
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f94f 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001f74:	e02c      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f82:	461a      	mov	r2, r3
 8001f84:	f000 f915 	bl	80021b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2160      	movs	r1, #96	@ 0x60
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f93f 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001f94:	e01c      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f000 f8d6 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2140      	movs	r1, #64	@ 0x40
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f92f 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001fb4:	e00c      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f000 f926 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001fc6:	e003      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
      break;
 8001fcc:	e000      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3a      	ldr	r2, [pc, #232]	@ (8002138 <TIM_Base_SetConfig+0xfc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00f      	beq.n	8002074 <TIM_Base_SetConfig+0x38>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800205a:	d00b      	beq.n	8002074 <TIM_Base_SetConfig+0x38>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a37      	ldr	r2, [pc, #220]	@ (800213c <TIM_Base_SetConfig+0x100>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <TIM_Base_SetConfig+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a36      	ldr	r2, [pc, #216]	@ (8002140 <TIM_Base_SetConfig+0x104>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a35      	ldr	r2, [pc, #212]	@ (8002144 <TIM_Base_SetConfig+0x108>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d108      	bne.n	8002086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800207a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2b      	ldr	r2, [pc, #172]	@ (8002138 <TIM_Base_SetConfig+0xfc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01b      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002094:	d017      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a28      	ldr	r2, [pc, #160]	@ (800213c <TIM_Base_SetConfig+0x100>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <TIM_Base_SetConfig+0x104>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00f      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a26      	ldr	r2, [pc, #152]	@ (8002144 <TIM_Base_SetConfig+0x108>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00b      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a25      	ldr	r2, [pc, #148]	@ (8002148 <TIM_Base_SetConfig+0x10c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a24      	ldr	r2, [pc, #144]	@ (800214c <TIM_Base_SetConfig+0x110>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d003      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a23      	ldr	r2, [pc, #140]	@ (8002150 <TIM_Base_SetConfig+0x114>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002138 <TIM_Base_SetConfig+0xfc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d103      	bne.n	800210c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d105      	bne.n	800212a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f023 0201 	bic.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
  }
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40014000 	.word	0x40014000
 800214c:	40014400 	.word	0x40014400
 8002150:	40014800 	.word	0x40014800

08002154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f023 0201 	bic.w	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800217e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 030a 	bic.w	r3, r3, #10
 8002190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b087      	sub	sp, #28
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f023 0210 	bic.w	r2, r3, #16
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80021dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	031b      	lsls	r3, r3, #12
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80021ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	621a      	str	r2, [r3, #32]
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	f043 0307 	orr.w	r3, r3, #7
 8002234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	021a      	lsls	r2, r3, #8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	431a      	orrs	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800229c:	2302      	movs	r3, #2
 800229e:	e050      	b.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ec:	d013      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a18      	ldr	r2, [pc, #96]	@ (8002354 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a16      	ldr	r2, [pc, #88]	@ (8002358 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a15      	ldr	r2, [pc, #84]	@ (800235c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a13      	ldr	r2, [pc, #76]	@ (8002360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10c      	bne.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800231c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4313      	orrs	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800
 800235c:	40000c00 	.word	0x40000c00
 8002360:	40014000 	.word	0x40014000

08002364 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e042      	b.n	8002424 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fb20 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	@ 0x24
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fcbb 	bl	8002d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b20      	cmp	r3, #32
 8002444:	d121      	bne.n	800248a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_UART_Transmit_IT+0x26>
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e01a      	b.n	800248c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2221      	movs	r2, #33	@ 0x21
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002484:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0ba      	sub	sp, #232	@ 0xe8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10f      	bne.n	80024fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_UART_IRQHandler+0x66>
 80024ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fb69 	bl	8002bce <UART_Receive_IT>
      return;
 80024fc:	e25b      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80de 	beq.w	80026c4 <HAL_UART_IRQHandler+0x22c>
 8002508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002518:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80d1 	beq.w	80026c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_UART_IRQHandler+0xae>
 800252e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_UART_IRQHandler+0xd2>
 8002552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f043 0202 	orr.w	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_UART_IRQHandler+0xf6>
 8002576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f043 0204 	orr.w	r2, r3, #4
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800258e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d011      	beq.n	80025be <HAL_UART_IRQHandler+0x126>
 800259a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f043 0208 	orr.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 81f2 	beq.w	80029ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_UART_IRQHandler+0x14e>
 80025d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 faf4 	bl	8002bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f0:	2b40      	cmp	r3, #64	@ 0x40
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <HAL_UART_IRQHandler+0x17a>
 800260a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d04f      	beq.n	80026b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f9fc 	bl	8002a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002622:	2b40      	cmp	r3, #64	@ 0x40
 8002624:	d141      	bne.n	80026aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3314      	adds	r3, #20
 800262c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800263c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3314      	adds	r3, #20
 800264e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002652:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800265e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800266a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1d9      	bne.n	8002626 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d013      	beq.n	80026a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267e:	4a7e      	ldr	r2, [pc, #504]	@ (8002878 <HAL_UART_IRQHandler+0x3e0>)
 8002680:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fc47 	bl	8000f1a <HAL_DMA_Abort_IT>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800269c:	4610      	mov	r0, r2
 800269e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	e00e      	b.n	80026c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f99e 	bl	80029e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a8:	e00a      	b.n	80026c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f99a 	bl	80029e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b0:	e006      	b.n	80026c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f996 	bl	80029e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026be:	e175      	b.n	80029ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	bf00      	nop
    return;
 80026c2:	e173      	b.n	80029ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	f040 814f 	bne.w	800296c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8148 	beq.w	800296c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8141 	beq.w	800296c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270a:	2b40      	cmp	r3, #64	@ 0x40
 800270c:	f040 80b6 	bne.w	800287c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800271c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8145 	beq.w	80029b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800272a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800272e:	429a      	cmp	r2, r3
 8002730:	f080 813e 	bcs.w	80029b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800273a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002746:	f000 8088 	beq.w	800285a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002758:	e853 3f00 	ldrex	r3, [r3]
 800275c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002776:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800277a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002782:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002786:	e841 2300 	strex	r3, r2, [r1]
 800278a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800278e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1d9      	bne.n	800274a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3314      	adds	r3, #20
 800279c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a0:	e853 3f00 	ldrex	r3, [r3]
 80027a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3314      	adds	r3, #20
 80027b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e1      	bne.n	8002796 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3314      	adds	r3, #20
 80027d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3314      	adds	r3, #20
 80027f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80027f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e3      	bne.n	80027d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800282a:	f023 0310 	bic.w	r3, r3, #16
 800282e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800283c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800283e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002842:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002844:	e841 2300 	strex	r3, r2, [r1]
 8002848:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800284a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e3      	bne.n	8002818 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe faf0 	bl	8000e3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002868:	b29b      	uxth	r3, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	b29b      	uxth	r3, r3
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f8c1 	bl	80029f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002876:	e09b      	b.n	80029b0 <HAL_UART_IRQHandler+0x518>
 8002878:	08002ad7 	.word	0x08002ad7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002884:	b29b      	uxth	r3, r3
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 808e 	beq.w	80029b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8089 	beq.w	80029b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80028c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80028c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e3      	bne.n	80028a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3314      	adds	r3, #20
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	e853 3f00 	ldrex	r3, [r3]
 80028e8:	623b      	str	r3, [r7, #32]
   return(result);
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3314      	adds	r3, #20
 80028fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e3      	bne.n	80028da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	e853 3f00 	ldrex	r3, [r3]
 800292e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0310 	bic.w	r3, r3, #16
 8002936:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002944:	61fa      	str	r2, [r7, #28]
 8002946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002948:	69b9      	ldr	r1, [r7, #24]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	e841 2300 	strex	r3, r2, [r1]
 8002950:	617b      	str	r3, [r7, #20]
   return(result);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e3      	bne.n	8002920 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800295e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f847 	bl	80029f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800296a:	e023      	b.n	80029b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800296c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <HAL_UART_IRQHandler+0x4f4>
 8002978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800297c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8ba 	bl	8002afe <UART_Transmit_IT>
    return;
 800298a:	e014      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800298c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <HAL_UART_IRQHandler+0x51e>
 8002998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f8fa 	bl	8002b9e <UART_EndTransmit_IT>
    return;
 80029aa:	e004      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80029ac:	bf00      	nop
 80029ae:	e002      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029b4:	bf00      	nop
  }
}
 80029b6:	37e8      	adds	r7, #232	@ 0xe8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b095      	sub	sp, #84	@ 0x54
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a38:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e5      	bne.n	8002a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d119      	bne.n	8002abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f023 0310 	bic.w	r3, r3, #16
 8002a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aa8:	61ba      	str	r2, [r7, #24]
 8002aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	6979      	ldr	r1, [r7, #20]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	e841 2300 	strex	r3, r2, [r1]
 8002ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e5      	bne.n	8002a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aca:	bf00      	nop
 8002acc:	3754      	adds	r7, #84	@ 0x54
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7ff ff77 	bl	80029e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b21      	cmp	r3, #33	@ 0x21
 8002b10:	d13e      	bne.n	8002b90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1a:	d114      	bne.n	8002b46 <UART_Transmit_IT+0x48>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d110      	bne.n	8002b46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	1c9a      	adds	r2, r3, #2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	621a      	str	r2, [r3, #32]
 8002b44:	e008      	b.n	8002b58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	1c59      	adds	r1, r3, #1
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6211      	str	r1, [r2, #32]
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4619      	mov	r1, r3
 8002b66:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10f      	bne.n	8002b8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fefc 	bl	80029bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08c      	sub	sp, #48	@ 0x30
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b22      	cmp	r3, #34	@ 0x22
 8002be0:	f040 80ae 	bne.w	8002d40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bec:	d117      	bne.n	8002c1e <UART_Receive_IT+0x50>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d113      	bne.n	8002c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	1c9a      	adds	r2, r3, #2
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c1c:	e026      	b.n	8002c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c30:	d007      	beq.n	8002c42 <UART_Receive_IT+0x74>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <UART_Receive_IT+0x82>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e008      	b.n	8002c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d15d      	bne.n	8002d3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0220 	bic.w	r2, r2, #32
 8002c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d135      	bne.n	8002d32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	e853 3f00 	ldrex	r3, [r3]
 8002cda:	613b      	str	r3, [r7, #16]
   return(result);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f023 0310 	bic.w	r3, r3, #16
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cec:	623a      	str	r2, [r7, #32]
 8002cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	69f9      	ldr	r1, [r7, #28]
 8002cf2:	6a3a      	ldr	r2, [r7, #32]
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e5      	bne.n	8002ccc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d10a      	bne.n	8002d24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fe64 	bl	80029f8 <HAL_UARTEx_RxEventCallback>
 8002d30:	e002      	b.n	8002d38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fe4c 	bl	80029d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e002      	b.n	8002d42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3730      	adds	r7, #48	@ 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d50:	b0c0      	sub	sp, #256	@ 0x100
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	68d9      	ldr	r1, [r3, #12]
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	ea40 0301 	orr.w	r3, r0, r1
 8002d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002da4:	f021 010c 	bic.w	r1, r1, #12
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002db2:	430b      	orrs	r3, r1
 8002db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc6:	6999      	ldr	r1, [r3, #24]
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	ea40 0301 	orr.w	r3, r0, r1
 8002dd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b8f      	ldr	r3, [pc, #572]	@ (8003018 <UART_SetConfig+0x2cc>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d005      	beq.n	8002dec <UART_SetConfig+0xa0>
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b8d      	ldr	r3, [pc, #564]	@ (800301c <UART_SetConfig+0x2d0>)
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d104      	bne.n	8002df6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dec:	f7fe fe80 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 8002df0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002df4:	e003      	b.n	8002dfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002df6:	f7fe fe67 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8002dfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e08:	f040 810c 	bne.w	8003024 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e1e:	4622      	mov	r2, r4
 8002e20:	462b      	mov	r3, r5
 8002e22:	1891      	adds	r1, r2, r2
 8002e24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e26:	415b      	adcs	r3, r3
 8002e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e2e:	4621      	mov	r1, r4
 8002e30:	eb12 0801 	adds.w	r8, r2, r1
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb43 0901 	adc.w	r9, r3, r1
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4e:	4690      	mov	r8, r2
 8002e50:	4699      	mov	r9, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	eb18 0303 	adds.w	r3, r8, r3
 8002e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e5c:	462b      	mov	r3, r5
 8002e5e:	eb49 0303 	adc.w	r3, r9, r3
 8002e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	18db      	adds	r3, r3, r3
 8002e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e80:	4613      	mov	r3, r2
 8002e82:	eb42 0303 	adc.w	r3, r2, r3
 8002e86:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e90:	f7fd f9fe 	bl	8000290 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4b61      	ldr	r3, [pc, #388]	@ (8003020 <UART_SetConfig+0x2d4>)
 8002e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	011c      	lsls	r4, r3, #4
 8002ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002eac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002eb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002eb4:	4642      	mov	r2, r8
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	1891      	adds	r1, r2, r2
 8002eba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ebc:	415b      	adcs	r3, r3
 8002ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	eb12 0a01 	adds.w	sl, r2, r1
 8002eca:	4649      	mov	r1, r9
 8002ecc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002edc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee4:	4692      	mov	sl, r2
 8002ee6:	469b      	mov	fp, r3
 8002ee8:	4643      	mov	r3, r8
 8002eea:	eb1a 0303 	adds.w	r3, sl, r3
 8002eee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f10:	460b      	mov	r3, r1
 8002f12:	18db      	adds	r3, r3, r3
 8002f14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f16:	4613      	mov	r3, r2
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f26:	f7fd f9b3 	bl	8000290 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4b3b      	ldr	r3, [pc, #236]	@ (8003020 <UART_SetConfig+0x2d4>)
 8002f32:	fba3 2301 	umull	r2, r3, r3, r1
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2264      	movs	r2, #100	@ 0x64
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	1acb      	subs	r3, r1, r3
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f46:	4b36      	ldr	r3, [pc, #216]	@ (8003020 <UART_SetConfig+0x2d4>)
 8002f48:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f54:	441c      	add	r4, r3
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f70:	415b      	adcs	r3, r3
 8002f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f78:	4641      	mov	r1, r8
 8002f7a:	1851      	adds	r1, r2, r1
 8002f7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f7e:	4649      	mov	r1, r9
 8002f80:	414b      	adcs	r3, r1
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f90:	4659      	mov	r1, fp
 8002f92:	00cb      	lsls	r3, r1, #3
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	00ca      	lsls	r2, r1, #3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fac:	464b      	mov	r3, r9
 8002fae:	460a      	mov	r2, r1
 8002fb0:	eb42 0303 	adc.w	r3, r2, r3
 8002fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fcc:	460b      	mov	r3, r1
 8002fce:	18db      	adds	r3, r3, r3
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	eb42 0303 	adc.w	r3, r2, r3
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002fe2:	f7fd f955 	bl	8000290 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <UART_SetConfig+0x2d4>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	@ 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	3332      	adds	r3, #50	@ 0x32
 8002ffe:	4a08      	ldr	r2, [pc, #32]	@ (8003020 <UART_SetConfig+0x2d4>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 0207 	and.w	r2, r3, #7
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4422      	add	r2, r4
 8003012:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003014:	e106      	b.n	8003224 <UART_SetConfig+0x4d8>
 8003016:	bf00      	nop
 8003018:	40011000 	.word	0x40011000
 800301c:	40011400 	.word	0x40011400
 8003020:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800302e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003032:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003036:	4642      	mov	r2, r8
 8003038:	464b      	mov	r3, r9
 800303a:	1891      	adds	r1, r2, r2
 800303c:	6239      	str	r1, [r7, #32]
 800303e:	415b      	adcs	r3, r3
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
 8003042:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003046:	4641      	mov	r1, r8
 8003048:	1854      	adds	r4, r2, r1
 800304a:	4649      	mov	r1, r9
 800304c:	eb43 0501 	adc.w	r5, r3, r1
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	00eb      	lsls	r3, r5, #3
 800305a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305e:	00e2      	lsls	r2, r4, #3
 8003060:	4614      	mov	r4, r2
 8003062:	461d      	mov	r5, r3
 8003064:	4643      	mov	r3, r8
 8003066:	18e3      	adds	r3, r4, r3
 8003068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800306c:	464b      	mov	r3, r9
 800306e:	eb45 0303 	adc.w	r3, r5, r3
 8003072:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003082:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003092:	4629      	mov	r1, r5
 8003094:	008b      	lsls	r3, r1, #2
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800309c:	4621      	mov	r1, r4
 800309e:	008a      	lsls	r2, r1, #2
 80030a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030a4:	f7fd f8f4 	bl	8000290 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4b60      	ldr	r3, [pc, #384]	@ (8003230 <UART_SetConfig+0x4e4>)
 80030ae:	fba3 2302 	umull	r2, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	011c      	lsls	r4, r3, #4
 80030b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	1891      	adds	r1, r2, r2
 80030ce:	61b9      	str	r1, [r7, #24]
 80030d0:	415b      	adcs	r3, r3
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d8:	4641      	mov	r1, r8
 80030da:	1851      	adds	r1, r2, r1
 80030dc:	6139      	str	r1, [r7, #16]
 80030de:	4649      	mov	r1, r9
 80030e0:	414b      	adcs	r3, r1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f0:	4659      	mov	r1, fp
 80030f2:	00cb      	lsls	r3, r1, #3
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fa:	4651      	mov	r1, sl
 80030fc:	00ca      	lsls	r2, r1, #3
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	4603      	mov	r3, r0
 8003104:	4642      	mov	r2, r8
 8003106:	189b      	adds	r3, r3, r2
 8003108:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800310c:	464b      	mov	r3, r9
 800310e:	460a      	mov	r2, r1
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003122:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003130:	4649      	mov	r1, r9
 8003132:	008b      	lsls	r3, r1, #2
 8003134:	4641      	mov	r1, r8
 8003136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800313a:	4641      	mov	r1, r8
 800313c:	008a      	lsls	r2, r1, #2
 800313e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003142:	f7fd f8a5 	bl	8000290 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4611      	mov	r1, r2
 800314c:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <UART_SetConfig+0x4e4>)
 800314e:	fba3 2301 	umull	r2, r3, r3, r1
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2264      	movs	r2, #100	@ 0x64
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	1acb      	subs	r3, r1, r3
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	3332      	adds	r3, #50	@ 0x32
 8003160:	4a33      	ldr	r2, [pc, #204]	@ (8003230 <UART_SetConfig+0x4e4>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800316c:	441c      	add	r4, r3
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003172:	2200      	movs	r2, #0
 8003174:	673b      	str	r3, [r7, #112]	@ 0x70
 8003176:	677a      	str	r2, [r7, #116]	@ 0x74
 8003178:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	1891      	adds	r1, r2, r2
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	415b      	adcs	r3, r3
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800318c:	4641      	mov	r1, r8
 800318e:	1851      	adds	r1, r2, r1
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	4649      	mov	r1, r9
 8003194:	414b      	adcs	r3, r1
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031a4:	4659      	mov	r1, fp
 80031a6:	00cb      	lsls	r3, r1, #3
 80031a8:	4651      	mov	r1, sl
 80031aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ae:	4651      	mov	r1, sl
 80031b0:	00ca      	lsls	r2, r1, #3
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	4642      	mov	r2, r8
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031be:	464b      	mov	r3, r9
 80031c0:	460a      	mov	r2, r1
 80031c2:	eb42 0303 	adc.w	r3, r2, r3
 80031c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80031d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031e0:	4649      	mov	r1, r9
 80031e2:	008b      	lsls	r3, r1, #2
 80031e4:	4641      	mov	r1, r8
 80031e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ea:	4641      	mov	r1, r8
 80031ec:	008a      	lsls	r2, r1, #2
 80031ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031f2:	f7fd f84d 	bl	8000290 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <UART_SetConfig+0x4e4>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2164      	movs	r1, #100	@ 0x64
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	3332      	adds	r3, #50	@ 0x32
 800320e:	4a08      	ldr	r2, [pc, #32]	@ (8003230 <UART_SetConfig+0x4e4>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4422      	add	r2, r4
 8003222:	609a      	str	r2, [r3, #8]
}
 8003224:	bf00      	nop
 8003226:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800322a:	46bd      	mov	sp, r7
 800322c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003230:	51eb851f 	.word	0x51eb851f

08003234 <siprintf>:
 8003234:	b40e      	push	{r1, r2, r3}
 8003236:	b500      	push	{lr}
 8003238:	b09c      	sub	sp, #112	@ 0x70
 800323a:	ab1d      	add	r3, sp, #116	@ 0x74
 800323c:	9002      	str	r0, [sp, #8]
 800323e:	9006      	str	r0, [sp, #24]
 8003240:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003244:	4809      	ldr	r0, [pc, #36]	@ (800326c <siprintf+0x38>)
 8003246:	9107      	str	r1, [sp, #28]
 8003248:	9104      	str	r1, [sp, #16]
 800324a:	4909      	ldr	r1, [pc, #36]	@ (8003270 <siprintf+0x3c>)
 800324c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003250:	9105      	str	r1, [sp, #20]
 8003252:	6800      	ldr	r0, [r0, #0]
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	a902      	add	r1, sp, #8
 8003258:	f000 f89c 	bl	8003394 <_svfiprintf_r>
 800325c:	9b02      	ldr	r3, [sp, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	b01c      	add	sp, #112	@ 0x70
 8003264:	f85d eb04 	ldr.w	lr, [sp], #4
 8003268:	b003      	add	sp, #12
 800326a:	4770      	bx	lr
 800326c:	2000000c 	.word	0x2000000c
 8003270:	ffff0208 	.word	0xffff0208

08003274 <memset>:
 8003274:	4402      	add	r2, r0
 8003276:	4603      	mov	r3, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__errno>:
 8003284:	4b01      	ldr	r3, [pc, #4]	@ (800328c <__errno+0x8>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	@ (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	@ (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	@ (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	@ (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 fc66 	bl	8003b74 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003c00 	.word	0x08003c00
 80032cc:	08003c00 	.word	0x08003c00
 80032d0:	08003c00 	.word	0x08003c00
 80032d4:	08003c04 	.word	0x08003c04

080032d8 <__retarget_lock_acquire_recursive>:
 80032d8:	4770      	bx	lr

080032da <__retarget_lock_release_recursive>:
 80032da:	4770      	bx	lr

080032dc <__ssputs_r>:
 80032dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	688e      	ldr	r6, [r1, #8]
 80032e2:	461f      	mov	r7, r3
 80032e4:	42be      	cmp	r6, r7
 80032e6:	680b      	ldr	r3, [r1, #0]
 80032e8:	4682      	mov	sl, r0
 80032ea:	460c      	mov	r4, r1
 80032ec:	4690      	mov	r8, r2
 80032ee:	d82d      	bhi.n	800334c <__ssputs_r+0x70>
 80032f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80032f8:	d026      	beq.n	8003348 <__ssputs_r+0x6c>
 80032fa:	6965      	ldr	r5, [r4, #20]
 80032fc:	6909      	ldr	r1, [r1, #16]
 80032fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003302:	eba3 0901 	sub.w	r9, r3, r1
 8003306:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800330a:	1c7b      	adds	r3, r7, #1
 800330c:	444b      	add	r3, r9
 800330e:	106d      	asrs	r5, r5, #1
 8003310:	429d      	cmp	r5, r3
 8003312:	bf38      	it	cc
 8003314:	461d      	movcc	r5, r3
 8003316:	0553      	lsls	r3, r2, #21
 8003318:	d527      	bpl.n	800336a <__ssputs_r+0x8e>
 800331a:	4629      	mov	r1, r5
 800331c:	f000 f958 	bl	80035d0 <_malloc_r>
 8003320:	4606      	mov	r6, r0
 8003322:	b360      	cbz	r0, 800337e <__ssputs_r+0xa2>
 8003324:	6921      	ldr	r1, [r4, #16]
 8003326:	464a      	mov	r2, r9
 8003328:	f000 fbc4 	bl	8003ab4 <memcpy>
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003336:	81a3      	strh	r3, [r4, #12]
 8003338:	6126      	str	r6, [r4, #16]
 800333a:	6165      	str	r5, [r4, #20]
 800333c:	444e      	add	r6, r9
 800333e:	eba5 0509 	sub.w	r5, r5, r9
 8003342:	6026      	str	r6, [r4, #0]
 8003344:	60a5      	str	r5, [r4, #8]
 8003346:	463e      	mov	r6, r7
 8003348:	42be      	cmp	r6, r7
 800334a:	d900      	bls.n	800334e <__ssputs_r+0x72>
 800334c:	463e      	mov	r6, r7
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	4632      	mov	r2, r6
 8003352:	4641      	mov	r1, r8
 8003354:	f000 fb84 	bl	8003a60 <memmove>
 8003358:	68a3      	ldr	r3, [r4, #8]
 800335a:	1b9b      	subs	r3, r3, r6
 800335c:	60a3      	str	r3, [r4, #8]
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	4433      	add	r3, r6
 8003362:	6023      	str	r3, [r4, #0]
 8003364:	2000      	movs	r0, #0
 8003366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336a:	462a      	mov	r2, r5
 800336c:	f000 fb4a 	bl	8003a04 <_realloc_r>
 8003370:	4606      	mov	r6, r0
 8003372:	2800      	cmp	r0, #0
 8003374:	d1e0      	bne.n	8003338 <__ssputs_r+0x5c>
 8003376:	6921      	ldr	r1, [r4, #16]
 8003378:	4650      	mov	r0, sl
 800337a:	f000 fba9 	bl	8003ad0 <_free_r>
 800337e:	230c      	movs	r3, #12
 8003380:	f8ca 3000 	str.w	r3, [sl]
 8003384:	89a3      	ldrh	r3, [r4, #12]
 8003386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800338a:	81a3      	strh	r3, [r4, #12]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003390:	e7e9      	b.n	8003366 <__ssputs_r+0x8a>
	...

08003394 <_svfiprintf_r>:
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	4698      	mov	r8, r3
 800339a:	898b      	ldrh	r3, [r1, #12]
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	b09d      	sub	sp, #116	@ 0x74
 80033a0:	4607      	mov	r7, r0
 80033a2:	460d      	mov	r5, r1
 80033a4:	4614      	mov	r4, r2
 80033a6:	d510      	bpl.n	80033ca <_svfiprintf_r+0x36>
 80033a8:	690b      	ldr	r3, [r1, #16]
 80033aa:	b973      	cbnz	r3, 80033ca <_svfiprintf_r+0x36>
 80033ac:	2140      	movs	r1, #64	@ 0x40
 80033ae:	f000 f90f 	bl	80035d0 <_malloc_r>
 80033b2:	6028      	str	r0, [r5, #0]
 80033b4:	6128      	str	r0, [r5, #16]
 80033b6:	b930      	cbnz	r0, 80033c6 <_svfiprintf_r+0x32>
 80033b8:	230c      	movs	r3, #12
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033c0:	b01d      	add	sp, #116	@ 0x74
 80033c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c6:	2340      	movs	r3, #64	@ 0x40
 80033c8:	616b      	str	r3, [r5, #20]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80033ce:	2320      	movs	r3, #32
 80033d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80033d8:	2330      	movs	r3, #48	@ 0x30
 80033da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003578 <_svfiprintf_r+0x1e4>
 80033de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033e2:	f04f 0901 	mov.w	r9, #1
 80033e6:	4623      	mov	r3, r4
 80033e8:	469a      	mov	sl, r3
 80033ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ee:	b10a      	cbz	r2, 80033f4 <_svfiprintf_r+0x60>
 80033f0:	2a25      	cmp	r2, #37	@ 0x25
 80033f2:	d1f9      	bne.n	80033e8 <_svfiprintf_r+0x54>
 80033f4:	ebba 0b04 	subs.w	fp, sl, r4
 80033f8:	d00b      	beq.n	8003412 <_svfiprintf_r+0x7e>
 80033fa:	465b      	mov	r3, fp
 80033fc:	4622      	mov	r2, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	4638      	mov	r0, r7
 8003402:	f7ff ff6b 	bl	80032dc <__ssputs_r>
 8003406:	3001      	adds	r0, #1
 8003408:	f000 80a7 	beq.w	800355a <_svfiprintf_r+0x1c6>
 800340c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800340e:	445a      	add	r2, fp
 8003410:	9209      	str	r2, [sp, #36]	@ 0x24
 8003412:	f89a 3000 	ldrb.w	r3, [sl]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 809f 	beq.w	800355a <_svfiprintf_r+0x1c6>
 800341c:	2300      	movs	r3, #0
 800341e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003426:	f10a 0a01 	add.w	sl, sl, #1
 800342a:	9304      	str	r3, [sp, #16]
 800342c:	9307      	str	r3, [sp, #28]
 800342e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003432:	931a      	str	r3, [sp, #104]	@ 0x68
 8003434:	4654      	mov	r4, sl
 8003436:	2205      	movs	r2, #5
 8003438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800343c:	484e      	ldr	r0, [pc, #312]	@ (8003578 <_svfiprintf_r+0x1e4>)
 800343e:	f7fc fed7 	bl	80001f0 <memchr>
 8003442:	9a04      	ldr	r2, [sp, #16]
 8003444:	b9d8      	cbnz	r0, 800347e <_svfiprintf_r+0xea>
 8003446:	06d0      	lsls	r0, r2, #27
 8003448:	bf44      	itt	mi
 800344a:	2320      	movmi	r3, #32
 800344c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003450:	0711      	lsls	r1, r2, #28
 8003452:	bf44      	itt	mi
 8003454:	232b      	movmi	r3, #43	@ 0x2b
 8003456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800345a:	f89a 3000 	ldrb.w	r3, [sl]
 800345e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003460:	d015      	beq.n	800348e <_svfiprintf_r+0xfa>
 8003462:	9a07      	ldr	r2, [sp, #28]
 8003464:	4654      	mov	r4, sl
 8003466:	2000      	movs	r0, #0
 8003468:	f04f 0c0a 	mov.w	ip, #10
 800346c:	4621      	mov	r1, r4
 800346e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003472:	3b30      	subs	r3, #48	@ 0x30
 8003474:	2b09      	cmp	r3, #9
 8003476:	d94b      	bls.n	8003510 <_svfiprintf_r+0x17c>
 8003478:	b1b0      	cbz	r0, 80034a8 <_svfiprintf_r+0x114>
 800347a:	9207      	str	r2, [sp, #28]
 800347c:	e014      	b.n	80034a8 <_svfiprintf_r+0x114>
 800347e:	eba0 0308 	sub.w	r3, r0, r8
 8003482:	fa09 f303 	lsl.w	r3, r9, r3
 8003486:	4313      	orrs	r3, r2
 8003488:	9304      	str	r3, [sp, #16]
 800348a:	46a2      	mov	sl, r4
 800348c:	e7d2      	b.n	8003434 <_svfiprintf_r+0xa0>
 800348e:	9b03      	ldr	r3, [sp, #12]
 8003490:	1d19      	adds	r1, r3, #4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	9103      	str	r1, [sp, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	bfbb      	ittet	lt
 800349a:	425b      	neglt	r3, r3
 800349c:	f042 0202 	orrlt.w	r2, r2, #2
 80034a0:	9307      	strge	r3, [sp, #28]
 80034a2:	9307      	strlt	r3, [sp, #28]
 80034a4:	bfb8      	it	lt
 80034a6:	9204      	strlt	r2, [sp, #16]
 80034a8:	7823      	ldrb	r3, [r4, #0]
 80034aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80034ac:	d10a      	bne.n	80034c4 <_svfiprintf_r+0x130>
 80034ae:	7863      	ldrb	r3, [r4, #1]
 80034b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80034b2:	d132      	bne.n	800351a <_svfiprintf_r+0x186>
 80034b4:	9b03      	ldr	r3, [sp, #12]
 80034b6:	1d1a      	adds	r2, r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	9203      	str	r2, [sp, #12]
 80034bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034c0:	3402      	adds	r4, #2
 80034c2:	9305      	str	r3, [sp, #20]
 80034c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003588 <_svfiprintf_r+0x1f4>
 80034c8:	7821      	ldrb	r1, [r4, #0]
 80034ca:	2203      	movs	r2, #3
 80034cc:	4650      	mov	r0, sl
 80034ce:	f7fc fe8f 	bl	80001f0 <memchr>
 80034d2:	b138      	cbz	r0, 80034e4 <_svfiprintf_r+0x150>
 80034d4:	9b04      	ldr	r3, [sp, #16]
 80034d6:	eba0 000a 	sub.w	r0, r0, sl
 80034da:	2240      	movs	r2, #64	@ 0x40
 80034dc:	4082      	lsls	r2, r0
 80034de:	4313      	orrs	r3, r2
 80034e0:	3401      	adds	r4, #1
 80034e2:	9304      	str	r3, [sp, #16]
 80034e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034e8:	4824      	ldr	r0, [pc, #144]	@ (800357c <_svfiprintf_r+0x1e8>)
 80034ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034ee:	2206      	movs	r2, #6
 80034f0:	f7fc fe7e 	bl	80001f0 <memchr>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d036      	beq.n	8003566 <_svfiprintf_r+0x1d2>
 80034f8:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <_svfiprintf_r+0x1ec>)
 80034fa:	bb1b      	cbnz	r3, 8003544 <_svfiprintf_r+0x1b0>
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	3307      	adds	r3, #7
 8003500:	f023 0307 	bic.w	r3, r3, #7
 8003504:	3308      	adds	r3, #8
 8003506:	9303      	str	r3, [sp, #12]
 8003508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800350a:	4433      	add	r3, r6
 800350c:	9309      	str	r3, [sp, #36]	@ 0x24
 800350e:	e76a      	b.n	80033e6 <_svfiprintf_r+0x52>
 8003510:	fb0c 3202 	mla	r2, ip, r2, r3
 8003514:	460c      	mov	r4, r1
 8003516:	2001      	movs	r0, #1
 8003518:	e7a8      	b.n	800346c <_svfiprintf_r+0xd8>
 800351a:	2300      	movs	r3, #0
 800351c:	3401      	adds	r4, #1
 800351e:	9305      	str	r3, [sp, #20]
 8003520:	4619      	mov	r1, r3
 8003522:	f04f 0c0a 	mov.w	ip, #10
 8003526:	4620      	mov	r0, r4
 8003528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800352c:	3a30      	subs	r2, #48	@ 0x30
 800352e:	2a09      	cmp	r2, #9
 8003530:	d903      	bls.n	800353a <_svfiprintf_r+0x1a6>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0c6      	beq.n	80034c4 <_svfiprintf_r+0x130>
 8003536:	9105      	str	r1, [sp, #20]
 8003538:	e7c4      	b.n	80034c4 <_svfiprintf_r+0x130>
 800353a:	fb0c 2101 	mla	r1, ip, r1, r2
 800353e:	4604      	mov	r4, r0
 8003540:	2301      	movs	r3, #1
 8003542:	e7f0      	b.n	8003526 <_svfiprintf_r+0x192>
 8003544:	ab03      	add	r3, sp, #12
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	462a      	mov	r2, r5
 800354a:	4b0e      	ldr	r3, [pc, #56]	@ (8003584 <_svfiprintf_r+0x1f0>)
 800354c:	a904      	add	r1, sp, #16
 800354e:	4638      	mov	r0, r7
 8003550:	f3af 8000 	nop.w
 8003554:	1c42      	adds	r2, r0, #1
 8003556:	4606      	mov	r6, r0
 8003558:	d1d6      	bne.n	8003508 <_svfiprintf_r+0x174>
 800355a:	89ab      	ldrh	r3, [r5, #12]
 800355c:	065b      	lsls	r3, r3, #25
 800355e:	f53f af2d 	bmi.w	80033bc <_svfiprintf_r+0x28>
 8003562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003564:	e72c      	b.n	80033c0 <_svfiprintf_r+0x2c>
 8003566:	ab03      	add	r3, sp, #12
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	462a      	mov	r2, r5
 800356c:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <_svfiprintf_r+0x1f0>)
 800356e:	a904      	add	r1, sp, #16
 8003570:	4638      	mov	r0, r7
 8003572:	f000 f91b 	bl	80037ac <_printf_i>
 8003576:	e7ed      	b.n	8003554 <_svfiprintf_r+0x1c0>
 8003578:	08003bc4 	.word	0x08003bc4
 800357c:	08003bce 	.word	0x08003bce
 8003580:	00000000 	.word	0x00000000
 8003584:	080032dd 	.word	0x080032dd
 8003588:	08003bca 	.word	0x08003bca

0800358c <sbrk_aligned>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	4e0f      	ldr	r6, [pc, #60]	@ (80035cc <sbrk_aligned+0x40>)
 8003590:	460c      	mov	r4, r1
 8003592:	6831      	ldr	r1, [r6, #0]
 8003594:	4605      	mov	r5, r0
 8003596:	b911      	cbnz	r1, 800359e <sbrk_aligned+0x12>
 8003598:	f000 fa7c 	bl	8003a94 <_sbrk_r>
 800359c:	6030      	str	r0, [r6, #0]
 800359e:	4621      	mov	r1, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 fa77 	bl	8003a94 <_sbrk_r>
 80035a6:	1c43      	adds	r3, r0, #1
 80035a8:	d103      	bne.n	80035b2 <sbrk_aligned+0x26>
 80035aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80035ae:	4620      	mov	r0, r4
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	1cc4      	adds	r4, r0, #3
 80035b4:	f024 0403 	bic.w	r4, r4, #3
 80035b8:	42a0      	cmp	r0, r4
 80035ba:	d0f8      	beq.n	80035ae <sbrk_aligned+0x22>
 80035bc:	1a21      	subs	r1, r4, r0
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 fa68 	bl	8003a94 <_sbrk_r>
 80035c4:	3001      	adds	r0, #1
 80035c6:	d1f2      	bne.n	80035ae <sbrk_aligned+0x22>
 80035c8:	e7ef      	b.n	80035aa <sbrk_aligned+0x1e>
 80035ca:	bf00      	nop
 80035cc:	20000250 	.word	0x20000250

080035d0 <_malloc_r>:
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	1ccd      	adds	r5, r1, #3
 80035d6:	f025 0503 	bic.w	r5, r5, #3
 80035da:	3508      	adds	r5, #8
 80035dc:	2d0c      	cmp	r5, #12
 80035de:	bf38      	it	cc
 80035e0:	250c      	movcc	r5, #12
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	4606      	mov	r6, r0
 80035e6:	db01      	blt.n	80035ec <_malloc_r+0x1c>
 80035e8:	42a9      	cmp	r1, r5
 80035ea:	d904      	bls.n	80035f6 <_malloc_r+0x26>
 80035ec:	230c      	movs	r3, #12
 80035ee:	6033      	str	r3, [r6, #0]
 80035f0:	2000      	movs	r0, #0
 80035f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036cc <_malloc_r+0xfc>
 80035fa:	f000 f9f7 	bl	80039ec <__malloc_lock>
 80035fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003602:	461c      	mov	r4, r3
 8003604:	bb44      	cbnz	r4, 8003658 <_malloc_r+0x88>
 8003606:	4629      	mov	r1, r5
 8003608:	4630      	mov	r0, r6
 800360a:	f7ff ffbf 	bl	800358c <sbrk_aligned>
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	4604      	mov	r4, r0
 8003612:	d158      	bne.n	80036c6 <_malloc_r+0xf6>
 8003614:	f8d8 4000 	ldr.w	r4, [r8]
 8003618:	4627      	mov	r7, r4
 800361a:	2f00      	cmp	r7, #0
 800361c:	d143      	bne.n	80036a6 <_malloc_r+0xd6>
 800361e:	2c00      	cmp	r4, #0
 8003620:	d04b      	beq.n	80036ba <_malloc_r+0xea>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	4639      	mov	r1, r7
 8003626:	4630      	mov	r0, r6
 8003628:	eb04 0903 	add.w	r9, r4, r3
 800362c:	f000 fa32 	bl	8003a94 <_sbrk_r>
 8003630:	4581      	cmp	r9, r0
 8003632:	d142      	bne.n	80036ba <_malloc_r+0xea>
 8003634:	6821      	ldr	r1, [r4, #0]
 8003636:	1a6d      	subs	r5, r5, r1
 8003638:	4629      	mov	r1, r5
 800363a:	4630      	mov	r0, r6
 800363c:	f7ff ffa6 	bl	800358c <sbrk_aligned>
 8003640:	3001      	adds	r0, #1
 8003642:	d03a      	beq.n	80036ba <_malloc_r+0xea>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	442b      	add	r3, r5
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	f8d8 3000 	ldr.w	r3, [r8]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	bb62      	cbnz	r2, 80036ac <_malloc_r+0xdc>
 8003652:	f8c8 7000 	str.w	r7, [r8]
 8003656:	e00f      	b.n	8003678 <_malloc_r+0xa8>
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	1b52      	subs	r2, r2, r5
 800365c:	d420      	bmi.n	80036a0 <_malloc_r+0xd0>
 800365e:	2a0b      	cmp	r2, #11
 8003660:	d917      	bls.n	8003692 <_malloc_r+0xc2>
 8003662:	1961      	adds	r1, r4, r5
 8003664:	42a3      	cmp	r3, r4
 8003666:	6025      	str	r5, [r4, #0]
 8003668:	bf18      	it	ne
 800366a:	6059      	strne	r1, [r3, #4]
 800366c:	6863      	ldr	r3, [r4, #4]
 800366e:	bf08      	it	eq
 8003670:	f8c8 1000 	streq.w	r1, [r8]
 8003674:	5162      	str	r2, [r4, r5]
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	4630      	mov	r0, r6
 800367a:	f000 f9bd 	bl	80039f8 <__malloc_unlock>
 800367e:	f104 000b 	add.w	r0, r4, #11
 8003682:	1d23      	adds	r3, r4, #4
 8003684:	f020 0007 	bic.w	r0, r0, #7
 8003688:	1ac2      	subs	r2, r0, r3
 800368a:	bf1c      	itt	ne
 800368c:	1a1b      	subne	r3, r3, r0
 800368e:	50a3      	strne	r3, [r4, r2]
 8003690:	e7af      	b.n	80035f2 <_malloc_r+0x22>
 8003692:	6862      	ldr	r2, [r4, #4]
 8003694:	42a3      	cmp	r3, r4
 8003696:	bf0c      	ite	eq
 8003698:	f8c8 2000 	streq.w	r2, [r8]
 800369c:	605a      	strne	r2, [r3, #4]
 800369e:	e7eb      	b.n	8003678 <_malloc_r+0xa8>
 80036a0:	4623      	mov	r3, r4
 80036a2:	6864      	ldr	r4, [r4, #4]
 80036a4:	e7ae      	b.n	8003604 <_malloc_r+0x34>
 80036a6:	463c      	mov	r4, r7
 80036a8:	687f      	ldr	r7, [r7, #4]
 80036aa:	e7b6      	b.n	800361a <_malloc_r+0x4a>
 80036ac:	461a      	mov	r2, r3
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	d1fb      	bne.n	80036ac <_malloc_r+0xdc>
 80036b4:	2300      	movs	r3, #0
 80036b6:	6053      	str	r3, [r2, #4]
 80036b8:	e7de      	b.n	8003678 <_malloc_r+0xa8>
 80036ba:	230c      	movs	r3, #12
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	4630      	mov	r0, r6
 80036c0:	f000 f99a 	bl	80039f8 <__malloc_unlock>
 80036c4:	e794      	b.n	80035f0 <_malloc_r+0x20>
 80036c6:	6005      	str	r5, [r0, #0]
 80036c8:	e7d6      	b.n	8003678 <_malloc_r+0xa8>
 80036ca:	bf00      	nop
 80036cc:	20000254 	.word	0x20000254

080036d0 <_printf_common>:
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	4616      	mov	r6, r2
 80036d6:	4698      	mov	r8, r3
 80036d8:	688a      	ldr	r2, [r1, #8]
 80036da:	690b      	ldr	r3, [r1, #16]
 80036dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036e0:	4293      	cmp	r3, r2
 80036e2:	bfb8      	it	lt
 80036e4:	4613      	movlt	r3, r2
 80036e6:	6033      	str	r3, [r6, #0]
 80036e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036ec:	4607      	mov	r7, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	b10a      	cbz	r2, 80036f6 <_printf_common+0x26>
 80036f2:	3301      	adds	r3, #1
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	0699      	lsls	r1, r3, #26
 80036fa:	bf42      	ittt	mi
 80036fc:	6833      	ldrmi	r3, [r6, #0]
 80036fe:	3302      	addmi	r3, #2
 8003700:	6033      	strmi	r3, [r6, #0]
 8003702:	6825      	ldr	r5, [r4, #0]
 8003704:	f015 0506 	ands.w	r5, r5, #6
 8003708:	d106      	bne.n	8003718 <_printf_common+0x48>
 800370a:	f104 0a19 	add.w	sl, r4, #25
 800370e:	68e3      	ldr	r3, [r4, #12]
 8003710:	6832      	ldr	r2, [r6, #0]
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	42ab      	cmp	r3, r5
 8003716:	dc26      	bgt.n	8003766 <_printf_common+0x96>
 8003718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	3b00      	subs	r3, #0
 8003720:	bf18      	it	ne
 8003722:	2301      	movne	r3, #1
 8003724:	0692      	lsls	r2, r2, #26
 8003726:	d42b      	bmi.n	8003780 <_printf_common+0xb0>
 8003728:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800372c:	4641      	mov	r1, r8
 800372e:	4638      	mov	r0, r7
 8003730:	47c8      	blx	r9
 8003732:	3001      	adds	r0, #1
 8003734:	d01e      	beq.n	8003774 <_printf_common+0xa4>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	6922      	ldr	r2, [r4, #16]
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf02      	ittt	eq
 8003742:	68e5      	ldreq	r5, [r4, #12]
 8003744:	6833      	ldreq	r3, [r6, #0]
 8003746:	1aed      	subeq	r5, r5, r3
 8003748:	68a3      	ldr	r3, [r4, #8]
 800374a:	bf0c      	ite	eq
 800374c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003750:	2500      	movne	r5, #0
 8003752:	4293      	cmp	r3, r2
 8003754:	bfc4      	itt	gt
 8003756:	1a9b      	subgt	r3, r3, r2
 8003758:	18ed      	addgt	r5, r5, r3
 800375a:	2600      	movs	r6, #0
 800375c:	341a      	adds	r4, #26
 800375e:	42b5      	cmp	r5, r6
 8003760:	d11a      	bne.n	8003798 <_printf_common+0xc8>
 8003762:	2000      	movs	r0, #0
 8003764:	e008      	b.n	8003778 <_printf_common+0xa8>
 8003766:	2301      	movs	r3, #1
 8003768:	4652      	mov	r2, sl
 800376a:	4641      	mov	r1, r8
 800376c:	4638      	mov	r0, r7
 800376e:	47c8      	blx	r9
 8003770:	3001      	adds	r0, #1
 8003772:	d103      	bne.n	800377c <_printf_common+0xac>
 8003774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377c:	3501      	adds	r5, #1
 800377e:	e7c6      	b.n	800370e <_printf_common+0x3e>
 8003780:	18e1      	adds	r1, r4, r3
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	2030      	movs	r0, #48	@ 0x30
 8003786:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800378a:	4422      	add	r2, r4
 800378c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003790:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003794:	3302      	adds	r3, #2
 8003796:	e7c7      	b.n	8003728 <_printf_common+0x58>
 8003798:	2301      	movs	r3, #1
 800379a:	4622      	mov	r2, r4
 800379c:	4641      	mov	r1, r8
 800379e:	4638      	mov	r0, r7
 80037a0:	47c8      	blx	r9
 80037a2:	3001      	adds	r0, #1
 80037a4:	d0e6      	beq.n	8003774 <_printf_common+0xa4>
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7d9      	b.n	800375e <_printf_common+0x8e>
	...

080037ac <_printf_i>:
 80037ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b0:	7e0f      	ldrb	r7, [r1, #24]
 80037b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037b4:	2f78      	cmp	r7, #120	@ 0x78
 80037b6:	4691      	mov	r9, r2
 80037b8:	4680      	mov	r8, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	469a      	mov	sl, r3
 80037be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037c2:	d807      	bhi.n	80037d4 <_printf_i+0x28>
 80037c4:	2f62      	cmp	r7, #98	@ 0x62
 80037c6:	d80a      	bhi.n	80037de <_printf_i+0x32>
 80037c8:	2f00      	cmp	r7, #0
 80037ca:	f000 80d2 	beq.w	8003972 <_printf_i+0x1c6>
 80037ce:	2f58      	cmp	r7, #88	@ 0x58
 80037d0:	f000 80b9 	beq.w	8003946 <_printf_i+0x19a>
 80037d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037dc:	e03a      	b.n	8003854 <_printf_i+0xa8>
 80037de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037e2:	2b15      	cmp	r3, #21
 80037e4:	d8f6      	bhi.n	80037d4 <_printf_i+0x28>
 80037e6:	a101      	add	r1, pc, #4	@ (adr r1, 80037ec <_printf_i+0x40>)
 80037e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037ec:	08003845 	.word	0x08003845
 80037f0:	08003859 	.word	0x08003859
 80037f4:	080037d5 	.word	0x080037d5
 80037f8:	080037d5 	.word	0x080037d5
 80037fc:	080037d5 	.word	0x080037d5
 8003800:	080037d5 	.word	0x080037d5
 8003804:	08003859 	.word	0x08003859
 8003808:	080037d5 	.word	0x080037d5
 800380c:	080037d5 	.word	0x080037d5
 8003810:	080037d5 	.word	0x080037d5
 8003814:	080037d5 	.word	0x080037d5
 8003818:	08003959 	.word	0x08003959
 800381c:	08003883 	.word	0x08003883
 8003820:	08003913 	.word	0x08003913
 8003824:	080037d5 	.word	0x080037d5
 8003828:	080037d5 	.word	0x080037d5
 800382c:	0800397b 	.word	0x0800397b
 8003830:	080037d5 	.word	0x080037d5
 8003834:	08003883 	.word	0x08003883
 8003838:	080037d5 	.word	0x080037d5
 800383c:	080037d5 	.word	0x080037d5
 8003840:	0800391b 	.word	0x0800391b
 8003844:	6833      	ldr	r3, [r6, #0]
 8003846:	1d1a      	adds	r2, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6032      	str	r2, [r6, #0]
 800384c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003850:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003854:	2301      	movs	r3, #1
 8003856:	e09d      	b.n	8003994 <_printf_i+0x1e8>
 8003858:	6833      	ldr	r3, [r6, #0]
 800385a:	6820      	ldr	r0, [r4, #0]
 800385c:	1d19      	adds	r1, r3, #4
 800385e:	6031      	str	r1, [r6, #0]
 8003860:	0606      	lsls	r6, r0, #24
 8003862:	d501      	bpl.n	8003868 <_printf_i+0xbc>
 8003864:	681d      	ldr	r5, [r3, #0]
 8003866:	e003      	b.n	8003870 <_printf_i+0xc4>
 8003868:	0645      	lsls	r5, r0, #25
 800386a:	d5fb      	bpl.n	8003864 <_printf_i+0xb8>
 800386c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003870:	2d00      	cmp	r5, #0
 8003872:	da03      	bge.n	800387c <_printf_i+0xd0>
 8003874:	232d      	movs	r3, #45	@ 0x2d
 8003876:	426d      	negs	r5, r5
 8003878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800387c:	4859      	ldr	r0, [pc, #356]	@ (80039e4 <_printf_i+0x238>)
 800387e:	230a      	movs	r3, #10
 8003880:	e011      	b.n	80038a6 <_printf_i+0xfa>
 8003882:	6821      	ldr	r1, [r4, #0]
 8003884:	6833      	ldr	r3, [r6, #0]
 8003886:	0608      	lsls	r0, r1, #24
 8003888:	f853 5b04 	ldr.w	r5, [r3], #4
 800388c:	d402      	bmi.n	8003894 <_printf_i+0xe8>
 800388e:	0649      	lsls	r1, r1, #25
 8003890:	bf48      	it	mi
 8003892:	b2ad      	uxthmi	r5, r5
 8003894:	2f6f      	cmp	r7, #111	@ 0x6f
 8003896:	4853      	ldr	r0, [pc, #332]	@ (80039e4 <_printf_i+0x238>)
 8003898:	6033      	str	r3, [r6, #0]
 800389a:	bf14      	ite	ne
 800389c:	230a      	movne	r3, #10
 800389e:	2308      	moveq	r3, #8
 80038a0:	2100      	movs	r1, #0
 80038a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038a6:	6866      	ldr	r6, [r4, #4]
 80038a8:	60a6      	str	r6, [r4, #8]
 80038aa:	2e00      	cmp	r6, #0
 80038ac:	bfa2      	ittt	ge
 80038ae:	6821      	ldrge	r1, [r4, #0]
 80038b0:	f021 0104 	bicge.w	r1, r1, #4
 80038b4:	6021      	strge	r1, [r4, #0]
 80038b6:	b90d      	cbnz	r5, 80038bc <_printf_i+0x110>
 80038b8:	2e00      	cmp	r6, #0
 80038ba:	d04b      	beq.n	8003954 <_printf_i+0x1a8>
 80038bc:	4616      	mov	r6, r2
 80038be:	fbb5 f1f3 	udiv	r1, r5, r3
 80038c2:	fb03 5711 	mls	r7, r3, r1, r5
 80038c6:	5dc7      	ldrb	r7, [r0, r7]
 80038c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038cc:	462f      	mov	r7, r5
 80038ce:	42bb      	cmp	r3, r7
 80038d0:	460d      	mov	r5, r1
 80038d2:	d9f4      	bls.n	80038be <_printf_i+0x112>
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d10b      	bne.n	80038f0 <_printf_i+0x144>
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	07df      	lsls	r7, r3, #31
 80038dc:	d508      	bpl.n	80038f0 <_printf_i+0x144>
 80038de:	6923      	ldr	r3, [r4, #16]
 80038e0:	6861      	ldr	r1, [r4, #4]
 80038e2:	4299      	cmp	r1, r3
 80038e4:	bfde      	ittt	le
 80038e6:	2330      	movle	r3, #48	@ 0x30
 80038e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80038f0:	1b92      	subs	r2, r2, r6
 80038f2:	6122      	str	r2, [r4, #16]
 80038f4:	f8cd a000 	str.w	sl, [sp]
 80038f8:	464b      	mov	r3, r9
 80038fa:	aa03      	add	r2, sp, #12
 80038fc:	4621      	mov	r1, r4
 80038fe:	4640      	mov	r0, r8
 8003900:	f7ff fee6 	bl	80036d0 <_printf_common>
 8003904:	3001      	adds	r0, #1
 8003906:	d14a      	bne.n	800399e <_printf_i+0x1f2>
 8003908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800390c:	b004      	add	sp, #16
 800390e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	f043 0320 	orr.w	r3, r3, #32
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	4833      	ldr	r0, [pc, #204]	@ (80039e8 <_printf_i+0x23c>)
 800391c:	2778      	movs	r7, #120	@ 0x78
 800391e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	6831      	ldr	r1, [r6, #0]
 8003926:	061f      	lsls	r7, r3, #24
 8003928:	f851 5b04 	ldr.w	r5, [r1], #4
 800392c:	d402      	bmi.n	8003934 <_printf_i+0x188>
 800392e:	065f      	lsls	r7, r3, #25
 8003930:	bf48      	it	mi
 8003932:	b2ad      	uxthmi	r5, r5
 8003934:	6031      	str	r1, [r6, #0]
 8003936:	07d9      	lsls	r1, r3, #31
 8003938:	bf44      	itt	mi
 800393a:	f043 0320 	orrmi.w	r3, r3, #32
 800393e:	6023      	strmi	r3, [r4, #0]
 8003940:	b11d      	cbz	r5, 800394a <_printf_i+0x19e>
 8003942:	2310      	movs	r3, #16
 8003944:	e7ac      	b.n	80038a0 <_printf_i+0xf4>
 8003946:	4827      	ldr	r0, [pc, #156]	@ (80039e4 <_printf_i+0x238>)
 8003948:	e7e9      	b.n	800391e <_printf_i+0x172>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	f023 0320 	bic.w	r3, r3, #32
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	e7f6      	b.n	8003942 <_printf_i+0x196>
 8003954:	4616      	mov	r6, r2
 8003956:	e7bd      	b.n	80038d4 <_printf_i+0x128>
 8003958:	6833      	ldr	r3, [r6, #0]
 800395a:	6825      	ldr	r5, [r4, #0]
 800395c:	6961      	ldr	r1, [r4, #20]
 800395e:	1d18      	adds	r0, r3, #4
 8003960:	6030      	str	r0, [r6, #0]
 8003962:	062e      	lsls	r6, r5, #24
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	d501      	bpl.n	800396c <_printf_i+0x1c0>
 8003968:	6019      	str	r1, [r3, #0]
 800396a:	e002      	b.n	8003972 <_printf_i+0x1c6>
 800396c:	0668      	lsls	r0, r5, #25
 800396e:	d5fb      	bpl.n	8003968 <_printf_i+0x1bc>
 8003970:	8019      	strh	r1, [r3, #0]
 8003972:	2300      	movs	r3, #0
 8003974:	6123      	str	r3, [r4, #16]
 8003976:	4616      	mov	r6, r2
 8003978:	e7bc      	b.n	80038f4 <_printf_i+0x148>
 800397a:	6833      	ldr	r3, [r6, #0]
 800397c:	1d1a      	adds	r2, r3, #4
 800397e:	6032      	str	r2, [r6, #0]
 8003980:	681e      	ldr	r6, [r3, #0]
 8003982:	6862      	ldr	r2, [r4, #4]
 8003984:	2100      	movs	r1, #0
 8003986:	4630      	mov	r0, r6
 8003988:	f7fc fc32 	bl	80001f0 <memchr>
 800398c:	b108      	cbz	r0, 8003992 <_printf_i+0x1e6>
 800398e:	1b80      	subs	r0, r0, r6
 8003990:	6060      	str	r0, [r4, #4]
 8003992:	6863      	ldr	r3, [r4, #4]
 8003994:	6123      	str	r3, [r4, #16]
 8003996:	2300      	movs	r3, #0
 8003998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800399c:	e7aa      	b.n	80038f4 <_printf_i+0x148>
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	4632      	mov	r2, r6
 80039a2:	4649      	mov	r1, r9
 80039a4:	4640      	mov	r0, r8
 80039a6:	47d0      	blx	sl
 80039a8:	3001      	adds	r0, #1
 80039aa:	d0ad      	beq.n	8003908 <_printf_i+0x15c>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	079b      	lsls	r3, r3, #30
 80039b0:	d413      	bmi.n	80039da <_printf_i+0x22e>
 80039b2:	68e0      	ldr	r0, [r4, #12]
 80039b4:	9b03      	ldr	r3, [sp, #12]
 80039b6:	4298      	cmp	r0, r3
 80039b8:	bfb8      	it	lt
 80039ba:	4618      	movlt	r0, r3
 80039bc:	e7a6      	b.n	800390c <_printf_i+0x160>
 80039be:	2301      	movs	r3, #1
 80039c0:	4632      	mov	r2, r6
 80039c2:	4649      	mov	r1, r9
 80039c4:	4640      	mov	r0, r8
 80039c6:	47d0      	blx	sl
 80039c8:	3001      	adds	r0, #1
 80039ca:	d09d      	beq.n	8003908 <_printf_i+0x15c>
 80039cc:	3501      	adds	r5, #1
 80039ce:	68e3      	ldr	r3, [r4, #12]
 80039d0:	9903      	ldr	r1, [sp, #12]
 80039d2:	1a5b      	subs	r3, r3, r1
 80039d4:	42ab      	cmp	r3, r5
 80039d6:	dcf2      	bgt.n	80039be <_printf_i+0x212>
 80039d8:	e7eb      	b.n	80039b2 <_printf_i+0x206>
 80039da:	2500      	movs	r5, #0
 80039dc:	f104 0619 	add.w	r6, r4, #25
 80039e0:	e7f5      	b.n	80039ce <_printf_i+0x222>
 80039e2:	bf00      	nop
 80039e4:	08003bd5 	.word	0x08003bd5
 80039e8:	08003be6 	.word	0x08003be6

080039ec <__malloc_lock>:
 80039ec:	4801      	ldr	r0, [pc, #4]	@ (80039f4 <__malloc_lock+0x8>)
 80039ee:	f7ff bc73 	b.w	80032d8 <__retarget_lock_acquire_recursive>
 80039f2:	bf00      	nop
 80039f4:	2000024c 	.word	0x2000024c

080039f8 <__malloc_unlock>:
 80039f8:	4801      	ldr	r0, [pc, #4]	@ (8003a00 <__malloc_unlock+0x8>)
 80039fa:	f7ff bc6e 	b.w	80032da <__retarget_lock_release_recursive>
 80039fe:	bf00      	nop
 8003a00:	2000024c 	.word	0x2000024c

08003a04 <_realloc_r>:
 8003a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a08:	4680      	mov	r8, r0
 8003a0a:	4615      	mov	r5, r2
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	b921      	cbnz	r1, 8003a1a <_realloc_r+0x16>
 8003a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a14:	4611      	mov	r1, r2
 8003a16:	f7ff bddb 	b.w	80035d0 <_malloc_r>
 8003a1a:	b92a      	cbnz	r2, 8003a28 <_realloc_r+0x24>
 8003a1c:	f000 f858 	bl	8003ad0 <_free_r>
 8003a20:	2400      	movs	r4, #0
 8003a22:	4620      	mov	r0, r4
 8003a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a28:	f000 f89c 	bl	8003b64 <_malloc_usable_size_r>
 8003a2c:	4285      	cmp	r5, r0
 8003a2e:	4606      	mov	r6, r0
 8003a30:	d802      	bhi.n	8003a38 <_realloc_r+0x34>
 8003a32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a36:	d8f4      	bhi.n	8003a22 <_realloc_r+0x1e>
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	f7ff fdc8 	bl	80035d0 <_malloc_r>
 8003a40:	4607      	mov	r7, r0
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d0ec      	beq.n	8003a20 <_realloc_r+0x1c>
 8003a46:	42b5      	cmp	r5, r6
 8003a48:	462a      	mov	r2, r5
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	bf28      	it	cs
 8003a4e:	4632      	movcs	r2, r6
 8003a50:	f000 f830 	bl	8003ab4 <memcpy>
 8003a54:	4621      	mov	r1, r4
 8003a56:	4640      	mov	r0, r8
 8003a58:	f000 f83a 	bl	8003ad0 <_free_r>
 8003a5c:	463c      	mov	r4, r7
 8003a5e:	e7e0      	b.n	8003a22 <_realloc_r+0x1e>

08003a60 <memmove>:
 8003a60:	4288      	cmp	r0, r1
 8003a62:	b510      	push	{r4, lr}
 8003a64:	eb01 0402 	add.w	r4, r1, r2
 8003a68:	d902      	bls.n	8003a70 <memmove+0x10>
 8003a6a:	4284      	cmp	r4, r0
 8003a6c:	4623      	mov	r3, r4
 8003a6e:	d807      	bhi.n	8003a80 <memmove+0x20>
 8003a70:	1e43      	subs	r3, r0, #1
 8003a72:	42a1      	cmp	r1, r4
 8003a74:	d008      	beq.n	8003a88 <memmove+0x28>
 8003a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a7e:	e7f8      	b.n	8003a72 <memmove+0x12>
 8003a80:	4402      	add	r2, r0
 8003a82:	4601      	mov	r1, r0
 8003a84:	428a      	cmp	r2, r1
 8003a86:	d100      	bne.n	8003a8a <memmove+0x2a>
 8003a88:	bd10      	pop	{r4, pc}
 8003a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a92:	e7f7      	b.n	8003a84 <memmove+0x24>

08003a94 <_sbrk_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4d06      	ldr	r5, [pc, #24]	@ (8003ab0 <_sbrk_r+0x1c>)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	4608      	mov	r0, r1
 8003a9e:	602b      	str	r3, [r5, #0]
 8003aa0:	f7fc fec2 	bl	8000828 <_sbrk>
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	d102      	bne.n	8003aae <_sbrk_r+0x1a>
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	b103      	cbz	r3, 8003aae <_sbrk_r+0x1a>
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	bd38      	pop	{r3, r4, r5, pc}
 8003ab0:	20000258 	.word	0x20000258

08003ab4 <memcpy>:
 8003ab4:	440a      	add	r2, r1
 8003ab6:	4291      	cmp	r1, r2
 8003ab8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003abc:	d100      	bne.n	8003ac0 <memcpy+0xc>
 8003abe:	4770      	bx	lr
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aca:	4291      	cmp	r1, r2
 8003acc:	d1f9      	bne.n	8003ac2 <memcpy+0xe>
 8003ace:	bd10      	pop	{r4, pc}

08003ad0 <_free_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	d041      	beq.n	8003b5c <_free_r+0x8c>
 8003ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003adc:	1f0c      	subs	r4, r1, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfb8      	it	lt
 8003ae2:	18e4      	addlt	r4, r4, r3
 8003ae4:	f7ff ff82 	bl	80039ec <__malloc_lock>
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <_free_r+0x90>)
 8003aea:	6813      	ldr	r3, [r2, #0]
 8003aec:	b933      	cbnz	r3, 8003afc <_free_r+0x2c>
 8003aee:	6063      	str	r3, [r4, #4]
 8003af0:	6014      	str	r4, [r2, #0]
 8003af2:	4628      	mov	r0, r5
 8003af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003af8:	f7ff bf7e 	b.w	80039f8 <__malloc_unlock>
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	d908      	bls.n	8003b12 <_free_r+0x42>
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	1821      	adds	r1, r4, r0
 8003b04:	428b      	cmp	r3, r1
 8003b06:	bf01      	itttt	eq
 8003b08:	6819      	ldreq	r1, [r3, #0]
 8003b0a:	685b      	ldreq	r3, [r3, #4]
 8003b0c:	1809      	addeq	r1, r1, r0
 8003b0e:	6021      	streq	r1, [r4, #0]
 8003b10:	e7ed      	b.n	8003aee <_free_r+0x1e>
 8003b12:	461a      	mov	r2, r3
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	b10b      	cbz	r3, 8003b1c <_free_r+0x4c>
 8003b18:	42a3      	cmp	r3, r4
 8003b1a:	d9fa      	bls.n	8003b12 <_free_r+0x42>
 8003b1c:	6811      	ldr	r1, [r2, #0]
 8003b1e:	1850      	adds	r0, r2, r1
 8003b20:	42a0      	cmp	r0, r4
 8003b22:	d10b      	bne.n	8003b3c <_free_r+0x6c>
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	4401      	add	r1, r0
 8003b28:	1850      	adds	r0, r2, r1
 8003b2a:	4283      	cmp	r3, r0
 8003b2c:	6011      	str	r1, [r2, #0]
 8003b2e:	d1e0      	bne.n	8003af2 <_free_r+0x22>
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	6053      	str	r3, [r2, #4]
 8003b36:	4408      	add	r0, r1
 8003b38:	6010      	str	r0, [r2, #0]
 8003b3a:	e7da      	b.n	8003af2 <_free_r+0x22>
 8003b3c:	d902      	bls.n	8003b44 <_free_r+0x74>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	602b      	str	r3, [r5, #0]
 8003b42:	e7d6      	b.n	8003af2 <_free_r+0x22>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	1821      	adds	r1, r4, r0
 8003b48:	428b      	cmp	r3, r1
 8003b4a:	bf04      	itt	eq
 8003b4c:	6819      	ldreq	r1, [r3, #0]
 8003b4e:	685b      	ldreq	r3, [r3, #4]
 8003b50:	6063      	str	r3, [r4, #4]
 8003b52:	bf04      	itt	eq
 8003b54:	1809      	addeq	r1, r1, r0
 8003b56:	6021      	streq	r1, [r4, #0]
 8003b58:	6054      	str	r4, [r2, #4]
 8003b5a:	e7ca      	b.n	8003af2 <_free_r+0x22>
 8003b5c:	bd38      	pop	{r3, r4, r5, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000254 	.word	0x20000254

08003b64 <_malloc_usable_size_r>:
 8003b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b68:	1f18      	subs	r0, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bfbc      	itt	lt
 8003b6e:	580b      	ldrlt	r3, [r1, r0]
 8003b70:	18c0      	addlt	r0, r0, r3
 8003b72:	4770      	bx	lr

08003b74 <_init>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr

08003b80 <_fini>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr
